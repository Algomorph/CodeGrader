(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

class Position {
  constructor(line, col, index) {
    this.line = void 0;
    this.column = void 0;
    this.index = void 0;
    this.line = line;
    this.column = col;
    this.index = index;
  }

}
class SourceLocation {
  constructor(start, end) {
    this.start = void 0;
    this.end = void 0;
    this.filename = void 0;
    this.identifierName = void 0;
    this.start = start;
    this.end = end;
  }

}
function createPositionWithColumnOffset(position, columnOffset) {
  const {
    line,
    column,
    index
  } = position;
  return new Position(line, column + columnOffset, index + columnOffset);
}

const ParseErrorCodes = Object.freeze({
  SyntaxError: "BABEL_PARSER_SYNTAX_ERROR",
  SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
});

const reflect = (keys, last = keys.length - 1) => ({
  get() {
    return keys.reduce((object, key) => object[key], this);
  },

  set(value) {
    keys.reduce((item, key, i) => i === last ? item[key] = value : item[key], this);
  }

});

const instantiate = (constructor, properties, descriptors) => Object.keys(descriptors).map(key => [key, descriptors[key]]).filter(([, descriptor]) => !!descriptor).map(([key, descriptor]) => [key, typeof descriptor === "function" ? {
  value: descriptor,
  enumerable: false
} : typeof descriptor.reflect === "string" ? Object.assign({}, descriptor, reflect(descriptor.reflect.split("."))) : descriptor]).reduce((instance, [key, descriptor]) => Object.defineProperty(instance, key, Object.assign({
  configurable: true
}, descriptor)), Object.assign(new constructor(), properties));

var ModuleErrors = (_ => ({
  ImportMetaOutsideModule: _(`import.meta may appear only with 'sourceType: "module"'`, {
    code: ParseErrorCodes.SourceTypeModuleError
  }),
  ImportOutsideModule: _(`'import' and 'export' may appear only with 'sourceType: "module"'`, {
    code: ParseErrorCodes.SourceTypeModuleError
  })
}));

const NodeDescriptions = {
  ArrayPattern: "array destructuring pattern",
  AssignmentExpression: "assignment expression",
  AssignmentPattern: "assignment expression",
  ArrowFunctionExpression: "arrow function expression",
  ConditionalExpression: "conditional expression",
  ForOfStatement: "for-of statement",
  ForInStatement: "for-in statement",
  ForStatement: "for-loop",
  FormalParameters: "function parameter list",
  Identifier: "identifier",
  ObjectPattern: "object destructuring pattern",
  ParenthesizedExpression: "parenthesized expression",
  RestElement: "rest element",
  UpdateExpression: {
    true: "prefix operation",
    false: "postfix operation"
  },
  VariableDeclarator: "variable declaration",
  YieldExpression: "yield expression"
};

const toNodeDescription = ({
  type,
  prefix
}) => type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];

var StandardErrors = (_ => ({
  AccessorIsGenerator: _(({
    kind
  }) => `A ${kind}ter cannot be a generator.`),
  ArgumentsInClass: _("'arguments' is only allowed in functions and class methods."),
  AsyncFunctionInSingleStatementContext: _("Async functions can only be declared at the top level or inside a block."),
  AwaitBindingIdentifier: _("Can not use 'await' as identifier inside an async function."),
  AwaitBindingIdentifierInStaticBlock: _("Can not use 'await' as identifier inside a static block."),
  AwaitExpressionFormalParameter: _("'await' is not allowed in async function parameters."),
  AwaitNotInAsyncContext: _("'await' is only allowed within async functions and at the top levels of modules."),
  AwaitNotInAsyncFunction: _("'await' is only allowed within async functions."),
  BadGetterArity: _("A 'get' accesor must not have any formal parameters."),
  BadSetterArity: _("A 'set' accesor must have exactly one formal parameter."),
  BadSetterRestParameter: _("A 'set' accesor function argument must not be a rest parameter."),
  ConstructorClassField: _("Classes may not have a field named 'constructor'."),
  ConstructorClassPrivateField: _("Classes may not have a private field named '#constructor'."),
  ConstructorIsAccessor: _("Class constructor may not be an accessor."),
  ConstructorIsAsync: _("Constructor can't be an async function."),
  ConstructorIsGenerator: _("Constructor can't be a generator."),
  DeclarationMissingInitializer: _(({
    kind
  }) => `Missing initializer in ${kind} declaration.`),
  DecoratorBeforeExport: _("Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax."),
  DecoratorConstructor: _("Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?"),
  DecoratorExportClass: _("Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead."),
  DecoratorSemicolon: _("Decorators must not be followed by a semicolon."),
  DecoratorStaticBlock: _("Decorators can't be used with a static block."),
  DeletePrivateField: _("Deleting a private field is not allowed."),
  DestructureNamedImport: _("ES2015 named imports do not destructure. Use another statement for destructuring after the import."),
  DuplicateConstructor: _("Duplicate constructor in the same class."),
  DuplicateDefaultExport: _("Only one default export allowed per module."),
  DuplicateExport: _(({
    exportName
  }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`),
  DuplicateProto: _("Redefinition of __proto__ property."),
  DuplicateRegExpFlags: _("Duplicate regular expression flag."),
  ElementAfterRest: _("Rest element must be last element."),
  EscapedCharNotAnIdentifier: _("Invalid Unicode escape."),
  ExportBindingIsString: _(({
    localName,
    exportName
  }) => `A string literal cannot be used as an exported binding without \`from\`.\n- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`),
  ExportDefaultFromAsIdentifier: _("'from' is not allowed as an identifier after 'export default'."),
  ForInOfLoopInitializer: _(({
    type
  }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`),
  ForOfAsync: _("The left-hand side of a for-of loop may not be 'async'."),
  ForOfLet: _("The left-hand side of a for-of loop may not start with 'let'."),
  GeneratorInSingleStatementContext: _("Generators can only be declared at the top level or inside a block."),
  IllegalBreakContinue: _(({
    type
  }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`),
  IllegalLanguageModeDirective: _("Illegal 'use strict' directive in function with non-simple parameter list."),
  IllegalReturn: _("'return' outside of function."),
  ImportBindingIsString: _(({
    importName
  }) => `A string literal cannot be used as an imported binding.\n- Did you mean \`import { "${importName}" as foo }\`?`),
  ImportCallArgumentTrailingComma: _("Trailing comma is disallowed inside import(...) arguments."),
  ImportCallArity: _(({
    maxArgumentCount
  }) => `\`import()\` requires exactly ${maxArgumentCount === 1 ? "one argument" : "one or two arguments"}.`),
  ImportCallNotNewExpression: _("Cannot use new with import(...)."),
  ImportCallSpreadArgument: _("`...` is not allowed in `import()`."),
  IncompatibleRegExpUVFlags: _("The 'u' and 'v' regular expression flags cannot be enabled at the same time."),
  InvalidBigIntLiteral: _("Invalid BigIntLiteral."),
  InvalidCodePoint: _("Code point out of bounds."),
  InvalidCoverInitializedName: _("Invalid shorthand property initializer."),
  InvalidDecimal: _("Invalid decimal."),
  InvalidDigit: _(({
    radix
  }) => `Expected number in radix ${radix}.`),
  InvalidEscapeSequence: _("Bad character escape sequence."),
  InvalidEscapeSequenceTemplate: _("Invalid escape sequence in template."),
  InvalidEscapedReservedWord: _(({
    reservedWord
  }) => `Escape sequence in keyword ${reservedWord}.`),
  InvalidIdentifier: _(({
    identifierName
  }) => `Invalid identifier ${identifierName}.`),
  InvalidLhs: _(({
    ancestor
  }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`),
  InvalidLhsBinding: _(({
    ancestor
  }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`),
  InvalidNumber: _("Invalid number."),
  InvalidOrMissingExponent: _("Floating-point numbers require a valid exponent after the 'e'."),
  InvalidOrUnexpectedToken: _(({
    unexpected
  }) => `Unexpected character '${unexpected}'.`),
  InvalidParenthesizedAssignment: _("Invalid parenthesized assignment pattern."),
  InvalidPrivateFieldResolution: _(({
    identifierName
  }) => `Private name #${identifierName} is not defined.`),
  InvalidPropertyBindingPattern: _("Binding member expression."),
  InvalidRecordProperty: _("Only properties and spread elements are allowed in record definitions."),
  InvalidRestAssignmentPattern: _("Invalid rest operator's argument."),
  LabelRedeclaration: _(({
    labelName
  }) => `Label '${labelName}' is already declared.`),
  LetInLexicalBinding: _("'let' is not allowed to be used as a name in 'let' or 'const' declarations."),
  LineTerminatorBeforeArrow: _("No line break is allowed before '=>'."),
  MalformedRegExpFlags: _("Invalid regular expression flag."),
  MissingClassName: _("A class name is required."),
  MissingEqInAssignment: _("Only '=' operator can be used for specifying default value."),
  MissingSemicolon: _("Missing semicolon."),
  MissingPlugin: _(({
    missingPlugin
  }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`),
  MissingOneOfPlugins: _(({
    missingPlugin
  }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`),
  MissingUnicodeEscape: _("Expecting Unicode escape sequence \\uXXXX."),
  MixingCoalesceWithLogical: _("Nullish coalescing operator(??) requires parens when mixing with logical operators."),
  ModuleAttributeDifferentFromType: _("The only accepted module attribute is `type`."),
  ModuleAttributeInvalidValue: _("Only string literals are allowed as module attribute values."),
  ModuleAttributesWithDuplicateKeys: _(({
    key
  }) => `Duplicate key "${key}" is not allowed in module attributes.`),
  ModuleExportNameHasLoneSurrogate: _(({
    surrogateCharCode
  }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`),
  ModuleExportUndefined: _(({
    localName
  }) => `Export '${localName}' is not defined.`),
  MultipleDefaultsInSwitch: _("Multiple default clauses."),
  NewlineAfterThrow: _("Illegal newline after throw."),
  NoCatchOrFinally: _("Missing catch or finally clause."),
  NumberIdentifier: _("Identifier directly after number."),
  NumericSeparatorInEscapeSequence: _("Numeric separators are not allowed inside unicode escape sequences or hex escape sequences."),
  ObsoleteAwaitStar: _("'await*' has been removed from the async functions proposal. Use Promise.all() instead."),
  OptionalChainingNoNew: _("Constructors in/after an Optional Chain are not allowed."),
  OptionalChainingNoTemplate: _("Tagged Template Literals are not allowed in optionalChain."),
  OverrideOnConstructor: _("'override' modifier cannot appear on a constructor declaration."),
  ParamDupe: _("Argument name clash."),
  PatternHasAccessor: _("Object pattern can't contain getter or setter."),
  PatternHasMethod: _("Object pattern can't contain methods."),
  PrivateInExpectedIn: _(({
    identifierName
  }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`),
  PrivateNameRedeclaration: _(({
    identifierName
  }) => `Duplicate private name #${identifierName}.`),
  RecordExpressionBarIncorrectEndSyntaxType: _("Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."),
  RecordExpressionBarIncorrectStartSyntaxType: _("Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."),
  RecordExpressionHashIncorrectStartSyntaxType: _("Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'."),
  RecordNoProto: _("'__proto__' is not allowed in Record expressions."),
  RestTrailingComma: _("Unexpected trailing comma after rest element."),
  SloppyFunction: _("In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement."),
  StaticPrototype: _("Classes may not have static property named prototype."),
  SuperNotAllowed: _("`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?"),
  SuperPrivateField: _("Private fields can't be accessed on super."),
  TrailingDecorator: _("Decorators must be attached to a class element."),
  TupleExpressionBarIncorrectEndSyntaxType: _("Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."),
  TupleExpressionBarIncorrectStartSyntaxType: _("Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'."),
  TupleExpressionHashIncorrectStartSyntaxType: _("Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'."),
  UnexpectedArgumentPlaceholder: _("Unexpected argument placeholder."),
  UnexpectedAwaitAfterPipelineBody: _('Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.'),
  UnexpectedDigitAfterHash: _("Unexpected digit after hash token."),
  UnexpectedImportExport: _("'import' and 'export' may only appear at the top level."),
  UnexpectedKeyword: _(({
    keyword
  }) => `Unexpected keyword '${keyword}'.`),
  UnexpectedLeadingDecorator: _("Leading decorators must be attached to a class declaration."),
  UnexpectedLexicalDeclaration: _("Lexical declaration cannot appear in a single-statement context."),
  UnexpectedNewTarget: _("`new.target` can only be used in functions or class properties."),
  UnexpectedNumericSeparator: _("A numeric separator is only allowed between two digits."),
  UnexpectedPrivateField: _("Unexpected private name."),
  UnexpectedReservedWord: _(({
    reservedWord
  }) => `Unexpected reserved word '${reservedWord}'.`),
  UnexpectedSuper: _("'super' is only allowed in object methods and classes."),
  UnexpectedToken: _(({
    expected,
    unexpected
  }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`),
  UnexpectedTokenUnaryExponentiation: _("Illegal expression. Wrap left hand side or entire exponentiation in parentheses."),
  UnsupportedBind: _("Binding should be performed on object property."),
  UnsupportedDecoratorExport: _("A decorated export must export a class declaration."),
  UnsupportedDefaultExport: _("Only expressions, functions or classes are allowed as the `default` export."),
  UnsupportedImport: _("`import` can only be used in `import()` or `import.meta`."),
  UnsupportedMetaProperty: _(({
    target,
    onlyValidPropertyName
  }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`),
  UnsupportedParameterDecorator: _("Decorators cannot be used to decorate parameters."),
  UnsupportedPropertyDecorator: _("Decorators cannot be used to decorate object literal properties."),
  UnsupportedSuper: _("'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])."),
  UnterminatedComment: _("Unterminated comment."),
  UnterminatedRegExp: _("Unterminated regular expression."),
  UnterminatedString: _("Unterminated string constant."),
  UnterminatedTemplate: _("Unterminated template."),
  VarRedeclaration: _(({
    identifierName
  }) => `Identifier '${identifierName}' has already been declared.`),
  YieldBindingIdentifier: _("Can not use 'yield' as identifier inside a generator."),
  YieldInParameter: _("Yield expression is not allowed in formal parameters."),
  ZeroDigitNumericSeparator: _("Numeric separator can not be used after leading 0.")
}));

var StrictModeErrors = (_ => ({
  StrictDelete: _("Deleting local variable in strict mode."),
  StrictEvalArguments: _(({
    referenceName
  }) => `Assigning to '${referenceName}' in strict mode.`),
  StrictEvalArgumentsBinding: _(({
    bindingName
  }) => `Binding '${bindingName}' in strict mode.`),
  StrictFunction: _("In strict mode code, functions can only be declared at top level or inside a block."),
  StrictNumericEscape: _("The only valid numeric escape in strict mode is '\\0'."),
  StrictOctalLiteral: _("Legacy octal literals are not allowed in strict mode."),
  StrictWith: _("'with' in strict mode.")
}));

const UnparenthesizedPipeBodyDescriptions = new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
var PipelineOperatorErrors = (_ => ({
  PipeBodyIsTighter: _("Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence."),
  PipeTopicRequiresHackPipes: _('Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'),
  PipeTopicUnbound: _("Topic reference is unbound; it must be inside a pipe body."),
  PipeTopicUnconfiguredToken: _(({
    token
  }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`),
  PipeTopicUnused: _("Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once."),
  PipeUnparenthesizedBody: _(({
    type
  }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({
    type
  })}; please wrap it in parentheses.`),
  PipelineBodyNoArrow: _('Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.'),
  PipelineBodySequenceExpression: _("Pipeline body may not be a comma-separated sequence expression."),
  PipelineHeadSequenceExpression: _("Pipeline head should not be a comma-separated sequence expression."),
  PipelineTopicUnused: _("Pipeline is in topic style but does not use topic reference."),
  PrimaryTopicNotAllowed: _("Topic reference was used in a lexical context without topic binding."),
  PrimaryTopicRequiresSmartPipeline: _('Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.')
}));

const _excluded$1 = ["toMessage"];

function toParseErrorConstructor(_ref) {
  let {
    toMessage
  } = _ref,
      properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);

  return function constructor({
    loc,
    details
  }) {
    return instantiate(SyntaxError, Object.assign({}, properties, {
      loc
    }), {
      clone(overrides = {}) {
        const loc = overrides.loc || {};
        return constructor({
          loc: new Position("line" in loc ? loc.line : this.loc.line, "column" in loc ? loc.column : this.loc.column, "index" in loc ? loc.index : this.loc.index),
          details: Object.assign({}, this.details, overrides.details)
        });
      },

      details: {
        value: details,
        enumerable: false
      },
      message: {
        get() {
          return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;
        },

        set(value) {
          Object.defineProperty(this, "message", {
            value
          });
        }

      },
      pos: {
        reflect: "loc.index",
        enumerable: true
      },
      missingPlugin: "missingPlugin" in details && {
        reflect: "details.missingPlugin",
        enumerable: true
      }
    });
  };
}

function toParseErrorCredentials(toMessageOrMessage, credentials) {
  return Object.assign({
    toMessage: typeof toMessageOrMessage === "string" ? () => toMessageOrMessage : toMessageOrMessage
  }, credentials);
}
function ParseErrorEnum(argument, syntaxPlugin) {
  if (Array.isArray(argument)) {
    return toParseErrorCredentialsMap => ParseErrorEnum(toParseErrorCredentialsMap, argument[0]);
  }

  const partialCredentials = argument(toParseErrorCredentials);
  const ParseErrorConstructors = {};

  for (const reasonCode of Object.keys(partialCredentials)) {
    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
      code: ParseErrorCodes.SyntaxError,
      reasonCode
    }, syntaxPlugin ? {
      syntaxPlugin
    } : {}, partialCredentials[reasonCode]));
  }

  return ParseErrorConstructors;
}
const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));

const {
  defineProperty
} = Object;

const toUnenumerable = (object, key) => defineProperty(object, key, {
  enumerable: false,
  value: object[key]
});

function toESTreeLocation(node) {
  node.loc.start && toUnenumerable(node.loc.start, "index");
  node.loc.end && toUnenumerable(node.loc.end, "index");
  return node;
}

var estree = (superClass => class extends superClass {
  parse() {
    const file = toESTreeLocation(super.parse());

    if (this.options.tokens) {
      file.tokens = file.tokens.map(toESTreeLocation);
    }

    return file;
  }

  parseRegExpLiteral({
    pattern,
    flags
  }) {
    let regex = null;

    try {
      regex = new RegExp(pattern, flags);
    } catch (e) {}

    const node = this.estreeParseLiteral(regex);
    node.regex = {
      pattern,
      flags
    };
    return node;
  }

  parseBigIntLiteral(value) {
    let bigInt;

    try {
      bigInt = BigInt(value);
    } catch (_unused) {
      bigInt = null;
    }

    const node = this.estreeParseLiteral(bigInt);
    node.bigint = String(node.value || value);
    return node;
  }

  parseDecimalLiteral(value) {
    const decimal = null;
    const node = this.estreeParseLiteral(decimal);
    node.decimal = String(node.value || value);
    return node;
  }

  estreeParseLiteral(value) {
    return this.parseLiteral(value, "Literal");
  }

  parseStringLiteral(value) {
    return this.estreeParseLiteral(value);
  }

  parseNumericLiteral(value) {
    return this.estreeParseLiteral(value);
  }

  parseNullLiteral() {
    return this.estreeParseLiteral(null);
  }

  parseBooleanLiteral(value) {
    return this.estreeParseLiteral(value);
  }

  directiveToStmt(directive) {
    const directiveLiteral = directive.value;
    const stmt = this.startNodeAt(directive.start, directive.loc.start);
    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);
    expression.value = directiveLiteral.extra.expressionValue;
    expression.raw = directiveLiteral.extra.raw;
    stmt.expression = this.finishNodeAt(expression, "Literal", directiveLiteral.loc.end);
    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);
    return this.finishNodeAt(stmt, "ExpressionStatement", directive.loc.end);
  }

  initFunction(node, isAsync) {
    super.initFunction(node, isAsync);
    node.expression = false;
  }

  checkDeclaration(node) {
    if (node != null && this.isObjectProperty(node)) {
      this.checkDeclaration(node.value);
    } else {
      super.checkDeclaration(node);
    }
  }

  getObjectOrClassMethodParams(method) {
    return method.value.params;
  }

  isValidDirective(stmt) {
    var _stmt$expression$extr;

    return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
  }

  parseBlockBody(node, ...args) {
    super.parseBlockBody(node, ...args);
    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));
    node.body = directiveStatements.concat(node.body);
    delete node.directives;
  }

  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);

    if (method.typeParameters) {
      method.value.typeParameters = method.typeParameters;
      delete method.typeParameters;
    }

    classBody.body.push(method);
  }

  parsePrivateName() {
    const node = super.parsePrivateName();
    {
      if (!this.getPluginOption("estree", "classFeatures")) {
        return node;
      }
    }
    return this.convertPrivateNameToPrivateIdentifier(node);
  }

  convertPrivateNameToPrivateIdentifier(node) {
    const name = super.getPrivateNameSV(node);
    node = node;
    delete node.id;
    node.name = name;
    node.type = "PrivateIdentifier";
    return node;
  }

  isPrivateName(node) {
    {
      if (!this.getPluginOption("estree", "classFeatures")) {
        return super.isPrivateName(node);
      }
    }
    return node.type === "PrivateIdentifier";
  }

  getPrivateNameSV(node) {
    {
      if (!this.getPluginOption("estree", "classFeatures")) {
        return super.getPrivateNameSV(node);
      }
    }
    return node.name;
  }

  parseLiteral(value, type) {
    const node = super.parseLiteral(value, type);
    node.raw = node.extra.raw;
    delete node.extra;
    return node;
  }

  parseFunctionBody(node, allowExpression, isMethod = false) {
    super.parseFunctionBody(node, allowExpression, isMethod);
    node.expression = node.body.type !== "BlockStatement";
  }

  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
    let funcNode = this.startNode();
    funcNode.kind = node.kind;
    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
    funcNode.type = "FunctionExpression";
    delete funcNode.kind;
    node.value = funcNode;

    if (type === "ClassPrivateMethod") {
      node.computed = false;
    }

    type = "MethodDefinition";
    return this.finishNode(node, type);
  }

  parseClassProperty(...args) {
    const propertyNode = super.parseClassProperty(...args);
    {
      if (!this.getPluginOption("estree", "classFeatures")) {
        return propertyNode;
      }
    }
    propertyNode.type = "PropertyDefinition";
    return propertyNode;
  }

  parseClassPrivateProperty(...args) {
    const propertyNode = super.parseClassPrivateProperty(...args);
    {
      if (!this.getPluginOption("estree", "classFeatures")) {
        return propertyNode;
      }
    }
    propertyNode.type = "PropertyDefinition";
    propertyNode.computed = false;
    return propertyNode;
  }

  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);

    if (node) {
      node.type = "Property";
      if (node.kind === "method") node.kind = "init";
      node.shorthand = false;
    }

    return node;
  }

  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);

    if (node) {
      node.kind = "init";
      node.type = "Property";
    }

    return node;
  }

  isValidLVal(type, ...rest) {
    return type === "Property" ? "value" : super.isValidLVal(type, ...rest);
  }

  isAssignable(node, isBinding) {
    if (node != null && this.isObjectProperty(node)) {
      return this.isAssignable(node.value, isBinding);
    }

    return super.isAssignable(node, isBinding);
  }

  toAssignable(node, isLHS = false) {
    if (node != null && this.isObjectProperty(node)) {
      const {
        key,
        value
      } = node;

      if (this.isPrivateName(key)) {
        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
      }

      this.toAssignable(value, isLHS);
    } else {
      super.toAssignable(node, isLHS);
    }
  }

  toAssignableObjectExpressionProp(prop) {
    if (prop.kind === "get" || prop.kind === "set") {
      this.raise(Errors.PatternHasAccessor, {
        at: prop.key
      });
    } else if (prop.method) {
      this.raise(Errors.PatternHasMethod, {
        at: prop.key
      });
    } else {
      super.toAssignableObjectExpressionProp(...arguments);
    }
  }

  finishCallExpression(node, optional) {
    super.finishCallExpression(node, optional);

    if (node.callee.type === "Import") {
      node.type = "ImportExpression";
      node.source = node.arguments[0];

      if (this.hasPlugin("importAssertions")) {
        var _node$arguments$;

        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;
      }

      delete node.arguments;
      delete node.callee;
    }

    return node;
  }

  toReferencedArguments(node) {
    if (node.type === "ImportExpression") {
      return;
    }

    super.toReferencedArguments(node);
  }

  parseExport(node) {
    super.parseExport(node);

    switch (node.type) {
      case "ExportAllDeclaration":
        node.exported = null;
        break;

      case "ExportNamedDeclaration":
        if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
          node.type = "ExportAllDeclaration";
          node.exported = node.specifiers[0].exported;
          delete node.specifiers;
        }

        break;
    }

    return node;
  }

  parseSubscript(base, startPos, startLoc, noCalls, state) {
    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);

    if (state.optionalChainMember) {
      if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") {
        node.type = node.type.substring(8);
      }

      if (state.stop) {
        const chain = this.startNodeAtNode(node);
        chain.expression = node;
        return this.finishNode(chain, "ChainExpression");
      }
    } else if (node.type === "MemberExpression" || node.type === "CallExpression") {
      node.optional = false;
    }

    return node;
  }

  hasPropertyAsPrivateName(node) {
    if (node.type === "ChainExpression") {
      node = node.expression;
    }

    return super.hasPropertyAsPrivateName(node);
  }

  isOptionalChain(node) {
    return node.type === "ChainExpression";
  }

  isObjectProperty(node) {
    return node.type === "Property" && node.kind === "init" && !node.method;
  }

  isObjectMethod(node) {
    return node.method || node.kind === "get" || node.kind === "set";
  }

  finishNodeAt(node, type, endLoc) {
    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
  }

  resetStartLocation(node, start, startLoc) {
    super.resetStartLocation(node, start, startLoc);
    toESTreeLocation(node);
  }

  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
    super.resetEndLocation(node, endLoc);
    toESTreeLocation(node);
  }

});

class TokContext {
  constructor(token, preserveSpace) {
    this.token = void 0;
    this.preserveSpace = void 0;
    this.token = token;
    this.preserveSpace = !!preserveSpace;
  }

}
const types = {
  brace: new TokContext("{"),
  j_oTag: new TokContext("<tag"),
  j_cTag: new TokContext("</tag"),
  j_expr: new TokContext("<tag>...</tag>", true)
};
{
  types.template = new TokContext("`", true);
}

const beforeExpr = true;
const startsExpr = true;
const isLoop = true;
const isAssign = true;
const prefix = true;
const postfix = true;
class ExportedTokenType {
  constructor(label, conf = {}) {
    this.label = void 0;
    this.keyword = void 0;
    this.beforeExpr = void 0;
    this.startsExpr = void 0;
    this.rightAssociative = void 0;
    this.isLoop = void 0;
    this.isAssign = void 0;
    this.prefix = void 0;
    this.postfix = void 0;
    this.binop = void 0;
    this.label = label;
    this.keyword = conf.keyword;
    this.beforeExpr = !!conf.beforeExpr;
    this.startsExpr = !!conf.startsExpr;
    this.rightAssociative = !!conf.rightAssociative;
    this.isLoop = !!conf.isLoop;
    this.isAssign = !!conf.isAssign;
    this.prefix = !!conf.prefix;
    this.postfix = !!conf.postfix;
    this.binop = conf.binop != null ? conf.binop : null;
    {
      this.updateContext = null;
    }
  }

}
const keywords$1 = new Map();

function createKeyword(name, options = {}) {
  options.keyword = name;
  const token = createToken(name, options);
  keywords$1.set(name, token);
  return token;
}

function createBinop(name, binop) {
  return createToken(name, {
    beforeExpr,
    binop
  });
}

let tokenTypeCounter = -1;
const tokenTypes = [];
const tokenLabels = [];
const tokenBinops = [];
const tokenBeforeExprs = [];
const tokenStartsExprs = [];
const tokenPrefixes = [];

function createToken(name, options = {}) {
  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;

  ++tokenTypeCounter;
  tokenLabels.push(name);
  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
  tokenTypes.push(new ExportedTokenType(name, options));
  return tokenTypeCounter;
}

function createKeywordLike(name, options = {}) {
  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;

  ++tokenTypeCounter;
  keywords$1.set(name, tokenTypeCounter);
  tokenLabels.push(name);
  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
  tokenTypes.push(new ExportedTokenType("name", options));
  return tokenTypeCounter;
}

const tt = {
  bracketL: createToken("[", {
    beforeExpr,
    startsExpr
  }),
  bracketHashL: createToken("#[", {
    beforeExpr,
    startsExpr
  }),
  bracketBarL: createToken("[|", {
    beforeExpr,
    startsExpr
  }),
  bracketR: createToken("]"),
  bracketBarR: createToken("|]"),
  braceL: createToken("{", {
    beforeExpr,
    startsExpr
  }),
  braceBarL: createToken("{|", {
    beforeExpr,
    startsExpr
  }),
  braceHashL: createToken("#{", {
    beforeExpr,
    startsExpr
  }),
  braceR: createToken("}"),
  braceBarR: createToken("|}"),
  parenL: createToken("(", {
    beforeExpr,
    startsExpr
  }),
  parenR: createToken(")"),
  comma: createToken(",", {
    beforeExpr
  }),
  semi: createToken(";", {
    beforeExpr
  }),
  colon: createToken(":", {
    beforeExpr
  }),
  doubleColon: createToken("::", {
    beforeExpr
  }),
  dot: createToken("."),
  question: createToken("?", {
    beforeExpr
  }),
  questionDot: createToken("?."),
  arrow: createToken("=>", {
    beforeExpr
  }),
  template: createToken("template"),
  ellipsis: createToken("...", {
    beforeExpr
  }),
  backQuote: createToken("`", {
    startsExpr
  }),
  dollarBraceL: createToken("${", {
    beforeExpr,
    startsExpr
  }),
  templateTail: createToken("...`", {
    startsExpr
  }),
  templateNonTail: createToken("...${", {
    beforeExpr,
    startsExpr
  }),
  at: createToken("@"),
  hash: createToken("#", {
    startsExpr
  }),
  interpreterDirective: createToken("#!..."),
  eq: createToken("=", {
    beforeExpr,
    isAssign
  }),
  assign: createToken("_=", {
    beforeExpr,
    isAssign
  }),
  slashAssign: createToken("_=", {
    beforeExpr,
    isAssign
  }),
  xorAssign: createToken("_=", {
    beforeExpr,
    isAssign
  }),
  moduloAssign: createToken("_=", {
    beforeExpr,
    isAssign
  }),
  incDec: createToken("++/--", {
    prefix,
    postfix,
    startsExpr
  }),
  bang: createToken("!", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  tilde: createToken("~", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  doubleCaret: createToken("^^", {
    startsExpr
  }),
  doubleAt: createToken("@@", {
    startsExpr
  }),
  pipeline: createBinop("|>", 0),
  nullishCoalescing: createBinop("??", 1),
  logicalOR: createBinop("||", 1),
  logicalAND: createBinop("&&", 2),
  bitwiseOR: createBinop("|", 3),
  bitwiseXOR: createBinop("^", 4),
  bitwiseAND: createBinop("&", 5),
  equality: createBinop("==/!=/===/!==", 6),
  lt: createBinop("</>/<=/>=", 7),
  gt: createBinop("</>/<=/>=", 7),
  relational: createBinop("</>/<=/>=", 7),
  bitShift: createBinop("<</>>/>>>", 8),
  bitShiftL: createBinop("<</>>/>>>", 8),
  bitShiftR: createBinop("<</>>/>>>", 8),
  plusMin: createToken("+/-", {
    beforeExpr,
    binop: 9,
    prefix,
    startsExpr
  }),
  modulo: createToken("%", {
    binop: 10,
    startsExpr
  }),
  star: createToken("*", {
    binop: 10
  }),
  slash: createBinop("/", 10),
  exponent: createToken("**", {
    beforeExpr,
    binop: 11,
    rightAssociative: true
  }),
  _in: createKeyword("in", {
    beforeExpr,
    binop: 7
  }),
  _instanceof: createKeyword("instanceof", {
    beforeExpr,
    binop: 7
  }),
  _break: createKeyword("break"),
  _case: createKeyword("case", {
    beforeExpr
  }),
  _catch: createKeyword("catch"),
  _continue: createKeyword("continue"),
  _debugger: createKeyword("debugger"),
  _default: createKeyword("default", {
    beforeExpr
  }),
  _else: createKeyword("else", {
    beforeExpr
  }),
  _finally: createKeyword("finally"),
  _function: createKeyword("function", {
    startsExpr
  }),
  _if: createKeyword("if"),
  _return: createKeyword("return", {
    beforeExpr
  }),
  _switch: createKeyword("switch"),
  _throw: createKeyword("throw", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  _try: createKeyword("try"),
  _var: createKeyword("var"),
  _const: createKeyword("const"),
  _with: createKeyword("with"),
  _new: createKeyword("new", {
    beforeExpr,
    startsExpr
  }),
  _this: createKeyword("this", {
    startsExpr
  }),
  _super: createKeyword("super", {
    startsExpr
  }),
  _class: createKeyword("class", {
    startsExpr
  }),
  _extends: createKeyword("extends", {
    beforeExpr
  }),
  _export: createKeyword("export"),
  _import: createKeyword("import", {
    startsExpr
  }),
  _null: createKeyword("null", {
    startsExpr
  }),
  _true: createKeyword("true", {
    startsExpr
  }),
  _false: createKeyword("false", {
    startsExpr
  }),
  _typeof: createKeyword("typeof", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  _void: createKeyword("void", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  _delete: createKeyword("delete", {
    beforeExpr,
    prefix,
    startsExpr
  }),
  _do: createKeyword("do", {
    isLoop,
    beforeExpr
  }),
  _for: createKeyword("for", {
    isLoop
  }),
  _while: createKeyword("while", {
    isLoop
  }),
  _as: createKeywordLike("as", {
    startsExpr
  }),
  _assert: createKeywordLike("assert", {
    startsExpr
  }),
  _async: createKeywordLike("async", {
    startsExpr
  }),
  _await: createKeywordLike("await", {
    startsExpr
  }),
  _from: createKeywordLike("from", {
    startsExpr
  }),
  _get: createKeywordLike("get", {
    startsExpr
  }),
  _let: createKeywordLike("let", {
    startsExpr
  }),
  _meta: createKeywordLike("meta", {
    startsExpr
  }),
  _of: createKeywordLike("of", {
    startsExpr
  }),
  _sent: createKeywordLike("sent", {
    startsExpr
  }),
  _set: createKeywordLike("set", {
    startsExpr
  }),
  _static: createKeywordLike("static", {
    startsExpr
  }),
  _yield: createKeywordLike("yield", {
    startsExpr
  }),
  _asserts: createKeywordLike("asserts", {
    startsExpr
  }),
  _checks: createKeywordLike("checks", {
    startsExpr
  }),
  _exports: createKeywordLike("exports", {
    startsExpr
  }),
  _global: createKeywordLike("global", {
    startsExpr
  }),
  _implements: createKeywordLike("implements", {
    startsExpr
  }),
  _intrinsic: createKeywordLike("intrinsic", {
    startsExpr
  }),
  _infer: createKeywordLike("infer", {
    startsExpr
  }),
  _is: createKeywordLike("is", {
    startsExpr
  }),
  _mixins: createKeywordLike("mixins", {
    startsExpr
  }),
  _proto: createKeywordLike("proto", {
    startsExpr
  }),
  _require: createKeywordLike("require", {
    startsExpr
  }),
  _keyof: createKeywordLike("keyof", {
    startsExpr
  }),
  _readonly: createKeywordLike("readonly", {
    startsExpr
  }),
  _unique: createKeywordLike("unique", {
    startsExpr
  }),
  _abstract: createKeywordLike("abstract", {
    startsExpr
  }),
  _declare: createKeywordLike("declare", {
    startsExpr
  }),
  _enum: createKeywordLike("enum", {
    startsExpr
  }),
  _module: createKeywordLike("module", {
    startsExpr
  }),
  _namespace: createKeywordLike("namespace", {
    startsExpr
  }),
  _interface: createKeywordLike("interface", {
    startsExpr
  }),
  _type: createKeywordLike("type", {
    startsExpr
  }),
  _opaque: createKeywordLike("opaque", {
    startsExpr
  }),
  name: createToken("name", {
    startsExpr
  }),
  string: createToken("string", {
    startsExpr
  }),
  num: createToken("num", {
    startsExpr
  }),
  bigint: createToken("bigint", {
    startsExpr
  }),
  decimal: createToken("decimal", {
    startsExpr
  }),
  regexp: createToken("regexp", {
    startsExpr
  }),
  privateName: createToken("#name", {
    startsExpr
  }),
  eof: createToken("eof"),
  jsxName: createToken("jsxName"),
  jsxText: createToken("jsxText", {
    beforeExpr: true
  }),
  jsxTagStart: createToken("jsxTagStart", {
    startsExpr: true
  }),
  jsxTagEnd: createToken("jsxTagEnd"),
  placeholder: createToken("%%", {
    startsExpr: true
  })
};
function tokenIsIdentifier(token) {
  return token >= 93 && token <= 128;
}
function tokenKeywordOrIdentifierIsKeyword(token) {
  return token <= 92;
}
function tokenIsKeywordOrIdentifier(token) {
  return token >= 58 && token <= 128;
}
function tokenIsLiteralPropertyName(token) {
  return token >= 58 && token <= 132;
}
function tokenComesBeforeExpression(token) {
  return tokenBeforeExprs[token];
}
function tokenCanStartExpression(token) {
  return tokenStartsExprs[token];
}
function tokenIsAssignment(token) {
  return token >= 29 && token <= 33;
}
function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
  return token >= 125 && token <= 127;
}
function tokenIsLoop(token) {
  return token >= 90 && token <= 92;
}
function tokenIsKeyword(token) {
  return token >= 58 && token <= 92;
}
function tokenIsOperator(token) {
  return token >= 39 && token <= 59;
}
function tokenIsPostfix(token) {
  return token === 34;
}
function tokenIsPrefix(token) {
  return tokenPrefixes[token];
}
function tokenIsTSTypeOperator(token) {
  return token >= 117 && token <= 119;
}
function tokenIsTSDeclarationStart(token) {
  return token >= 120 && token <= 126;
}
function tokenLabelName(token) {
  return tokenLabels[token];
}
function tokenOperatorPrecedence(token) {
  return tokenBinops[token];
}
function tokenIsBinaryOperator(token) {
  return tokenBinops[token] !== -1;
}
function tokenIsRightAssociative(token) {
  return token === 57;
}
function tokenIsTemplate(token) {
  return token >= 24 && token <= 25;
}
function getExportedToken(token) {
  return tokenTypes[token];
}
{
  tokenTypes[8].updateContext = context => {
    context.pop();
  };

  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {
    context.push(types.brace);
  };

  tokenTypes[22].updateContext = context => {
    if (context[context.length - 1] === types.template) {
      context.pop();
    } else {
      context.push(types.template);
    }
  };

  tokenTypes[138].updateContext = context => {
    context.push(types.j_expr, types.j_oTag);
  };
}

let nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ca\ua7d0\ua7d1\ua7d3\ua7d5-\ua7d9\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
let nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0898-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];

function isInAstralSet(code, set) {
  let pos = 0x10000;

  for (let i = 0, length = set.length; i < length; i += 2) {
    pos += set[i];
    if (pos > code) return false;
    pos += set[i + 1];
    if (pos >= code) return true;
  }

  return false;
}

function isIdentifierStart(code) {
  if (code < 65) return code === 36;
  if (code <= 90) return true;
  if (code < 97) return code === 95;
  if (code <= 122) return true;

  if (code <= 0xffff) {
    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
  }

  return isInAstralSet(code, astralIdentifierStartCodes);
}
function isIdentifierChar(code) {
  if (code < 48) return code === 36;
  if (code < 58) return true;
  if (code < 65) return false;
  if (code <= 90) return true;
  if (code < 97) return code === 95;
  if (code <= 122) return true;

  if (code <= 0xffff) {
    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
  }

  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
}

const reservedWords = {
  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
  strictBind: ["eval", "arguments"]
};
const keywords = new Set(reservedWords.keyword);
const reservedWordsStrictSet = new Set(reservedWords.strict);
const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
function isReservedWord(word, inModule) {
  return inModule && word === "await" || word === "enum";
}
function isStrictReservedWord(word, inModule) {
  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
}
function isStrictBindOnlyReservedWord(word) {
  return reservedWordsStrictBindSet.has(word);
}
function isStrictBindReservedWord(word, inModule) {
  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
}
function isKeyword(word) {
  return keywords.has(word);
}

function isIteratorStart(current, next, next2) {
  return current === 64 && next === 64 && isIdentifierStart(next2);
}
const reservedWordLikeSet = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
function canBeReservedWord(word) {
  return reservedWordLikeSet.has(word);
}

const SCOPE_OTHER = 0b000000000,
      SCOPE_PROGRAM = 0b000000001,
      SCOPE_FUNCTION = 0b000000010,
      SCOPE_ARROW = 0b000000100,
      SCOPE_SIMPLE_CATCH = 0b000001000,
      SCOPE_SUPER = 0b000010000,
      SCOPE_DIRECT_SUPER = 0b000100000,
      SCOPE_CLASS = 0b001000000,
      SCOPE_STATIC_BLOCK = 0b010000000,
      SCOPE_TS_MODULE = 0b100000000,
      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;
const BIND_KIND_VALUE = 0b000000000001,
      BIND_KIND_TYPE = 0b000000000010,
      BIND_SCOPE_VAR = 0b000000000100,
      BIND_SCOPE_LEXICAL = 0b000000001000,
      BIND_SCOPE_FUNCTION = 0b000000010000,
      BIND_FLAGS_NONE = 0b000001000000,
      BIND_FLAGS_CLASS = 0b000010000000,
      BIND_FLAGS_TS_ENUM = 0b000100000000,
      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,
      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,
      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;
const BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,
      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,
      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,
      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,
      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,
      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,
      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,
      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,
      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,
      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,
      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,
      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,
      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;
const CLASS_ELEMENT_FLAG_STATIC = 0b100,
      CLASS_ELEMENT_KIND_GETTER = 0b010,
      CLASS_ELEMENT_KIND_SETTER = 0b001,
      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;
const CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,
      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,
      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,
      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,
      CLASS_ELEMENT_OTHER = 0;

class BaseParser {
  constructor() {
    this.sawUnambiguousESM = false;
    this.ambiguousScriptDifferentAst = false;
  }

  hasPlugin(pluginConfig) {
    if (typeof pluginConfig === "string") {
      return this.plugins.has(pluginConfig);
    } else {
      const [pluginName, pluginOptions] = pluginConfig;

      if (!this.hasPlugin(pluginName)) {
        return false;
      }

      const actualOptions = this.plugins.get(pluginName);

      for (const key of Object.keys(pluginOptions)) {
        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {
          return false;
        }
      }

      return true;
    }
  }

  getPluginOption(plugin, name) {
    var _this$plugins$get;

    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];
  }

}

function setTrailingComments(node, comments) {
  if (node.trailingComments === undefined) {
    node.trailingComments = comments;
  } else {
    node.trailingComments.unshift(...comments);
  }
}

function setLeadingComments(node, comments) {
  if (node.leadingComments === undefined) {
    node.leadingComments = comments;
  } else {
    node.leadingComments.unshift(...comments);
  }
}

function setInnerComments(node, comments) {
  if (node.innerComments === undefined) {
    node.innerComments = comments;
  } else {
    node.innerComments.unshift(...comments);
  }
}

function adjustInnerComments(node, elements, commentWS) {
  let lastElement = null;
  let i = elements.length;

  while (lastElement === null && i > 0) {
    lastElement = elements[--i];
  }

  if (lastElement === null || lastElement.start > commentWS.start) {
    setInnerComments(node, commentWS.comments);
  } else {
    setTrailingComments(lastElement, commentWS.comments);
  }
}

class CommentsParser extends BaseParser {
  addComment(comment) {
    if (this.filename) comment.loc.filename = this.filename;
    this.state.comments.push(comment);
  }

  processComment(node) {
    const {
      commentStack
    } = this.state;
    const commentStackLength = commentStack.length;
    if (commentStackLength === 0) return;
    let i = commentStackLength - 1;
    const lastCommentWS = commentStack[i];

    if (lastCommentWS.start === node.end) {
      lastCommentWS.leadingNode = node;
      i--;
    }

    const {
      start: nodeStart
    } = node;

    for (; i >= 0; i--) {
      const commentWS = commentStack[i];
      const commentEnd = commentWS.end;

      if (commentEnd > nodeStart) {
        commentWS.containingNode = node;
        this.finalizeComment(commentWS);
        commentStack.splice(i, 1);
      } else {
        if (commentEnd === nodeStart) {
          commentWS.trailingNode = node;
        }

        break;
      }
    }
  }

  finalizeComment(commentWS) {
    const {
      comments
    } = commentWS;

    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
      if (commentWS.leadingNode !== null) {
        setTrailingComments(commentWS.leadingNode, comments);
      }

      if (commentWS.trailingNode !== null) {
        setLeadingComments(commentWS.trailingNode, comments);
      }
    } else {
      const {
        containingNode: node,
        start: commentStart
      } = commentWS;

      if (this.input.charCodeAt(commentStart - 1) === 44) {
        switch (node.type) {
          case "ObjectExpression":
          case "ObjectPattern":
          case "RecordExpression":
            adjustInnerComments(node, node.properties, commentWS);
            break;

          case "CallExpression":
          case "OptionalCallExpression":
            adjustInnerComments(node, node.arguments, commentWS);
            break;

          case "FunctionDeclaration":
          case "FunctionExpression":
          case "ArrowFunctionExpression":
          case "ObjectMethod":
          case "ClassMethod":
          case "ClassPrivateMethod":
            adjustInnerComments(node, node.params, commentWS);
            break;

          case "ArrayExpression":
          case "ArrayPattern":
          case "TupleExpression":
            adjustInnerComments(node, node.elements, commentWS);
            break;

          case "ExportNamedDeclaration":
          case "ImportDeclaration":
            adjustInnerComments(node, node.specifiers, commentWS);
            break;

          default:
            {
              setInnerComments(node, comments);
            }
        }
      } else {
        setInnerComments(node, comments);
      }
    }
  }

  finalizeRemainingComments() {
    const {
      commentStack
    } = this.state;

    for (let i = commentStack.length - 1; i >= 0; i--) {
      this.finalizeComment(commentStack[i]);
    }

    this.state.commentStack = [];
  }

  resetPreviousNodeTrailingComments(node) {
    const {
      commentStack
    } = this.state;
    const {
      length
    } = commentStack;
    if (length === 0) return;
    const commentWS = commentStack[length - 1];

    if (commentWS.leadingNode === node) {
      commentWS.leadingNode = null;
    }
  }

  takeSurroundingComments(node, start, end) {
    const {
      commentStack
    } = this.state;
    const commentStackLength = commentStack.length;
    if (commentStackLength === 0) return;
    let i = commentStackLength - 1;

    for (; i >= 0; i--) {
      const commentWS = commentStack[i];
      const commentEnd = commentWS.end;
      const commentStart = commentWS.start;

      if (commentStart === end) {
        commentWS.leadingNode = node;
      } else if (commentEnd === start) {
        commentWS.trailingNode = node;
      } else if (commentEnd < start) {
        break;
      }
    }
  }

}

const lineBreak = /\r\n?|[\n\u2028\u2029]/;
const lineBreakG = new RegExp(lineBreak.source, "g");
function isNewLine(code) {
  switch (code) {
    case 10:
    case 13:
    case 8232:
    case 8233:
      return true;

    default:
      return false;
  }
}
const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
const skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y;
const skipWhiteSpaceToLineBreak = new RegExp("(?=(" + skipWhiteSpaceInLine.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
function isWhitespace(code) {
  switch (code) {
    case 0x0009:
    case 0x000b:
    case 0x000c:
    case 32:
    case 160:
    case 5760:
    case 0x2000:
    case 0x2001:
    case 0x2002:
    case 0x2003:
    case 0x2004:
    case 0x2005:
    case 0x2006:
    case 0x2007:
    case 0x2008:
    case 0x2009:
    case 0x200a:
    case 0x202f:
    case 0x205f:
    case 0x3000:
    case 0xfeff:
      return true;

    default:
      return false;
  }
}

class State {
  constructor() {
    this.strict = void 0;
    this.curLine = void 0;
    this.lineStart = void 0;
    this.startLoc = void 0;
    this.endLoc = void 0;
    this.errors = [];
    this.potentialArrowAt = -1;
    this.noArrowAt = [];
    this.noArrowParamsConversionAt = [];
    this.maybeInArrowParameters = false;
    this.inType = false;
    this.noAnonFunctionType = false;
    this.hasFlowComment = false;
    this.isAmbientContext = false;
    this.inAbstractClass = false;
    this.inDisallowConditionalTypesContext = false;
    this.topicContext = {
      maxNumOfResolvableTopics: 0,
      maxTopicIndex: null
    };
    this.soloAwait = false;
    this.inFSharpPipelineDirectBody = false;
    this.labels = [];
    this.decoratorStack = [[]];
    this.comments = [];
    this.commentStack = [];
    this.pos = 0;
    this.type = 135;
    this.value = null;
    this.start = 0;
    this.end = 0;
    this.lastTokEndLoc = null;
    this.lastTokStartLoc = null;
    this.lastTokStart = 0;
    this.context = [types.brace];
    this.canStartJSXElement = true;
    this.containsEsc = false;
    this.strictErrors = new Map();
    this.tokensLength = 0;
  }

  init({
    strictMode,
    sourceType,
    startLine,
    startColumn
  }) {
    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
    this.curLine = startLine;
    this.lineStart = -startColumn;
    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
  }

  curPosition() {
    return new Position(this.curLine, this.pos - this.lineStart, this.pos);
  }

  clone(skipArrays) {
    const state = new State();
    const keys = Object.keys(this);

    for (let i = 0, length = keys.length; i < length; i++) {
      const key = keys[i];
      let val = this[key];

      if (!skipArrays && Array.isArray(val)) {
        val = val.slice();
      }

      state[key] = val;
    }

    return state;
  }

}

const _excluded = ["at"],
      _excluded2 = ["at"];

var _isDigit = function isDigit(code) {
  return code >= 48 && code <= 57;
};
const VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);
const forbiddenNumericSeparatorSiblings = {
  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),
  hex: new Set([46, 88, 95, 120])
};
const isAllowedNumericSeparatorSibling = {
  bin: ch => ch === 48 || ch === 49,
  oct: ch => ch >= 48 && ch <= 55,
  dec: ch => ch >= 48 && ch <= 57,
  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
};
class Token {
  constructor(state) {
    this.type = state.type;
    this.value = state.value;
    this.start = state.start;
    this.end = state.end;
    this.loc = new SourceLocation(state.startLoc, state.endLoc);
  }

}
class Tokenizer extends CommentsParser {
  constructor(options, input) {
    super();
    this.isLookahead = void 0;
    this.tokens = [];
    this.state = new State();
    this.state.init(options);
    this.input = input;
    this.length = input.length;
    this.isLookahead = false;
  }

  pushToken(token) {
    this.tokens.length = this.state.tokensLength;
    this.tokens.push(token);
    ++this.state.tokensLength;
  }

  next() {
    this.checkKeywordEscapes();

    if (this.options.tokens) {
      this.pushToken(new Token(this.state));
    }

    this.state.lastTokStart = this.state.start;
    this.state.lastTokEndLoc = this.state.endLoc;
    this.state.lastTokStartLoc = this.state.startLoc;
    this.nextToken();
  }

  eat(type) {
    if (this.match(type)) {
      this.next();
      return true;
    } else {
      return false;
    }
  }

  match(type) {
    return this.state.type === type;
  }

  createLookaheadState(state) {
    return {
      pos: state.pos,
      value: null,
      type: state.type,
      start: state.start,
      end: state.end,
      context: [this.curContext()],
      inType: state.inType,
      startLoc: state.startLoc,
      lastTokEndLoc: state.lastTokEndLoc,
      curLine: state.curLine,
      lineStart: state.lineStart,
      curPosition: state.curPosition
    };
  }

  lookahead() {
    const old = this.state;
    this.state = this.createLookaheadState(old);
    this.isLookahead = true;
    this.nextToken();
    this.isLookahead = false;
    const curr = this.state;
    this.state = old;
    return curr;
  }

  nextTokenStart() {
    return this.nextTokenStartSince(this.state.pos);
  }

  nextTokenStartSince(pos) {
    skipWhiteSpace.lastIndex = pos;
    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
  }

  lookaheadCharCode() {
    return this.input.charCodeAt(this.nextTokenStart());
  }

  codePointAtPos(pos) {
    let cp = this.input.charCodeAt(pos);

    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {
      const trail = this.input.charCodeAt(pos);

      if ((trail & 0xfc00) === 0xdc00) {
        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);
      }
    }

    return cp;
  }

  setStrict(strict) {
    this.state.strict = strict;

    if (strict) {
      this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, {
        at
      }));
      this.state.strictErrors.clear();
    }
  }

  curContext() {
    return this.state.context[this.state.context.length - 1];
  }

  nextToken() {
    this.skipSpace();
    this.state.start = this.state.pos;
    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();

    if (this.state.pos >= this.length) {
      this.finishToken(135);
      return;
    }

    this.getTokenFromCode(this.codePointAtPos(this.state.pos));
  }

  skipBlockComment() {
    let startLoc;
    if (!this.isLookahead) startLoc = this.state.curPosition();
    const start = this.state.pos;
    const end = this.input.indexOf("*/", start + 2);

    if (end === -1) {
      throw this.raise(Errors.UnterminatedComment, {
        at: this.state.curPosition()
      });
    }

    this.state.pos = end + 2;
    lineBreakG.lastIndex = start + 2;

    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
      ++this.state.curLine;
      this.state.lineStart = lineBreakG.lastIndex;
    }

    if (this.isLookahead) return;
    const comment = {
      type: "CommentBlock",
      value: this.input.slice(start + 2, end),
      start,
      end: end + 2,
      loc: new SourceLocation(startLoc, this.state.curPosition())
    };
    if (this.options.tokens) this.pushToken(comment);
    return comment;
  }

  skipLineComment(startSkip) {
    const start = this.state.pos;
    let startLoc;
    if (!this.isLookahead) startLoc = this.state.curPosition();
    let ch = this.input.charCodeAt(this.state.pos += startSkip);

    if (this.state.pos < this.length) {
      while (!isNewLine(ch) && ++this.state.pos < this.length) {
        ch = this.input.charCodeAt(this.state.pos);
      }
    }

    if (this.isLookahead) return;
    const end = this.state.pos;
    const value = this.input.slice(start + startSkip, end);
    const comment = {
      type: "CommentLine",
      value,
      start,
      end,
      loc: new SourceLocation(startLoc, this.state.curPosition())
    };
    if (this.options.tokens) this.pushToken(comment);
    return comment;
  }

  skipSpace() {
    const spaceStart = this.state.pos;
    const comments = [];

    loop: while (this.state.pos < this.length) {
      const ch = this.input.charCodeAt(this.state.pos);

      switch (ch) {
        case 32:
        case 160:
        case 9:
          ++this.state.pos;
          break;

        case 13:
          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
            ++this.state.pos;
          }

        case 10:
        case 8232:
        case 8233:
          ++this.state.pos;
          ++this.state.curLine;
          this.state.lineStart = this.state.pos;
          break;

        case 47:
          switch (this.input.charCodeAt(this.state.pos + 1)) {
            case 42:
              {
                const comment = this.skipBlockComment();

                if (comment !== undefined) {
                  this.addComment(comment);
                  if (this.options.attachComment) comments.push(comment);
                }

                break;
              }

            case 47:
              {
                const comment = this.skipLineComment(2);

                if (comment !== undefined) {
                  this.addComment(comment);
                  if (this.options.attachComment) comments.push(comment);
                }

                break;
              }

            default:
              break loop;
          }

          break;

        default:
          if (isWhitespace(ch)) {
            ++this.state.pos;
          } else if (ch === 45 && !this.inModule) {
            const pos = this.state.pos;

            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
              const comment = this.skipLineComment(3);

              if (comment !== undefined) {
                this.addComment(comment);
                if (this.options.attachComment) comments.push(comment);
              }
            } else {
              break loop;
            }
          } else if (ch === 60 && !this.inModule) {
            const pos = this.state.pos;

            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
              const comment = this.skipLineComment(4);

              if (comment !== undefined) {
                this.addComment(comment);
                if (this.options.attachComment) comments.push(comment);
              }
            } else {
              break loop;
            }
          } else {
            break loop;
          }

      }
    }

    if (comments.length > 0) {
      const end = this.state.pos;
      const CommentWhitespace = {
        start: spaceStart,
        end,
        comments,
        leadingNode: null,
        trailingNode: null,
        containingNode: null
      };
      this.state.commentStack.push(CommentWhitespace);
    }
  }

  finishToken(type, val) {
    this.state.end = this.state.pos;
    this.state.endLoc = this.state.curPosition();
    const prevType = this.state.type;
    this.state.type = type;
    this.state.value = val;

    if (!this.isLookahead) {
      this.updateContext(prevType);
    }
  }

  replaceToken(type) {
    this.state.type = type;
    this.updateContext();
  }

  readToken_numberSign() {
    if (this.state.pos === 0 && this.readToken_interpreter()) {
      return;
    }

    const nextPos = this.state.pos + 1;
    const next = this.codePointAtPos(nextPos);

    if (next >= 48 && next <= 57) {
      throw this.raise(Errors.UnexpectedDigitAfterHash, {
        at: this.state.curPosition()
      });
    }

    if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
      this.expectPlugin("recordAndTuple");

      if (this.getPluginOption("recordAndTuple", "syntaxType") !== "hash") {
        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {
          at: this.state.curPosition()
        });
      }

      this.state.pos += 2;

      if (next === 123) {
        this.finishToken(7);
      } else {
        this.finishToken(1);
      }
    } else if (isIdentifierStart(next)) {
      ++this.state.pos;
      this.finishToken(134, this.readWord1(next));
    } else if (next === 92) {
      ++this.state.pos;
      this.finishToken(134, this.readWord1());
    } else {
      this.finishOp(27, 1);
    }
  }

  readToken_dot() {
    const next = this.input.charCodeAt(this.state.pos + 1);

    if (next >= 48 && next <= 57) {
      this.readNumber(true);
      return;
    }

    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
      this.state.pos += 3;
      this.finishToken(21);
    } else {
      ++this.state.pos;
      this.finishToken(16);
    }
  }

  readToken_slash() {
    const next = this.input.charCodeAt(this.state.pos + 1);

    if (next === 61) {
      this.finishOp(31, 2);
    } else {
      this.finishOp(56, 1);
    }
  }

  readToken_interpreter() {
    if (this.state.pos !== 0 || this.length < 2) return false;
    let ch = this.input.charCodeAt(this.state.pos + 1);
    if (ch !== 33) return false;
    const start = this.state.pos;
    this.state.pos += 1;

    while (!isNewLine(ch) && ++this.state.pos < this.length) {
      ch = this.input.charCodeAt(this.state.pos);
    }

    const value = this.input.slice(start + 2, this.state.pos);
    this.finishToken(28, value);
    return true;
  }

  readToken_mult_modulo(code) {
    let type = code === 42 ? 55 : 54;
    let width = 1;
    let next = this.input.charCodeAt(this.state.pos + 1);

    if (code === 42 && next === 42) {
      width++;
      next = this.input.charCodeAt(this.state.pos + 2);
      type = 57;
    }

    if (next === 61 && !this.state.inType) {
      width++;
      type = code === 37 ? 33 : 30;
    }

    this.finishOp(type, width);
  }

  readToken_pipe_amp(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);

    if (next === code) {
      if (this.input.charCodeAt(this.state.pos + 2) === 61) {
        this.finishOp(30, 3);
      } else {
        this.finishOp(code === 124 ? 41 : 42, 2);
      }

      return;
    }

    if (code === 124) {
      if (next === 62) {
        this.finishOp(39, 2);
        return;
      }

      if (this.hasPlugin("recordAndTuple") && next === 125) {
        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {
            at: this.state.curPosition()
          });
        }

        this.state.pos += 2;
        this.finishToken(9);
        return;
      }

      if (this.hasPlugin("recordAndTuple") && next === 93) {
        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {
            at: this.state.curPosition()
          });
        }

        this.state.pos += 2;
        this.finishToken(4);
        return;
      }
    }

    if (next === 61) {
      this.finishOp(30, 2);
      return;
    }

    this.finishOp(code === 124 ? 43 : 45, 1);
  }

  readToken_caret() {
    const next = this.input.charCodeAt(this.state.pos + 1);

    if (next === 61 && !this.state.inType) {
      this.finishOp(32, 2);
    } else if (next === 94 && this.hasPlugin(["pipelineOperator", {
      proposal: "hack",
      topicToken: "^^"
    }])) {
      this.finishOp(37, 2);
      const lookaheadCh = this.input.codePointAt(this.state.pos);

      if (lookaheadCh === 94) {
        throw this.unexpected();
      }
    } else {
      this.finishOp(44, 1);
    }
  }

  readToken_atSign() {
    const next = this.input.charCodeAt(this.state.pos + 1);

    if (next === 64 && this.hasPlugin(["pipelineOperator", {
      proposal: "hack",
      topicToken: "@@"
    }])) {
      this.finishOp(38, 2);
    } else {
      this.finishOp(26, 1);
    }
  }

  readToken_plus_min(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);

    if (next === code) {
      this.finishOp(34, 2);
      return;
    }

    if (next === 61) {
      this.finishOp(30, 2);
    } else {
      this.finishOp(53, 1);
    }
  }

  readToken_lt() {
    const {
      pos
    } = this.state;
    const next = this.input.charCodeAt(pos + 1);

    if (next === 60) {
      if (this.input.charCodeAt(pos + 2) === 61) {
        this.finishOp(30, 3);
        return;
      }

      this.finishOp(51, 2);
      return;
    }

    if (next === 61) {
      this.finishOp(49, 2);
      return;
    }

    this.finishOp(47, 1);
  }

  readToken_gt() {
    const {
      pos
    } = this.state;
    const next = this.input.charCodeAt(pos + 1);

    if (next === 62) {
      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;

      if (this.input.charCodeAt(pos + size) === 61) {
        this.finishOp(30, size + 1);
        return;
      }

      this.finishOp(52, size);
      return;
    }

    if (next === 61) {
      this.finishOp(49, 2);
      return;
    }

    this.finishOp(48, 1);
  }

  readToken_eq_excl(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);

    if (next === 61) {
      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
      return;
    }

    if (code === 61 && next === 62) {
      this.state.pos += 2;
      this.finishToken(19);
      return;
    }

    this.finishOp(code === 61 ? 29 : 35, 1);
  }

  readToken_question() {
    const next = this.input.charCodeAt(this.state.pos + 1);
    const next2 = this.input.charCodeAt(this.state.pos + 2);

    if (next === 63) {
      if (next2 === 61) {
        this.finishOp(30, 3);
      } else {
        this.finishOp(40, 2);
      }
    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
      this.state.pos += 2;
      this.finishToken(18);
    } else {
      ++this.state.pos;
      this.finishToken(17);
    }
  }

  getTokenFromCode(code) {
    switch (code) {
      case 46:
        this.readToken_dot();
        return;

      case 40:
        ++this.state.pos;
        this.finishToken(10);
        return;

      case 41:
        ++this.state.pos;
        this.finishToken(11);
        return;

      case 59:
        ++this.state.pos;
        this.finishToken(13);
        return;

      case 44:
        ++this.state.pos;
        this.finishToken(12);
        return;

      case 91:
        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {
              at: this.state.curPosition()
            });
          }

          this.state.pos += 2;
          this.finishToken(2);
        } else {
          ++this.state.pos;
          this.finishToken(0);
        }

        return;

      case 93:
        ++this.state.pos;
        this.finishToken(3);
        return;

      case 123:
        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {
              at: this.state.curPosition()
            });
          }

          this.state.pos += 2;
          this.finishToken(6);
        } else {
          ++this.state.pos;
          this.finishToken(5);
        }

        return;

      case 125:
        ++this.state.pos;
        this.finishToken(8);
        return;

      case 58:
        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
          this.finishOp(15, 2);
        } else {
          ++this.state.pos;
          this.finishToken(14);
        }

        return;

      case 63:
        this.readToken_question();
        return;

      case 96:
        this.readTemplateToken();
        return;

      case 48:
        {
          const next = this.input.charCodeAt(this.state.pos + 1);

          if (next === 120 || next === 88) {
            this.readRadixNumber(16);
            return;
          }

          if (next === 111 || next === 79) {
            this.readRadixNumber(8);
            return;
          }

          if (next === 98 || next === 66) {
            this.readRadixNumber(2);
            return;
          }
        }

      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        this.readNumber(false);
        return;

      case 34:
      case 39:
        this.readString(code);
        return;

      case 47:
        this.readToken_slash();
        return;

      case 37:
      case 42:
        this.readToken_mult_modulo(code);
        return;

      case 124:
      case 38:
        this.readToken_pipe_amp(code);
        return;

      case 94:
        this.readToken_caret();
        return;

      case 43:
      case 45:
        this.readToken_plus_min(code);
        return;

      case 60:
        this.readToken_lt();
        return;

      case 62:
        this.readToken_gt();
        return;

      case 61:
      case 33:
        this.readToken_eq_excl(code);
        return;

      case 126:
        this.finishOp(36, 1);
        return;

      case 64:
        this.readToken_atSign();
        return;

      case 35:
        this.readToken_numberSign();
        return;

      case 92:
        this.readWord();
        return;

      default:
        if (isIdentifierStart(code)) {
          this.readWord(code);
          return;
        }

    }

    throw this.raise(Errors.InvalidOrUnexpectedToken, {
      at: this.state.curPosition(),
      unexpected: String.fromCodePoint(code)
    });
  }

  finishOp(type, size) {
    const str = this.input.slice(this.state.pos, this.state.pos + size);
    this.state.pos += size;
    this.finishToken(type, str);
  }

  readRegexp() {
    const startLoc = this.state.startLoc;
    const start = this.state.start + 1;
    let escaped, inClass;
    let {
      pos
    } = this.state;

    for (;; ++pos) {
      if (pos >= this.length) {
        throw this.raise(Errors.UnterminatedRegExp, {
          at: createPositionWithColumnOffset(startLoc, 1)
        });
      }

      const ch = this.input.charCodeAt(pos);

      if (isNewLine(ch)) {
        throw this.raise(Errors.UnterminatedRegExp, {
          at: createPositionWithColumnOffset(startLoc, 1)
        });
      }

      if (escaped) {
        escaped = false;
      } else {
        if (ch === 91) {
          inClass = true;
        } else if (ch === 93 && inClass) {
          inClass = false;
        } else if (ch === 47 && !inClass) {
          break;
        }

        escaped = ch === 92;
      }
    }

    const content = this.input.slice(start, pos);
    ++pos;
    let mods = "";

    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);

    while (pos < this.length) {
      const cp = this.codePointAtPos(pos);
      const char = String.fromCharCode(cp);

      if (VALID_REGEX_FLAGS.has(cp)) {
        if (cp === 118) {
          this.expectPlugin("regexpUnicodeSets", nextPos());

          if (mods.includes("u")) {
            this.raise(Errors.IncompatibleRegExpUVFlags, {
              at: nextPos()
            });
          }
        } else if (cp === 117) {
          if (mods.includes("v")) {
            this.raise(Errors.IncompatibleRegExpUVFlags, {
              at: nextPos()
            });
          }
        }

        if (mods.includes(char)) {
          this.raise(Errors.DuplicateRegExpFlags, {
            at: nextPos()
          });
        }
      } else if (isIdentifierChar(cp) || cp === 92) {
        this.raise(Errors.MalformedRegExpFlags, {
          at: nextPos()
        });
      } else {
        break;
      }

      ++pos;
      mods += char;
    }

    this.state.pos = pos;
    this.finishToken(133, {
      pattern: content,
      flags: mods
    });
  }

  readInt(radix, len, forceLen, allowNumSeparator = true) {
    const start = this.state.pos;
    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
    const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
    let invalid = false;
    let total = 0;

    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
      const code = this.input.charCodeAt(this.state.pos);
      let val;

      if (code === 95 && allowNumSeparator !== "bail") {
        const prev = this.input.charCodeAt(this.state.pos - 1);
        const next = this.input.charCodeAt(this.state.pos + 1);

        if (!allowNumSeparator) {
          this.raise(Errors.NumericSeparatorInEscapeSequence, {
            at: this.state.curPosition()
          });
        } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
          this.raise(Errors.UnexpectedNumericSeparator, {
            at: this.state.curPosition()
          });
        }

        ++this.state.pos;
        continue;
      }

      if (code >= 97) {
        val = code - 97 + 10;
      } else if (code >= 65) {
        val = code - 65 + 10;
      } else if (_isDigit(code)) {
        val = code - 48;
      } else {
        val = Infinity;
      }

      if (val >= radix) {
        if (this.options.errorRecovery && val <= 9) {
          val = 0;
          this.raise(Errors.InvalidDigit, {
            at: this.state.curPosition(),
            radix
          });
        } else if (forceLen) {
          val = 0;
          invalid = true;
        } else {
          break;
        }
      }

      ++this.state.pos;
      total = total * radix + val;
    }

    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {
      return null;
    }

    return total;
  }

  readRadixNumber(radix) {
    const startLoc = this.state.curPosition();
    let isBigInt = false;
    this.state.pos += 2;
    const val = this.readInt(radix);

    if (val == null) {
      this.raise(Errors.InvalidDigit, {
        at: createPositionWithColumnOffset(startLoc, 2),
        radix
      });
    }

    const next = this.input.charCodeAt(this.state.pos);

    if (next === 110) {
      ++this.state.pos;
      isBigInt = true;
    } else if (next === 109) {
      throw this.raise(Errors.InvalidDecimal, {
        at: startLoc
      });
    }

    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
      throw this.raise(Errors.NumberIdentifier, {
        at: this.state.curPosition()
      });
    }

    if (isBigInt) {
      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
      this.finishToken(131, str);
      return;
    }

    this.finishToken(130, val);
  }

  readNumber(startsWithDot) {
    const start = this.state.pos;
    const startLoc = this.state.curPosition();
    let isFloat = false;
    let isBigInt = false;
    let isDecimal = false;
    let hasExponent = false;
    let isOctal = false;

    if (!startsWithDot && this.readInt(10) === null) {
      this.raise(Errors.InvalidNumber, {
        at: this.state.curPosition()
      });
    }

    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;

    if (hasLeadingZero) {
      const integer = this.input.slice(start, this.state.pos);
      this.recordStrictModeErrors(Errors.StrictOctalLiteral, {
        at: startLoc
      });

      if (!this.state.strict) {
        const underscorePos = integer.indexOf("_");

        if (underscorePos > 0) {
          this.raise(Errors.ZeroDigitNumericSeparator, {
            at: createPositionWithColumnOffset(startLoc, underscorePos)
          });
        }
      }

      isOctal = hasLeadingZero && !/[89]/.test(integer);
    }

    let next = this.input.charCodeAt(this.state.pos);

    if (next === 46 && !isOctal) {
      ++this.state.pos;
      this.readInt(10);
      isFloat = true;
      next = this.input.charCodeAt(this.state.pos);
    }

    if ((next === 69 || next === 101) && !isOctal) {
      next = this.input.charCodeAt(++this.state.pos);

      if (next === 43 || next === 45) {
        ++this.state.pos;
      }

      if (this.readInt(10) === null) {
        this.raise(Errors.InvalidOrMissingExponent, {
          at: startLoc
        });
      }

      isFloat = true;
      hasExponent = true;
      next = this.input.charCodeAt(this.state.pos);
    }

    if (next === 110) {
      if (isFloat || hasLeadingZero) {
        this.raise(Errors.InvalidBigIntLiteral, {
          at: startLoc
        });
      }

      ++this.state.pos;
      isBigInt = true;
    }

    if (next === 109) {
      this.expectPlugin("decimal", this.state.curPosition());

      if (hasExponent || hasLeadingZero) {
        this.raise(Errors.InvalidDecimal, {
          at: startLoc
        });
      }

      ++this.state.pos;
      isDecimal = true;
    }

    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
      throw this.raise(Errors.NumberIdentifier, {
        at: this.state.curPosition()
      });
    }

    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");

    if (isBigInt) {
      this.finishToken(131, str);
      return;
    }

    if (isDecimal) {
      this.finishToken(132, str);
      return;
    }

    const val = isOctal ? parseInt(str, 8) : parseFloat(str);
    this.finishToken(130, val);
  }

  readCodePoint(throwOnInvalid) {
    const ch = this.input.charCodeAt(this.state.pos);
    let code;

    if (ch === 123) {
      ++this.state.pos;
      code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos, true, throwOnInvalid);
      ++this.state.pos;

      if (code !== null && code > 0x10ffff) {
        if (throwOnInvalid) {
          this.raise(Errors.InvalidCodePoint, {
            at: this.state.curPosition()
          });
        } else {
          return null;
        }
      }
    } else {
      code = this.readHexChar(4, false, throwOnInvalid);
    }

    return code;
  }

  readString(quote) {
    let out = "",
        chunkStart = ++this.state.pos;

    for (;;) {
      if (this.state.pos >= this.length) {
        throw this.raise(Errors.UnterminatedString, {
          at: this.state.startLoc
        });
      }

      const ch = this.input.charCodeAt(this.state.pos);
      if (ch === quote) break;

      if (ch === 92) {
        out += this.input.slice(chunkStart, this.state.pos);
        out += this.readEscapedChar(false);
        chunkStart = this.state.pos;
      } else if (ch === 8232 || ch === 8233) {
        ++this.state.pos;
        ++this.state.curLine;
        this.state.lineStart = this.state.pos;
      } else if (isNewLine(ch)) {
        throw this.raise(Errors.UnterminatedString, {
          at: this.state.startLoc
        });
      } else {
        ++this.state.pos;
      }
    }

    out += this.input.slice(chunkStart, this.state.pos++);
    this.finishToken(129, out);
  }

  readTemplateContinuation() {
    if (!this.match(8)) {
      this.unexpected(null, 8);
    }

    this.state.pos--;
    this.readTemplateToken();
  }

  readTemplateToken() {
    let out = "",
        chunkStart = this.state.pos,
        containsInvalid = false;
    ++this.state.pos;

    for (;;) {
      if (this.state.pos >= this.length) {
        throw this.raise(Errors.UnterminatedTemplate, {
          at: createPositionWithColumnOffset(this.state.startLoc, 1)
        });
      }

      const ch = this.input.charCodeAt(this.state.pos);

      if (ch === 96) {
        ++this.state.pos;
        out += this.input.slice(chunkStart, this.state.pos);
        this.finishToken(24, containsInvalid ? null : out);
        return;
      }

      if (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
        this.state.pos += 2;
        out += this.input.slice(chunkStart, this.state.pos);
        this.finishToken(25, containsInvalid ? null : out);
        return;
      }

      if (ch === 92) {
        out += this.input.slice(chunkStart, this.state.pos);
        const escaped = this.readEscapedChar(true);

        if (escaped === null) {
          containsInvalid = true;
        } else {
          out += escaped;
        }

        chunkStart = this.state.pos;
      } else if (isNewLine(ch)) {
        out += this.input.slice(chunkStart, this.state.pos);
        ++this.state.pos;

        switch (ch) {
          case 13:
            if (this.input.charCodeAt(this.state.pos) === 10) {
              ++this.state.pos;
            }

          case 10:
            out += "\n";
            break;

          default:
            out += String.fromCharCode(ch);
            break;
        }

        ++this.state.curLine;
        this.state.lineStart = this.state.pos;
        chunkStart = this.state.pos;
      } else {
        ++this.state.pos;
      }
    }
  }

  recordStrictModeErrors(toParseError, {
    at
  }) {
    const index = at.index;

    if (this.state.strict && !this.state.strictErrors.has(index)) {
      this.raise(toParseError, {
        at
      });
    } else {
      this.state.strictErrors.set(index, [toParseError, at]);
    }
  }

  readEscapedChar(inTemplate) {
    const throwOnInvalid = !inTemplate;
    const ch = this.input.charCodeAt(++this.state.pos);
    ++this.state.pos;

    switch (ch) {
      case 110:
        return "\n";

      case 114:
        return "\r";

      case 120:
        {
          const code = this.readHexChar(2, false, throwOnInvalid);
          return code === null ? null : String.fromCharCode(code);
        }

      case 117:
        {
          const code = this.readCodePoint(throwOnInvalid);
          return code === null ? null : String.fromCodePoint(code);
        }

      case 116:
        return "\t";

      case 98:
        return "\b";

      case 118:
        return "\u000b";

      case 102:
        return "\f";

      case 13:
        if (this.input.charCodeAt(this.state.pos) === 10) {
          ++this.state.pos;
        }

      case 10:
        this.state.lineStart = this.state.pos;
        ++this.state.curLine;

      case 8232:
      case 8233:
        return "";

      case 56:
      case 57:
        if (inTemplate) {
          return null;
        } else {
          this.recordStrictModeErrors(Errors.StrictNumericEscape, {
            at: createPositionWithColumnOffset(this.state.curPosition(), -1)
          });
        }

      default:
        if (ch >= 48 && ch <= 55) {
          const codePos = createPositionWithColumnOffset(this.state.curPosition(), -1);
          const match = this.input.slice(this.state.pos - 1, this.state.pos + 2).match(/^[0-7]+/);
          let octalStr = match[0];
          let octal = parseInt(octalStr, 8);

          if (octal > 255) {
            octalStr = octalStr.slice(0, -1);
            octal = parseInt(octalStr, 8);
          }

          this.state.pos += octalStr.length - 1;
          const next = this.input.charCodeAt(this.state.pos);

          if (octalStr !== "0" || next === 56 || next === 57) {
            if (inTemplate) {
              return null;
            } else {
              this.recordStrictModeErrors(Errors.StrictNumericEscape, {
                at: codePos
              });
            }
          }

          return String.fromCharCode(octal);
        }

        return String.fromCharCode(ch);
    }
  }

  readHexChar(len, forceLen, throwOnInvalid) {
    const codeLoc = this.state.curPosition();
    const n = this.readInt(16, len, forceLen, false);

    if (n === null) {
      if (throwOnInvalid) {
        this.raise(Errors.InvalidEscapeSequence, {
          at: codeLoc
        });
      } else {
        this.state.pos = codeLoc.index - 1;
      }
    }

    return n;
  }

  readWord1(firstCode) {
    this.state.containsEsc = false;
    let word = "";
    const start = this.state.pos;
    let chunkStart = this.state.pos;

    if (firstCode !== undefined) {
      this.state.pos += firstCode <= 0xffff ? 1 : 2;
    }

    while (this.state.pos < this.length) {
      const ch = this.codePointAtPos(this.state.pos);

      if (isIdentifierChar(ch)) {
        this.state.pos += ch <= 0xffff ? 1 : 2;
      } else if (ch === 92) {
        this.state.containsEsc = true;
        word += this.input.slice(chunkStart, this.state.pos);
        const escStart = this.state.curPosition();
        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;

        if (this.input.charCodeAt(++this.state.pos) !== 117) {
          this.raise(Errors.MissingUnicodeEscape, {
            at: this.state.curPosition()
          });
          chunkStart = this.state.pos - 1;
          continue;
        }

        ++this.state.pos;
        const esc = this.readCodePoint(true);

        if (esc !== null) {
          if (!identifierCheck(esc)) {
            this.raise(Errors.EscapedCharNotAnIdentifier, {
              at: escStart
            });
          }

          word += String.fromCodePoint(esc);
        }

        chunkStart = this.state.pos;
      } else {
        break;
      }
    }

    return word + this.input.slice(chunkStart, this.state.pos);
  }

  readWord(firstCode) {
    const word = this.readWord1(firstCode);
    const type = keywords$1.get(word);

    if (type !== undefined) {
      this.finishToken(type, tokenLabelName(type));
    } else {
      this.finishToken(128, word);
    }
  }

  checkKeywordEscapes() {
    const {
      type
    } = this.state;

    if (tokenIsKeyword(type) && this.state.containsEsc) {
      this.raise(Errors.InvalidEscapedReservedWord, {
        at: this.state.startLoc,
        reservedWord: tokenLabelName(type)
      });
    }
  }

  raise(toParseError, raiseProperties) {
    const {
      at
    } = raiseProperties,
          details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);

    const loc = at instanceof Position ? at : at.loc.start;
    const error = toParseError({
      loc,
      details
    });
    if (!this.options.errorRecovery) throw error;
    if (!this.isLookahead) this.state.errors.push(error);
    return error;
  }

  raiseOverwrite(toParseError, raiseProperties) {
    const {
      at
    } = raiseProperties,
          details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);

    const loc = at instanceof Position ? at : at.loc.start;
    const pos = loc.index;
    const errors = this.state.errors;

    for (let i = errors.length - 1; i >= 0; i--) {
      const error = errors[i];

      if (error.loc.index === pos) {
        return errors[i] = toParseError({
          loc,
          details
        });
      }

      if (error.loc.index < pos) break;
    }

    return this.raise(toParseError, raiseProperties);
  }

  updateContext(prevType) {}

  unexpected(loc, type) {
    throw this.raise(Errors.UnexpectedToken, {
      expected: type ? tokenLabelName(type) : null,
      at: loc != null ? loc : this.state.startLoc
    });
  }

  expectPlugin(pluginName, loc) {
    if (this.hasPlugin(pluginName)) {
      return true;
    }

    throw this.raise(Errors.MissingPlugin, {
      at: loc != null ? loc : this.state.startLoc,
      missingPlugin: [pluginName]
    });
  }

  expectOnePlugin(pluginNames) {
    if (!pluginNames.some(name => this.hasPlugin(name))) {
      throw this.raise(Errors.MissingOneOfPlugins, {
        at: this.state.startLoc,
        missingPlugin: pluginNames
      });
    }
  }

}

class Scope {
  constructor(flags) {
    this.var = new Set();
    this.lexical = new Set();
    this.functions = new Set();
    this.flags = flags;
  }

}
class ScopeHandler {
  constructor(parser, inModule) {
    this.parser = void 0;
    this.scopeStack = [];
    this.inModule = void 0;
    this.undefinedExports = new Map();
    this.parser = parser;
    this.inModule = inModule;
  }

  get inFunction() {
    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;
  }

  get allowSuper() {
    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;
  }

  get allowDirectSuper() {
    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;
  }

  get inClass() {
    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;
  }

  get inClassAndNotInNonArrowFunction() {
    const flags = this.currentThisScopeFlags();
    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;
  }

  get inStaticBlock() {
    for (let i = this.scopeStack.length - 1;; i--) {
      const {
        flags
      } = this.scopeStack[i];

      if (flags & SCOPE_STATIC_BLOCK) {
        return true;
      }

      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {
        return false;
      }
    }
  }

  get inNonArrowFunction() {
    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;
  }

  get treatFunctionsAsVar() {
    return this.treatFunctionsAsVarInScope(this.currentScope());
  }

  createScope(flags) {
    return new Scope(flags);
  }

  enter(flags) {
    this.scopeStack.push(this.createScope(flags));
  }

  exit() {
    this.scopeStack.pop();
  }

  treatFunctionsAsVarInScope(scope) {
    return !!(scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) || !this.parser.inModule && scope.flags & SCOPE_PROGRAM);
  }

  declareName(name, bindingType, loc) {
    let scope = this.currentScope();

    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {
      this.checkRedeclarationInScope(scope, name, bindingType, loc);

      if (bindingType & BIND_SCOPE_FUNCTION) {
        scope.functions.add(name);
      } else {
        scope.lexical.add(name);
      }

      if (bindingType & BIND_SCOPE_LEXICAL) {
        this.maybeExportDefined(scope, name);
      }
    } else if (bindingType & BIND_SCOPE_VAR) {
      for (let i = this.scopeStack.length - 1; i >= 0; --i) {
        scope = this.scopeStack[i];
        this.checkRedeclarationInScope(scope, name, bindingType, loc);
        scope.var.add(name);
        this.maybeExportDefined(scope, name);
        if (scope.flags & SCOPE_VAR) break;
      }
    }

    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {
      this.undefinedExports.delete(name);
    }
  }

  maybeExportDefined(scope, name) {
    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {
      this.undefinedExports.delete(name);
    }
  }

  checkRedeclarationInScope(scope, name, bindingType, loc) {
    if (this.isRedeclaredInScope(scope, name, bindingType)) {
      this.parser.raise(Errors.VarRedeclaration, {
        at: loc,
        identifierName: name
      });
    }
  }

  isRedeclaredInScope(scope, name, bindingType) {
    if (!(bindingType & BIND_KIND_VALUE)) return false;

    if (bindingType & BIND_SCOPE_LEXICAL) {
      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);
    }

    if (bindingType & BIND_SCOPE_FUNCTION) {
      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);
    }

    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);
  }

  checkLocalExport(id) {
    const {
      name
    } = id;
    const topLevelScope = this.scopeStack[0];

    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {
      this.undefinedExports.set(name, id.loc.start);
    }
  }

  currentScope() {
    return this.scopeStack[this.scopeStack.length - 1];
  }

  currentVarScopeFlags() {
    for (let i = this.scopeStack.length - 1;; i--) {
      const {
        flags
      } = this.scopeStack[i];

      if (flags & SCOPE_VAR) {
        return flags;
      }
    }
  }

  currentThisScopeFlags() {
    for (let i = this.scopeStack.length - 1;; i--) {
      const {
        flags
      } = this.scopeStack[i];

      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {
        return flags;
      }
    }
  }

}

class FlowScope extends Scope {
  constructor(...args) {
    super(...args);
    this.declareFunctions = new Set();
  }

}

class FlowScopeHandler extends ScopeHandler {
  createScope(flags) {
    return new FlowScope(flags);
  }

  declareName(name, bindingType, loc) {
    const scope = this.currentScope();

    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
      this.checkRedeclarationInScope(scope, name, bindingType, loc);
      this.maybeExportDefined(scope, name);
      scope.declareFunctions.add(name);
      return;
    }

    super.declareName(...arguments);
  }

  isRedeclaredInScope(scope, name, bindingType) {
    if (super.isRedeclaredInScope(...arguments)) return true;

    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {
      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));
    }

    return false;
  }

  checkLocalExport(id) {
    if (!this.scopeStack[0].declareFunctions.has(id.name)) {
      super.checkLocalExport(id);
    }
  }

}

class ClassScope {
  constructor() {
    this.privateNames = new Set();
    this.loneAccessors = new Map();
    this.undefinedPrivateNames = new Map();
  }

}
class ClassScopeHandler {
  constructor(parser) {
    this.parser = void 0;
    this.stack = [];
    this.undefinedPrivateNames = new Map();
    this.parser = parser;
  }

  current() {
    return this.stack[this.stack.length - 1];
  }

  enter() {
    this.stack.push(new ClassScope());
  }

  exit() {
    const oldClassScope = this.stack.pop();
    const current = this.current();

    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
      if (current) {
        if (!current.undefinedPrivateNames.has(name)) {
          current.undefinedPrivateNames.set(name, loc);
        }
      } else {
        this.parser.raise(Errors.InvalidPrivateFieldResolution, {
          at: loc,
          identifierName: name
        });
      }
    }
  }

  declarePrivateName(name, elementType, loc) {
    const {
      privateNames,
      loneAccessors,
      undefinedPrivateNames
    } = this.current();
    let redefined = privateNames.has(name);

    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {
      const accessor = redefined && loneAccessors.get(name);

      if (accessor) {
        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;
        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;
        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;
        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;
        redefined = oldKind === newKind || oldStatic !== newStatic;
        if (!redefined) loneAccessors.delete(name);
      } else if (!redefined) {
        loneAccessors.set(name, elementType);
      }
    }

    if (redefined) {
      this.parser.raise(Errors.PrivateNameRedeclaration, {
        at: loc,
        identifierName: name
      });
    }

    privateNames.add(name);
    undefinedPrivateNames.delete(name);
  }

  usePrivateName(name, loc) {
    let classScope;

    for (classScope of this.stack) {
      if (classScope.privateNames.has(name)) return;
    }

    if (classScope) {
      classScope.undefinedPrivateNames.set(name, loc);
    } else {
      this.parser.raise(Errors.InvalidPrivateFieldResolution, {
        at: loc,
        identifierName: name
      });
    }
  }

}

const kExpression = 0,
      kMaybeArrowParameterDeclaration = 1,
      kMaybeAsyncArrowParameterDeclaration = 2,
      kParameterDeclaration = 3;

class ExpressionScope {
  constructor(type = kExpression) {
    this.type = void 0;
    this.type = type;
  }

  canBeArrowParameterDeclaration() {
    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;
  }

  isCertainlyParameterDeclaration() {
    return this.type === kParameterDeclaration;
  }

}

class ArrowHeadParsingScope extends ExpressionScope {
  constructor(type) {
    super(type);
    this.declarationErrors = new Map();
  }

  recordDeclarationError(ParsingErrorClass, {
    at
  }) {
    const index = at.index;
    this.declarationErrors.set(index, [ParsingErrorClass, at]);
  }

  clearDeclarationError(index) {
    this.declarationErrors.delete(index);
  }

  iterateErrors(iterator) {
    this.declarationErrors.forEach(iterator);
  }

}

class ExpressionScopeHandler {
  constructor(parser) {
    this.parser = void 0;
    this.stack = [new ExpressionScope()];
    this.parser = parser;
  }

  enter(scope) {
    this.stack.push(scope);
  }

  exit() {
    this.stack.pop();
  }

  recordParameterInitializerError(toParseError, {
    at: node
  }) {
    const origin = {
      at: node.loc.start
    };
    const {
      stack
    } = this;
    let i = stack.length - 1;
    let scope = stack[i];

    while (!scope.isCertainlyParameterDeclaration()) {
      if (scope.canBeArrowParameterDeclaration()) {
        scope.recordDeclarationError(toParseError, origin);
      } else {
        return;
      }

      scope = stack[--i];
    }

    this.parser.raise(toParseError, origin);
  }

  recordArrowParemeterBindingError(error, {
    at: node
  }) {
    const {
      stack
    } = this;
    const scope = stack[stack.length - 1];
    const origin = {
      at: node.loc.start
    };

    if (scope.isCertainlyParameterDeclaration()) {
      this.parser.raise(error, origin);
    } else if (scope.canBeArrowParameterDeclaration()) {
      scope.recordDeclarationError(error, origin);
    } else {
      return;
    }
  }

  recordAsyncArrowParametersError({
    at
  }) {
    const {
      stack
    } = this;
    let i = stack.length - 1;
    let scope = stack[i];

    while (scope.canBeArrowParameterDeclaration()) {
      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {
        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {
          at
        });
      }

      scope = stack[--i];
    }
  }

  validateAsPattern() {
    const {
      stack
    } = this;
    const currentScope = stack[stack.length - 1];
    if (!currentScope.canBeArrowParameterDeclaration()) return;
    currentScope.iterateErrors(([toParseError, loc]) => {
      this.parser.raise(toParseError, {
        at: loc
      });
      let i = stack.length - 2;
      let scope = stack[i];

      while (scope.canBeArrowParameterDeclaration()) {
        scope.clearDeclarationError(loc.index);
        scope = stack[--i];
      }
    });
  }

}
function newParameterDeclarationScope() {
  return new ExpressionScope(kParameterDeclaration);
}
function newArrowHeadScope() {
  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);
}
function newAsyncArrowScope() {
  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);
}
function newExpressionScope() {
  return new ExpressionScope();
}

const PARAM = 0b0000,
      PARAM_YIELD = 0b0001,
      PARAM_AWAIT = 0b0010,
      PARAM_RETURN = 0b0100,
      PARAM_IN = 0b1000;
class ProductionParameterHandler {
  constructor() {
    this.stacks = [];
  }

  enter(flags) {
    this.stacks.push(flags);
  }

  exit() {
    this.stacks.pop();
  }

  currentFlags() {
    return this.stacks[this.stacks.length - 1];
  }

  get hasAwait() {
    return (this.currentFlags() & PARAM_AWAIT) > 0;
  }

  get hasYield() {
    return (this.currentFlags() & PARAM_YIELD) > 0;
  }

  get hasReturn() {
    return (this.currentFlags() & PARAM_RETURN) > 0;
  }

  get hasIn() {
    return (this.currentFlags() & PARAM_IN) > 0;
  }

}
function functionFlags(isAsync, isGenerator) {
  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);
}

class UtilParser extends Tokenizer {
  addExtra(node, key, value, enumerable = true) {
    if (!node) return;
    const extra = node.extra = node.extra || {};

    if (enumerable) {
      extra[key] = value;
    } else {
      Object.defineProperty(extra, key, {
        enumerable,
        value
      });
    }
  }

  isContextual(token) {
    return this.state.type === token && !this.state.containsEsc;
  }

  isUnparsedContextual(nameStart, name) {
    const nameEnd = nameStart + name.length;

    if (this.input.slice(nameStart, nameEnd) === name) {
      const nextCh = this.input.charCodeAt(nameEnd);
      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);
    }

    return false;
  }

  isLookaheadContextual(name) {
    const next = this.nextTokenStart();
    return this.isUnparsedContextual(next, name);
  }

  eatContextual(token) {
    if (this.isContextual(token)) {
      this.next();
      return true;
    }

    return false;
  }

  expectContextual(token, toParseError) {
    if (!this.eatContextual(token)) {
      if (toParseError != null) {
        throw this.raise(toParseError, {
          at: this.state.startLoc
        });
      }

      throw this.unexpected(null, token);
    }
  }

  canInsertSemicolon() {
    return this.match(135) || this.match(8) || this.hasPrecedingLineBreak();
  }

  hasPrecedingLineBreak() {
    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
  }

  hasFollowingLineBreak() {
    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
    return skipWhiteSpaceToLineBreak.test(this.input);
  }

  isLineTerminator() {
    return this.eat(13) || this.canInsertSemicolon();
  }

  semicolon(allowAsi = true) {
    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;
    this.raise(Errors.MissingSemicolon, {
      at: this.state.lastTokEndLoc
    });
  }

  expect(type, loc) {
    this.eat(type) || this.unexpected(loc, type);
  }

  tryParse(fn, oldState = this.state.clone()) {
    const abortSignal = {
      node: null
    };

    try {
      const node = fn((node = null) => {
        abortSignal.node = node;
        throw abortSignal;
      });

      if (this.state.errors.length > oldState.errors.length) {
        const failState = this.state;
        this.state = oldState;
        this.state.tokensLength = failState.tokensLength;
        return {
          node,
          error: failState.errors[oldState.errors.length],
          thrown: false,
          aborted: false,
          failState
        };
      }

      return {
        node,
        error: null,
        thrown: false,
        aborted: false,
        failState: null
      };
    } catch (error) {
      const failState = this.state;
      this.state = oldState;

      if (error instanceof SyntaxError) {
        return {
          node: null,
          error,
          thrown: true,
          aborted: false,
          failState
        };
      }

      if (error === abortSignal) {
        return {
          node: abortSignal.node,
          error: null,
          thrown: false,
          aborted: true,
          failState
        };
      }

      throw error;
    }
  }

  checkExpressionErrors(refExpressionErrors, andThrow) {
    if (!refExpressionErrors) return false;
    const {
      shorthandAssignLoc,
      doubleProtoLoc,
      privateKeyLoc,
      optionalParametersLoc
    } = refExpressionErrors;
    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;

    if (!andThrow) {
      return hasErrors;
    }

    if (shorthandAssignLoc != null) {
      this.raise(Errors.InvalidCoverInitializedName, {
        at: shorthandAssignLoc
      });
    }

    if (doubleProtoLoc != null) {
      this.raise(Errors.DuplicateProto, {
        at: doubleProtoLoc
      });
    }

    if (privateKeyLoc != null) {
      this.raise(Errors.UnexpectedPrivateField, {
        at: privateKeyLoc
      });
    }

    if (optionalParametersLoc != null) {
      this.unexpected(optionalParametersLoc);
    }
  }

  isLiteralPropertyName() {
    return tokenIsLiteralPropertyName(this.state.type);
  }

  isPrivateName(node) {
    return node.type === "PrivateName";
  }

  getPrivateNameSV(node) {
    return node.id.name;
  }

  hasPropertyAsPrivateName(node) {
    return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
  }

  isOptionalChain(node) {
    return node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression";
  }

  isObjectProperty(node) {
    return node.type === "ObjectProperty";
  }

  isObjectMethod(node) {
    return node.type === "ObjectMethod";
  }

  initializeScopes(inModule = this.options.sourceType === "module") {
    const oldLabels = this.state.labels;
    this.state.labels = [];
    const oldExportedIdentifiers = this.exportedIdentifiers;
    this.exportedIdentifiers = new Set();
    const oldInModule = this.inModule;
    this.inModule = inModule;
    const oldScope = this.scope;
    const ScopeHandler = this.getScopeHandler();
    this.scope = new ScopeHandler(this, inModule);
    const oldProdParam = this.prodParam;
    this.prodParam = new ProductionParameterHandler();
    const oldClassScope = this.classScope;
    this.classScope = new ClassScopeHandler(this);
    const oldExpressionScope = this.expressionScope;
    this.expressionScope = new ExpressionScopeHandler(this);
    return () => {
      this.state.labels = oldLabels;
      this.exportedIdentifiers = oldExportedIdentifiers;
      this.inModule = oldInModule;
      this.scope = oldScope;
      this.prodParam = oldProdParam;
      this.classScope = oldClassScope;
      this.expressionScope = oldExpressionScope;
    };
  }

  enterInitialScopes() {
    let paramFlags = PARAM;

    if (this.inModule) {
      paramFlags |= PARAM_AWAIT;
    }

    this.scope.enter(SCOPE_PROGRAM);
    this.prodParam.enter(paramFlags);
  }

  checkDestructuringPrivate(refExpressionErrors) {
    const {
      privateKeyLoc
    } = refExpressionErrors;

    if (privateKeyLoc !== null) {
      this.expectPlugin("destructuringPrivate", privateKeyLoc);
    }
  }

}
class ExpressionErrors {
  constructor() {
    this.shorthandAssignLoc = null;
    this.doubleProtoLoc = null;
    this.privateKeyLoc = null;
    this.optionalParametersLoc = null;
  }

}

class Node {
  constructor(parser, pos, loc) {
    this.type = "";
    this.start = pos;
    this.end = 0;
    this.loc = new SourceLocation(loc);
    if (parser != null && parser.options.ranges) this.range = [pos, 0];
    if (parser != null && parser.filename) this.loc.filename = parser.filename;
  }

}

const NodePrototype = Node.prototype;
{
  NodePrototype.__clone = function () {
    const newNode = new Node();
    const keys = Object.keys(this);

    for (let i = 0, length = keys.length; i < length; i++) {
      const key = keys[i];

      if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
        newNode[key] = this[key];
      }
    }

    return newNode;
  };
}

function clonePlaceholder(node) {
  return cloneIdentifier(node);
}

function cloneIdentifier(node) {
  const {
    type,
    start,
    end,
    loc,
    range,
    extra,
    name
  } = node;
  const cloned = Object.create(NodePrototype);
  cloned.type = type;
  cloned.start = start;
  cloned.end = end;
  cloned.loc = loc;
  cloned.range = range;
  cloned.extra = extra;
  cloned.name = name;

  if (type === "Placeholder") {
    cloned.expectedNode = node.expectedNode;
  }

  return cloned;
}
function cloneStringLiteral(node) {
  const {
    type,
    start,
    end,
    loc,
    range,
    extra
  } = node;

  if (type === "Placeholder") {
    return clonePlaceholder(node);
  }

  const cloned = Object.create(NodePrototype);
  cloned.type = type;
  cloned.start = start;
  cloned.end = end;
  cloned.loc = loc;
  cloned.range = range;

  if (node.raw !== undefined) {
    cloned.raw = node.raw;
  } else {
    cloned.extra = extra;
  }

  cloned.value = node.value;
  return cloned;
}
class NodeUtils extends UtilParser {
  startNode() {
    return new Node(this, this.state.start, this.state.startLoc);
  }

  startNodeAt(pos, loc) {
    return new Node(this, pos, loc);
  }

  startNodeAtNode(type) {
    return this.startNodeAt(type.start, type.loc.start);
  }

  finishNode(node, type) {
    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
  }

  finishNodeAt(node, type, endLoc) {

    node.type = type;
    node.end = endLoc.index;
    node.loc.end = endLoc;
    if (this.options.ranges) node.range[1] = endLoc.index;
    if (this.options.attachComment) this.processComment(node);
    return node;
  }

  resetStartLocation(node, start, startLoc) {
    node.start = start;
    node.loc.start = startLoc;
    if (this.options.ranges) node.range[0] = start;
  }

  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
    node.end = endLoc.index;
    node.loc.end = endLoc;
    if (this.options.ranges) node.range[1] = endLoc.index;
  }

  resetStartLocationFromNode(node, locationNode) {
    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);
  }

}

const reservedTypes = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
const FlowErrors = ParseErrorEnum`flow`(_ => ({
  AmbiguousConditionalArrow: _("Ambiguous expression: wrap the arrow functions in parentheses to disambiguate."),
  AmbiguousDeclareModuleKind: _("Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module."),
  AssignReservedType: _(({
    reservedType
  }) => `Cannot overwrite reserved type ${reservedType}.`),
  DeclareClassElement: _("The `declare` modifier can only appear on class fields."),
  DeclareClassFieldInitializer: _("Initializers are not allowed in fields with the `declare` modifier."),
  DuplicateDeclareModuleExports: _("Duplicate `declare module.exports` statement."),
  EnumBooleanMemberNotInitialized: _(({
    memberName,
    enumName
  }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`),
  EnumDuplicateMemberName: _(({
    memberName,
    enumName
  }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`),
  EnumInconsistentMemberValues: _(({
    enumName
  }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`),
  EnumInvalidExplicitType: _(({
    invalidEnumType,
    enumName
  }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`),
  EnumInvalidExplicitTypeUnknownSupplied: _(({
    enumName
  }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`),
  EnumInvalidMemberInitializerPrimaryType: _(({
    enumName,
    memberName,
    explicitType
  }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`),
  EnumInvalidMemberInitializerSymbolType: _(({
    enumName,
    memberName
  }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`),
  EnumInvalidMemberInitializerUnknownType: _(({
    enumName,
    memberName
  }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`),
  EnumInvalidMemberName: _(({
    enumName,
    memberName,
    suggestion
  }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`),
  EnumNumberMemberNotInitialized: _(({
    enumName,
    memberName
  }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`),
  EnumStringMemberInconsistentlyInitailized: _(({
    enumName
  }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`),
  GetterMayNotHaveThisParam: _("A getter cannot have a `this` parameter."),
  ImportTypeShorthandOnlyInPureImport: _("The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements."),
  InexactInsideExact: _("Explicit inexact syntax cannot appear inside an explicit exact object type."),
  InexactInsideNonObject: _("Explicit inexact syntax cannot appear in class or interface definitions."),
  InexactVariance: _("Explicit inexact syntax cannot have variance."),
  InvalidNonTypeImportInDeclareModule: _("Imports within a `declare module` body must always be `import type` or `import typeof`."),
  MissingTypeParamDefault: _("Type parameter declaration needs a default, since a preceding type parameter declaration has a default."),
  NestedDeclareModule: _("`declare module` cannot be used inside another `declare module`."),
  NestedFlowComment: _("Cannot have a flow comment inside another flow comment."),
  PatternIsOptional: _("A binding pattern parameter cannot be optional in an implementation signature.", {
    reasonCode: "OptionalBindingPattern"
  }),
  SetterMayNotHaveThisParam: _("A setter cannot have a `this` parameter."),
  SpreadVariance: _("Spread properties cannot have variance."),
  ThisParamAnnotationRequired: _("A type annotation is required for the `this` parameter."),
  ThisParamBannedInConstructor: _("Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions."),
  ThisParamMayNotBeOptional: _("The `this` parameter cannot be optional."),
  ThisParamMustBeFirst: _("The `this` parameter must be the first function parameter."),
  ThisParamNoDefault: _("The `this` parameter may not have a default value."),
  TypeBeforeInitializer: _("Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`."),
  TypeCastInPattern: _("The type cast expression is expected to be wrapped with parenthesis."),
  UnexpectedExplicitInexactInObject: _("Explicit inexact syntax must appear at the end of an inexact object."),
  UnexpectedReservedType: _(({
    reservedType
  }) => `Unexpected reserved type ${reservedType}.`),
  UnexpectedReservedUnderscore: _("`_` is only allowed as a type argument to call or new."),
  UnexpectedSpaceBetweenModuloChecks: _("Spaces between `%` and `checks` are not allowed here."),
  UnexpectedSpreadType: _("Spread operator cannot appear in class or interface definitions."),
  UnexpectedSubtractionOperand: _('Unexpected token, expected "number" or "bigint".'),
  UnexpectedTokenAfterTypeParameter: _("Expected an arrow function after this type parameter declaration."),
  UnexpectedTypeParameterBeforeAsyncArrowFunction: _("Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`."),
  UnsupportedDeclareExportKind: _(({
    unsupportedExportKind,
    suggestion
  }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`),
  UnsupportedStatementInDeclareModule: _("Only declares and type imports are allowed inside declare module."),
  UnterminatedFlowComment: _("Unterminated flow-comment.")
}));

function isEsModuleType(bodyElement) {
  return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
}

function hasTypeImportKind(node) {
  return node.importKind === "type" || node.importKind === "typeof";
}

function isMaybeDefaultImport(type) {
  return tokenIsKeywordOrIdentifier(type) && type !== 97;
}

const exportSuggestions = {
  const: "declare export var",
  let: "declare export var",
  type: "export type",
  interface: "export interface"
};

function partition(list, test) {
  const list1 = [];
  const list2 = [];

  for (let i = 0; i < list.length; i++) {
    (test(list[i], i, list) ? list1 : list2).push(list[i]);
  }

  return [list1, list2];
}

const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
var flow = (superClass => class extends superClass {
  constructor(...args) {
    super(...args);
    this.flowPragma = undefined;
  }

  getScopeHandler() {
    return FlowScopeHandler;
  }

  shouldParseTypes() {
    return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
  }

  shouldParseEnums() {
    return !!this.getPluginOption("flow", "enums");
  }

  finishToken(type, val) {
    if (type !== 129 && type !== 13 && type !== 28) {
      if (this.flowPragma === undefined) {
        this.flowPragma = null;
      }
    }

    return super.finishToken(type, val);
  }

  addComment(comment) {
    if (this.flowPragma === undefined) {
      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);

      if (!matches) ; else if (matches[1] === "flow") {
        this.flowPragma = "flow";
      } else if (matches[1] === "noflow") {
        this.flowPragma = "noflow";
      } else {
        throw new Error("Unexpected flow pragma");
      }
    }

    return super.addComment(comment);
  }

  flowParseTypeInitialiser(tok) {
    const oldInType = this.state.inType;
    this.state.inType = true;
    this.expect(tok || 14);
    const type = this.flowParseType();
    this.state.inType = oldInType;
    return type;
  }

  flowParsePredicate() {
    const node = this.startNode();
    const moduloLoc = this.state.startLoc;
    this.next();
    this.expectContextual(107);

    if (this.state.lastTokStart > moduloLoc.index + 1) {
      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {
        at: moduloLoc
      });
    }

    if (this.eat(10)) {
      node.value = this.parseExpression();
      this.expect(11);
      return this.finishNode(node, "DeclaredPredicate");
    } else {
      return this.finishNode(node, "InferredPredicate");
    }
  }

  flowParseTypeAndPredicateInitialiser() {
    const oldInType = this.state.inType;
    this.state.inType = true;
    this.expect(14);
    let type = null;
    let predicate = null;

    if (this.match(54)) {
      this.state.inType = oldInType;
      predicate = this.flowParsePredicate();
    } else {
      type = this.flowParseType();
      this.state.inType = oldInType;

      if (this.match(54)) {
        predicate = this.flowParsePredicate();
      }
    }

    return [type, predicate];
  }

  flowParseDeclareClass(node) {
    this.next();
    this.flowParseInterfaceish(node, true);
    return this.finishNode(node, "DeclareClass");
  }

  flowParseDeclareFunction(node) {
    this.next();
    const id = node.id = this.parseIdentifier();
    const typeNode = this.startNode();
    const typeContainer = this.startNode();

    if (this.match(47)) {
      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      typeNode.typeParameters = null;
    }

    this.expect(10);
    const tmp = this.flowParseFunctionTypeParams();
    typeNode.params = tmp.params;
    typeNode.rest = tmp.rest;
    typeNode.this = tmp._this;
    this.expect(11);
    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
    typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
    id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
    this.resetEndLocation(id);
    this.semicolon();
    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);
    return this.finishNode(node, "DeclareFunction");
  }

  flowParseDeclare(node, insideModule) {
    if (this.match(80)) {
      return this.flowParseDeclareClass(node);
    } else if (this.match(68)) {
      return this.flowParseDeclareFunction(node);
    } else if (this.match(74)) {
      return this.flowParseDeclareVariable(node);
    } else if (this.eatContextual(123)) {
      if (this.match(16)) {
        return this.flowParseDeclareModuleExports(node);
      } else {
        if (insideModule) {
          this.raise(FlowErrors.NestedDeclareModule, {
            at: this.state.lastTokStartLoc
          });
        }

        return this.flowParseDeclareModule(node);
      }
    } else if (this.isContextual(126)) {
      return this.flowParseDeclareTypeAlias(node);
    } else if (this.isContextual(127)) {
      return this.flowParseDeclareOpaqueType(node);
    } else if (this.isContextual(125)) {
      return this.flowParseDeclareInterface(node);
    } else if (this.match(82)) {
      return this.flowParseDeclareExportDeclaration(node, insideModule);
    } else {
      throw this.unexpected();
    }
  }

  flowParseDeclareVariable(node) {
    this.next();
    node.id = this.flowParseTypeAnnotatableIdentifier(true);
    this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);
    this.semicolon();
    return this.finishNode(node, "DeclareVariable");
  }

  flowParseDeclareModule(node) {
    this.scope.enter(SCOPE_OTHER);

    if (this.match(129)) {
      node.id = this.parseExprAtom();
    } else {
      node.id = this.parseIdentifier();
    }

    const bodyNode = node.body = this.startNode();
    const body = bodyNode.body = [];
    this.expect(5);

    while (!this.match(8)) {
      let bodyNode = this.startNode();

      if (this.match(83)) {
        this.next();

        if (!this.isContextual(126) && !this.match(87)) {
          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {
            at: this.state.lastTokStartLoc
          });
        }

        this.parseImport(bodyNode);
      } else {
        this.expectContextual(121, FlowErrors.UnsupportedStatementInDeclareModule);
        bodyNode = this.flowParseDeclare(bodyNode, true);
      }

      body.push(bodyNode);
    }

    this.scope.exit();
    this.expect(8);
    this.finishNode(bodyNode, "BlockStatement");
    let kind = null;
    let hasModuleExport = false;
    body.forEach(bodyElement => {
      if (isEsModuleType(bodyElement)) {
        if (kind === "CommonJS") {
          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
            at: bodyElement
          });
        }

        kind = "ES";
      } else if (bodyElement.type === "DeclareModuleExports") {
        if (hasModuleExport) {
          this.raise(FlowErrors.DuplicateDeclareModuleExports, {
            at: bodyElement
          });
        }

        if (kind === "ES") {
          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
            at: bodyElement
          });
        }

        kind = "CommonJS";
        hasModuleExport = true;
      }
    });
    node.kind = kind || "CommonJS";
    return this.finishNode(node, "DeclareModule");
  }

  flowParseDeclareExportDeclaration(node, insideModule) {
    this.expect(82);

    if (this.eat(65)) {
      if (this.match(68) || this.match(80)) {
        node.declaration = this.flowParseDeclare(this.startNode());
      } else {
        node.declaration = this.flowParseType();
        this.semicolon();
      }

      node.default = true;
      return this.finishNode(node, "DeclareExportDeclaration");
    } else {
      if (this.match(75) || this.isLet() || (this.isContextual(126) || this.isContextual(125)) && !insideModule) {
        const label = this.state.value;
        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {
          at: this.state.startLoc,
          unsupportedExportKind: label,
          suggestion: exportSuggestions[label]
        });
      }

      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(127)) {
        node.declaration = this.flowParseDeclare(this.startNode());
        node.default = false;
        return this.finishNode(node, "DeclareExportDeclaration");
      } else if (this.match(55) || this.match(5) || this.isContextual(125) || this.isContextual(126) || this.isContextual(127)) {
        node = this.parseExport(node);

        if (node.type === "ExportNamedDeclaration") {
          node.type = "ExportDeclaration";
          node.default = false;
          delete node.exportKind;
        }

        node.type = "Declare" + node.type;
        return node;
      }
    }

    throw this.unexpected();
  }

  flowParseDeclareModuleExports(node) {
    this.next();
    this.expectContextual(108);
    node.typeAnnotation = this.flowParseTypeAnnotation();
    this.semicolon();
    return this.finishNode(node, "DeclareModuleExports");
  }

  flowParseDeclareTypeAlias(node) {
    this.next();
    this.flowParseTypeAlias(node);
    node.type = "DeclareTypeAlias";
    return node;
  }

  flowParseDeclareOpaqueType(node) {
    this.next();
    this.flowParseOpaqueType(node, true);
    node.type = "DeclareOpaqueType";
    return node;
  }

  flowParseDeclareInterface(node) {
    this.next();
    this.flowParseInterfaceish(node);
    return this.finishNode(node, "DeclareInterface");
  }

  flowParseInterfaceish(node, isClass = false) {
    node.id = this.flowParseRestrictedIdentifier(!isClass, true);
    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);

    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      node.typeParameters = null;
    }

    node.extends = [];
    node.implements = [];
    node.mixins = [];

    if (this.eat(81)) {
      do {
        node.extends.push(this.flowParseInterfaceExtends());
      } while (!isClass && this.eat(12));
    }

    if (this.isContextual(114)) {
      this.next();

      do {
        node.mixins.push(this.flowParseInterfaceExtends());
      } while (this.eat(12));
    }

    if (this.isContextual(110)) {
      this.next();

      do {
        node.implements.push(this.flowParseInterfaceExtends());
      } while (this.eat(12));
    }

    node.body = this.flowParseObjectType({
      allowStatic: isClass,
      allowExact: false,
      allowSpread: false,
      allowProto: isClass,
      allowInexact: false
    });
  }

  flowParseInterfaceExtends() {
    const node = this.startNode();
    node.id = this.flowParseQualifiedTypeIdentifier();

    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterInstantiation();
    } else {
      node.typeParameters = null;
    }

    return this.finishNode(node, "InterfaceExtends");
  }

  flowParseInterface(node) {
    this.flowParseInterfaceish(node);
    return this.finishNode(node, "InterfaceDeclaration");
  }

  checkNotUnderscore(word) {
    if (word === "_") {
      this.raise(FlowErrors.UnexpectedReservedUnderscore, {
        at: this.state.startLoc
      });
    }
  }

  checkReservedType(word, startLoc, declaration) {
    if (!reservedTypes.has(word)) return;
    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {
      at: startLoc,
      reservedType: word
    });
  }

  flowParseRestrictedIdentifier(liberal, declaration) {
    this.checkReservedType(this.state.value, this.state.startLoc, declaration);
    return this.parseIdentifier(liberal);
  }

  flowParseTypeAlias(node) {
    node.id = this.flowParseRestrictedIdentifier(false, true);
    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);

    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      node.typeParameters = null;
    }

    node.right = this.flowParseTypeInitialiser(29);
    this.semicolon();
    return this.finishNode(node, "TypeAlias");
  }

  flowParseOpaqueType(node, declare) {
    this.expectContextual(126);
    node.id = this.flowParseRestrictedIdentifier(true, true);
    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);

    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    } else {
      node.typeParameters = null;
    }

    node.supertype = null;

    if (this.match(14)) {
      node.supertype = this.flowParseTypeInitialiser(14);
    }

    node.impltype = null;

    if (!declare) {
      node.impltype = this.flowParseTypeInitialiser(29);
    }

    this.semicolon();
    return this.finishNode(node, "OpaqueType");
  }

  flowParseTypeParameter(requireDefault = false) {
    const nodeStartLoc = this.state.startLoc;
    const node = this.startNode();
    const variance = this.flowParseVariance();
    const ident = this.flowParseTypeAnnotatableIdentifier();
    node.name = ident.name;
    node.variance = variance;
    node.bound = ident.typeAnnotation;

    if (this.match(29)) {
      this.eat(29);
      node.default = this.flowParseType();
    } else {
      if (requireDefault) {
        this.raise(FlowErrors.MissingTypeParamDefault, {
          at: nodeStartLoc
        });
      }
    }

    return this.finishNode(node, "TypeParameter");
  }

  flowParseTypeParameterDeclaration() {
    const oldInType = this.state.inType;
    const node = this.startNode();
    node.params = [];
    this.state.inType = true;

    if (this.match(47) || this.match(138)) {
      this.next();
    } else {
      this.unexpected();
    }

    let defaultRequired = false;

    do {
      const typeParameter = this.flowParseTypeParameter(defaultRequired);
      node.params.push(typeParameter);

      if (typeParameter.default) {
        defaultRequired = true;
      }

      if (!this.match(48)) {
        this.expect(12);
      }
    } while (!this.match(48));

    this.expect(48);
    this.state.inType = oldInType;
    return this.finishNode(node, "TypeParameterDeclaration");
  }

  flowParseTypeParameterInstantiation() {
    const node = this.startNode();
    const oldInType = this.state.inType;
    node.params = [];
    this.state.inType = true;
    this.expect(47);
    const oldNoAnonFunctionType = this.state.noAnonFunctionType;
    this.state.noAnonFunctionType = false;

    while (!this.match(48)) {
      node.params.push(this.flowParseType());

      if (!this.match(48)) {
        this.expect(12);
      }
    }

    this.state.noAnonFunctionType = oldNoAnonFunctionType;
    this.expect(48);
    this.state.inType = oldInType;
    return this.finishNode(node, "TypeParameterInstantiation");
  }

  flowParseTypeParameterInstantiationCallOrNew() {
    const node = this.startNode();
    const oldInType = this.state.inType;
    node.params = [];
    this.state.inType = true;
    this.expect(47);

    while (!this.match(48)) {
      node.params.push(this.flowParseTypeOrImplicitInstantiation());

      if (!this.match(48)) {
        this.expect(12);
      }
    }

    this.expect(48);
    this.state.inType = oldInType;
    return this.finishNode(node, "TypeParameterInstantiation");
  }

  flowParseInterfaceType() {
    const node = this.startNode();
    this.expectContextual(125);
    node.extends = [];

    if (this.eat(81)) {
      do {
        node.extends.push(this.flowParseInterfaceExtends());
      } while (this.eat(12));
    }

    node.body = this.flowParseObjectType({
      allowStatic: false,
      allowExact: false,
      allowSpread: false,
      allowProto: false,
      allowInexact: false
    });
    return this.finishNode(node, "InterfaceTypeAnnotation");
  }

  flowParseObjectPropertyKey() {
    return this.match(130) || this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);
  }

  flowParseObjectTypeIndexer(node, isStatic, variance) {
    node.static = isStatic;

    if (this.lookahead().type === 14) {
      node.id = this.flowParseObjectPropertyKey();
      node.key = this.flowParseTypeInitialiser();
    } else {
      node.id = null;
      node.key = this.flowParseType();
    }

    this.expect(3);
    node.value = this.flowParseTypeInitialiser();
    node.variance = variance;
    return this.finishNode(node, "ObjectTypeIndexer");
  }

  flowParseObjectTypeInternalSlot(node, isStatic) {
    node.static = isStatic;
    node.id = this.flowParseObjectPropertyKey();
    this.expect(3);
    this.expect(3);

    if (this.match(47) || this.match(10)) {
      node.method = true;
      node.optional = false;
      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));
    } else {
      node.method = false;

      if (this.eat(17)) {
        node.optional = true;
      }

      node.value = this.flowParseTypeInitialiser();
    }

    return this.finishNode(node, "ObjectTypeInternalSlot");
  }

  flowParseObjectTypeMethodish(node) {
    node.params = [];
    node.rest = null;
    node.typeParameters = null;
    node.this = null;

    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    }

    this.expect(10);

    if (this.match(78)) {
      node.this = this.flowParseFunctionTypeParam(true);
      node.this.name = null;

      if (!this.match(11)) {
        this.expect(12);
      }
    }

    while (!this.match(11) && !this.match(21)) {
      node.params.push(this.flowParseFunctionTypeParam(false));

      if (!this.match(11)) {
        this.expect(12);
      }
    }

    if (this.eat(21)) {
      node.rest = this.flowParseFunctionTypeParam(false);
    }

    this.expect(11);
    node.returnType = this.flowParseTypeInitialiser();
    return this.finishNode(node, "FunctionTypeAnnotation");
  }

  flowParseObjectTypeCallProperty(node, isStatic) {
    const valueNode = this.startNode();
    node.static = isStatic;
    node.value = this.flowParseObjectTypeMethodish(valueNode);
    return this.finishNode(node, "ObjectTypeCallProperty");
  }

  flowParseObjectType({
    allowStatic,
    allowExact,
    allowSpread,
    allowProto,
    allowInexact
  }) {
    const oldInType = this.state.inType;
    this.state.inType = true;
    const nodeStart = this.startNode();
    nodeStart.callProperties = [];
    nodeStart.properties = [];
    nodeStart.indexers = [];
    nodeStart.internalSlots = [];
    let endDelim;
    let exact;
    let inexact = false;

    if (allowExact && this.match(6)) {
      this.expect(6);
      endDelim = 9;
      exact = true;
    } else {
      this.expect(5);
      endDelim = 8;
      exact = false;
    }

    nodeStart.exact = exact;

    while (!this.match(endDelim)) {
      let isStatic = false;
      let protoStartLoc = null;
      let inexactStartLoc = null;
      const node = this.startNode();

      if (allowProto && this.isContextual(115)) {
        const lookahead = this.lookahead();

        if (lookahead.type !== 14 && lookahead.type !== 17) {
          this.next();
          protoStartLoc = this.state.startLoc;
          allowStatic = false;
        }
      }

      if (allowStatic && this.isContextual(104)) {
        const lookahead = this.lookahead();

        if (lookahead.type !== 14 && lookahead.type !== 17) {
          this.next();
          isStatic = true;
        }
      }

      const variance = this.flowParseVariance();

      if (this.eat(0)) {
        if (protoStartLoc != null) {
          this.unexpected(protoStartLoc);
        }

        if (this.eat(0)) {
          if (variance) {
            this.unexpected(variance.loc.start);
          }

          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));
        } else {
          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
        }
      } else if (this.match(10) || this.match(47)) {
        if (protoStartLoc != null) {
          this.unexpected(protoStartLoc);
        }

        if (variance) {
          this.unexpected(variance.loc.start);
        }

        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
      } else {
        let kind = "init";

        if (this.isContextual(98) || this.isContextual(103)) {
          const lookahead = this.lookahead();

          if (tokenIsLiteralPropertyName(lookahead.type)) {
            kind = this.state.value;
            this.next();
          }
        }

        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);

        if (propOrInexact === null) {
          inexact = true;
          inexactStartLoc = this.state.lastTokStartLoc;
        } else {
          nodeStart.properties.push(propOrInexact);
        }
      }

      this.flowObjectTypeSemicolon();

      if (inexactStartLoc && !this.match(8) && !this.match(9)) {
        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {
          at: inexactStartLoc
        });
      }
    }

    this.expect(endDelim);

    if (allowSpread) {
      nodeStart.inexact = inexact;
    }

    const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
    this.state.inType = oldInType;
    return out;
  }

  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
    if (this.eat(21)) {
      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);

      if (isInexactToken) {
        if (!allowSpread) {
          this.raise(FlowErrors.InexactInsideNonObject, {
            at: this.state.lastTokStartLoc
          });
        } else if (!allowInexact) {
          this.raise(FlowErrors.InexactInsideExact, {
            at: this.state.lastTokStartLoc
          });
        }

        if (variance) {
          this.raise(FlowErrors.InexactVariance, {
            at: variance
          });
        }

        return null;
      }

      if (!allowSpread) {
        this.raise(FlowErrors.UnexpectedSpreadType, {
          at: this.state.lastTokStartLoc
        });
      }

      if (protoStartLoc != null) {
        this.unexpected(protoStartLoc);
      }

      if (variance) {
        this.raise(FlowErrors.SpreadVariance, {
          at: variance
        });
      }

      node.argument = this.flowParseType();
      return this.finishNode(node, "ObjectTypeSpreadProperty");
    } else {
      node.key = this.flowParseObjectPropertyKey();
      node.static = isStatic;
      node.proto = protoStartLoc != null;
      node.kind = kind;
      let optional = false;

      if (this.match(47) || this.match(10)) {
        node.method = true;

        if (protoStartLoc != null) {
          this.unexpected(protoStartLoc);
        }

        if (variance) {
          this.unexpected(variance.loc.start);
        }

        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));

        if (kind === "get" || kind === "set") {
          this.flowCheckGetterSetterParams(node);
        }

        if (!allowSpread && node.key.name === "constructor" && node.value.this) {
          this.raise(FlowErrors.ThisParamBannedInConstructor, {
            at: node.value.this
          });
        }
      } else {
        if (kind !== "init") this.unexpected();
        node.method = false;

        if (this.eat(17)) {
          optional = true;
        }

        node.value = this.flowParseTypeInitialiser();
        node.variance = variance;
      }

      node.optional = optional;
      return this.finishNode(node, "ObjectTypeProperty");
    }
  }

  flowCheckGetterSetterParams(property) {
    const paramCount = property.kind === "get" ? 0 : 1;
    const length = property.value.params.length + (property.value.rest ? 1 : 0);

    if (property.value.this) {
      this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {
        at: property.value.this
      });
    }

    if (length !== paramCount) {
      this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, {
        at: property
      });
    }

    if (property.kind === "set" && property.value.rest) {
      this.raise(Errors.BadSetterRestParameter, {
        at: property
      });
    }
  }

  flowObjectTypeSemicolon() {
    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
      this.unexpected();
    }
  }

  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {
    startPos = startPos || this.state.start;
    startLoc = startLoc || this.state.startLoc;
    let node = id || this.flowParseRestrictedIdentifier(true);

    while (this.eat(16)) {
      const node2 = this.startNodeAt(startPos, startLoc);
      node2.qualification = node;
      node2.id = this.flowParseRestrictedIdentifier(true);
      node = this.finishNode(node2, "QualifiedTypeIdentifier");
    }

    return node;
  }

  flowParseGenericType(startPos, startLoc, id) {
    const node = this.startNodeAt(startPos, startLoc);
    node.typeParameters = null;
    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);

    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterInstantiation();
    }

    return this.finishNode(node, "GenericTypeAnnotation");
  }

  flowParseTypeofType() {
    const node = this.startNode();
    this.expect(87);
    node.argument = this.flowParsePrimaryType();
    return this.finishNode(node, "TypeofTypeAnnotation");
  }

  flowParseTupleType() {
    const node = this.startNode();
    node.types = [];
    this.expect(0);

    while (this.state.pos < this.length && !this.match(3)) {
      node.types.push(this.flowParseType());
      if (this.match(3)) break;
      this.expect(12);
    }

    this.expect(3);
    return this.finishNode(node, "TupleTypeAnnotation");
  }

  flowParseFunctionTypeParam(first) {
    let name = null;
    let optional = false;
    let typeAnnotation = null;
    const node = this.startNode();
    const lh = this.lookahead();
    const isThis = this.state.type === 78;

    if (lh.type === 14 || lh.type === 17) {
      if (isThis && !first) {
        this.raise(FlowErrors.ThisParamMustBeFirst, {
          at: node
        });
      }

      name = this.parseIdentifier(isThis);

      if (this.eat(17)) {
        optional = true;

        if (isThis) {
          this.raise(FlowErrors.ThisParamMayNotBeOptional, {
            at: node
          });
        }
      }

      typeAnnotation = this.flowParseTypeInitialiser();
    } else {
      typeAnnotation = this.flowParseType();
    }

    node.name = name;
    node.optional = optional;
    node.typeAnnotation = typeAnnotation;
    return this.finishNode(node, "FunctionTypeParam");
  }

  reinterpretTypeAsFunctionTypeParam(type) {
    const node = this.startNodeAt(type.start, type.loc.start);
    node.name = null;
    node.optional = false;
    node.typeAnnotation = type;
    return this.finishNode(node, "FunctionTypeParam");
  }

  flowParseFunctionTypeParams(params = []) {
    let rest = null;
    let _this = null;

    if (this.match(78)) {
      _this = this.flowParseFunctionTypeParam(true);
      _this.name = null;

      if (!this.match(11)) {
        this.expect(12);
      }
    }

    while (!this.match(11) && !this.match(21)) {
      params.push(this.flowParseFunctionTypeParam(false));

      if (!this.match(11)) {
        this.expect(12);
      }
    }

    if (this.eat(21)) {
      rest = this.flowParseFunctionTypeParam(false);
    }

    return {
      params,
      rest,
      _this
    };
  }

  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {
    switch (id.name) {
      case "any":
        return this.finishNode(node, "AnyTypeAnnotation");

      case "bool":
      case "boolean":
        return this.finishNode(node, "BooleanTypeAnnotation");

      case "mixed":
        return this.finishNode(node, "MixedTypeAnnotation");

      case "empty":
        return this.finishNode(node, "EmptyTypeAnnotation");

      case "number":
        return this.finishNode(node, "NumberTypeAnnotation");

      case "string":
        return this.finishNode(node, "StringTypeAnnotation");

      case "symbol":
        return this.finishNode(node, "SymbolTypeAnnotation");

      default:
        this.checkNotUnderscore(id.name);
        return this.flowParseGenericType(startPos, startLoc, id);
    }
  }

  flowParsePrimaryType() {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    const node = this.startNode();
    let tmp;
    let type;
    let isGroupedType = false;
    const oldNoAnonFunctionType = this.state.noAnonFunctionType;

    switch (this.state.type) {
      case 5:
        return this.flowParseObjectType({
          allowStatic: false,
          allowExact: false,
          allowSpread: true,
          allowProto: false,
          allowInexact: true
        });

      case 6:
        return this.flowParseObjectType({
          allowStatic: false,
          allowExact: true,
          allowSpread: true,
          allowProto: false,
          allowInexact: false
        });

      case 0:
        this.state.noAnonFunctionType = false;
        type = this.flowParseTupleType();
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
        return type;

      case 47:
        node.typeParameters = this.flowParseTypeParameterDeclaration();
        this.expect(10);
        tmp = this.flowParseFunctionTypeParams();
        node.params = tmp.params;
        node.rest = tmp.rest;
        node.this = tmp._this;
        this.expect(11);
        this.expect(19);
        node.returnType = this.flowParseType();
        return this.finishNode(node, "FunctionTypeAnnotation");

      case 10:
        this.next();

        if (!this.match(11) && !this.match(21)) {
          if (tokenIsIdentifier(this.state.type) || this.match(78)) {
            const token = this.lookahead().type;
            isGroupedType = token !== 17 && token !== 14;
          } else {
            isGroupedType = true;
          }
        }

        if (isGroupedType) {
          this.state.noAnonFunctionType = false;
          type = this.flowParseType();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;

          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
            this.expect(11);
            return type;
          } else {
            this.eat(12);
          }
        }

        if (type) {
          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
        } else {
          tmp = this.flowParseFunctionTypeParams();
        }

        node.params = tmp.params;
        node.rest = tmp.rest;
        node.this = tmp._this;
        this.expect(11);
        this.expect(19);
        node.returnType = this.flowParseType();
        node.typeParameters = null;
        return this.finishNode(node, "FunctionTypeAnnotation");

      case 129:
        return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");

      case 85:
      case 86:
        node.value = this.match(85);
        this.next();
        return this.finishNode(node, "BooleanLiteralTypeAnnotation");

      case 53:
        if (this.state.value === "-") {
          this.next();

          if (this.match(130)) {
            return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
          }

          if (this.match(131)) {
            return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
          }

          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {
            at: this.state.startLoc
          });
        }

        throw this.unexpected();

      case 130:
        return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");

      case 131:
        return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");

      case 88:
        this.next();
        return this.finishNode(node, "VoidTypeAnnotation");

      case 84:
        this.next();
        return this.finishNode(node, "NullLiteralTypeAnnotation");

      case 78:
        this.next();
        return this.finishNode(node, "ThisTypeAnnotation");

      case 55:
        this.next();
        return this.finishNode(node, "ExistsTypeAnnotation");

      case 87:
        return this.flowParseTypeofType();

      default:
        if (tokenIsKeyword(this.state.type)) {
          const label = tokenLabelName(this.state.type);
          this.next();
          return super.createIdentifier(node, label);
        } else if (tokenIsIdentifier(this.state.type)) {
          if (this.isContextual(125)) {
            return this.flowParseInterfaceType();
          }

          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());
        }

    }

    throw this.unexpected();
  }

  flowParsePostfixType() {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    let type = this.flowParsePrimaryType();
    let seenOptionalIndexedAccess = false;

    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
      const node = this.startNodeAt(startPos, startLoc);
      const optional = this.eat(18);
      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
      this.expect(0);

      if (!optional && this.match(3)) {
        node.elementType = type;
        this.next();
        type = this.finishNode(node, "ArrayTypeAnnotation");
      } else {
        node.objectType = type;
        node.indexType = this.flowParseType();
        this.expect(3);

        if (seenOptionalIndexedAccess) {
          node.optional = optional;
          type = this.finishNode(node, "OptionalIndexedAccessType");
        } else {
          type = this.finishNode(node, "IndexedAccessType");
        }
      }
    }

    return type;
  }

  flowParsePrefixType() {
    const node = this.startNode();

    if (this.eat(17)) {
      node.typeAnnotation = this.flowParsePrefixType();
      return this.finishNode(node, "NullableTypeAnnotation");
    } else {
      return this.flowParsePostfixType();
    }
  }

  flowParseAnonFunctionWithoutParens() {
    const param = this.flowParsePrefixType();

    if (!this.state.noAnonFunctionType && this.eat(19)) {
      const node = this.startNodeAt(param.start, param.loc.start);
      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
      node.rest = null;
      node.this = null;
      node.returnType = this.flowParseType();
      node.typeParameters = null;
      return this.finishNode(node, "FunctionTypeAnnotation");
    }

    return param;
  }

  flowParseIntersectionType() {
    const node = this.startNode();
    this.eat(45);
    const type = this.flowParseAnonFunctionWithoutParens();
    node.types = [type];

    while (this.eat(45)) {
      node.types.push(this.flowParseAnonFunctionWithoutParens());
    }

    return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
  }

  flowParseUnionType() {
    const node = this.startNode();
    this.eat(43);
    const type = this.flowParseIntersectionType();
    node.types = [type];

    while (this.eat(43)) {
      node.types.push(this.flowParseIntersectionType());
    }

    return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
  }

  flowParseType() {
    const oldInType = this.state.inType;
    this.state.inType = true;
    const type = this.flowParseUnionType();
    this.state.inType = oldInType;
    return type;
  }

  flowParseTypeOrImplicitInstantiation() {
    if (this.state.type === 128 && this.state.value === "_") {
      const startPos = this.state.start;
      const startLoc = this.state.startLoc;
      const node = this.parseIdentifier();
      return this.flowParseGenericType(startPos, startLoc, node);
    } else {
      return this.flowParseType();
    }
  }

  flowParseTypeAnnotation() {
    const node = this.startNode();
    node.typeAnnotation = this.flowParseTypeInitialiser();
    return this.finishNode(node, "TypeAnnotation");
  }

  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();

    if (this.match(14)) {
      ident.typeAnnotation = this.flowParseTypeAnnotation();
      this.resetEndLocation(ident);
    }

    return ident;
  }

  typeCastToParameter(node) {
    node.expression.typeAnnotation = node.typeAnnotation;
    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
    return node.expression;
  }

  flowParseVariance() {
    let variance = null;

    if (this.match(53)) {
      variance = this.startNode();

      if (this.state.value === "+") {
        variance.kind = "plus";
      } else {
        variance.kind = "minus";
      }

      this.next();
      this.finishNode(variance, "Variance");
    }

    return variance;
  }

  parseFunctionBody(node, allowExpressionBody, isMethod = false) {
    if (allowExpressionBody) {
      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));
    }

    return super.parseFunctionBody(node, false, isMethod);
  }

  parseFunctionBodyAndFinish(node, type, isMethod = false) {
    if (this.match(14)) {
      const typeNode = this.startNode();
      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
    }

    super.parseFunctionBodyAndFinish(node, type, isMethod);
  }

  parseStatement(context, topLevel) {
    if (this.state.strict && this.isContextual(125)) {
      const lookahead = this.lookahead();

      if (tokenIsKeywordOrIdentifier(lookahead.type)) {
        const node = this.startNode();
        this.next();
        return this.flowParseInterface(node);
      }
    } else if (this.shouldParseEnums() && this.isContextual(122)) {
      const node = this.startNode();
      this.next();
      return this.flowParseEnumDeclaration(node);
    }

    const stmt = super.parseStatement(context, topLevel);

    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {
      this.flowPragma = null;
    }

    return stmt;
  }

  parseExpressionStatement(node, expr) {
    if (expr.type === "Identifier") {
      if (expr.name === "declare") {
        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {
          return this.flowParseDeclare(node);
        }
      } else if (tokenIsIdentifier(this.state.type)) {
        if (expr.name === "interface") {
          return this.flowParseInterface(node);
        } else if (expr.name === "type") {
          return this.flowParseTypeAlias(node);
        } else if (expr.name === "opaque") {
          return this.flowParseOpaqueType(node, false);
        }
      }
    }

    return super.parseExpressionStatement(node, expr);
  }

  shouldParseExportDeclaration() {
    const {
      type
    } = this.state;

    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {
      return !this.state.containsEsc;
    }

    return super.shouldParseExportDeclaration();
  }

  isExportDefaultSpecifier() {
    const {
      type
    } = this.state;

    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 122) {
      return this.state.containsEsc;
    }

    return super.isExportDefaultSpecifier();
  }

  parseExportDefaultExpression() {
    if (this.shouldParseEnums() && this.isContextual(122)) {
      const node = this.startNode();
      this.next();
      return this.flowParseEnumDeclaration(node);
    }

    return super.parseExportDefaultExpression();
  }

  parseConditional(expr, startPos, startLoc, refExpressionErrors) {
    if (!this.match(17)) return expr;

    if (this.state.maybeInArrowParameters) {
      const nextCh = this.lookaheadCharCode();

      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
        this.setOptionalParametersError(refExpressionErrors);
        return expr;
      }
    }

    this.expect(17);
    const state = this.state.clone();
    const originalNoArrowAt = this.state.noArrowAt;
    const node = this.startNodeAt(startPos, startLoc);
    let {
      consequent,
      failed
    } = this.tryParseConditionalConsequent();
    let [valid, invalid] = this.getArrowLikeExpressions(consequent);

    if (failed || invalid.length > 0) {
      const noArrowAt = [...originalNoArrowAt];

      if (invalid.length > 0) {
        this.state = state;
        this.state.noArrowAt = noArrowAt;

        for (let i = 0; i < invalid.length; i++) {
          noArrowAt.push(invalid[i].start);
        }

        ({
          consequent,
          failed
        } = this.tryParseConditionalConsequent());
        [valid, invalid] = this.getArrowLikeExpressions(consequent);
      }

      if (failed && valid.length > 1) {
        this.raise(FlowErrors.AmbiguousConditionalArrow, {
          at: state.startLoc
        });
      }

      if (failed && valid.length === 1) {
        this.state = state;
        noArrowAt.push(valid[0].start);
        this.state.noArrowAt = noArrowAt;
        ({
          consequent,
          failed
        } = this.tryParseConditionalConsequent());
      }
    }

    this.getArrowLikeExpressions(consequent, true);
    this.state.noArrowAt = originalNoArrowAt;
    this.expect(14);
    node.test = expr;
    node.consequent = consequent;
    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));
    return this.finishNode(node, "ConditionalExpression");
  }

  tryParseConditionalConsequent() {
    this.state.noArrowParamsConversionAt.push(this.state.start);
    const consequent = this.parseMaybeAssignAllowIn();
    const failed = !this.match(14);
    this.state.noArrowParamsConversionAt.pop();
    return {
      consequent,
      failed
    };
  }

  getArrowLikeExpressions(node, disallowInvalid) {
    const stack = [node];
    const arrows = [];

    while (stack.length !== 0) {
      const node = stack.pop();

      if (node.type === "ArrowFunctionExpression") {
        if (node.typeParameters || !node.returnType) {
          this.finishArrowValidation(node);
        } else {
          arrows.push(node);
        }

        stack.push(node.body);
      } else if (node.type === "ConditionalExpression") {
        stack.push(node.consequent);
        stack.push(node.alternate);
      }
    }

    if (disallowInvalid) {
      arrows.forEach(node => this.finishArrowValidation(node));
      return [arrows, []];
    }

    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));
  }

  finishArrowValidation(node) {
    var _node$extra;

    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
    super.checkParams(node, false, true);
    this.scope.exit();
  }

  forwardNoArrowParamsConversionAt(node, parse) {
    let result;

    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
      this.state.noArrowParamsConversionAt.push(this.state.start);
      result = parse();
      this.state.noArrowParamsConversionAt.pop();
    } else {
      result = parse();
    }

    return result;
  }

  parseParenItem(node, startPos, startLoc) {
    node = super.parseParenItem(node, startPos, startLoc);

    if (this.eat(17)) {
      node.optional = true;
      this.resetEndLocation(node);
    }

    if (this.match(14)) {
      const typeCastNode = this.startNodeAt(startPos, startLoc);
      typeCastNode.expression = node;
      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
      return this.finishNode(typeCastNode, "TypeCastExpression");
    }

    return node;
  }

  assertModuleNodeAllowed(node) {
    if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") {
      return;
    }

    super.assertModuleNodeAllowed(node);
  }

  parseExport(node) {
    const decl = super.parseExport(node);

    if (decl.type === "ExportNamedDeclaration" || decl.type === "ExportAllDeclaration") {
      decl.exportKind = decl.exportKind || "value";
    }

    return decl;
  }

  parseExportDeclaration(node) {
    if (this.isContextual(126)) {
      node.exportKind = "type";
      const declarationNode = this.startNode();
      this.next();

      if (this.match(5)) {
        node.specifiers = this.parseExportSpecifiers(true);
        this.parseExportFrom(node);
        return null;
      } else {
        return this.flowParseTypeAlias(declarationNode);
      }
    } else if (this.isContextual(127)) {
      node.exportKind = "type";
      const declarationNode = this.startNode();
      this.next();
      return this.flowParseOpaqueType(declarationNode, false);
    } else if (this.isContextual(125)) {
      node.exportKind = "type";
      const declarationNode = this.startNode();
      this.next();
      return this.flowParseInterface(declarationNode);
    } else if (this.shouldParseEnums() && this.isContextual(122)) {
      node.exportKind = "value";
      const declarationNode = this.startNode();
      this.next();
      return this.flowParseEnumDeclaration(declarationNode);
    } else {
      return super.parseExportDeclaration(node);
    }
  }

  eatExportStar(node) {
    if (super.eatExportStar(...arguments)) return true;

    if (this.isContextual(126) && this.lookahead().type === 55) {
      node.exportKind = "type";
      this.next();
      this.next();
      return true;
    }

    return false;
  }

  maybeParseExportNamespaceSpecifier(node) {
    const {
      startLoc
    } = this.state;
    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);

    if (hasNamespace && node.exportKind === "type") {
      this.unexpected(startLoc);
    }

    return hasNamespace;
  }

  parseClassId(node, isStatement, optionalId) {
    super.parseClassId(node, isStatement, optionalId);

    if (this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    }
  }

  parseClassMember(classBody, member, state) {
    const {
      startLoc
    } = this.state;

    if (this.isContextual(121)) {
      if (this.parseClassMemberFromModifier(classBody, member)) {
        return;
      }

      member.declare = true;
    }

    super.parseClassMember(classBody, member, state);

    if (member.declare) {
      if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
        this.raise(FlowErrors.DeclareClassElement, {
          at: startLoc
        });
      } else if (member.value) {
        this.raise(FlowErrors.DeclareClassFieldInitializer, {
          at: member.value
        });
      }
    }
  }

  isIterator(word) {
    return word === "iterator" || word === "asyncIterator";
  }

  readIterator() {
    const word = super.readWord1();
    const fullWord = "@@" + word;

    if (!this.isIterator(word) || !this.state.inType) {
      this.raise(Errors.InvalidIdentifier, {
        at: this.state.curPosition(),
        identifierName: fullWord
      });
    }

    this.finishToken(128, fullWord);
  }

  getTokenFromCode(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);

    if (code === 123 && next === 124) {
      return this.finishOp(6, 2);
    } else if (this.state.inType && (code === 62 || code === 60)) {
      return this.finishOp(code === 62 ? 48 : 47, 1);
    } else if (this.state.inType && code === 63) {
      if (next === 46) {
        return this.finishOp(18, 2);
      }

      return this.finishOp(17, 1);
    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {
      this.state.pos += 2;
      return this.readIterator();
    } else {
      return super.getTokenFromCode(code);
    }
  }

  isAssignable(node, isBinding) {
    if (node.type === "TypeCastExpression") {
      return this.isAssignable(node.expression, isBinding);
    } else {
      return super.isAssignable(node, isBinding);
    }
  }

  toAssignable(node, isLHS = false) {
    if (!isLHS && node.type === "AssignmentExpression" && node.left.type === "TypeCastExpression") {
      node.left = this.typeCastToParameter(node.left);
    }

    super.toAssignable(...arguments);
  }

  toAssignableList(exprList, trailingCommaLoc, isLHS) {
    for (let i = 0; i < exprList.length; i++) {
      const expr = exprList[i];

      if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
        exprList[i] = this.typeCastToParameter(expr);
      }
    }

    super.toAssignableList(exprList, trailingCommaLoc, isLHS);
  }

  toReferencedList(exprList, isParenthesizedExpr) {
    for (let i = 0; i < exprList.length; i++) {
      var _expr$extra;

      const expr = exprList[i];

      if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
        this.raise(FlowErrors.TypeCastInPattern, {
          at: expr.typeAnnotation
        });
      }
    }

    return exprList;
  }

  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);

    if (canBePattern && !this.state.maybeInArrowParameters) {
      this.toReferencedList(node.elements);
    }

    return node;
  }

  isValidLVal(type, ...rest) {
    return type === "TypeCastExpression" || super.isValidLVal(type, ...rest);
  }

  parseClassProperty(node) {
    if (this.match(14)) {
      node.typeAnnotation = this.flowParseTypeAnnotation();
    }

    return super.parseClassProperty(node);
  }

  parseClassPrivateProperty(node) {
    if (this.match(14)) {
      node.typeAnnotation = this.flowParseTypeAnnotation();
    }

    return super.parseClassPrivateProperty(node);
  }

  isClassMethod() {
    return this.match(47) || super.isClassMethod();
  }

  isClassProperty() {
    return this.match(14) || super.isClassProperty();
  }

  isNonstaticConstructor(method) {
    return !this.match(14) && super.isNonstaticConstructor(method);
  }

  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
    if (method.variance) {
      this.unexpected(method.variance.loc.start);
    }

    delete method.variance;

    if (this.match(47)) {
      method.typeParameters = this.flowParseTypeParameterDeclaration();
    }

    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);

    if (method.params && isConstructor) {
      const params = method.params;

      if (params.length > 0 && this.isThisParam(params[0])) {
        this.raise(FlowErrors.ThisParamBannedInConstructor, {
          at: method
        });
      }
    } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
      const params = method.value.params;

      if (params.length > 0 && this.isThisParam(params[0])) {
        this.raise(FlowErrors.ThisParamBannedInConstructor, {
          at: method
        });
      }
    }
  }

  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
    if (method.variance) {
      this.unexpected(method.variance.loc.start);
    }

    delete method.variance;

    if (this.match(47)) {
      method.typeParameters = this.flowParseTypeParameterDeclaration();
    }

    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
  }

  parseClassSuper(node) {
    super.parseClassSuper(node);

    if (node.superClass && this.match(47)) {
      node.superTypeParameters = this.flowParseTypeParameterInstantiation();
    }

    if (this.isContextual(110)) {
      this.next();
      const implemented = node.implements = [];

      do {
        const node = this.startNode();
        node.id = this.flowParseRestrictedIdentifier(true);

        if (this.match(47)) {
          node.typeParameters = this.flowParseTypeParameterInstantiation();
        } else {
          node.typeParameters = null;
        }

        implemented.push(this.finishNode(node, "ClassImplements"));
      } while (this.eat(12));
    }
  }

  checkGetterSetterParams(method) {
    super.checkGetterSetterParams(method);
    const params = this.getObjectOrClassMethodParams(method);

    if (params.length > 0) {
      const param = params[0];

      if (this.isThisParam(param) && method.kind === "get") {
        this.raise(FlowErrors.GetterMayNotHaveThisParam, {
          at: param
        });
      } else if (this.isThisParam(param)) {
        this.raise(FlowErrors.SetterMayNotHaveThisParam, {
          at: param
        });
      }
    }
  }

  parsePropertyNamePrefixOperator(node) {
    node.variance = this.flowParseVariance();
  }

  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
    if (prop.variance) {
      this.unexpected(prop.variance.loc.start);
    }

    delete prop.variance;
    let typeParameters;

    if (this.match(47) && !isAccessor) {
      typeParameters = this.flowParseTypeParameterDeclaration();
      if (!this.match(10)) this.unexpected();
    }

    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);

    if (typeParameters) {
      (prop.value || prop).typeParameters = typeParameters;
    }
  }

  parseAssignableListItemTypes(param) {
    if (this.eat(17)) {
      if (param.type !== "Identifier") {
        this.raise(FlowErrors.PatternIsOptional, {
          at: param
        });
      }

      if (this.isThisParam(param)) {
        this.raise(FlowErrors.ThisParamMayNotBeOptional, {
          at: param
        });
      }

      param.optional = true;
    }

    if (this.match(14)) {
      param.typeAnnotation = this.flowParseTypeAnnotation();
    } else if (this.isThisParam(param)) {
      this.raise(FlowErrors.ThisParamAnnotationRequired, {
        at: param
      });
    }

    if (this.match(29) && this.isThisParam(param)) {
      this.raise(FlowErrors.ThisParamNoDefault, {
        at: param
      });
    }

    this.resetEndLocation(param);
    return param;
  }

  parseMaybeDefault(startPos, startLoc, left) {
    const node = super.parseMaybeDefault(startPos, startLoc, left);

    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
      this.raise(FlowErrors.TypeBeforeInitializer, {
        at: node.typeAnnotation
      });
    }

    return node;
  }

  shouldParseDefaultImport(node) {
    if (!hasTypeImportKind(node)) {
      return super.shouldParseDefaultImport(node);
    }

    return isMaybeDefaultImport(this.state.type);
  }

  parseImportSpecifierLocal(node, specifier, type) {
    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
    node.specifiers.push(this.finishImportSpecifier(specifier, type));
  }

  maybeParseDefaultImportSpecifier(node) {
    node.importKind = "value";
    let kind = null;

    if (this.match(87)) {
      kind = "typeof";
    } else if (this.isContextual(126)) {
      kind = "type";
    }

    if (kind) {
      const lh = this.lookahead();
      const {
        type
      } = lh;

      if (kind === "type" && type === 55) {
        this.unexpected(null, lh.type);
      }

      if (isMaybeDefaultImport(type) || type === 5 || type === 55) {
        this.next();
        node.importKind = kind;
      }
    }

    return super.maybeParseDefaultImportSpecifier(node);
  }

  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
    const firstIdent = specifier.imported;
    let specifierTypeKind = null;

    if (firstIdent.type === "Identifier") {
      if (firstIdent.name === "type") {
        specifierTypeKind = "type";
      } else if (firstIdent.name === "typeof") {
        specifierTypeKind = "typeof";
      }
    }

    let isBinding = false;

    if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
      const as_ident = this.parseIdentifier(true);

      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
        specifier.imported = as_ident;
        specifier.importKind = specifierTypeKind;
        specifier.local = cloneIdentifier(as_ident);
      } else {
        specifier.imported = firstIdent;
        specifier.importKind = null;
        specifier.local = this.parseIdentifier();
      }
    } else {
      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
        specifier.imported = this.parseIdentifier(true);
        specifier.importKind = specifierTypeKind;
      } else {
        if (importedIsString) {
          throw this.raise(Errors.ImportBindingIsString, {
            at: specifier,
            importName: firstIdent.value
          });
        }

        specifier.imported = firstIdent;
        specifier.importKind = null;
      }

      if (this.eatContextual(93)) {
        specifier.local = this.parseIdentifier();
      } else {
        isBinding = true;
        specifier.local = cloneIdentifier(specifier.imported);
      }
    }

    const specifierIsTypeImport = hasTypeImportKind(specifier);

    if (isInTypeOnlyImport && specifierIsTypeImport) {
      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {
        at: specifier
      });
    }

    if (isInTypeOnlyImport || specifierIsTypeImport) {
      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
    }

    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {
      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
    }

    return this.finishImportSpecifier(specifier, "ImportSpecifier");
  }

  parseBindingAtom() {
    switch (this.state.type) {
      case 78:
        return this.parseIdentifier(true);

      default:
        return super.parseBindingAtom();
    }
  }

  parseFunctionParams(node, allowModifiers) {
    const kind = node.kind;

    if (kind !== "get" && kind !== "set" && this.match(47)) {
      node.typeParameters = this.flowParseTypeParameterDeclaration();
    }

    super.parseFunctionParams(node, allowModifiers);
  }

  parseVarId(decl, kind) {
    super.parseVarId(decl, kind);

    if (this.match(14)) {
      decl.id.typeAnnotation = this.flowParseTypeAnnotation();
      this.resetEndLocation(decl.id);
    }
  }

  parseAsyncArrowFromCallExpression(node, call) {
    if (this.match(14)) {
      const oldNoAnonFunctionType = this.state.noAnonFunctionType;
      this.state.noAnonFunctionType = true;
      node.returnType = this.flowParseTypeAnnotation();
      this.state.noAnonFunctionType = oldNoAnonFunctionType;
    }

    return super.parseAsyncArrowFromCallExpression(node, call);
  }

  shouldParseAsyncArrow() {
    return this.match(14) || super.shouldParseAsyncArrow();
  }

  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
    var _jsx;

    let state = null;
    let jsx;

    if (this.hasPlugin("jsx") && (this.match(138) || this.match(47))) {
      state = this.state.clone();
      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
      if (!jsx.error) return jsx.node;
      const {
        context
      } = this.state;
      const currentContext = context[context.length - 1];

      if (currentContext === types.j_oTag || currentContext === types.j_expr) {
        context.pop();
      }
    }

    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {
      var _jsx2, _jsx3;

      state = state || this.state.clone();
      let typeParameters;
      const arrow = this.tryParse(abort => {
        var _arrowExpression$extr;

        typeParameters = this.flowParseTypeParameterDeclaration();
        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
          this.resetStartLocationFromNode(result, typeParameters);
          return result;
        });
        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();
        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);
        if (expr.type !== "ArrowFunctionExpression") abort();
        expr.typeParameters = typeParameters;
        this.resetStartLocationFromNode(expr, typeParameters);
        return arrowExpression;
      }, state);
      let arrowExpression = null;

      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
        if (!arrow.error && !arrow.aborted) {
          if (arrow.node.async) {
            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {
              at: typeParameters
            });
          }

          return arrow.node;
        }

        arrowExpression = arrow.node;
      }

      if ((_jsx2 = jsx) != null && _jsx2.node) {
        this.state = jsx.failState;
        return jsx.node;
      }

      if (arrowExpression) {
        this.state = arrow.failState;
        return arrowExpression;
      }

      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
      if (arrow.thrown) throw arrow.error;
      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {
        at: typeParameters
      });
    }

    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
  }

  parseArrow(node) {
    if (this.match(14)) {
      const result = this.tryParse(() => {
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = true;
        const typeNode = this.startNode();
        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
        if (this.canInsertSemicolon()) this.unexpected();
        if (!this.match(19)) this.unexpected();
        return typeNode;
      });
      if (result.thrown) return null;
      if (result.error) this.state = result.failState;
      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
    }

    return super.parseArrow(node);
  }

  shouldParseArrow(params) {
    return this.match(14) || super.shouldParseArrow(params);
  }

  setArrowFunctionParameters(node, params) {
    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
      node.params = params;
    } else {
      super.setArrowFunctionParameters(node, params);
    }
  }

  checkParams(node, allowDuplicates, isArrowFunction) {
    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
      return;
    }

    for (let i = 0; i < node.params.length; i++) {
      if (this.isThisParam(node.params[i]) && i > 0) {
        this.raise(FlowErrors.ThisParamMustBeFirst, {
          at: node.params[i]
        });
      }
    }

    return super.checkParams(...arguments);
  }

  parseParenAndDistinguishExpression(canBeArrow) {
    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
  }

  parseSubscripts(base, startPos, startLoc, noCalls) {
    if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.indexOf(startPos) !== -1) {
      this.next();
      const node = this.startNodeAt(startPos, startLoc);
      node.callee = base;
      node.arguments = this.parseCallExpressionArguments(11, false);
      base = this.finishNode(node, "CallExpression");
    } else if (base.type === "Identifier" && base.name === "async" && this.match(47)) {
      const state = this.state.clone();
      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);
      if (!arrow.error && !arrow.aborted) return arrow.node;
      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);
      if (result.node && !result.error) return result.node;

      if (arrow.node) {
        this.state = arrow.failState;
        return arrow.node;
      }

      if (result.node) {
        this.state = result.failState;
        return result.node;
      }

      throw arrow.error || result.error;
    }

    return super.parseSubscripts(base, startPos, startLoc, noCalls);
  }

  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {
    if (this.match(18) && this.isLookaheadToken_lt()) {
      subscriptState.optionalChainMember = true;

      if (noCalls) {
        subscriptState.stop = true;
        return base;
      }

      this.next();
      const node = this.startNodeAt(startPos, startLoc);
      node.callee = base;
      node.typeArguments = this.flowParseTypeParameterInstantiation();
      this.expect(10);
      node.arguments = this.parseCallExpressionArguments(11, false);
      node.optional = true;
      return this.finishCallExpression(node, true);
    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {
      const node = this.startNodeAt(startPos, startLoc);
      node.callee = base;
      const result = this.tryParse(() => {
        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
        this.expect(10);
        node.arguments = this.parseCallExpressionArguments(11, false);
        if (subscriptState.optionalChainMember) node.optional = false;
        return this.finishCallExpression(node, subscriptState.optionalChainMember);
      });

      if (result.node) {
        if (result.error) this.state = result.failState;
        return result.node;
      }
    }

    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);
  }

  parseNewCallee(node) {
    super.parseNewCallee(node);
    let targs = null;

    if (this.shouldParseTypes() && this.match(47)) {
      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
    }

    node.typeArguments = targs;
  }

  parseAsyncArrowWithTypeParameters(startPos, startLoc) {
    const node = this.startNodeAt(startPos, startLoc);
    this.parseFunctionParams(node);
    if (!this.parseArrow(node)) return;
    return this.parseArrowExpression(node, undefined, true);
  }

  readToken_mult_modulo(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);

    if (code === 42 && next === 47 && this.state.hasFlowComment) {
      this.state.hasFlowComment = false;
      this.state.pos += 2;
      this.nextToken();
      return;
    }

    super.readToken_mult_modulo(code);
  }

  readToken_pipe_amp(code) {
    const next = this.input.charCodeAt(this.state.pos + 1);

    if (code === 124 && next === 125) {
      this.finishOp(9, 2);
      return;
    }

    super.readToken_pipe_amp(code);
  }

  parseTopLevel(file, program) {
    const fileNode = super.parseTopLevel(file, program);

    if (this.state.hasFlowComment) {
      this.raise(FlowErrors.UnterminatedFlowComment, {
        at: this.state.curPosition()
      });
    }

    return fileNode;
  }

  skipBlockComment() {
    if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
      if (this.state.hasFlowComment) {
        throw this.raise(FlowErrors.NestedFlowComment, {
          at: this.state.startLoc
        });
      }

      this.hasFlowCommentCompletion();
      this.state.pos += this.skipFlowComment();
      this.state.hasFlowComment = true;
      return;
    }

    if (this.state.hasFlowComment) {
      const end = this.input.indexOf("*-/", this.state.pos + 2);

      if (end === -1) {
        throw this.raise(Errors.UnterminatedComment, {
          at: this.state.curPosition()
        });
      }

      this.state.pos = end + 2 + 3;
      return;
    }

    return super.skipBlockComment();
  }

  skipFlowComment() {
    const {
      pos
    } = this.state;
    let shiftToFirstNonWhiteSpace = 2;

    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
      shiftToFirstNonWhiteSpace++;
    }

    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);

    if (ch2 === 58 && ch3 === 58) {
      return shiftToFirstNonWhiteSpace + 2;
    }

    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
      return shiftToFirstNonWhiteSpace + 12;
    }

    if (ch2 === 58 && ch3 !== 58) {
      return shiftToFirstNonWhiteSpace;
    }

    return false;
  }

  hasFlowCommentCompletion() {
    const end = this.input.indexOf("*/", this.state.pos);

    if (end === -1) {
      throw this.raise(Errors.UnterminatedComment, {
        at: this.state.curPosition()
      });
    }
  }

  flowEnumErrorBooleanMemberNotInitialized(loc, {
    enumName,
    memberName
  }) {
    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {
      at: loc,
      memberName,
      enumName
    });
  }

  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({
      at: loc
    }, enumContext));
  }

  flowEnumErrorNumberMemberNotInitialized(loc, {
    enumName,
    memberName
  }) {
    this.raise(FlowErrors.EnumNumberMemberNotInitialized, {
      at: loc,
      enumName,
      memberName
    });
  }

  flowEnumErrorStringMemberInconsistentlyInitailized(node, {
    enumName
  }) {
    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {
      at: node,
      enumName
    });
  }

  flowEnumMemberInit() {
    const startLoc = this.state.startLoc;

    const endOfInit = () => this.match(12) || this.match(8);

    switch (this.state.type) {
      case 130:
        {
          const literal = this.parseNumericLiteral(this.state.value);

          if (endOfInit()) {
            return {
              type: "number",
              loc: literal.loc.start,
              value: literal
            };
          }

          return {
            type: "invalid",
            loc: startLoc
          };
        }

      case 129:
        {
          const literal = this.parseStringLiteral(this.state.value);

          if (endOfInit()) {
            return {
              type: "string",
              loc: literal.loc.start,
              value: literal
            };
          }

          return {
            type: "invalid",
            loc: startLoc
          };
        }

      case 85:
      case 86:
        {
          const literal = this.parseBooleanLiteral(this.match(85));

          if (endOfInit()) {
            return {
              type: "boolean",
              loc: literal.loc.start,
              value: literal
            };
          }

          return {
            type: "invalid",
            loc: startLoc
          };
        }

      default:
        return {
          type: "invalid",
          loc: startLoc
        };
    }
  }

  flowEnumMemberRaw() {
    const loc = this.state.startLoc;
    const id = this.parseIdentifier(true);
    const init = this.eat(29) ? this.flowEnumMemberInit() : {
      type: "none",
      loc
    };
    return {
      id,
      init
    };
  }

  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
    const {
      explicitType
    } = context;

    if (explicitType === null) {
      return;
    }

    if (explicitType !== expectedType) {
      this.flowEnumErrorInvalidMemberInitializer(loc, context);
    }
  }

  flowEnumMembers({
    enumName,
    explicitType
  }) {
    const seenNames = new Set();
    const members = {
      booleanMembers: [],
      numberMembers: [],
      stringMembers: [],
      defaultedMembers: []
    };
    let hasUnknownMembers = false;

    while (!this.match(8)) {
      if (this.eat(21)) {
        hasUnknownMembers = true;
        break;
      }

      const memberNode = this.startNode();
      const {
        id,
        init
      } = this.flowEnumMemberRaw();
      const memberName = id.name;

      if (memberName === "") {
        continue;
      }

      if (/^[a-z]/.test(memberName)) {
        this.raise(FlowErrors.EnumInvalidMemberName, {
          at: id,
          memberName,
          suggestion: memberName[0].toUpperCase() + memberName.slice(1),
          enumName
        });
      }

      if (seenNames.has(memberName)) {
        this.raise(FlowErrors.EnumDuplicateMemberName, {
          at: id,
          memberName,
          enumName
        });
      }

      seenNames.add(memberName);
      const context = {
        enumName,
        explicitType,
        memberName
      };
      memberNode.id = id;

      switch (init.type) {
        case "boolean":
          {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean");
            memberNode.init = init.value;
            members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
            break;
          }

        case "number":
          {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number");
            memberNode.init = init.value;
            members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
            break;
          }

        case "string":
          {
            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string");
            memberNode.init = init.value;
            members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
            break;
          }

        case "invalid":
          {
            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
          }

        case "none":
          {
            switch (explicitType) {
              case "boolean":
                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                break;

              case "number":
                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                break;

              default:
                members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
            }
          }
      }

      if (!this.match(8)) {
        this.expect(12);
      }
    }

    return {
      members,
      hasUnknownMembers
    };
  }

  flowEnumStringMembers(initializedMembers, defaultedMembers, {
    enumName
  }) {
    if (initializedMembers.length === 0) {
      return defaultedMembers;
    } else if (defaultedMembers.length === 0) {
      return initializedMembers;
    } else if (defaultedMembers.length > initializedMembers.length) {
      for (const member of initializedMembers) {
        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {
          enumName
        });
      }

      return defaultedMembers;
    } else {
      for (const member of defaultedMembers) {
        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {
          enumName
        });
      }

      return initializedMembers;
    }
  }

  flowEnumParseExplicitType({
    enumName
  }) {
    if (!this.eatContextual(101)) return null;

    if (!tokenIsIdentifier(this.state.type)) {
      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {
        at: this.state.startLoc,
        enumName
      });
    }

    const {
      value
    } = this.state;
    this.next();

    if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
      this.raise(FlowErrors.EnumInvalidExplicitType, {
        at: this.state.startLoc,
        enumName,
        invalidEnumType: value
      });
    }

    return value;
  }

  flowEnumBody(node, id) {
    const enumName = id.name;
    const nameLoc = id.loc.start;
    const explicitType = this.flowEnumParseExplicitType({
      enumName
    });
    this.expect(5);
    const {
      members,
      hasUnknownMembers
    } = this.flowEnumMembers({
      enumName,
      explicitType
    });
    node.hasUnknownMembers = hasUnknownMembers;

    switch (explicitType) {
      case "boolean":
        node.explicitType = true;
        node.members = members.booleanMembers;
        this.expect(8);
        return this.finishNode(node, "EnumBooleanBody");

      case "number":
        node.explicitType = true;
        node.members = members.numberMembers;
        this.expect(8);
        return this.finishNode(node, "EnumNumberBody");

      case "string":
        node.explicitType = true;
        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
          enumName
        });
        this.expect(8);
        return this.finishNode(node, "EnumStringBody");

      case "symbol":
        node.members = members.defaultedMembers;
        this.expect(8);
        return this.finishNode(node, "EnumSymbolBody");

      default:
        {
          const empty = () => {
            node.members = [];
            this.expect(8);
            return this.finishNode(node, "EnumStringBody");
          };

          node.explicitType = false;
          const boolsLen = members.booleanMembers.length;
          const numsLen = members.numberMembers.length;
          const strsLen = members.stringMembers.length;
          const defaultedLen = members.defaultedMembers.length;

          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
            return empty();
          } else if (!boolsLen && !numsLen) {
            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
              enumName
            });
            this.expect(8);
            return this.finishNode(node, "EnumStringBody");
          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
            for (const member of members.defaultedMembers) {
              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
                enumName,
                memberName: member.id.name
              });
            }

            node.members = members.booleanMembers;
            this.expect(8);
            return this.finishNode(node, "EnumBooleanBody");
          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
            for (const member of members.defaultedMembers) {
              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
                enumName,
                memberName: member.id.name
              });
            }

            node.members = members.numberMembers;
            this.expect(8);
            return this.finishNode(node, "EnumNumberBody");
          } else {
            this.raise(FlowErrors.EnumInconsistentMemberValues, {
              at: nameLoc,
              enumName
            });
            return empty();
          }
        }
    }
  }

  flowParseEnumDeclaration(node) {
    const id = this.parseIdentifier();
    node.id = id;
    node.body = this.flowEnumBody(this.startNode(), id);
    return this.finishNode(node, "EnumDeclaration");
  }

  isLookaheadToken_lt() {
    const next = this.nextTokenStart();

    if (this.input.charCodeAt(next) === 60) {
      const afterNext = this.input.charCodeAt(next + 1);
      return afterNext !== 60 && afterNext !== 61;
    }

    return false;
  }

  maybeUnwrapTypeCastExpression(node) {
    return node.type === "TypeCastExpression" ? node.expression : node;
  }

});

const entities = {
  __proto__: null,
  quot: "\u0022",
  amp: "&",
  apos: "\u0027",
  lt: "<",
  gt: ">",
  nbsp: "\u00A0",
  iexcl: "\u00A1",
  cent: "\u00A2",
  pound: "\u00A3",
  curren: "\u00A4",
  yen: "\u00A5",
  brvbar: "\u00A6",
  sect: "\u00A7",
  uml: "\u00A8",
  copy: "\u00A9",
  ordf: "\u00AA",
  laquo: "\u00AB",
  not: "\u00AC",
  shy: "\u00AD",
  reg: "\u00AE",
  macr: "\u00AF",
  deg: "\u00B0",
  plusmn: "\u00B1",
  sup2: "\u00B2",
  sup3: "\u00B3",
  acute: "\u00B4",
  micro: "\u00B5",
  para: "\u00B6",
  middot: "\u00B7",
  cedil: "\u00B8",
  sup1: "\u00B9",
  ordm: "\u00BA",
  raquo: "\u00BB",
  frac14: "\u00BC",
  frac12: "\u00BD",
  frac34: "\u00BE",
  iquest: "\u00BF",
  Agrave: "\u00C0",
  Aacute: "\u00C1",
  Acirc: "\u00C2",
  Atilde: "\u00C3",
  Auml: "\u00C4",
  Aring: "\u00C5",
  AElig: "\u00C6",
  Ccedil: "\u00C7",
  Egrave: "\u00C8",
  Eacute: "\u00C9",
  Ecirc: "\u00CA",
  Euml: "\u00CB",
  Igrave: "\u00CC",
  Iacute: "\u00CD",
  Icirc: "\u00CE",
  Iuml: "\u00CF",
  ETH: "\u00D0",
  Ntilde: "\u00D1",
  Ograve: "\u00D2",
  Oacute: "\u00D3",
  Ocirc: "\u00D4",
  Otilde: "\u00D5",
  Ouml: "\u00D6",
  times: "\u00D7",
  Oslash: "\u00D8",
  Ugrave: "\u00D9",
  Uacute: "\u00DA",
  Ucirc: "\u00DB",
  Uuml: "\u00DC",
  Yacute: "\u00DD",
  THORN: "\u00DE",
  szlig: "\u00DF",
  agrave: "\u00E0",
  aacute: "\u00E1",
  acirc: "\u00E2",
  atilde: "\u00E3",
  auml: "\u00E4",
  aring: "\u00E5",
  aelig: "\u00E6",
  ccedil: "\u00E7",
  egrave: "\u00E8",
  eacute: "\u00E9",
  ecirc: "\u00EA",
  euml: "\u00EB",
  igrave: "\u00EC",
  iacute: "\u00ED",
  icirc: "\u00EE",
  iuml: "\u00EF",
  eth: "\u00F0",
  ntilde: "\u00F1",
  ograve: "\u00F2",
  oacute: "\u00F3",
  ocirc: "\u00F4",
  otilde: "\u00F5",
  ouml: "\u00F6",
  divide: "\u00F7",
  oslash: "\u00F8",
  ugrave: "\u00F9",
  uacute: "\u00FA",
  ucirc: "\u00FB",
  uuml: "\u00FC",
  yacute: "\u00FD",
  thorn: "\u00FE",
  yuml: "\u00FF",
  OElig: "\u0152",
  oelig: "\u0153",
  Scaron: "\u0160",
  scaron: "\u0161",
  Yuml: "\u0178",
  fnof: "\u0192",
  circ: "\u02C6",
  tilde: "\u02DC",
  Alpha: "\u0391",
  Beta: "\u0392",
  Gamma: "\u0393",
  Delta: "\u0394",
  Epsilon: "\u0395",
  Zeta: "\u0396",
  Eta: "\u0397",
  Theta: "\u0398",
  Iota: "\u0399",
  Kappa: "\u039A",
  Lambda: "\u039B",
  Mu: "\u039C",
  Nu: "\u039D",
  Xi: "\u039E",
  Omicron: "\u039F",
  Pi: "\u03A0",
  Rho: "\u03A1",
  Sigma: "\u03A3",
  Tau: "\u03A4",
  Upsilon: "\u03A5",
  Phi: "\u03A6",
  Chi: "\u03A7",
  Psi: "\u03A8",
  Omega: "\u03A9",
  alpha: "\u03B1",
  beta: "\u03B2",
  gamma: "\u03B3",
  delta: "\u03B4",
  epsilon: "\u03B5",
  zeta: "\u03B6",
  eta: "\u03B7",
  theta: "\u03B8",
  iota: "\u03B9",
  kappa: "\u03BA",
  lambda: "\u03BB",
  mu: "\u03BC",
  nu: "\u03BD",
  xi: "\u03BE",
  omicron: "\u03BF",
  pi: "\u03C0",
  rho: "\u03C1",
  sigmaf: "\u03C2",
  sigma: "\u03C3",
  tau: "\u03C4",
  upsilon: "\u03C5",
  phi: "\u03C6",
  chi: "\u03C7",
  psi: "\u03C8",
  omega: "\u03C9",
  thetasym: "\u03D1",
  upsih: "\u03D2",
  piv: "\u03D6",
  ensp: "\u2002",
  emsp: "\u2003",
  thinsp: "\u2009",
  zwnj: "\u200C",
  zwj: "\u200D",
  lrm: "\u200E",
  rlm: "\u200F",
  ndash: "\u2013",
  mdash: "\u2014",
  lsquo: "\u2018",
  rsquo: "\u2019",
  sbquo: "\u201A",
  ldquo: "\u201C",
  rdquo: "\u201D",
  bdquo: "\u201E",
  dagger: "\u2020",
  Dagger: "\u2021",
  bull: "\u2022",
  hellip: "\u2026",
  permil: "\u2030",
  prime: "\u2032",
  Prime: "\u2033",
  lsaquo: "\u2039",
  rsaquo: "\u203A",
  oline: "\u203E",
  frasl: "\u2044",
  euro: "\u20AC",
  image: "\u2111",
  weierp: "\u2118",
  real: "\u211C",
  trade: "\u2122",
  alefsym: "\u2135",
  larr: "\u2190",
  uarr: "\u2191",
  rarr: "\u2192",
  darr: "\u2193",
  harr: "\u2194",
  crarr: "\u21B5",
  lArr: "\u21D0",
  uArr: "\u21D1",
  rArr: "\u21D2",
  dArr: "\u21D3",
  hArr: "\u21D4",
  forall: "\u2200",
  part: "\u2202",
  exist: "\u2203",
  empty: "\u2205",
  nabla: "\u2207",
  isin: "\u2208",
  notin: "\u2209",
  ni: "\u220B",
  prod: "\u220F",
  sum: "\u2211",
  minus: "\u2212",
  lowast: "\u2217",
  radic: "\u221A",
  prop: "\u221D",
  infin: "\u221E",
  ang: "\u2220",
  and: "\u2227",
  or: "\u2228",
  cap: "\u2229",
  cup: "\u222A",
  int: "\u222B",
  there4: "\u2234",
  sim: "\u223C",
  cong: "\u2245",
  asymp: "\u2248",
  ne: "\u2260",
  equiv: "\u2261",
  le: "\u2264",
  ge: "\u2265",
  sub: "\u2282",
  sup: "\u2283",
  nsub: "\u2284",
  sube: "\u2286",
  supe: "\u2287",
  oplus: "\u2295",
  otimes: "\u2297",
  perp: "\u22A5",
  sdot: "\u22C5",
  lceil: "\u2308",
  rceil: "\u2309",
  lfloor: "\u230A",
  rfloor: "\u230B",
  lang: "\u2329",
  rang: "\u232A",
  loz: "\u25CA",
  spades: "\u2660",
  clubs: "\u2663",
  hearts: "\u2665",
  diams: "\u2666"
};

const JsxErrors = ParseErrorEnum`jsx`(_ => ({
  AttributeIsEmpty: _("JSX attributes must only be assigned a non-empty expression."),
  MissingClosingTagElement: _(({
    openingTagName
  }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`),
  MissingClosingTagFragment: _("Expected corresponding JSX closing tag for <>."),
  UnexpectedSequenceExpression: _("Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?"),
  UnexpectedToken: _(({
    unexpected,
    HTMLEntity
  }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`),
  UnsupportedJsxValue: _("JSX value should be either an expression or a quoted JSX text."),
  UnterminatedJsxContent: _("Unterminated JSX contents."),
  UnwrappedAdjacentJSXElements: _("Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?")
}));

function isFragment(object) {
  return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
}

function getQualifiedJSXName(object) {
  if (object.type === "JSXIdentifier") {
    return object.name;
  }

  if (object.type === "JSXNamespacedName") {
    return object.namespace.name + ":" + object.name.name;
  }

  if (object.type === "JSXMemberExpression") {
    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
  }

  throw new Error("Node had unexpected type: " + object.type);
}

var jsx = (superClass => class extends superClass {
  jsxReadToken() {
    let out = "";
    let chunkStart = this.state.pos;

    for (;;) {
      if (this.state.pos >= this.length) {
        throw this.raise(JsxErrors.UnterminatedJsxContent, {
          at: this.state.startLoc
        });
      }

      const ch = this.input.charCodeAt(this.state.pos);

      switch (ch) {
        case 60:
        case 123:
          if (this.state.pos === this.state.start) {
            if (ch === 60 && this.state.canStartJSXElement) {
              ++this.state.pos;
              return this.finishToken(138);
            }

            return super.getTokenFromCode(ch);
          }

          out += this.input.slice(chunkStart, this.state.pos);
          return this.finishToken(137, out);

        case 38:
          out += this.input.slice(chunkStart, this.state.pos);
          out += this.jsxReadEntity();
          chunkStart = this.state.pos;
          break;

        case 62:
        case 125:

        default:
          if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadNewLine(true);
            chunkStart = this.state.pos;
          } else {
            ++this.state.pos;
          }

      }
    }
  }

  jsxReadNewLine(normalizeCRLF) {
    const ch = this.input.charCodeAt(this.state.pos);
    let out;
    ++this.state.pos;

    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
      ++this.state.pos;
      out = normalizeCRLF ? "\n" : "\r\n";
    } else {
      out = String.fromCharCode(ch);
    }

    ++this.state.curLine;
    this.state.lineStart = this.state.pos;
    return out;
  }

  jsxReadString(quote) {
    let out = "";
    let chunkStart = ++this.state.pos;

    for (;;) {
      if (this.state.pos >= this.length) {
        throw this.raise(Errors.UnterminatedString, {
          at: this.state.startLoc
        });
      }

      const ch = this.input.charCodeAt(this.state.pos);
      if (ch === quote) break;

      if (ch === 38) {
        out += this.input.slice(chunkStart, this.state.pos);
        out += this.jsxReadEntity();
        chunkStart = this.state.pos;
      } else if (isNewLine(ch)) {
        out += this.input.slice(chunkStart, this.state.pos);
        out += this.jsxReadNewLine(false);
        chunkStart = this.state.pos;
      } else {
        ++this.state.pos;
      }
    }

    out += this.input.slice(chunkStart, this.state.pos++);
    return this.finishToken(129, out);
  }

  jsxReadEntity() {
    const startPos = ++this.state.pos;

    if (this.codePointAtPos(this.state.pos) === 35) {
      ++this.state.pos;
      let radix = 10;

      if (this.codePointAtPos(this.state.pos) === 120) {
        radix = 16;
        ++this.state.pos;
      }

      const codePoint = this.readInt(radix, undefined, false, "bail");

      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {
        ++this.state.pos;
        return String.fromCodePoint(codePoint);
      }
    } else {
      let count = 0;
      let semi = false;

      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {
        ++this.state.pos;
      }

      if (semi) {
        const desc = this.input.slice(startPos, this.state.pos);
        const entity = entities[desc];
        ++this.state.pos;

        if (entity) {
          return entity;
        }
      }
    }

    this.state.pos = startPos;
    return "&";
  }

  jsxReadWord() {
    let ch;
    const start = this.state.pos;

    do {
      ch = this.input.charCodeAt(++this.state.pos);
    } while (isIdentifierChar(ch) || ch === 45);

    return this.finishToken(136, this.input.slice(start, this.state.pos));
  }

  jsxParseIdentifier() {
    const node = this.startNode();

    if (this.match(136)) {
      node.name = this.state.value;
    } else if (tokenIsKeyword(this.state.type)) {
      node.name = tokenLabelName(this.state.type);
    } else {
      this.unexpected();
    }

    this.next();
    return this.finishNode(node, "JSXIdentifier");
  }

  jsxParseNamespacedName() {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    const name = this.jsxParseIdentifier();
    if (!this.eat(14)) return name;
    const node = this.startNodeAt(startPos, startLoc);
    node.namespace = name;
    node.name = this.jsxParseIdentifier();
    return this.finishNode(node, "JSXNamespacedName");
  }

  jsxParseElementName() {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    let node = this.jsxParseNamespacedName();

    if (node.type === "JSXNamespacedName") {
      return node;
    }

    while (this.eat(16)) {
      const newNode = this.startNodeAt(startPos, startLoc);
      newNode.object = node;
      newNode.property = this.jsxParseIdentifier();
      node = this.finishNode(newNode, "JSXMemberExpression");
    }

    return node;
  }

  jsxParseAttributeValue() {
    let node;

    switch (this.state.type) {
      case 5:
        node = this.startNode();
        this.setContext(types.brace);
        this.next();
        node = this.jsxParseExpressionContainer(node, types.j_oTag);

        if (node.expression.type === "JSXEmptyExpression") {
          this.raise(JsxErrors.AttributeIsEmpty, {
            at: node
          });
        }

        return node;

      case 138:
      case 129:
        return this.parseExprAtom();

      default:
        throw this.raise(JsxErrors.UnsupportedJsxValue, {
          at: this.state.startLoc
        });
    }
  }

  jsxParseEmptyExpression() {
    const node = this.startNodeAt(this.state.lastTokEndLoc.index, this.state.lastTokEndLoc);
    return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
  }

  jsxParseSpreadChild(node) {
    this.next();
    node.expression = this.parseExpression();
    this.setContext(types.j_oTag);
    this.state.canStartJSXElement = true;
    this.expect(8);
    return this.finishNode(node, "JSXSpreadChild");
  }

  jsxParseExpressionContainer(node, previousContext) {
    if (this.match(8)) {
      node.expression = this.jsxParseEmptyExpression();
    } else {
      const expression = this.parseExpression();
      node.expression = expression;
    }

    this.setContext(previousContext);
    this.state.canStartJSXElement = true;
    this.expect(8);
    return this.finishNode(node, "JSXExpressionContainer");
  }

  jsxParseAttribute() {
    const node = this.startNode();

    if (this.match(5)) {
      this.setContext(types.brace);
      this.next();
      this.expect(21);
      node.argument = this.parseMaybeAssignAllowIn();
      this.setContext(types.j_oTag);
      this.state.canStartJSXElement = true;
      this.expect(8);
      return this.finishNode(node, "JSXSpreadAttribute");
    }

    node.name = this.jsxParseNamespacedName();
    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
    return this.finishNode(node, "JSXAttribute");
  }

  jsxParseOpeningElementAt(startPos, startLoc) {
    const node = this.startNodeAt(startPos, startLoc);

    if (this.eat(139)) {
      return this.finishNode(node, "JSXOpeningFragment");
    }

    node.name = this.jsxParseElementName();
    return this.jsxParseOpeningElementAfterName(node);
  }

  jsxParseOpeningElementAfterName(node) {
    const attributes = [];

    while (!this.match(56) && !this.match(139)) {
      attributes.push(this.jsxParseAttribute());
    }

    node.attributes = attributes;
    node.selfClosing = this.eat(56);
    this.expect(139);
    return this.finishNode(node, "JSXOpeningElement");
  }

  jsxParseClosingElementAt(startPos, startLoc) {
    const node = this.startNodeAt(startPos, startLoc);

    if (this.eat(139)) {
      return this.finishNode(node, "JSXClosingFragment");
    }

    node.name = this.jsxParseElementName();
    this.expect(139);
    return this.finishNode(node, "JSXClosingElement");
  }

  jsxParseElementAt(startPos, startLoc) {
    const node = this.startNodeAt(startPos, startLoc);
    const children = [];
    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
    let closingElement = null;

    if (!openingElement.selfClosing) {
      contents: for (;;) {
        switch (this.state.type) {
          case 138:
            startPos = this.state.start;
            startLoc = this.state.startLoc;
            this.next();

            if (this.eat(56)) {
              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
              break contents;
            }

            children.push(this.jsxParseElementAt(startPos, startLoc));
            break;

          case 137:
            children.push(this.parseExprAtom());
            break;

          case 5:
            {
              const node = this.startNode();
              this.setContext(types.brace);
              this.next();

              if (this.match(21)) {
                children.push(this.jsxParseSpreadChild(node));
              } else {
                children.push(this.jsxParseExpressionContainer(node, types.j_expr));
              }

              break;
            }

          default:
            throw this.unexpected();
        }
      }

      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {
        this.raise(JsxErrors.MissingClosingTagFragment, {
          at: closingElement
        });
      } else if (!isFragment(openingElement) && isFragment(closingElement)) {
        this.raise(JsxErrors.MissingClosingTagElement, {
          at: closingElement,
          openingTagName: getQualifiedJSXName(openingElement.name)
        });
      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
          this.raise(JsxErrors.MissingClosingTagElement, {
            at: closingElement,
            openingTagName: getQualifiedJSXName(openingElement.name)
          });
        }
      }
    }

    if (isFragment(openingElement)) {
      node.openingFragment = openingElement;
      node.closingFragment = closingElement;
    } else {
      node.openingElement = openingElement;
      node.closingElement = closingElement;
    }

    node.children = children;

    if (this.match(47)) {
      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {
        at: this.state.startLoc
      });
    }

    return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
  }

  jsxParseElement() {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    this.next();
    return this.jsxParseElementAt(startPos, startLoc);
  }

  setContext(newContext) {
    const {
      context
    } = this.state;
    context[context.length - 1] = newContext;
  }

  parseExprAtom(refExpressionErrors) {
    if (this.match(137)) {
      return this.parseLiteral(this.state.value, "JSXText");
    } else if (this.match(138)) {
      return this.jsxParseElement();
    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
      this.replaceToken(138);
      return this.jsxParseElement();
    } else {
      return super.parseExprAtom(refExpressionErrors);
    }
  }

  skipSpace() {
    const curContext = this.curContext();
    if (!curContext.preserveSpace) super.skipSpace();
  }

  getTokenFromCode(code) {
    const context = this.curContext();

    if (context === types.j_expr) {
      return this.jsxReadToken();
    }

    if (context === types.j_oTag || context === types.j_cTag) {
      if (isIdentifierStart(code)) {
        return this.jsxReadWord();
      }

      if (code === 62) {
        ++this.state.pos;
        return this.finishToken(139);
      }

      if ((code === 34 || code === 39) && context === types.j_oTag) {
        return this.jsxReadString(code);
      }
    }

    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
      ++this.state.pos;
      return this.finishToken(138);
    }

    return super.getTokenFromCode(code);
  }

  updateContext(prevType) {
    const {
      context,
      type
    } = this.state;

    if (type === 56 && prevType === 138) {
      context.splice(-2, 2, types.j_cTag);
      this.state.canStartJSXElement = false;
    } else if (type === 138) {
      context.push(types.j_oTag);
    } else if (type === 139) {
      const out = context[context.length - 1];

      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {
        context.pop();
        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;
      } else {
        this.setContext(types.j_expr);
        this.state.canStartJSXElement = true;
      }
    } else {
      this.state.canStartJSXElement = tokenComesBeforeExpression(type);
    }
  }

});

class TypeScriptScope extends Scope {
  constructor(...args) {
    super(...args);
    this.types = new Set();
    this.enums = new Set();
    this.constEnums = new Set();
    this.classes = new Set();
    this.exportOnlyBindings = new Set();
  }

}

class TypeScriptScopeHandler extends ScopeHandler {
  createScope(flags) {
    return new TypeScriptScope(flags);
  }

  declareName(name, bindingType, loc) {
    const scope = this.currentScope();

    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {
      this.maybeExportDefined(scope, name);
      scope.exportOnlyBindings.add(name);
      return;
    }

    super.declareName(...arguments);

    if (bindingType & BIND_KIND_TYPE) {
      if (!(bindingType & BIND_KIND_VALUE)) {
        this.checkRedeclarationInScope(scope, name, bindingType, loc);
        this.maybeExportDefined(scope, name);
      }

      scope.types.add(name);
    }

    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);
    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);
    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);
  }

  isRedeclaredInScope(scope, name, bindingType) {
    if (scope.enums.has(name)) {
      if (bindingType & BIND_FLAGS_TS_ENUM) {
        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);
        const wasConst = scope.constEnums.has(name);
        return isConst !== wasConst;
      }

      return true;
    }

    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {
      if (scope.lexical.has(name)) {
        return !!(bindingType & BIND_KIND_VALUE);
      } else {
        return false;
      }
    }

    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {
      return true;
    }

    return super.isRedeclaredInScope(...arguments);
  }

  checkLocalExport(id) {
    const topLevelScope = this.scopeStack[0];
    const {
      name
    } = id;

    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {
      super.checkLocalExport(id);
    }
  }

}

const getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];

function nonNull(x) {
  if (x == null) {
    throw new Error(`Unexpected ${x} value.`);
  }

  return x;
}

function assert(x) {
  if (!x) {
    throw new Error("Assert fail");
  }
}

function tsTokenCanStartExpression(token) {
  return tokenCanStartExpression(token) || tokenIsBinaryOperator(token);
}

const TSErrors = ParseErrorEnum`typescript`(_ => ({
  AbstractMethodHasImplementation: _(({
    methodName
  }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`),
  AbstractPropertyHasInitializer: _(({
    propertyName
  }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`),
  AccesorCannotDeclareThisParameter: _("'get' and 'set' accessors cannot declare 'this' parameters."),
  AccesorCannotHaveTypeParameters: _("An accessor cannot have type parameters."),
  CannotFindName: _(({
    name
  }) => `Cannot find name '${name}'.`),
  ClassMethodHasDeclare: _("Class methods cannot have the 'declare' modifier."),
  ClassMethodHasReadonly: _("Class methods cannot have the 'readonly' modifier."),
  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: _("A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference."),
  ConstructorHasTypeParameters: _("Type parameters cannot appear on a constructor declaration."),
  DeclareAccessor: _(({
    kind
  }) => `'declare' is not allowed in ${kind}ters.`),
  DeclareClassFieldHasInitializer: _("Initializers are not allowed in ambient contexts."),
  DeclareFunctionHasImplementation: _("An implementation cannot be declared in ambient contexts."),
  DuplicateAccessibilityModifier: _(({
    modifier
  }) => `Accessibility modifier already seen.`),
  DuplicateModifier: _(({
    modifier
  }) => `Duplicate modifier: '${modifier}'.`),
  EmptyHeritageClauseType: _(({
    token
  }) => `'${token}' list cannot be empty.`),
  EmptyTypeArguments: _("Type argument list cannot be empty."),
  EmptyTypeParameters: _("Type parameter list cannot be empty."),
  ExpectedAmbientAfterExportDeclare: _("'export declare' must be followed by an ambient declaration."),
  ImportAliasHasImportType: _("An import alias can not use 'import type'."),
  IncompatibleModifiers: _(({
    modifiers
  }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`),
  IndexSignatureHasAbstract: _("Index signatures cannot have the 'abstract' modifier."),
  IndexSignatureHasAccessibility: _(({
    modifier
  }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`),
  IndexSignatureHasDeclare: _("Index signatures cannot have the 'declare' modifier."),
  IndexSignatureHasOverride: _("'override' modifier cannot appear on an index signature."),
  IndexSignatureHasStatic: _("Index signatures cannot have the 'static' modifier."),
  InitializerNotAllowedInAmbientContext: _("Initializers are not allowed in ambient contexts."),
  InvalidModifierOnTypeMember: _(({
    modifier
  }) => `'${modifier}' modifier cannot appear on a type member.`),
  InvalidModifierOnTypeParameter: _(({
    modifier
  }) => `'${modifier}' modifier cannot appear on a type parameter.`),
  InvalidModifierOnTypeParameterPositions: _(({
    modifier
  }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`),
  InvalidModifiersOrder: _(({
    orderedModifiers
  }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`),
  InvalidTupleMemberLabel: _("Tuple members must be labeled with a simple identifier."),
  MissingInterfaceName: _("'interface' declarations must be followed by an identifier."),
  MixedLabeledAndUnlabeledElements: _("Tuple members must all have names or all not have names."),
  NonAbstractClassHasAbstractMethod: _("Abstract methods can only appear within an abstract class."),
  NonClassMethodPropertyHasAbstractModifer: _("'abstract' modifier can only appear on a class, method, or property declaration."),
  OptionalTypeBeforeRequired: _("A required element cannot follow an optional element."),
  OverrideNotInSubClass: _("This member cannot have an 'override' modifier because its containing class does not extend another class."),
  PatternIsOptional: _("A binding pattern parameter cannot be optional in an implementation signature."),
  PrivateElementHasAbstract: _("Private elements cannot have the 'abstract' modifier."),
  PrivateElementHasAccessibility: _(({
    modifier
  }) => `Private elements cannot have an accessibility modifier ('${modifier}').`),
  ReadonlyForMethodSignature: _("'readonly' modifier can only appear on a property declaration or index signature."),
  ReservedArrowTypeParam: _("This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`."),
  ReservedTypeAssertion: _("This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead."),
  SetAccesorCannotHaveOptionalParameter: _("A 'set' accessor cannot have an optional parameter."),
  SetAccesorCannotHaveRestParameter: _("A 'set' accessor cannot have rest parameter."),
  SetAccesorCannotHaveReturnType: _("A 'set' accessor cannot have a return type annotation."),
  SingleTypeParameterWithoutTrailingComma: _(({
    typeParameterName
  }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`),
  StaticBlockCannotHaveModifier: _("Static class blocks cannot have any modifier."),
  TypeAnnotationAfterAssign: _("Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`."),
  TypeImportCannotSpecifyDefaultAndNamed: _("A type-only import can specify a default import or named bindings, but not both."),
  TypeModifierIsUsedInTypeExports: _("The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement."),
  TypeModifierIsUsedInTypeImports: _("The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement."),
  UnexpectedParameterModifier: _("A parameter property is only allowed in a constructor implementation."),
  UnexpectedReadonly: _("'readonly' type modifier is only permitted on array and tuple literal types."),
  UnexpectedTypeAnnotation: _("Did not expect a type annotation here."),
  UnexpectedTypeCastInParameter: _("Unexpected type cast in parameter position."),
  UnsupportedImportTypeArgument: _("Argument in a type import must be a string literal."),
  UnsupportedParameterPropertyKind: _("A parameter property may not be declared using a binding pattern."),
  UnsupportedSignatureParameterKind: _(({
    type
  }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`)
}));

function keywordTypeFromName(value) {
  switch (value) {
    case "any":
      return "TSAnyKeyword";

    case "boolean":
      return "TSBooleanKeyword";

    case "bigint":
      return "TSBigIntKeyword";

    case "never":
      return "TSNeverKeyword";

    case "number":
      return "TSNumberKeyword";

    case "object":
      return "TSObjectKeyword";

    case "string":
      return "TSStringKeyword";

    case "symbol":
      return "TSSymbolKeyword";

    case "undefined":
      return "TSUndefinedKeyword";

    case "unknown":
      return "TSUnknownKeyword";

    default:
      return undefined;
  }
}

function tsIsAccessModifier(modifier) {
  return modifier === "private" || modifier === "public" || modifier === "protected";
}

function tsIsVarianceAnnotations(modifier) {
  return modifier === "in" || modifier === "out";
}

var typescript = (superClass => class extends superClass {
  getScopeHandler() {
    return TypeScriptScopeHandler;
  }

  tsIsIdentifier() {
    return tokenIsIdentifier(this.state.type);
  }

  tsTokenCanFollowModifier() {
    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(134) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
  }

  tsNextTokenCanFollowModifier() {
    this.next();
    return this.tsTokenCanFollowModifier();
  }

  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
    if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58) {
      return undefined;
    }

    const modifier = this.state.value;

    if (allowedModifiers.indexOf(modifier) !== -1) {
      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
        return undefined;
      }

      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
        return modifier;
      }
    }

    return undefined;
  }

  tsParseModifiers({
    modified,
    allowedModifiers,
    disallowedModifiers,
    stopOnStartOfClassStaticBlock,
    errorTemplate = TSErrors.InvalidModifierOnTypeMember
  }) {
    const enforceOrder = (loc, modifier, before, after) => {
      if (modifier === before && modified[after]) {
        this.raise(TSErrors.InvalidModifiersOrder, {
          at: loc,
          orderedModifiers: [before, after]
        });
      }
    };

    const incompatible = (loc, modifier, mod1, mod2) => {
      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
        this.raise(TSErrors.IncompatibleModifiers, {
          at: loc,
          modifiers: [mod1, mod2]
        });
      }
    };

    for (;;) {
      const {
        startLoc
      } = this.state;
      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
      if (!modifier) break;

      if (tsIsAccessModifier(modifier)) {
        if (modified.accessibility) {
          this.raise(TSErrors.DuplicateAccessibilityModifier, {
            at: startLoc,
            modifier
          });
        } else {
          enforceOrder(startLoc, modifier, modifier, "override");
          enforceOrder(startLoc, modifier, modifier, "static");
          enforceOrder(startLoc, modifier, modifier, "readonly");
          modified.accessibility = modifier;
        }
      } else if (tsIsVarianceAnnotations(modifier)) {
        if (modified[modifier]) {
          this.raise(TSErrors.DuplicateModifier, {
            at: startLoc,
            modifier
          });
        }

        modified[modifier] = true;
        enforceOrder(startLoc, modifier, "in", "out");
      } else {
        if (Object.hasOwnProperty.call(modified, modifier)) {
          this.raise(TSErrors.DuplicateModifier, {
            at: startLoc,
            modifier
          });
        } else {
          enforceOrder(startLoc, modifier, "static", "readonly");
          enforceOrder(startLoc, modifier, "static", "override");
          enforceOrder(startLoc, modifier, "override", "readonly");
          enforceOrder(startLoc, modifier, "abstract", "override");
          incompatible(startLoc, modifier, "declare", "override");
          incompatible(startLoc, modifier, "static", "abstract");
        }

        modified[modifier] = true;
      }

      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
        this.raise(errorTemplate, {
          at: startLoc,
          modifier
        });
      }
    }
  }

  tsIsListTerminator(kind) {
    switch (kind) {
      case "EnumMembers":
      case "TypeMembers":
        return this.match(8);

      case "HeritageClauseElement":
        return this.match(5);

      case "TupleElementTypes":
        return this.match(3);

      case "TypeParametersOrArguments":
        return this.match(48);
    }

    throw new Error("Unreachable");
  }

  tsParseList(kind, parseElement) {
    const result = [];

    while (!this.tsIsListTerminator(kind)) {
      result.push(parseElement());
    }

    return result;
  }

  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
  }

  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
    const result = [];
    let trailingCommaPos = -1;

    for (;;) {
      if (this.tsIsListTerminator(kind)) {
        break;
      }

      trailingCommaPos = -1;
      const element = parseElement();

      if (element == null) {
        return undefined;
      }

      result.push(element);

      if (this.eat(12)) {
        trailingCommaPos = this.state.lastTokStart;
        continue;
      }

      if (this.tsIsListTerminator(kind)) {
        break;
      }

      if (expectSuccess) {
        this.expect(12);
      }

      return undefined;
    }

    if (refTrailingCommaPos) {
      refTrailingCommaPos.value = trailingCommaPos;
    }

    return result;
  }

  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
    if (!skipFirstToken) {
      if (bracket) {
        this.expect(0);
      } else {
        this.expect(47);
      }
    }

    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);

    if (bracket) {
      this.expect(3);
    } else {
      this.expect(48);
    }

    return result;
  }

  tsParseImportType() {
    const node = this.startNode();
    this.expect(83);
    this.expect(10);

    if (!this.match(129)) {
      this.raise(TSErrors.UnsupportedImportTypeArgument, {
        at: this.state.startLoc
      });
    }

    node.argument = this.parseExprAtom();
    this.expect(11);

    if (this.eat(16)) {
      node.qualifier = this.tsParseEntityName();
    }

    if (this.match(47)) {
      node.typeParameters = this.tsParseTypeArguments();
    }

    return this.finishNode(node, "TSImportType");
  }

  tsParseEntityName(allowReservedWords = true) {
    let entity = this.parseIdentifier(allowReservedWords);

    while (this.eat(16)) {
      const node = this.startNodeAtNode(entity);
      node.left = entity;
      node.right = this.parseIdentifier(allowReservedWords);
      entity = this.finishNode(node, "TSQualifiedName");
    }

    return entity;
  }

  tsParseTypeReference() {
    const node = this.startNode();
    node.typeName = this.tsParseEntityName();

    if (!this.hasPrecedingLineBreak() && this.match(47)) {
      node.typeParameters = this.tsParseTypeArguments();
    }

    return this.finishNode(node, "TSTypeReference");
  }

  tsParseThisTypePredicate(lhs) {
    this.next();
    const node = this.startNodeAtNode(lhs);
    node.parameterName = lhs;
    node.typeAnnotation = this.tsParseTypeAnnotation(false);
    node.asserts = false;
    return this.finishNode(node, "TSTypePredicate");
  }

  tsParseThisTypeNode() {
    const node = this.startNode();
    this.next();
    return this.finishNode(node, "TSThisType");
  }

  tsParseTypeQuery() {
    const node = this.startNode();
    this.expect(87);

    if (this.match(83)) {
      node.exprName = this.tsParseImportType();
    } else {
      node.exprName = this.tsParseEntityName();
    }

    if (!this.hasPrecedingLineBreak() && this.match(47)) {
      node.typeParameters = this.tsParseTypeArguments();
    }

    return this.finishNode(node, "TSTypeQuery");
  }

  tsParseInOutModifiers(node) {
    this.tsParseModifiers({
      modified: node,
      allowedModifiers: ["in", "out"],
      disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
      errorTemplate: TSErrors.InvalidModifierOnTypeParameter
    });
  }

  tsParseNoneModifiers(node) {
    this.tsParseModifiers({
      modified: node,
      allowedModifiers: [],
      disallowedModifiers: ["in", "out"],
      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
    });
  }

  tsParseTypeParameter(parseModifiers = this.tsParseNoneModifiers.bind(this)) {
    const node = this.startNode();
    parseModifiers(node);
    node.name = this.tsParseTypeParameterName();
    node.constraint = this.tsEatThenParseType(81);
    node.default = this.tsEatThenParseType(29);
    return this.finishNode(node, "TSTypeParameter");
  }

  tsTryParseTypeParameters(parseModifiers) {
    if (this.match(47)) {
      return this.tsParseTypeParameters(parseModifiers);
    }
  }

  tsParseTypeParameters(parseModifiers) {
    const node = this.startNode();

    if (this.match(47) || this.match(138)) {
      this.next();
    } else {
      this.unexpected();
    }

    const refTrailingCommaPos = {
      value: -1
    };
    node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);

    if (node.params.length === 0) {
      this.raise(TSErrors.EmptyTypeParameters, {
        at: node
      });
    }

    if (refTrailingCommaPos.value !== -1) {
      this.addExtra(node, "trailingComma", refTrailingCommaPos.value);
    }

    return this.finishNode(node, "TSTypeParameterDeclaration");
  }

  tsTryNextParseConstantContext() {
    if (this.lookahead().type !== 75) return null;
    this.next();
    const typeReference = this.tsParseTypeReference();

    if (typeReference.typeParameters) {
      this.raise(TSErrors.CannotFindName, {
        at: typeReference.typeName,
        name: "const"
      });
    }

    return typeReference;
  }

  tsFillSignature(returnToken, signature) {
    const returnTokenRequired = returnToken === 19;
    const paramsKey = "parameters";
    const returnTypeKey = "typeAnnotation";
    signature.typeParameters = this.tsTryParseTypeParameters();
    this.expect(10);
    signature[paramsKey] = this.tsParseBindingListForSignature();

    if (returnTokenRequired) {
      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
    } else if (this.match(returnToken)) {
      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
    }
  }

  tsParseBindingListForSignature() {
    return this.parseBindingList(11, 41).map(pattern => {
      if (pattern.type !== "Identifier" && pattern.type !== "RestElement" && pattern.type !== "ObjectPattern" && pattern.type !== "ArrayPattern") {
        this.raise(TSErrors.UnsupportedSignatureParameterKind, {
          at: pattern,
          type: pattern.type
        });
      }

      return pattern;
    });
  }

  tsParseTypeMemberSemicolon() {
    if (!this.eat(12) && !this.isLineTerminator()) {
      this.expect(13);
    }
  }

  tsParseSignatureMember(kind, node) {
    this.tsFillSignature(14, node);
    this.tsParseTypeMemberSemicolon();
    return this.finishNode(node, kind);
  }

  tsIsUnambiguouslyIndexSignature() {
    this.next();

    if (tokenIsIdentifier(this.state.type)) {
      this.next();
      return this.match(14);
    }

    return false;
  }

  tsTryParseIndexSignature(node) {
    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
      return undefined;
    }

    this.expect(0);
    const id = this.parseIdentifier();
    id.typeAnnotation = this.tsParseTypeAnnotation();
    this.resetEndLocation(id);
    this.expect(3);
    node.parameters = [id];
    const type = this.tsTryParseTypeAnnotation();
    if (type) node.typeAnnotation = type;
    this.tsParseTypeMemberSemicolon();
    return this.finishNode(node, "TSIndexSignature");
  }

  tsParsePropertyOrMethodSignature(node, readonly) {
    if (this.eat(17)) node.optional = true;
    const nodeAny = node;

    if (this.match(10) || this.match(47)) {
      if (readonly) {
        this.raise(TSErrors.ReadonlyForMethodSignature, {
          at: node
        });
      }

      const method = nodeAny;

      if (method.kind && this.match(47)) {
        this.raise(TSErrors.AccesorCannotHaveTypeParameters, {
          at: this.state.curPosition()
        });
      }

      this.tsFillSignature(14, method);
      this.tsParseTypeMemberSemicolon();
      const paramsKey = "parameters";
      const returnTypeKey = "typeAnnotation";

      if (method.kind === "get") {
        if (method[paramsKey].length > 0) {
          this.raise(Errors.BadGetterArity, {
            at: this.state.curPosition()
          });

          if (this.isThisParam(method[paramsKey][0])) {
            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
              at: this.state.curPosition()
            });
          }
        }
      } else if (method.kind === "set") {
        if (method[paramsKey].length !== 1) {
          this.raise(Errors.BadSetterArity, {
            at: this.state.curPosition()
          });
        } else {
          const firstParameter = method[paramsKey][0];

          if (this.isThisParam(firstParameter)) {
            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
              at: this.state.curPosition()
            });
          }

          if (firstParameter.type === "Identifier" && firstParameter.optional) {
            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {
              at: this.state.curPosition()
            });
          }

          if (firstParameter.type === "RestElement") {
            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {
              at: this.state.curPosition()
            });
          }
        }

        if (method[returnTypeKey]) {
          this.raise(TSErrors.SetAccesorCannotHaveReturnType, {
            at: method[returnTypeKey]
          });
        }
      } else {
        method.kind = "method";
      }

      return this.finishNode(method, "TSMethodSignature");
    } else {
      const property = nodeAny;
      if (readonly) property.readonly = true;
      const type = this.tsTryParseTypeAnnotation();
      if (type) property.typeAnnotation = type;
      this.tsParseTypeMemberSemicolon();
      return this.finishNode(property, "TSPropertySignature");
    }
  }

  tsParseTypeMember() {
    const node = this.startNode();

    if (this.match(10) || this.match(47)) {
      return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
    }

    if (this.match(77)) {
      const id = this.startNode();
      this.next();

      if (this.match(10) || this.match(47)) {
        return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
      } else {
        node.key = this.createIdentifier(id, "new");
        return this.tsParsePropertyOrMethodSignature(node, false);
      }
    }

    this.tsParseModifiers({
      modified: node,
      allowedModifiers: ["readonly"],
      disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
    });
    const idx = this.tsTryParseIndexSignature(node);

    if (idx) {
      return idx;
    }

    this.parsePropertyName(node);

    if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
      node.kind = node.key.name;
      this.parsePropertyName(node);
    }

    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
  }

  tsParseTypeLiteral() {
    const node = this.startNode();
    node.members = this.tsParseObjectTypeMembers();
    return this.finishNode(node, "TSTypeLiteral");
  }

  tsParseObjectTypeMembers() {
    this.expect(5);
    const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
    this.expect(8);
    return members;
  }

  tsIsStartOfMappedType() {
    this.next();

    if (this.eat(53)) {
      return this.isContextual(118);
    }

    if (this.isContextual(118)) {
      this.next();
    }

    if (!this.match(0)) {
      return false;
    }

    this.next();

    if (!this.tsIsIdentifier()) {
      return false;
    }

    this.next();
    return this.match(58);
  }

  tsParseMappedTypeParameter() {
    const node = this.startNode();
    node.name = this.tsParseTypeParameterName();
    node.constraint = this.tsExpectThenParseType(58);
    return this.finishNode(node, "TSTypeParameter");
  }

  tsParseMappedType() {
    const node = this.startNode();
    this.expect(5);

    if (this.match(53)) {
      node.readonly = this.state.value;
      this.next();
      this.expectContextual(118);
    } else if (this.eatContextual(118)) {
      node.readonly = true;
    }

    this.expect(0);
    node.typeParameter = this.tsParseMappedTypeParameter();
    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;
    this.expect(3);

    if (this.match(53)) {
      node.optional = this.state.value;
      this.next();
      this.expect(17);
    } else if (this.eat(17)) {
      node.optional = true;
    }

    node.typeAnnotation = this.tsTryParseType();
    this.semicolon();
    this.expect(8);
    return this.finishNode(node, "TSMappedType");
  }

  tsParseTupleType() {
    const node = this.startNode();
    node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
    let seenOptionalElement = false;
    let labeledElements = null;
    node.elementTypes.forEach(elementNode => {
      var _labeledElements;

      let {
        type
      } = elementNode;

      if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
        this.raise(TSErrors.OptionalTypeBeforeRequired, {
          at: elementNode
        });
      }

      seenOptionalElement = seenOptionalElement || type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType";

      if (type === "TSRestType") {
        elementNode = elementNode.typeAnnotation;
        type = elementNode.type;
      }

      const isLabeled = type === "TSNamedTupleMember";
      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;

      if (labeledElements !== isLabeled) {
        this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {
          at: elementNode
        });
      }
    });
    return this.finishNode(node, "TSTupleType");
  }

  tsParseTupleElementType() {
    const {
      start: startPos,
      startLoc
    } = this.state;
    const rest = this.eat(21);
    let type = this.tsParseType();
    const optional = this.eat(17);
    const labeled = this.eat(14);

    if (labeled) {
      const labeledNode = this.startNodeAtNode(type);
      labeledNode.optional = optional;

      if (type.type === "TSTypeReference" && !type.typeParameters && type.typeName.type === "Identifier") {
        labeledNode.label = type.typeName;
      } else {
        this.raise(TSErrors.InvalidTupleMemberLabel, {
          at: type
        });
        labeledNode.label = type;
      }

      labeledNode.elementType = this.tsParseType();
      type = this.finishNode(labeledNode, "TSNamedTupleMember");
    } else if (optional) {
      const optionalTypeNode = this.startNodeAtNode(type);
      optionalTypeNode.typeAnnotation = type;
      type = this.finishNode(optionalTypeNode, "TSOptionalType");
    }

    if (rest) {
      const restNode = this.startNodeAt(startPos, startLoc);
      restNode.typeAnnotation = type;
      type = this.finishNode(restNode, "TSRestType");
    }

    return type;
  }

  tsParseParenthesizedType() {
    const node = this.startNode();
    this.expect(10);
    node.typeAnnotation = this.tsParseType();
    this.expect(11);
    return this.finishNode(node, "TSParenthesizedType");
  }

  tsParseFunctionOrConstructorType(type, abstract) {
    const node = this.startNode();

    if (type === "TSConstructorType") {
      node.abstract = !!abstract;
      if (abstract) this.next();
      this.next();
    }

    this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));
    return this.finishNode(node, type);
  }

  tsParseLiteralTypeNode() {
    const node = this.startNode();

    node.literal = (() => {
      switch (this.state.type) {
        case 130:
        case 131:
        case 129:
        case 85:
        case 86:
          return this.parseExprAtom();

        default:
          throw this.unexpected();
      }
    })();

    return this.finishNode(node, "TSLiteralType");
  }

  tsParseTemplateLiteralType() {
    const node = this.startNode();
    node.literal = this.parseTemplate(false);
    return this.finishNode(node, "TSLiteralType");
  }

  parseTemplateSubstitution() {
    if (this.state.inType) return this.tsParseType();
    return super.parseTemplateSubstitution();
  }

  tsParseThisTypeOrThisTypePredicate() {
    const thisKeyword = this.tsParseThisTypeNode();

    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {
      return this.tsParseThisTypePredicate(thisKeyword);
    } else {
      return thisKeyword;
    }
  }

  tsParseNonArrayType() {
    switch (this.state.type) {
      case 129:
      case 130:
      case 131:
      case 85:
      case 86:
        return this.tsParseLiteralTypeNode();

      case 53:
        if (this.state.value === "-") {
          const node = this.startNode();
          const nextToken = this.lookahead();

          if (nextToken.type !== 130 && nextToken.type !== 131) {
            throw this.unexpected();
          }

          node.literal = this.parseMaybeUnary();
          return this.finishNode(node, "TSLiteralType");
        }

        break;

      case 78:
        return this.tsParseThisTypeOrThisTypePredicate();

      case 87:
        return this.tsParseTypeQuery();

      case 83:
        return this.tsParseImportType();

      case 5:
        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();

      case 0:
        return this.tsParseTupleType();

      case 10:
        return this.tsParseParenthesizedType();

      case 25:
      case 24:
        return this.tsParseTemplateLiteralType();

      default:
        {
          const {
            type
          } = this.state;

          if (tokenIsIdentifier(type) || type === 88 || type === 84) {
            const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);

            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {
              const node = this.startNode();
              this.next();
              return this.finishNode(node, nodeType);
            }

            return this.tsParseTypeReference();
          }
        }
    }

    throw this.unexpected();
  }

  tsParseArrayTypeOrHigher() {
    let type = this.tsParseNonArrayType();

    while (!this.hasPrecedingLineBreak() && this.eat(0)) {
      if (this.match(3)) {
        const node = this.startNodeAtNode(type);
        node.elementType = type;
        this.expect(3);
        type = this.finishNode(node, "TSArrayType");
      } else {
        const node = this.startNodeAtNode(type);
        node.objectType = type;
        node.indexType = this.tsParseType();
        this.expect(3);
        type = this.finishNode(node, "TSIndexedAccessType");
      }
    }

    return type;
  }

  tsParseTypeOperator() {
    const node = this.startNode();
    const operator = this.state.value;
    this.next();
    node.operator = operator;
    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();

    if (operator === "readonly") {
      this.tsCheckTypeAnnotationForReadOnly(node);
    }

    return this.finishNode(node, "TSTypeOperator");
  }

  tsCheckTypeAnnotationForReadOnly(node) {
    switch (node.typeAnnotation.type) {
      case "TSTupleType":
      case "TSArrayType":
        return;

      default:
        this.raise(TSErrors.UnexpectedReadonly, {
          at: node
        });
    }
  }

  tsParseInferType() {
    const node = this.startNode();
    this.expectContextual(112);
    const typeParameter = this.startNode();
    typeParameter.name = this.tsParseTypeParameterName();
    typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());
    node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
    return this.finishNode(node, "TSInferType");
  }

  tsParseConstraintForInferType() {
    if (this.eat(81)) {
      const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());

      if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {
        return constraint;
      }
    }
  }

  tsParseTypeOperatorOrHigher() {
    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(112) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
  }

  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
    const node = this.startNode();
    const hasLeadingOperator = this.eat(operator);
    const types = [];

    do {
      types.push(parseConstituentType());
    } while (this.eat(operator));

    if (types.length === 1 && !hasLeadingOperator) {
      return types[0];
    }

    node.types = types;
    return this.finishNode(node, kind);
  }

  tsParseIntersectionTypeOrHigher() {
    return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
  }

  tsParseUnionTypeOrHigher() {
    return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
  }

  tsIsStartOfFunctionType() {
    if (this.match(47)) {
      return true;
    }

    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
  }

  tsSkipParameterStart() {
    if (tokenIsIdentifier(this.state.type) || this.match(78)) {
      this.next();
      return true;
    }

    if (this.match(5)) {
      const {
        errors
      } = this.state;
      const previousErrorCount = errors.length;

      try {
        this.parseObjectLike(8, true);
        return errors.length === previousErrorCount;
      } catch (_unused) {
        return false;
      }
    }

    if (this.match(0)) {
      this.next();
      const {
        errors
      } = this.state;
      const previousErrorCount = errors.length;

      try {
        this.parseBindingList(3, 93, true);
        return errors.length === previousErrorCount;
      } catch (_unused2) {
        return false;
      }
    }

    return false;
  }

  tsIsUnambiguouslyStartOfFunctionType() {
    this.next();

    if (this.match(11) || this.match(21)) {
      return true;
    }

    if (this.tsSkipParameterStart()) {
      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
        return true;
      }

      if (this.match(11)) {
        this.next();

        if (this.match(19)) {
          return true;
        }
      }
    }

    return false;
  }

  tsParseTypeOrTypePredicateAnnotation(returnToken) {
    return this.tsInType(() => {
      const t = this.startNode();
      this.expect(returnToken);
      const node = this.startNode();
      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));

      if (asserts && this.match(78)) {
        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();

        if (thisTypePredicate.type === "TSThisType") {
          node.parameterName = thisTypePredicate;
          node.asserts = true;
          node.typeAnnotation = null;
          thisTypePredicate = this.finishNode(node, "TSTypePredicate");
        } else {
          this.resetStartLocationFromNode(thisTypePredicate, node);
          thisTypePredicate.asserts = true;
        }

        t.typeAnnotation = thisTypePredicate;
        return this.finishNode(t, "TSTypeAnnotation");
      }

      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));

      if (!typePredicateVariable) {
        if (!asserts) {
          return this.tsParseTypeAnnotation(false, t);
        }

        node.parameterName = this.parseIdentifier();
        node.asserts = asserts;
        node.typeAnnotation = null;
        t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
        return this.finishNode(t, "TSTypeAnnotation");
      }

      const type = this.tsParseTypeAnnotation(false);
      node.parameterName = typePredicateVariable;
      node.typeAnnotation = type;
      node.asserts = asserts;
      t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
      return this.finishNode(t, "TSTypeAnnotation");
    });
  }

  tsTryParseTypeOrTypePredicateAnnotation() {
    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;
  }

  tsTryParseTypeAnnotation() {
    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;
  }

  tsTryParseType() {
    return this.tsEatThenParseType(14);
  }

  tsParseTypePredicatePrefix() {
    const id = this.parseIdentifier();

    if (this.isContextual(113) && !this.hasPrecedingLineBreak()) {
      this.next();
      return id;
    }
  }

  tsParseTypePredicateAsserts() {
    if (this.state.type !== 106) {
      return false;
    }

    const containsEsc = this.state.containsEsc;
    this.next();

    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {
      return false;
    }

    if (containsEsc) {
      this.raise(Errors.InvalidEscapedReservedWord, {
        at: this.state.lastTokStartLoc,
        reservedWord: "asserts"
      });
    }

    return true;
  }

  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
    this.tsInType(() => {
      if (eatColon) this.expect(14);
      t.typeAnnotation = this.tsParseType();
    });
    return this.finishNode(t, "TSTypeAnnotation");
  }

  tsParseType() {
    assert(this.state.inType);
    const type = this.tsParseNonConditionalType();

    if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {
      return type;
    }

    const node = this.startNodeAtNode(type);
    node.checkType = type;
    node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());
    this.expect(17);
    node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
    this.expect(14);
    node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
    return this.finishNode(node, "TSConditionalType");
  }

  isAbstractConstructorSignature() {
    return this.isContextual(120) && this.lookahead().type === 77;
  }

  tsParseNonConditionalType() {
    if (this.tsIsStartOfFunctionType()) {
      return this.tsParseFunctionOrConstructorType("TSFunctionType");
    }

    if (this.match(77)) {
      return this.tsParseFunctionOrConstructorType("TSConstructorType");
    } else if (this.isAbstractConstructorSignature()) {
      return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
    }

    return this.tsParseUnionTypeOrHigher();
  }

  tsParseTypeAssertion() {
    if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
      this.raise(TSErrors.ReservedTypeAssertion, {
        at: this.state.startLoc
      });
    }

    const node = this.startNode();

    const _const = this.tsTryNextParseConstantContext();

    node.typeAnnotation = _const || this.tsNextThenParseType();
    this.expect(48);
    node.expression = this.parseMaybeUnary();
    return this.finishNode(node, "TSTypeAssertion");
  }

  tsParseHeritageClause(token) {
    const originalStartLoc = this.state.startLoc;
    const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
      const node = this.startNode();
      node.expression = this.tsParseEntityName();

      if (this.match(47)) {
        node.typeParameters = this.tsParseTypeArguments();
      }

      return this.finishNode(node, "TSExpressionWithTypeArguments");
    });

    if (!delimitedList.length) {
      this.raise(TSErrors.EmptyHeritageClauseType, {
        at: originalStartLoc,
        token
      });
    }

    return delimitedList;
  }

  tsParseInterfaceDeclaration(node, properties = {}) {
    if (this.hasFollowingLineBreak()) return null;
    this.expectContextual(125);
    if (properties.declare) node.declare = true;

    if (tokenIsIdentifier(this.state.type)) {
      node.id = this.parseIdentifier();
      this.checkIdentifier(node.id, BIND_TS_INTERFACE);
    } else {
      node.id = null;
      this.raise(TSErrors.MissingInterfaceName, {
        at: this.state.startLoc
      });
    }

    node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));

    if (this.eat(81)) {
      node.extends = this.tsParseHeritageClause("extends");
    }

    const body = this.startNode();
    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
    node.body = this.finishNode(body, "TSInterfaceBody");
    return this.finishNode(node, "TSInterfaceDeclaration");
  }

  tsParseTypeAliasDeclaration(node) {
    node.id = this.parseIdentifier();
    this.checkIdentifier(node.id, BIND_TS_TYPE);
    node.typeAnnotation = this.tsInType(() => {
      node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));
      this.expect(29);

      if (this.isContextual(111) && this.lookahead().type !== 16) {
        const node = this.startNode();
        this.next();
        return this.finishNode(node, "TSIntrinsicKeyword");
      }

      return this.tsParseType();
    });
    this.semicolon();
    return this.finishNode(node, "TSTypeAliasDeclaration");
  }

  tsInNoContext(cb) {
    const oldContext = this.state.context;
    this.state.context = [oldContext[0]];

    try {
      return cb();
    } finally {
      this.state.context = oldContext;
    }
  }

  tsInType(cb) {
    const oldInType = this.state.inType;
    this.state.inType = true;

    try {
      return cb();
    } finally {
      this.state.inType = oldInType;
    }
  }

  tsInDisallowConditionalTypesContext(cb) {
    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
    this.state.inDisallowConditionalTypesContext = true;

    try {
      return cb();
    } finally {
      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
    }
  }

  tsInAllowConditionalTypesContext(cb) {
    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
    this.state.inDisallowConditionalTypesContext = false;

    try {
      return cb();
    } finally {
      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
    }
  }

  tsEatThenParseType(token) {
    return !this.match(token) ? undefined : this.tsNextThenParseType();
  }

  tsExpectThenParseType(token) {
    return this.tsDoThenParseType(() => this.expect(token));
  }

  tsNextThenParseType() {
    return this.tsDoThenParseType(() => this.next());
  }

  tsDoThenParseType(cb) {
    return this.tsInType(() => {
      cb();
      return this.tsParseType();
    });
  }

  tsParseEnumMember() {
    const node = this.startNode();
    node.id = this.match(129) ? this.parseExprAtom() : this.parseIdentifier(true);

    if (this.eat(29)) {
      node.initializer = this.parseMaybeAssignAllowIn();
    }

    return this.finishNode(node, "TSEnumMember");
  }

  tsParseEnumDeclaration(node, properties = {}) {
    if (properties.const) node.const = true;
    if (properties.declare) node.declare = true;
    this.expectContextual(122);
    node.id = this.parseIdentifier();
    this.checkIdentifier(node.id, node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);
    this.expect(5);
    node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
    this.expect(8);
    return this.finishNode(node, "TSEnumDeclaration");
  }

  tsParseModuleBlock() {
    const node = this.startNode();
    this.scope.enter(SCOPE_OTHER);
    this.expect(5);
    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);
    this.scope.exit();
    return this.finishNode(node, "TSModuleBlock");
  }

  tsParseModuleOrNamespaceDeclaration(node, nested = false) {
    node.id = this.parseIdentifier();

    if (!nested) {
      this.checkIdentifier(node.id, BIND_TS_NAMESPACE);
    }

    if (this.eat(16)) {
      const inner = this.startNode();
      this.tsParseModuleOrNamespaceDeclaration(inner, true);
      node.body = inner;
    } else {
      this.scope.enter(SCOPE_TS_MODULE);
      this.prodParam.enter(PARAM);
      node.body = this.tsParseModuleBlock();
      this.prodParam.exit();
      this.scope.exit();
    }

    return this.finishNode(node, "TSModuleDeclaration");
  }

  tsParseAmbientExternalModuleDeclaration(node) {
    if (this.isContextual(109)) {
      node.global = true;
      node.id = this.parseIdentifier();
    } else if (this.match(129)) {
      node.id = this.parseExprAtom();
    } else {
      this.unexpected();
    }

    if (this.match(5)) {
      this.scope.enter(SCOPE_TS_MODULE);
      this.prodParam.enter(PARAM);
      node.body = this.tsParseModuleBlock();
      this.prodParam.exit();
      this.scope.exit();
    } else {
      this.semicolon();
    }

    return this.finishNode(node, "TSModuleDeclaration");
  }

  tsParseImportEqualsDeclaration(node, isExport) {
    node.isExport = isExport || false;
    node.id = this.parseIdentifier();
    this.checkIdentifier(node.id, BIND_LEXICAL);
    this.expect(29);
    const moduleReference = this.tsParseModuleReference();

    if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
      this.raise(TSErrors.ImportAliasHasImportType, {
        at: moduleReference
      });
    }

    node.moduleReference = moduleReference;
    this.semicolon();
    return this.finishNode(node, "TSImportEqualsDeclaration");
  }

  tsIsExternalModuleReference() {
    return this.isContextual(116) && this.lookaheadCharCode() === 40;
  }

  tsParseModuleReference() {
    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
  }

  tsParseExternalModuleReference() {
    const node = this.startNode();
    this.expectContextual(116);
    this.expect(10);

    if (!this.match(129)) {
      throw this.unexpected();
    }

    node.expression = this.parseExprAtom();
    this.expect(11);
    return this.finishNode(node, "TSExternalModuleReference");
  }

  tsLookAhead(f) {
    const state = this.state.clone();
    const res = f();
    this.state = state;
    return res;
  }

  tsTryParseAndCatch(f) {
    const result = this.tryParse(abort => f() || abort());
    if (result.aborted || !result.node) return undefined;
    if (result.error) this.state = result.failState;
    return result.node;
  }

  tsTryParse(f) {
    const state = this.state.clone();
    const result = f();

    if (result !== undefined && result !== false) {
      return result;
    } else {
      this.state = state;
      return undefined;
    }
  }

  tsTryParseDeclare(nany) {
    if (this.isLineTerminator()) {
      return;
    }

    let starttype = this.state.type;
    let kind;

    if (this.isContextual(99)) {
      starttype = 74;
      kind = "let";
    }

    return this.tsInAmbientContext(() => {
      if (starttype === 68) {
        nany.declare = true;
        return this.parseFunctionStatement(nany, false, true);
      }

      if (starttype === 80) {
        nany.declare = true;
        return this.parseClass(nany, true, false);
      }

      if (starttype === 122) {
        return this.tsParseEnumDeclaration(nany, {
          declare: true
        });
      }

      if (starttype === 109) {
        return this.tsParseAmbientExternalModuleDeclaration(nany);
      }

      if (starttype === 75 || starttype === 74) {
        if (!this.match(75) || !this.isLookaheadContextual("enum")) {
          nany.declare = true;
          return this.parseVarStatement(nany, kind || this.state.value, true);
        }

        this.expect(75);
        return this.tsParseEnumDeclaration(nany, {
          const: true,
          declare: true
        });
      }

      if (starttype === 125) {
        const result = this.tsParseInterfaceDeclaration(nany, {
          declare: true
        });
        if (result) return result;
      }

      if (tokenIsIdentifier(starttype)) {
        return this.tsParseDeclaration(nany, this.state.value, true);
      }
    });
  }

  tsTryParseExportDeclaration() {
    return this.tsParseDeclaration(this.startNode(), this.state.value, true);
  }

  tsParseExpressionStatement(node, expr) {
    switch (expr.name) {
      case "declare":
        {
          const declaration = this.tsTryParseDeclare(node);

          if (declaration) {
            declaration.declare = true;
            return declaration;
          }

          break;
        }

      case "global":
        if (this.match(5)) {
          this.scope.enter(SCOPE_TS_MODULE);
          this.prodParam.enter(PARAM);
          const mod = node;
          mod.global = true;
          mod.id = expr;
          mod.body = this.tsParseModuleBlock();
          this.scope.exit();
          this.prodParam.exit();
          return this.finishNode(mod, "TSModuleDeclaration");
        }

        break;

      default:
        return this.tsParseDeclaration(node, expr.name, false);
    }
  }

  tsParseDeclaration(node, value, next) {
    switch (value) {
      case "abstract":
        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {
          return this.tsParseAbstractDeclaration(node);
        }

        break;

      case "module":
        if (this.tsCheckLineTerminator(next)) {
          if (this.match(129)) {
            return this.tsParseAmbientExternalModuleDeclaration(node);
          } else if (tokenIsIdentifier(this.state.type)) {
            return this.tsParseModuleOrNamespaceDeclaration(node);
          }
        }

        break;

      case "namespace":
        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
          return this.tsParseModuleOrNamespaceDeclaration(node);
        }

        break;

      case "type":
        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
          return this.tsParseTypeAliasDeclaration(node);
        }

        break;
    }
  }

  tsCheckLineTerminator(next) {
    if (next) {
      if (this.hasFollowingLineBreak()) return false;
      this.next();
      return true;
    }

    return !this.isLineTerminator();
  }

  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {
    if (!this.match(47)) {
      return undefined;
    }

    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
    this.state.maybeInArrowParameters = true;
    const res = this.tsTryParseAndCatch(() => {
      const node = this.startNodeAt(startPos, startLoc);
      node.typeParameters = this.tsParseTypeParameters();
      super.parseFunctionParams(node);
      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
      this.expect(19);
      return node;
    });
    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;

    if (!res) {
      return undefined;
    }

    return this.parseArrowExpression(res, null, true);
  }

  tsParseTypeArgumentsInExpression() {
    if (this.reScan_lt() !== 47) {
      return undefined;
    }

    return this.tsParseTypeArguments();
  }

  tsParseTypeArguments() {
    const node = this.startNode();
    node.params = this.tsInType(() => this.tsInNoContext(() => {
      this.expect(47);
      return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
    }));

    if (node.params.length === 0) {
      this.raise(TSErrors.EmptyTypeArguments, {
        at: node
      });
    }

    this.expect(48);
    return this.finishNode(node, "TSTypeParameterInstantiation");
  }

  tsIsDeclarationStart() {
    return tokenIsTSDeclarationStart(this.state.type);
  }

  isExportDefaultSpecifier() {
    if (this.tsIsDeclarationStart()) return false;
    return super.isExportDefaultSpecifier();
  }

  parseAssignableListItem(allowModifiers, decorators) {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    let accessibility;
    let readonly = false;
    let override = false;

    if (allowModifiers !== undefined) {
      const modified = {};
      this.tsParseModifiers({
        modified,
        allowedModifiers: ["public", "private", "protected", "override", "readonly"]
      });
      accessibility = modified.accessibility;
      override = modified.override;
      readonly = modified.readonly;

      if (allowModifiers === false && (accessibility || readonly || override)) {
        this.raise(TSErrors.UnexpectedParameterModifier, {
          at: startLoc
        });
      }
    }

    const left = this.parseMaybeDefault();
    this.parseAssignableListItemTypes(left);
    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);

    if (accessibility || readonly || override) {
      const pp = this.startNodeAt(startPos, startLoc);

      if (decorators.length) {
        pp.decorators = decorators;
      }

      if (accessibility) pp.accessibility = accessibility;
      if (readonly) pp.readonly = readonly;
      if (override) pp.override = override;

      if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
        this.raise(TSErrors.UnsupportedParameterPropertyKind, {
          at: pp
        });
      }

      pp.parameter = elt;
      return this.finishNode(pp, "TSParameterProperty");
    }

    if (decorators.length) {
      left.decorators = decorators;
    }

    return elt;
  }

  isSimpleParameter(node) {
    return node.type === "TSParameterProperty" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
  }

  parseFunctionBodyAndFinish(node, type, isMethod = false) {
    if (this.match(14)) {
      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
    }

    const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : undefined;

    if (bodilessType && !this.match(5) && this.isLineTerminator()) {
      this.finishNode(node, bodilessType);
      return;
    }

    if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
      this.raise(TSErrors.DeclareFunctionHasImplementation, {
        at: node
      });

      if (node.declare) {
        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
        return;
      }
    }

    super.parseFunctionBodyAndFinish(node, type, isMethod);
  }

  registerFunctionStatementId(node) {
    if (!node.body && node.id) {
      this.checkIdentifier(node.id, BIND_TS_AMBIENT);
    } else {
      super.registerFunctionStatementId(...arguments);
    }
  }

  tsCheckForInvalidTypeCasts(items) {
    items.forEach(node => {
      if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") {
        this.raise(TSErrors.UnexpectedTypeAnnotation, {
          at: node.typeAnnotation
        });
      }
    });
  }

  toReferencedList(exprList, isInParens) {
    this.tsCheckForInvalidTypeCasts(exprList);
    return exprList;
  }

  parseArrayLike(...args) {
    const node = super.parseArrayLike(...args);

    if (node.type === "ArrayExpression") {
      this.tsCheckForInvalidTypeCasts(node.elements);
    }

    return node;
  }

  parseSubscript(base, startPos, startLoc, noCalls, state) {
    if (!this.hasPrecedingLineBreak() && this.match(35)) {
      this.state.canStartJSXElement = false;
      this.next();
      const nonNullExpression = this.startNodeAt(startPos, startLoc);
      nonNullExpression.expression = base;
      return this.finishNode(nonNullExpression, "TSNonNullExpression");
    }

    let isOptionalCall = false;

    if (this.match(18) && this.lookaheadCharCode() === 60) {
      if (noCalls) {
        state.stop = true;
        return base;
      }

      state.optionalChainMember = isOptionalCall = true;
      this.next();
    }

    if (this.match(47) || this.match(51)) {
      let missingParenErrorLoc;
      const result = this.tsTryParseAndCatch(() => {
        if (!noCalls && this.atPossibleAsyncArrow(base)) {
          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);

          if (asyncArrowFn) {
            return asyncArrowFn;
          }
        }

        const typeArguments = this.tsParseTypeArgumentsInExpression();
        if (!typeArguments) throw this.unexpected();

        if (isOptionalCall && !this.match(10)) {
          missingParenErrorLoc = this.state.curPosition();
          throw this.unexpected();
        }

        if (tokenIsTemplate(this.state.type)) {
          const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
          result.typeParameters = typeArguments;
          return result;
        }

        if (!noCalls && this.eat(10)) {
          const node = this.startNodeAt(startPos, startLoc);
          node.callee = base;
          node.arguments = this.parseCallExpressionArguments(11, false);
          this.tsCheckForInvalidTypeCasts(node.arguments);
          node.typeParameters = typeArguments;

          if (state.optionalChainMember) {
            node.optional = isOptionalCall;
          }

          return this.finishCallExpression(node, state.optionalChainMember);
        }

        if (tsTokenCanStartExpression(this.state.type) && this.state.type !== 10) {
          throw this.unexpected();
        }

        const node = this.startNodeAt(startPos, startLoc);
        node.expression = base;
        node.typeParameters = typeArguments;
        return this.finishNode(node, "TSInstantiationExpression");
      });

      if (missingParenErrorLoc) {
        this.unexpected(missingParenErrorLoc, 10);
      }

      if (result) return result;
    }

    return super.parseSubscript(base, startPos, startLoc, noCalls, state);
  }

  parseNewCallee(node) {
    var _callee$extra;

    super.parseNewCallee(node);
    const {
      callee
    } = node;

    if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {
      node.typeParameters = callee.typeParameters;
      node.callee = callee.expression;
    }
  }

  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(93)) {
      const node = this.startNodeAt(leftStartPos, leftStartLoc);
      node.expression = left;

      const _const = this.tsTryNextParseConstantContext();

      if (_const) {
        node.typeAnnotation = _const;
      } else {
        node.typeAnnotation = this.tsNextThenParseType();
      }

      this.finishNode(node, "TSAsExpression");
      this.reScan_lt_gt();
      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
    }

    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);
  }

  checkReservedWord(word, startLoc, checkKeywords, isBinding) {
    if (!this.state.isAmbientContext) {
      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
    }
  }

  checkDuplicateExports() {}

  parseImport(node) {
    node.importKind = "value";

    if (tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {
      let ahead = this.lookahead();

      if (this.isContextual(126) && ahead.type !== 12 && ahead.type !== 97 && ahead.type !== 29) {
        node.importKind = "type";
        this.next();
        ahead = this.lookahead();
      }

      if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {
        return this.tsParseImportEqualsDeclaration(node);
      }
    }

    const importNode = super.parseImport(node);

    if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {
        at: importNode
      });
    }

    return importNode;
  }

  parseExport(node) {
    if (this.match(83)) {
      this.next();

      if (this.isContextual(126) && this.lookaheadCharCode() !== 61) {
        node.importKind = "type";
        this.next();
      } else {
        node.importKind = "value";
      }

      return this.tsParseImportEqualsDeclaration(node, true);
    } else if (this.eat(29)) {
      const assign = node;
      assign.expression = this.parseExpression();
      this.semicolon();
      return this.finishNode(assign, "TSExportAssignment");
    } else if (this.eatContextual(93)) {
      const decl = node;
      this.expectContextual(124);
      decl.id = this.parseIdentifier();
      this.semicolon();
      return this.finishNode(decl, "TSNamespaceExportDeclaration");
    } else {
      if (this.isContextual(126) && this.lookahead().type === 5) {
        this.next();
        node.exportKind = "type";
      } else {
        node.exportKind = "value";
      }

      return super.parseExport(node);
    }
  }

  isAbstractClass() {
    return this.isContextual(120) && this.lookahead().type === 80;
  }

  parseExportDefaultExpression() {
    if (this.isAbstractClass()) {
      const cls = this.startNode();
      this.next();
      cls.abstract = true;
      this.parseClass(cls, true, true);
      return cls;
    }

    if (this.match(125)) {
      const result = this.tsParseInterfaceDeclaration(this.startNode());
      if (result) return result;
    }

    return super.parseExportDefaultExpression();
  }

  parseVarStatement(node, kind, allowMissingInitializer = false) {
    const {
      isAmbientContext
    } = this.state;
    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
    if (!isAmbientContext) return declaration;

    for (const {
      id,
      init
    } of declaration.declarations) {
      if (!init) continue;

      if (kind !== "const" || !!id.typeAnnotation) {
        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {
          at: init
        });
      } else if (init.type !== "StringLiteral" && init.type !== "BooleanLiteral" && init.type !== "NumericLiteral" && init.type !== "BigIntLiteral" && (init.type !== "TemplateLiteral" || init.expressions.length > 0) && !isPossiblyLiteralEnum(init)) {
        this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {
          at: init
        });
      }
    }

    return declaration;
  }

  parseStatementContent(context, topLevel) {
    if (this.match(75) && this.isLookaheadContextual("enum")) {
      const node = this.startNode();
      this.expect(75);
      return this.tsParseEnumDeclaration(node, {
        const: true
      });
    }

    if (this.isContextual(122)) {
      return this.tsParseEnumDeclaration(this.startNode());
    }

    if (this.isContextual(125)) {
      const result = this.tsParseInterfaceDeclaration(this.startNode());
      if (result) return result;
    }

    return super.parseStatementContent(context, topLevel);
  }

  parseAccessModifier() {
    return this.tsParseModifier(["public", "protected", "private"]);
  }

  tsHasSomeModifiers(member, modifiers) {
    return modifiers.some(modifier => {
      if (tsIsAccessModifier(modifier)) {
        return member.accessibility === modifier;
      }

      return !!member[modifier];
    });
  }

  tsIsStartOfStaticBlocks() {
    return this.isContextual(104) && this.lookaheadCharCode() === 123;
  }

  parseClassMember(classBody, member, state) {
    const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
    this.tsParseModifiers({
      modified: member,
      allowedModifiers: modifiers,
      disallowedModifiers: ["in", "out"],
      stopOnStartOfClassStaticBlock: true,
      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
    });

    const callParseClassMemberWithIsStatic = () => {
      if (this.tsIsStartOfStaticBlocks()) {
        this.next();
        this.next();

        if (this.tsHasSomeModifiers(member, modifiers)) {
          this.raise(TSErrors.StaticBlockCannotHaveModifier, {
            at: this.state.curPosition()
          });
        }

        this.parseClassStaticBlock(classBody, member);
      } else {
        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
      }
    };

    if (member.declare) {
      this.tsInAmbientContext(callParseClassMemberWithIsStatic);
    } else {
      callParseClassMemberWithIsStatic();
    }
  }

  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
    const idx = this.tsTryParseIndexSignature(member);

    if (idx) {
      classBody.body.push(idx);

      if (member.abstract) {
        this.raise(TSErrors.IndexSignatureHasAbstract, {
          at: member
        });
      }

      if (member.accessibility) {
        this.raise(TSErrors.IndexSignatureHasAccessibility, {
          at: member,
          modifier: member.accessibility
        });
      }

      if (member.declare) {
        this.raise(TSErrors.IndexSignatureHasDeclare, {
          at: member
        });
      }

      if (member.override) {
        this.raise(TSErrors.IndexSignatureHasOverride, {
          at: member
        });
      }

      return;
    }

    if (!this.state.inAbstractClass && member.abstract) {
      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {
        at: member
      });
    }

    if (member.override) {
      if (!state.hadSuperClass) {
        this.raise(TSErrors.OverrideNotInSubClass, {
          at: member
        });
      }
    }

    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
  }

  parsePostMemberNameModifiers(methodOrProp) {
    const optional = this.eat(17);
    if (optional) methodOrProp.optional = true;

    if (methodOrProp.readonly && this.match(10)) {
      this.raise(TSErrors.ClassMethodHasReadonly, {
        at: methodOrProp
      });
    }

    if (methodOrProp.declare && this.match(10)) {
      this.raise(TSErrors.ClassMethodHasDeclare, {
        at: methodOrProp
      });
    }
  }

  parseExpressionStatement(node, expr) {
    const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr) : undefined;
    return decl || super.parseExpressionStatement(node, expr);
  }

  shouldParseExportDeclaration() {
    if (this.tsIsDeclarationStart()) return true;
    return super.shouldParseExportDeclaration();
  }

  parseConditional(expr, startPos, startLoc, refExpressionErrors) {
    if (!this.state.maybeInArrowParameters || !this.match(17)) {
      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);
    }

    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));

    if (!result.node) {
      if (result.error) {
        super.setOptionalParametersError(refExpressionErrors, result.error);
      }

      return expr;
    }

    if (result.error) this.state = result.failState;
    return result.node;
  }

  parseParenItem(node, startPos, startLoc) {
    node = super.parseParenItem(node, startPos, startLoc);

    if (this.eat(17)) {
      node.optional = true;
      this.resetEndLocation(node);
    }

    if (this.match(14)) {
      const typeCastNode = this.startNodeAt(startPos, startLoc);
      typeCastNode.expression = node;
      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
      return this.finishNode(typeCastNode, "TSTypeCastExpression");
    }

    return node;
  }

  parseExportDeclaration(node) {
    if (!this.state.isAmbientContext && this.isContextual(121)) {
      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
    }

    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    const isDeclare = this.eatContextual(121);

    if (isDeclare && (this.isContextual(121) || !this.shouldParseExportDeclaration())) {
      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {
        at: this.state.startLoc
      });
    }

    const isIdentifier = tokenIsIdentifier(this.state.type);
    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
    if (!declaration) return null;

    if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) {
      node.exportKind = "type";
    }

    if (isDeclare) {
      this.resetStartLocation(declaration, startPos, startLoc);
      declaration.declare = true;
    }

    return declaration;
  }

  parseClassId(node, isStatement, optionalId) {
    if ((!isStatement || optionalId) && this.isContextual(110)) {
      return;
    }

    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);
    const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));
    if (typeParameters) node.typeParameters = typeParameters;
  }

  parseClassPropertyAnnotation(node) {
    if (!node.optional && this.eat(35)) {
      node.definite = true;
    }

    const type = this.tsTryParseTypeAnnotation();
    if (type) node.typeAnnotation = type;
  }

  parseClassProperty(node) {
    this.parseClassPropertyAnnotation(node);

    if (this.state.isAmbientContext && this.match(29)) {
      this.raise(TSErrors.DeclareClassFieldHasInitializer, {
        at: this.state.startLoc
      });
    }

    if (node.abstract && this.match(29)) {
      const {
        key
      } = node;
      this.raise(TSErrors.AbstractPropertyHasInitializer, {
        at: this.state.startLoc,
        propertyName: key.type === "Identifier" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
      });
    }

    return super.parseClassProperty(node);
  }

  parseClassPrivateProperty(node) {
    if (node.abstract) {
      this.raise(TSErrors.PrivateElementHasAbstract, {
        at: node
      });
    }

    if (node.accessibility) {
      this.raise(TSErrors.PrivateElementHasAccessibility, {
        at: node,
        modifier: node.accessibility
      });
    }

    this.parseClassPropertyAnnotation(node);
    return super.parseClassPrivateProperty(node);
  }

  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
    const typeParameters = this.tsTryParseTypeParameters();

    if (typeParameters && isConstructor) {
      this.raise(TSErrors.ConstructorHasTypeParameters, {
        at: typeParameters
      });
    }

    const {
      declare = false,
      kind
    } = method;

    if (declare && (kind === "get" || kind === "set")) {
      this.raise(TSErrors.DeclareAccessor, {
        at: method,
        kind
      });
    }

    if (typeParameters) method.typeParameters = typeParameters;
    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
  }

  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
    const typeParameters = this.tsTryParseTypeParameters();
    if (typeParameters) method.typeParameters = typeParameters;
    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
  }

  declareClassPrivateMethodInScope(node, kind) {
    if (node.type === "TSDeclareMethod") return;
    if (node.type === "MethodDefinition" && !node.value.body) return;
    super.declareClassPrivateMethodInScope(node, kind);
  }

  parseClassSuper(node) {
    super.parseClassSuper(node);

    if (node.superClass && (this.match(47) || this.match(51))) {
      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();
    }

    if (this.eatContextual(110)) {
      node.implements = this.tsParseHeritageClause("implements");
    }
  }

  parseObjPropValue(prop, ...args) {
    const typeParameters = this.tsTryParseTypeParameters();
    if (typeParameters) prop.typeParameters = typeParameters;
    super.parseObjPropValue(prop, ...args);
  }

  parseFunctionParams(node, allowModifiers) {
    const typeParameters = this.tsTryParseTypeParameters();
    if (typeParameters) node.typeParameters = typeParameters;
    super.parseFunctionParams(node, allowModifiers);
  }

  parseVarId(decl, kind) {
    super.parseVarId(decl, kind);

    if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {
      decl.definite = true;
    }

    const type = this.tsTryParseTypeAnnotation();

    if (type) {
      decl.id.typeAnnotation = type;
      this.resetEndLocation(decl.id);
    }
  }

  parseAsyncArrowFromCallExpression(node, call) {
    if (this.match(14)) {
      node.returnType = this.tsParseTypeAnnotation();
    }

    return super.parseAsyncArrowFromCallExpression(node, call);
  }

  parseMaybeAssign(...args) {
    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;

    let state;
    let jsx;
    let typeCast;

    if (this.hasPlugin("jsx") && (this.match(138) || this.match(47))) {
      state = this.state.clone();
      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);
      if (!jsx.error) return jsx.node;
      const {
        context
      } = this.state;
      const currentContext = context[context.length - 1];

      if (currentContext === types.j_oTag || currentContext === types.j_expr) {
        context.pop();
      }
    }

    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {
      return super.parseMaybeAssign(...args);
    }

    if (!state || state === this.state) state = this.state.clone();
    let typeParameters;
    const arrow = this.tryParse(abort => {
      var _expr$extra, _typeParameters;

      typeParameters = this.tsParseTypeParameters();
      const expr = super.parseMaybeAssign(...args);

      if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
        abort();
      }

      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
        this.resetStartLocationFromNode(expr, typeParameters);
      }

      expr.typeParameters = typeParameters;
      return expr;
    }, state);

    if (!arrow.error && !arrow.aborted) {
      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
      return arrow.node;
    }

    if (!jsx) {
      assert(!this.hasPlugin("jsx"));
      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);
      if (!typeCast.error) return typeCast.node;
    }

    if ((_jsx2 = jsx) != null && _jsx2.node) {
      this.state = jsx.failState;
      return jsx.node;
    }

    if (arrow.node) {
      this.state = arrow.failState;
      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
      return arrow.node;
    }

    if ((_typeCast = typeCast) != null && _typeCast.node) {
      this.state = typeCast.failState;
      return typeCast.node;
    }

    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
    if (arrow.thrown) throw arrow.error;
    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;
    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);
  }

  reportReservedArrowTypeParam(node) {
    var _node$extra;

    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
      this.raise(TSErrors.ReservedArrowTypeParam, {
        at: node
      });
    }
  }

  parseMaybeUnary(refExpressionErrors) {
    if (!this.hasPlugin("jsx") && this.match(47)) {
      return this.tsParseTypeAssertion();
    } else {
      return super.parseMaybeUnary(refExpressionErrors);
    }
  }

  parseArrow(node) {
    if (this.match(14)) {
      const result = this.tryParse(abort => {
        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
        if (this.canInsertSemicolon() || !this.match(19)) abort();
        return returnType;
      });
      if (result.aborted) return;

      if (!result.thrown) {
        if (result.error) this.state = result.failState;
        node.returnType = result.node;
      }
    }

    return super.parseArrow(node);
  }

  parseAssignableListItemTypes(param) {
    if (this.eat(17)) {
      if (param.type !== "Identifier" && !this.state.isAmbientContext && !this.state.inType) {
        this.raise(TSErrors.PatternIsOptional, {
          at: param
        });
      }

      param.optional = true;
    }

    const type = this.tsTryParseTypeAnnotation();
    if (type) param.typeAnnotation = type;
    this.resetEndLocation(param);
    return param;
  }

  isAssignable(node, isBinding) {
    switch (node.type) {
      case "TSTypeCastExpression":
        return this.isAssignable(node.expression, isBinding);

      case "TSParameterProperty":
        return true;

      default:
        return super.isAssignable(node, isBinding);
    }
  }

  toAssignable(node, isLHS = false) {
    switch (node.type) {
      case "ParenthesizedExpression":
        this.toAssignableParenthesizedExpression(node, isLHS);
        break;

      case "TSAsExpression":
      case "TSNonNullExpression":
      case "TSTypeAssertion":
        if (isLHS) {
          this.expressionScope.recordArrowParemeterBindingError(TSErrors.UnexpectedTypeCastInParameter, {
            at: node
          });
        } else {
          this.raise(TSErrors.UnexpectedTypeCastInParameter, {
            at: node
          });
        }

        this.toAssignable(node.expression, isLHS);
        break;

      case "AssignmentExpression":
        if (!isLHS && node.left.type === "TSTypeCastExpression") {
          node.left = this.typeCastToParameter(node.left);
        }

      default:
        super.toAssignable(node, isLHS);
    }
  }

  toAssignableParenthesizedExpression(node, isLHS) {
    switch (node.expression.type) {
      case "TSAsExpression":
      case "TSNonNullExpression":
      case "TSTypeAssertion":
      case "ParenthesizedExpression":
        this.toAssignable(node.expression, isLHS);
        break;

      default:
        super.toAssignable(node, isLHS);
    }
  }

  checkToRestConversion(node, allowPattern) {
    switch (node.type) {
      case "TSAsExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        this.checkToRestConversion(node.expression, false);
        break;

      default:
        super.checkToRestConversion(node, allowPattern);
    }
  }

  isValidLVal(type, isUnparenthesizedInAssign, binding) {
    return getOwn$1({
      TSTypeCastExpression: true,
      TSParameterProperty: "parameter",
      TSNonNullExpression: "expression",
      TSAsExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && ["expression", true],
      TSTypeAssertion: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && ["expression", true]
    }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);
  }

  parseBindingAtom() {
    switch (this.state.type) {
      case 78:
        return this.parseIdentifier(true);

      default:
        return super.parseBindingAtom();
    }
  }

  parseMaybeDecoratorArguments(expr) {
    if (this.match(47) || this.match(51)) {
      const typeArguments = this.tsParseTypeArgumentsInExpression();

      if (this.match(10)) {
        const call = super.parseMaybeDecoratorArguments(expr);
        call.typeParameters = typeArguments;
        return call;
      }

      this.unexpected(null, 10);
    }

    return super.parseMaybeDecoratorArguments(expr);
  }

  checkCommaAfterRest(close) {
    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
      this.next();
      return false;
    } else {
      return super.checkCommaAfterRest(close);
    }
  }

  isClassMethod() {
    return this.match(47) || super.isClassMethod();
  }

  isClassProperty() {
    return this.match(35) || this.match(14) || super.isClassProperty();
  }

  parseMaybeDefault(...args) {
    const node = super.parseMaybeDefault(...args);

    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
      this.raise(TSErrors.TypeAnnotationAfterAssign, {
        at: node.typeAnnotation
      });
    }

    return node;
  }

  getTokenFromCode(code) {
    if (this.state.inType) {
      if (code === 62) {
        return this.finishOp(48, 1);
      }

      if (code === 60) {
        return this.finishOp(47, 1);
      }
    }

    return super.getTokenFromCode(code);
  }

  reScan_lt_gt() {
    const {
      type
    } = this.state;

    if (type === 47) {
      this.state.pos -= 1;
      this.readToken_lt();
    } else if (type === 48) {
      this.state.pos -= 1;
      this.readToken_gt();
    }
  }

  reScan_lt() {
    const {
      type
    } = this.state;

    if (type === 51) {
      this.state.pos -= 2;
      this.finishOp(47, 1);
      return 47;
    }

    return type;
  }

  toAssignableList(exprList) {
    for (let i = 0; i < exprList.length; i++) {
      const expr = exprList[i];

      if ((expr == null ? void 0 : expr.type) === "TSTypeCastExpression") {
        exprList[i] = this.typeCastToParameter(expr);
      }
    }

    super.toAssignableList(...arguments);
  }

  typeCastToParameter(node) {
    node.expression.typeAnnotation = node.typeAnnotation;
    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
    return node.expression;
  }

  shouldParseArrow(params) {
    if (this.match(14)) {
      return params.every(expr => this.isAssignable(expr, true));
    }

    return super.shouldParseArrow(params);
  }

  shouldParseAsyncArrow() {
    return this.match(14) || super.shouldParseAsyncArrow();
  }

  canHaveLeadingDecorator() {
    return super.canHaveLeadingDecorator() || this.isAbstractClass();
  }

  jsxParseOpeningElementAfterName(node) {
    if (this.match(47) || this.match(51)) {
      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
      if (typeArguments) node.typeParameters = typeArguments;
    }

    return super.jsxParseOpeningElementAfterName(node);
  }

  getGetterSetterExpectedParamCount(method) {
    const baseCount = super.getGetterSetterExpectedParamCount(method);
    const params = this.getObjectOrClassMethodParams(method);
    const firstParam = params[0];
    const hasContextParam = firstParam && this.isThisParam(firstParam);
    return hasContextParam ? baseCount + 1 : baseCount;
  }

  parseCatchClauseParam() {
    const param = super.parseCatchClauseParam();
    const type = this.tsTryParseTypeAnnotation();

    if (type) {
      param.typeAnnotation = type;
      this.resetEndLocation(param);
    }

    return param;
  }

  tsInAmbientContext(cb) {
    const oldIsAmbientContext = this.state.isAmbientContext;
    this.state.isAmbientContext = true;

    try {
      return cb();
    } finally {
      this.state.isAmbientContext = oldIsAmbientContext;
    }
  }

  parseClass(node, ...args) {
    const oldInAbstractClass = this.state.inAbstractClass;
    this.state.inAbstractClass = !!node.abstract;

    try {
      return super.parseClass(node, ...args);
    } finally {
      this.state.inAbstractClass = oldInAbstractClass;
    }
  }

  tsParseAbstractDeclaration(node) {
    if (this.match(80)) {
      node.abstract = true;
      return this.parseClass(node, true, false);
    } else if (this.isContextual(125)) {
      if (!this.hasFollowingLineBreak()) {
        node.abstract = true;
        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {
          at: node
        });
        return this.tsParseInterfaceDeclaration(node);
      }
    } else {
      this.unexpected(null, 80);
    }
  }

  parseMethod(...args) {
    const method = super.parseMethod(...args);

    if (method.abstract) {
      const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;

      if (hasBody) {
        const {
          key
        } = method;
        this.raise(TSErrors.AbstractMethodHasImplementation, {
          at: method,
          methodName: key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
        });
      }
    }

    return method;
  }

  tsParseTypeParameterName() {
    const typeName = this.parseIdentifier();
    return typeName.name;
  }

  shouldParseAsAmbientContext() {
    return !!this.getPluginOption("typescript", "dts");
  }

  parse() {
    if (this.shouldParseAsAmbientContext()) {
      this.state.isAmbientContext = true;
    }

    return super.parse();
  }

  getExpression() {
    if (this.shouldParseAsAmbientContext()) {
      this.state.isAmbientContext = true;
    }

    return super.getExpression();
  }

  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
    if (!isString && isMaybeTypeOnly) {
      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);
      return this.finishNode(node, "ExportSpecifier");
    }

    node.exportKind = "value";
    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);
  }

  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
    if (!importedIsString && isMaybeTypeOnly) {
      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
      return this.finishNode(specifier, "ImportSpecifier");
    }

    specifier.importKind = "value";
    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);
  }

  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
    const leftOfAsKey = isImport ? "imported" : "local";
    const rightOfAsKey = isImport ? "local" : "exported";
    let leftOfAs = node[leftOfAsKey];
    let rightOfAs;
    let hasTypeSpecifier = false;
    let canParseAsKeyword = true;
    const loc = leftOfAs.loc.start;

    if (this.isContextual(93)) {
      const firstAs = this.parseIdentifier();

      if (this.isContextual(93)) {
        const secondAs = this.parseIdentifier();

        if (tokenIsKeywordOrIdentifier(this.state.type)) {
          hasTypeSpecifier = true;
          leftOfAs = firstAs;
          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
          canParseAsKeyword = false;
        } else {
          rightOfAs = secondAs;
          canParseAsKeyword = false;
        }
      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
        canParseAsKeyword = false;
        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
      } else {
        hasTypeSpecifier = true;
        leftOfAs = firstAs;
      }
    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
      hasTypeSpecifier = true;

      if (isImport) {
        leftOfAs = this.parseIdentifier(true);

        if (!this.isContextual(93)) {
          this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);
        }
      } else {
        leftOfAs = this.parseModuleExportName();
      }
    }

    if (hasTypeSpecifier && isInTypeOnlyImportExport) {
      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {
        at: loc
      });
    }

    node[leftOfAsKey] = leftOfAs;
    node[rightOfAsKey] = rightOfAs;
    const kindKey = isImport ? "importKind" : "exportKind";
    node[kindKey] = hasTypeSpecifier ? "type" : "value";

    if (canParseAsKeyword && this.eatContextual(93)) {
      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
    }

    if (!node[rightOfAsKey]) {
      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);
    }

    if (isImport) {
      this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);
    }
  }

});

function isPossiblyLiteralEnum(expression) {
  if (expression.type !== "MemberExpression") return false;
  const {
    computed,
    property
  } = expression;

  if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) {
    return false;
  }

  return isUncomputedMemberExpressionChain(expression.object);
}

function isUncomputedMemberExpressionChain(expression) {
  if (expression.type === "Identifier") return true;
  if (expression.type !== "MemberExpression") return false;
  if (expression.computed) return false;
  return isUncomputedMemberExpressionChain(expression.object);
}

const PlaceholderErrors = ParseErrorEnum`placeholders`(_ => ({
  ClassNameIsRequired: _("A class name is required."),
  UnexpectedSpace: _("Unexpected space in placeholder.")
}));
var placeholders = (superClass => class extends superClass {
  parsePlaceholder(expectedNode) {
    if (this.match(140)) {
      const node = this.startNode();
      this.next();
      this.assertNoSpace();
      node.name = super.parseIdentifier(true);
      this.assertNoSpace();
      this.expect(140);
      return this.finishPlaceholder(node, expectedNode);
    }
  }

  finishPlaceholder(node, expectedNode) {
    const isFinished = !!(node.expectedNode && node.type === "Placeholder");
    node.expectedNode = expectedNode;
    return isFinished ? node : this.finishNode(node, "Placeholder");
  }

  getTokenFromCode(code) {
    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
      return this.finishOp(140, 2);
    }

    return super.getTokenFromCode(...arguments);
  }

  parseExprAtom() {
    return this.parsePlaceholder("Expression") || super.parseExprAtom(...arguments);
  }

  parseIdentifier() {
    return this.parsePlaceholder("Identifier") || super.parseIdentifier(...arguments);
  }

  checkReservedWord(word) {
    if (word !== undefined) super.checkReservedWord(...arguments);
  }

  parseBindingAtom() {
    return this.parsePlaceholder("Pattern") || super.parseBindingAtom(...arguments);
  }

  isValidLVal(type, ...rest) {
    return type === "Placeholder" || super.isValidLVal(type, ...rest);
  }

  toAssignable(node) {
    if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {
      node.expectedNode = "Pattern";
    } else {
      super.toAssignable(...arguments);
    }
  }

  isLet(context) {
    if (super.isLet(context)) {
      return true;
    }

    if (!this.isContextual(99)) {
      return false;
    }

    if (context) return false;
    const nextToken = this.lookahead();

    if (nextToken.type === 140) {
      return true;
    }

    return false;
  }

  verifyBreakContinue(node) {
    if (node.label && node.label.type === "Placeholder") return;
    super.verifyBreakContinue(...arguments);
  }

  parseExpressionStatement(node, expr) {
    if (expr.type !== "Placeholder" || expr.extra && expr.extra.parenthesized) {
      return super.parseExpressionStatement(...arguments);
    }

    if (this.match(14)) {
      const stmt = node;
      stmt.label = this.finishPlaceholder(expr, "Identifier");
      this.next();
      stmt.body = this.parseStatement("label");
      return this.finishNode(stmt, "LabeledStatement");
    }

    this.semicolon();
    node.name = expr.name;
    return this.finishPlaceholder(node, "Statement");
  }

  parseBlock() {
    return this.parsePlaceholder("BlockStatement") || super.parseBlock(...arguments);
  }

  parseFunctionId() {
    return this.parsePlaceholder("Identifier") || super.parseFunctionId(...arguments);
  }

  parseClass(node, isStatement, optionalId) {
    const type = isStatement ? "ClassDeclaration" : "ClassExpression";
    this.next();
    this.takeDecorators(node);
    const oldStrict = this.state.strict;
    const placeholder = this.parsePlaceholder("Identifier");

    if (placeholder) {
      if (this.match(81) || this.match(140) || this.match(5)) {
        node.id = placeholder;
      } else if (optionalId || !isStatement) {
        node.id = null;
        node.body = this.finishPlaceholder(placeholder, "ClassBody");
        return this.finishNode(node, type);
      } else {
        throw this.raise(PlaceholderErrors.ClassNameIsRequired, {
          at: this.state.startLoc
        });
      }
    } else {
      this.parseClassId(node, isStatement, optionalId);
    }

    this.parseClassSuper(node);
    node.body = this.parsePlaceholder("ClassBody") || this.parseClassBody(!!node.superClass, oldStrict);
    return this.finishNode(node, type);
  }

  parseExport(node) {
    const placeholder = this.parsePlaceholder("Identifier");
    if (!placeholder) return super.parseExport(...arguments);

    if (!this.isContextual(97) && !this.match(12)) {
      node.specifiers = [];
      node.source = null;
      node.declaration = this.finishPlaceholder(placeholder, "Declaration");
      return this.finishNode(node, "ExportNamedDeclaration");
    }

    this.expectPlugin("exportDefaultFrom");
    const specifier = this.startNode();
    specifier.exported = placeholder;
    node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
    return super.parseExport(node);
  }

  isExportDefaultSpecifier() {
    if (this.match(65)) {
      const next = this.nextTokenStart();

      if (this.isUnparsedContextual(next, "from")) {
        if (this.input.startsWith(tokenLabelName(140), this.nextTokenStartSince(next + 4))) {
          return true;
        }
      }
    }

    return super.isExportDefaultSpecifier();
  }

  maybeParseExportDefaultSpecifier(node) {
    if (node.specifiers && node.specifiers.length > 0) {
      return true;
    }

    return super.maybeParseExportDefaultSpecifier(...arguments);
  }

  checkExport(node) {
    const {
      specifiers
    } = node;

    if (specifiers != null && specifiers.length) {
      node.specifiers = specifiers.filter(node => node.exported.type === "Placeholder");
    }

    super.checkExport(node);
    node.specifiers = specifiers;
  }

  parseImport(node) {
    const placeholder = this.parsePlaceholder("Identifier");
    if (!placeholder) return super.parseImport(...arguments);
    node.specifiers = [];

    if (!this.isContextual(97) && !this.match(12)) {
      node.source = this.finishPlaceholder(placeholder, "StringLiteral");
      this.semicolon();
      return this.finishNode(node, "ImportDeclaration");
    }

    const specifier = this.startNodeAtNode(placeholder);
    specifier.local = placeholder;
    this.finishNode(specifier, "ImportDefaultSpecifier");
    node.specifiers.push(specifier);

    if (this.eat(12)) {
      const hasStarImport = this.maybeParseStarImportSpecifier(node);
      if (!hasStarImport) this.parseNamedImportSpecifiers(node);
    }

    this.expectContextual(97);
    node.source = this.parseImportSource();
    this.semicolon();
    return this.finishNode(node, "ImportDeclaration");
  }

  parseImportSource() {
    return this.parsePlaceholder("StringLiteral") || super.parseImportSource(...arguments);
  }

  assertNoSpace() {
    if (this.state.start > this.state.lastTokEndLoc.index) {
      this.raise(PlaceholderErrors.UnexpectedSpace, {
        at: this.state.lastTokEndLoc
      });
    }
  }

});

var v8intrinsic = (superClass => class extends superClass {
  parseV8Intrinsic() {
    if (this.match(54)) {
      const v8IntrinsicStartLoc = this.state.startLoc;
      const node = this.startNode();
      this.next();

      if (tokenIsIdentifier(this.state.type)) {
        const name = this.parseIdentifierName(this.state.start);
        const identifier = this.createIdentifier(node, name);
        identifier.type = "V8IntrinsicIdentifier";

        if (this.match(10)) {
          return identifier;
        }
      }

      this.unexpected(v8IntrinsicStartLoc);
    }
  }

  parseExprAtom() {
    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);
  }

});

function hasPlugin(plugins, expectedConfig) {
  const [expectedName, expectedOptions] = typeof expectedConfig === "string" ? [expectedConfig, {}] : expectedConfig;
  const expectedKeys = Object.keys(expectedOptions);
  const expectedOptionsIsEmpty = expectedKeys.length === 0;
  return plugins.some(p => {
    if (typeof p === "string") {
      return expectedOptionsIsEmpty && p === expectedName;
    } else {
      const [pluginName, pluginOptions] = p;

      if (pluginName !== expectedName) {
        return false;
      }

      for (const key of expectedKeys) {
        if (pluginOptions[key] !== expectedOptions[key]) {
          return false;
        }
      }

      return true;
    }
  });
}
function getPluginOption(plugins, name, option) {
  const plugin = plugins.find(plugin => {
    if (Array.isArray(plugin)) {
      return plugin[0] === name;
    } else {
      return plugin === name;
    }
  });

  if (plugin && Array.isArray(plugin)) {
    return plugin[1][option];
  }

  return null;
}
const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
const TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
function validatePlugins(plugins) {
  if (hasPlugin(plugins, "decorators")) {
    if (hasPlugin(plugins, "decorators-legacy")) {
      throw new Error("Cannot use the decorators and decorators-legacy plugin together");
    }

    const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");

    if (decoratorsBeforeExport == null) {
      throw new Error("The 'decorators' plugin requires a 'decoratorsBeforeExport' option," + " whose value must be a boolean. If you are migrating from" + " Babylon/Babel 6 or want to use the old decorators proposal, you" + " should use the 'decorators-legacy' plugin instead of 'decorators'.");
    } else if (typeof decoratorsBeforeExport !== "boolean") {
      throw new Error("'decoratorsBeforeExport' must be a boolean.");
    }
  }

  if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) {
    throw new Error("Cannot combine flow and typescript plugins.");
  }

  if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) {
    throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
  }

  if (hasPlugin(plugins, "pipelineOperator")) {
    const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");

    if (!PIPELINE_PROPOSALS.includes(proposal)) {
      const proposalList = PIPELINE_PROPOSALS.map(p => `"${p}"`).join(", ");
      throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
    }

    const tupleSyntaxIsHash = hasPlugin(plugins, ["recordAndTuple", {
      syntaxType: "hash"
    }]);

    if (proposal === "hack") {
      if (hasPlugin(plugins, "placeholders")) {
        throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
      }

      if (hasPlugin(plugins, "v8intrinsic")) {
        throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
      }

      const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");

      if (!TOPIC_TOKENS.includes(topicToken)) {
        const tokenList = TOPIC_TOKENS.map(t => `"${t}"`).join(", ");
        throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
      }

      if (topicToken === "#" && tupleSyntaxIsHash) {
        throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
      }
    } else if (proposal === "smart" && tupleSyntaxIsHash) {
      throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
    }
  }

  if (hasPlugin(plugins, "moduleAttributes")) {
    {
      if (hasPlugin(plugins, "importAssertions")) {
        throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
      }

      const moduleAttributesVersionPluginOption = getPluginOption(plugins, "moduleAttributes", "version");

      if (moduleAttributesVersionPluginOption !== "may-2020") {
        throw new Error("The 'moduleAttributes' plugin requires a 'version' option," + " representing the last proposal update. Currently, the" + " only supported value is 'may-2020'.");
      }
    }
  }

  if (hasPlugin(plugins, "recordAndTuple") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType"))) {
    throw new Error("'recordAndTuple' requires 'syntaxType' option whose value should be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(", "));
  }

  if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
    const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
    error.missingPlugins = "doExpressions";
    throw error;
  }
}
const mixinPlugins = {
  estree,
  jsx,
  flow,
  typescript,
  v8intrinsic,
  placeholders
};
const mixinPluginNames = Object.keys(mixinPlugins);

const defaultOptions = {
  sourceType: "script",
  sourceFilename: undefined,
  startColumn: 0,
  startLine: 1,
  allowAwaitOutsideFunction: false,
  allowReturnOutsideFunction: false,
  allowImportExportEverywhere: false,
  allowSuperOutsideMethod: false,
  allowUndeclaredExports: false,
  plugins: [],
  strictMode: null,
  ranges: false,
  tokens: false,
  createParenthesizedExpressions: false,
  errorRecovery: false,
  attachComment: true
};
function getOptions(opts) {
  const options = {};

  for (const key of Object.keys(defaultOptions)) {
    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];
  }

  return options;
}

const getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];

const unwrapParenthesizedExpression = node => {
  return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
};

class LValParser extends NodeUtils {
  toAssignable(node, isLHS = false) {
    var _node$extra, _node$extra3;

    let parenthesized = undefined;

    if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
      parenthesized = unwrapParenthesizedExpression(node);

      if (isLHS) {
        if (parenthesized.type === "Identifier") {
          this.expressionScope.recordArrowParemeterBindingError(Errors.InvalidParenthesizedAssignment, {
            at: node
          });
        } else if (parenthesized.type !== "MemberExpression") {
          this.raise(Errors.InvalidParenthesizedAssignment, {
            at: node
          });
        }
      } else {
        this.raise(Errors.InvalidParenthesizedAssignment, {
          at: node
        });
      }
    }

    switch (node.type) {
      case "Identifier":
      case "ObjectPattern":
      case "ArrayPattern":
      case "AssignmentPattern":
      case "RestElement":
        break;

      case "ObjectExpression":
        node.type = "ObjectPattern";

        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
          var _node$extra2;

          const prop = node.properties[i];
          const isLast = i === last;
          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);

          if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {
            this.raise(Errors.RestTrailingComma, {
              at: node.extra.trailingCommaLoc
            });
          }
        }

        break;

      case "ObjectProperty":
        {
          const {
            key,
            value
          } = node;

          if (this.isPrivateName(key)) {
            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
          }

          this.toAssignable(value, isLHS);
          break;
        }

      case "SpreadElement":
        {
          throw new Error("Internal @babel/parser error (this is a bug, please report it)." + " SpreadElement should be converted by .toAssignable's caller.");
        }

      case "ArrayExpression":
        node.type = "ArrayPattern";
        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
        break;

      case "AssignmentExpression":
        if (node.operator !== "=") {
          this.raise(Errors.MissingEqInAssignment, {
            at: node.left.loc.end
          });
        }

        node.type = "AssignmentPattern";
        delete node.operator;
        this.toAssignable(node.left, isLHS);
        break;

      case "ParenthesizedExpression":
        this.toAssignable(parenthesized, isLHS);
        break;
    }
  }

  toAssignableObjectExpressionProp(prop, isLast, isLHS) {
    if (prop.type === "ObjectMethod") {
      this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {
        at: prop.key
      });
    } else if (prop.type === "SpreadElement") {
      prop.type = "RestElement";
      const arg = prop.argument;
      this.checkToRestConversion(arg, false);
      this.toAssignable(arg, isLHS);

      if (!isLast) {
        this.raise(Errors.RestTrailingComma, {
          at: prop
        });
      }
    } else {
      this.toAssignable(prop, isLHS);
    }
  }

  toAssignableList(exprList, trailingCommaLoc, isLHS) {
    const end = exprList.length - 1;

    for (let i = 0; i <= end; i++) {
      const elt = exprList[i];
      if (!elt) continue;

      if (elt.type === "SpreadElement") {
        elt.type = "RestElement";
        const arg = elt.argument;
        this.checkToRestConversion(arg, true);
        this.toAssignable(arg, isLHS);
      } else {
        this.toAssignable(elt, isLHS);
      }

      if (elt.type === "RestElement") {
        if (i < end) {
          this.raise(Errors.RestTrailingComma, {
            at: elt
          });
        } else if (trailingCommaLoc) {
          this.raise(Errors.RestTrailingComma, {
            at: trailingCommaLoc
          });
        }
      }
    }
  }

  isAssignable(node, isBinding) {
    switch (node.type) {
      case "Identifier":
      case "ObjectPattern":
      case "ArrayPattern":
      case "AssignmentPattern":
      case "RestElement":
        return true;

      case "ObjectExpression":
        {
          const last = node.properties.length - 1;
          return node.properties.every((prop, i) => {
            return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);
          });
        }

      case "ObjectProperty":
        return this.isAssignable(node.value);

      case "SpreadElement":
        return this.isAssignable(node.argument);

      case "ArrayExpression":
        return node.elements.every(element => element === null || this.isAssignable(element));

      case "AssignmentExpression":
        return node.operator === "=";

      case "ParenthesizedExpression":
        return this.isAssignable(node.expression);

      case "MemberExpression":
      case "OptionalMemberExpression":
        return !isBinding;

      default:
        return false;
    }
  }

  toReferencedList(exprList, isParenthesizedExpr) {
    return exprList;
  }

  toReferencedListDeep(exprList, isParenthesizedExpr) {
    this.toReferencedList(exprList, isParenthesizedExpr);

    for (const expr of exprList) {
      if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
        this.toReferencedListDeep(expr.elements);
      }
    }
  }

  parseSpread(refExpressionErrors, refNeedsArrowPos) {
    const node = this.startNode();
    this.next();
    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);
    return this.finishNode(node, "SpreadElement");
  }

  parseRestBinding() {
    const node = this.startNode();
    this.next();
    node.argument = this.parseBindingAtom();
    return this.finishNode(node, "RestElement");
  }

  parseBindingAtom() {
    switch (this.state.type) {
      case 0:
        {
          const node = this.startNode();
          this.next();
          node.elements = this.parseBindingList(3, 93, true);
          return this.finishNode(node, "ArrayPattern");
        }

      case 5:
        return this.parseObjectLike(8, true);
    }

    return this.parseIdentifier();
  }

  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {
    const elts = [];
    let first = true;

    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(12);
      }

      if (allowEmpty && this.match(12)) {
        elts.push(null);
      } else if (this.eat(close)) {
        break;
      } else if (this.match(21)) {
        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));

        if (!this.checkCommaAfterRest(closeCharCode)) {
          this.expect(close);
          break;
        }
      } else {
        const decorators = [];

        if (this.match(26) && this.hasPlugin("decorators")) {
          this.raise(Errors.UnsupportedParameterDecorator, {
            at: this.state.startLoc
          });
        }

        while (this.match(26)) {
          decorators.push(this.parseDecorator());
        }

        elts.push(this.parseAssignableListItem(allowModifiers, decorators));
      }
    }

    return elts;
  }

  parseBindingRestProperty(prop) {
    this.next();
    prop.argument = this.parseIdentifier();
    this.checkCommaAfterRest(125);
    return this.finishNode(prop, "RestElement");
  }

  parseBindingProperty() {
    const prop = this.startNode();
    const {
      type,
      start: startPos,
      startLoc
    } = this.state;

    if (type === 21) {
      return this.parseBindingRestProperty(prop);
    } else if (type === 134) {
      this.expectPlugin("destructuringPrivate", startLoc);
      this.classScope.usePrivateName(this.state.value, startLoc);
      prop.key = this.parsePrivateName();
    } else {
      this.parsePropertyName(prop);
    }

    prop.method = false;
    this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);
    return prop;
  }

  parseAssignableListItem(allowModifiers, decorators) {
    const left = this.parseMaybeDefault();
    this.parseAssignableListItemTypes(left);
    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);

    if (decorators.length) {
      left.decorators = decorators;
    }

    return elt;
  }

  parseAssignableListItemTypes(param) {
    return param;
  }

  parseMaybeDefault(startPos, startLoc, left) {
    var _startLoc, _startPos, _left;

    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;
    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;
    left = (_left = left) != null ? _left : this.parseBindingAtom();
    if (!this.eat(29)) return left;
    const node = this.startNodeAt(startPos, startLoc);
    node.left = left;
    node.right = this.parseMaybeAssignAllowIn();
    return this.finishNode(node, "AssignmentPattern");
  }

  isValidLVal(type, isUnparenthesizedInAssign, binding) {
    return getOwn({
      AssignmentPattern: "left",
      RestElement: "argument",
      ObjectProperty: "value",
      ParenthesizedExpression: "expression",
      ArrayPattern: "elements",
      ObjectPattern: "properties"
    }, type);
  }

  checkLVal(expression, {
    in: ancestor,
    binding = BIND_NONE,
    checkClashes = false,
    strictModeChanged = false,
    allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),
    hasParenthesizedAncestor = false
  }) {
    var _expression$extra;

    const type = expression.type;
    if (this.isObjectMethod(expression)) return;

    if (type === "MemberExpression") {
      if (binding !== BIND_NONE) {
        this.raise(Errors.InvalidPropertyBindingPattern, {
          at: expression
        });
      }

      return;
    }

    if (expression.type === "Identifier") {
      this.checkIdentifier(expression, binding, strictModeChanged, allowingSloppyLetBinding);
      const {
        name
      } = expression;

      if (checkClashes) {
        if (checkClashes.has(name)) {
          this.raise(Errors.ParamDupe, {
            at: expression
          });
        } else {
          checkClashes.add(name);
        }
      }

      return;
    }

    const validity = this.isValidLVal(expression.type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding);
    if (validity === true) return;

    if (validity === false) {
      const ParseErrorClass = binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
      this.raise(ParseErrorClass, {
        at: expression,
        ancestor: ancestor.type === "UpdateExpression" ? {
          type: "UpdateExpression",
          prefix: ancestor.prefix
        } : {
          type: ancestor.type
        }
      });
      return;
    }

    const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === "ParenthesizedExpression"];
    const nextAncestor = expression.type === "ArrayPattern" || expression.type === "ObjectPattern" || expression.type === "ParenthesizedExpression" ? expression : ancestor;

    for (const child of [].concat(expression[key])) {
      if (child) {
        this.checkLVal(child, {
          in: nextAncestor,
          binding,
          checkClashes,
          allowingSloppyLetBinding,
          strictModeChanged,
          hasParenthesizedAncestor: isParenthesizedExpression
        });
      }
    }
  }

  checkIdentifier(at, bindingType, strictModeChanged = false, allowLetBinding = !(bindingType & BIND_SCOPE_LEXICAL)) {
    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {
      if (bindingType === BIND_NONE) {
        this.raise(Errors.StrictEvalArguments, {
          at,
          referenceName: at.name
        });
      } else {
        this.raise(Errors.StrictEvalArgumentsBinding, {
          at,
          bindingName: at.name
        });
      }
    }

    if (!allowLetBinding && at.name === "let") {
      this.raise(Errors.LetInLexicalBinding, {
        at
      });
    }

    if (!(bindingType & BIND_NONE)) {
      this.declareNameFromIdentifier(at, bindingType);
    }
  }

  declareNameFromIdentifier(identifier, binding) {
    this.scope.declareName(identifier.name, binding, identifier.loc.start);
  }

  checkToRestConversion(node, allowPattern) {
    switch (node.type) {
      case "ParenthesizedExpression":
        this.checkToRestConversion(node.expression, allowPattern);
        break;

      case "Identifier":
      case "MemberExpression":
        break;

      case "ArrayExpression":
      case "ObjectExpression":
        if (allowPattern) break;

      default:
        this.raise(Errors.InvalidRestAssignmentPattern, {
          at: node
        });
    }
  }

  checkCommaAfterRest(close) {
    if (!this.match(12)) {
      return false;
    }

    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {
      at: this.state.startLoc
    });
    return true;
  }

}

class ExpressionParser extends LValParser {
  checkProto(prop, isRecord, protoRef, refExpressionErrors) {
    if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
      return;
    }

    const key = prop.key;
    const name = key.type === "Identifier" ? key.name : key.value;

    if (name === "__proto__") {
      if (isRecord) {
        this.raise(Errors.RecordNoProto, {
          at: key
        });
        return;
      }

      if (protoRef.used) {
        if (refExpressionErrors) {
          if (refExpressionErrors.doubleProtoLoc === null) {
            refExpressionErrors.doubleProtoLoc = key.loc.start;
          }
        } else {
          this.raise(Errors.DuplicateProto, {
            at: key
          });
        }
      }

      protoRef.used = true;
    }
  }

  shouldExitDescending(expr, potentialArrowAt) {
    return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
  }

  getExpression() {
    this.enterInitialScopes();
    this.nextToken();
    const expr = this.parseExpression();

    if (!this.match(135)) {
      this.unexpected();
    }

    this.finalizeRemainingComments();
    expr.comments = this.state.comments;
    expr.errors = this.state.errors;

    if (this.options.tokens) {
      expr.tokens = this.tokens;
    }

    return expr;
  }

  parseExpression(disallowIn, refExpressionErrors) {
    if (disallowIn) {
      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
    }

    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
  }

  parseExpressionBase(refExpressionErrors) {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    const expr = this.parseMaybeAssign(refExpressionErrors);

    if (this.match(12)) {
      const node = this.startNodeAt(startPos, startLoc);
      node.expressions = [expr];

      while (this.eat(12)) {
        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
      }

      this.toReferencedList(node.expressions);
      return this.finishNode(node, "SequenceExpression");
    }

    return expr;
  }

  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
  }

  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
  }

  setOptionalParametersError(refExpressionErrors, resultError) {
    var _resultError$loc;

    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
  }

  parseMaybeAssign(refExpressionErrors, afterLeftParse) {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;

    if (this.isContextual(105)) {
      if (this.prodParam.hasYield) {
        let left = this.parseYield();

        if (afterLeftParse) {
          left = afterLeftParse.call(this, left, startPos, startLoc);
        }

        return left;
      }
    }

    let ownExpressionErrors;

    if (refExpressionErrors) {
      ownExpressionErrors = false;
    } else {
      refExpressionErrors = new ExpressionErrors();
      ownExpressionErrors = true;
    }

    const {
      type
    } = this.state;

    if (type === 10 || tokenIsIdentifier(type)) {
      this.state.potentialArrowAt = this.state.start;
    }

    let left = this.parseMaybeConditional(refExpressionErrors);

    if (afterLeftParse) {
      left = afterLeftParse.call(this, left, startPos, startLoc);
    }

    if (tokenIsAssignment(this.state.type)) {
      const node = this.startNodeAt(startPos, startLoc);
      const operator = this.state.value;
      node.operator = operator;

      if (this.match(29)) {
        this.toAssignable(left, true);
        node.left = left;

        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startPos) {
          refExpressionErrors.doubleProtoLoc = null;
        }

        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startPos) {
          refExpressionErrors.shorthandAssignLoc = null;
        }

        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startPos) {
          this.checkDestructuringPrivate(refExpressionErrors);
          refExpressionErrors.privateKeyLoc = null;
        }
      } else {
        node.left = left;
      }

      this.next();
      node.right = this.parseMaybeAssign();
      this.checkLVal(left, {
        in: this.finishNode(node, "AssignmentExpression")
      });
      return node;
    } else if (ownExpressionErrors) {
      this.checkExpressionErrors(refExpressionErrors, true);
    }

    return left;
  }

  parseMaybeConditional(refExpressionErrors) {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    const potentialArrowAt = this.state.potentialArrowAt;
    const expr = this.parseExprOps(refExpressionErrors);

    if (this.shouldExitDescending(expr, potentialArrowAt)) {
      return expr;
    }

    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);
  }

  parseConditional(expr, startPos, startLoc, refExpressionErrors) {
    if (this.eat(17)) {
      const node = this.startNodeAt(startPos, startLoc);
      node.test = expr;
      node.consequent = this.parseMaybeAssignAllowIn();
      this.expect(14);
      node.alternate = this.parseMaybeAssign();
      return this.finishNode(node, "ConditionalExpression");
    }

    return expr;
  }

  parseMaybeUnaryOrPrivate(refExpressionErrors) {
    return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
  }

  parseExprOps(refExpressionErrors) {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    const potentialArrowAt = this.state.potentialArrowAt;
    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);

    if (this.shouldExitDescending(expr, potentialArrowAt)) {
      return expr;
    }

    return this.parseExprOp(expr, startPos, startLoc, -1);
  }

  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
    if (this.isPrivateName(left)) {
      const value = this.getPrivateNameSV(left);

      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {
        this.raise(Errors.PrivateInExpectedIn, {
          at: left,
          identifierName: value
        });
      }

      this.classScope.usePrivateName(value, left.loc.start);
    }

    const op = this.state.type;

    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {
      let prec = tokenOperatorPrecedence(op);

      if (prec > minPrec) {
        if (op === 39) {
          this.expectPlugin("pipelineOperator");

          if (this.state.inFSharpPipelineDirectBody) {
            return left;
          }

          this.checkPipelineAtInfixOperator(left, leftStartLoc);
        }

        const node = this.startNodeAt(leftStartPos, leftStartLoc);
        node.left = left;
        node.operator = this.state.value;
        const logical = op === 41 || op === 42;
        const coalesce = op === 40;

        if (coalesce) {
          prec = tokenOperatorPrecedence(42);
        }

        this.next();

        if (op === 39 && this.hasPlugin(["pipelineOperator", {
          proposal: "minimal"
        }])) {
          if (this.state.type === 96 && this.prodParam.hasAwait) {
            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {
              at: this.state.startLoc
            });
          }
        }

        node.right = this.parseExprOpRightExpr(op, prec);
        this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
        const nextOp = this.state.type;

        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {
          throw this.raise(Errors.MixingCoalesceWithLogical, {
            at: this.state.startLoc
          });
        }

        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
      }
    }

    return left;
  }

  parseExprOpRightExpr(op, prec) {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;

    switch (op) {
      case 39:
        switch (this.getPluginOption("pipelineOperator", "proposal")) {
          case "hack":
            return this.withTopicBindingContext(() => {
              return this.parseHackPipeBody();
            });

          case "smart":
            return this.withTopicBindingContext(() => {
              if (this.prodParam.hasYield && this.isContextual(105)) {
                throw this.raise(Errors.PipeBodyIsTighter, {
                  at: this.state.startLoc
                });
              }

              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);
            });

          case "fsharp":
            return this.withSoloAwaitPermittingContext(() => {
              return this.parseFSharpPipelineBody(prec);
            });
        }

      default:
        return this.parseExprOpBaseRightExpr(op, prec);
    }
  }

  parseExprOpBaseRightExpr(op, prec) {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
  }

  parseHackPipeBody() {
    var _body$extra;

    const {
      startLoc
    } = this.state;
    const body = this.parseMaybeAssign();
    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);

    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
      this.raise(Errors.PipeUnparenthesizedBody, {
        at: startLoc,
        type: body.type
      });
    }

    if (!this.topicReferenceWasUsedInCurrentContext()) {
      this.raise(Errors.PipeTopicUnused, {
        at: startLoc
      });
    }

    return body;
  }

  checkExponentialAfterUnary(node) {
    if (this.match(57)) {
      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {
        at: node.argument
      });
    }
  }

  parseMaybeUnary(refExpressionErrors, sawUnary) {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    const isAwait = this.isContextual(96);

    if (isAwait && this.isAwaitAllowed()) {
      this.next();
      const expr = this.parseAwait(startPos, startLoc);
      if (!sawUnary) this.checkExponentialAfterUnary(expr);
      return expr;
    }

    const update = this.match(34);
    const node = this.startNode();

    if (tokenIsPrefix(this.state.type)) {
      node.operator = this.state.value;
      node.prefix = true;

      if (this.match(72)) {
        this.expectPlugin("throwExpressions");
      }

      const isDelete = this.match(89);
      this.next();
      node.argument = this.parseMaybeUnary(null, true);
      this.checkExpressionErrors(refExpressionErrors, true);

      if (this.state.strict && isDelete) {
        const arg = node.argument;

        if (arg.type === "Identifier") {
          this.raise(Errors.StrictDelete, {
            at: node
          });
        } else if (this.hasPropertyAsPrivateName(arg)) {
          this.raise(Errors.DeletePrivateField, {
            at: node
          });
        }
      }

      if (!update) {
        if (!sawUnary) this.checkExponentialAfterUnary(node);
        return this.finishNode(node, "UnaryExpression");
      }
    }

    const expr = this.parseUpdate(node, update, refExpressionErrors);

    if (isAwait) {
      const {
        type
      } = this.state;
      const startsExpr = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);

      if (startsExpr && !this.isAmbiguousAwait()) {
        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {
          at: startLoc
        });
        return this.parseAwait(startPos, startLoc);
      }
    }

    return expr;
  }

  parseUpdate(node, update, refExpressionErrors) {
    if (update) {
      this.checkLVal(node.argument, {
        in: this.finishNode(node, "UpdateExpression")
      });
      return node;
    }

    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    let expr = this.parseExprSubscripts(refExpressionErrors);
    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;

    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
      const node = this.startNodeAt(startPos, startLoc);
      node.operator = this.state.value;
      node.prefix = false;
      node.argument = expr;
      this.next();
      this.checkLVal(expr, {
        in: expr = this.finishNode(node, "UpdateExpression")
      });
    }

    return expr;
  }

  parseExprSubscripts(refExpressionErrors) {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    const potentialArrowAt = this.state.potentialArrowAt;
    const expr = this.parseExprAtom(refExpressionErrors);

    if (this.shouldExitDescending(expr, potentialArrowAt)) {
      return expr;
    }

    return this.parseSubscripts(expr, startPos, startLoc);
  }

  parseSubscripts(base, startPos, startLoc, noCalls) {
    const state = {
      optionalChainMember: false,
      maybeAsyncArrow: this.atPossibleAsyncArrow(base),
      stop: false
    };

    do {
      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);
      state.maybeAsyncArrow = false;
    } while (!state.stop);

    return base;
  }

  parseSubscript(base, startPos, startLoc, noCalls, state) {
    const {
      type
    } = this.state;

    if (!noCalls && type === 15) {
      return this.parseBind(base, startPos, startLoc, noCalls, state);
    } else if (tokenIsTemplate(type)) {
      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
    }

    let optional = false;

    if (type === 18) {
      if (noCalls && this.lookaheadCharCode() === 40) {
        state.stop = true;
        return base;
      }

      state.optionalChainMember = optional = true;
      this.next();
    }

    if (!noCalls && this.match(10)) {
      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);
    } else {
      const computed = this.eat(0);

      if (computed || optional || this.eat(16)) {
        return this.parseMember(base, startPos, startLoc, state, computed, optional);
      } else {
        state.stop = true;
        return base;
      }
    }
  }

  parseMember(base, startPos, startLoc, state, computed, optional) {
    const node = this.startNodeAt(startPos, startLoc);
    node.object = base;
    node.computed = computed;

    if (computed) {
      node.property = this.parseExpression();
      this.expect(3);
    } else if (this.match(134)) {
      if (base.type === "Super") {
        this.raise(Errors.SuperPrivateField, {
          at: startLoc
        });
      }

      this.classScope.usePrivateName(this.state.value, this.state.startLoc);
      node.property = this.parsePrivateName();
    } else {
      node.property = this.parseIdentifier(true);
    }

    if (state.optionalChainMember) {
      node.optional = optional;
      return this.finishNode(node, "OptionalMemberExpression");
    } else {
      return this.finishNode(node, "MemberExpression");
    }
  }

  parseBind(base, startPos, startLoc, noCalls, state) {
    const node = this.startNodeAt(startPos, startLoc);
    node.object = base;
    this.next();
    node.callee = this.parseNoCallExpr();
    state.stop = true;
    return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
  }

  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {
    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
    let refExpressionErrors = null;
    this.state.maybeInArrowParameters = true;
    this.next();
    let node = this.startNodeAt(startPos, startLoc);
    node.callee = base;
    const {
      maybeAsyncArrow,
      optionalChainMember
    } = state;

    if (maybeAsyncArrow) {
      this.expressionScope.enter(newAsyncArrowScope());
      refExpressionErrors = new ExpressionErrors();
    }

    if (optionalChainMember) {
      node.optional = optional;
    }

    if (optional) {
      node.arguments = this.parseCallExpressionArguments(11);
    } else {
      node.arguments = this.parseCallExpressionArguments(11, base.type === "Import", base.type !== "Super", node, refExpressionErrors);
    }

    this.finishCallExpression(node, optionalChainMember);

    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
      state.stop = true;
      this.checkDestructuringPrivate(refExpressionErrors);
      this.expressionScope.validateAsPattern();
      this.expressionScope.exit();
      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
    } else {
      if (maybeAsyncArrow) {
        this.checkExpressionErrors(refExpressionErrors, true);
        this.expressionScope.exit();
      }

      this.toReferencedArguments(node);
    }

    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
    return node;
  }

  toReferencedArguments(node, isParenthesizedExpr) {
    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
  }

  parseTaggedTemplateExpression(base, startPos, startLoc, state) {
    const node = this.startNodeAt(startPos, startLoc);
    node.tag = base;
    node.quasi = this.parseTemplate(true);

    if (state.optionalChainMember) {
      this.raise(Errors.OptionalChainingNoTemplate, {
        at: startLoc
      });
    }

    return this.finishNode(node, "TaggedTemplateExpression");
  }

  atPossibleAsyncArrow(base) {
    return base.type === "Identifier" && base.name === "async" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
  }

  finishCallExpression(node, optional) {
    if (node.callee.type === "Import") {
      if (node.arguments.length === 2) {
        {
          if (!this.hasPlugin("moduleAttributes")) {
            this.expectPlugin("importAssertions");
          }
        }
      }

      if (node.arguments.length === 0 || node.arguments.length > 2) {
        this.raise(Errors.ImportCallArity, {
          at: node,
          maxArgumentCount: this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1
        });
      } else {
        for (const arg of node.arguments) {
          if (arg.type === "SpreadElement") {
            this.raise(Errors.ImportCallSpreadArgument, {
              at: arg
            });
          }
        }
      }
    }

    return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
  }

  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
    const elts = [];
    let first = true;
    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
    this.state.inFSharpPipelineDirectBody = false;

    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(12);

        if (this.match(close)) {
          if (dynamicImport && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
            this.raise(Errors.ImportCallArgumentTrailingComma, {
              at: this.state.lastTokStartLoc
            });
          }

          if (nodeForExtra) {
            this.addTrailingCommaExtraToNode(nodeForExtra);
          }

          this.next();
          break;
        }
      }

      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
    }

    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
    return elts;
  }

  shouldParseAsyncArrow() {
    return this.match(19) && !this.canInsertSemicolon();
  }

  parseAsyncArrowFromCallExpression(node, call) {
    var _call$extra;

    this.resetPreviousNodeTrailingComments(call);
    this.expect(19);
    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);

    if (call.innerComments) {
      setInnerComments(node, call.innerComments);
    }

    if (call.callee.trailingComments) {
      setInnerComments(node, call.callee.trailingComments);
    }

    return node;
  }

  parseNoCallExpr() {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
  }

  parseExprAtom(refExpressionErrors) {
    let node;
    const {
      type
    } = this.state;

    switch (type) {
      case 79:
        return this.parseSuper();

      case 83:
        node = this.startNode();
        this.next();

        if (this.match(16)) {
          return this.parseImportMetaProperty(node);
        }

        if (!this.match(10)) {
          this.raise(Errors.UnsupportedImport, {
            at: this.state.lastTokStartLoc
          });
        }

        return this.finishNode(node, "Import");

      case 78:
        node = this.startNode();
        this.next();
        return this.finishNode(node, "ThisExpression");

      case 90:
        {
          return this.parseDo(this.startNode(), false);
        }

      case 56:
      case 31:
        {
          this.readRegexp();
          return this.parseRegExpLiteral(this.state.value);
        }

      case 130:
        return this.parseNumericLiteral(this.state.value);

      case 131:
        return this.parseBigIntLiteral(this.state.value);

      case 132:
        return this.parseDecimalLiteral(this.state.value);

      case 129:
        return this.parseStringLiteral(this.state.value);

      case 84:
        return this.parseNullLiteral();

      case 85:
        return this.parseBooleanLiteral(true);

      case 86:
        return this.parseBooleanLiteral(false);

      case 10:
        {
          const canBeArrow = this.state.potentialArrowAt === this.state.start;
          return this.parseParenAndDistinguishExpression(canBeArrow);
        }

      case 2:
      case 1:
        {
          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
        }

      case 0:
        {
          return this.parseArrayLike(3, true, false, refExpressionErrors);
        }

      case 6:
      case 7:
        {
          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
        }

      case 5:
        {
          return this.parseObjectLike(8, false, false, refExpressionErrors);
        }

      case 68:
        return this.parseFunctionOrFunctionSent();

      case 26:
        this.parseDecorators();

      case 80:
        node = this.startNode();
        this.takeDecorators(node);
        return this.parseClass(node, false);

      case 77:
        return this.parseNewOrNewTarget();

      case 25:
      case 24:
        return this.parseTemplate(false);

      case 15:
        {
          node = this.startNode();
          this.next();
          node.object = null;
          const callee = node.callee = this.parseNoCallExpr();

          if (callee.type === "MemberExpression") {
            return this.finishNode(node, "BindExpression");
          } else {
            throw this.raise(Errors.UnsupportedBind, {
              at: callee
            });
          }
        }

      case 134:
        {
          this.raise(Errors.PrivateInExpectedIn, {
            at: this.state.startLoc,
            identifierName: this.state.value
          });
          return this.parsePrivateName();
        }

      case 33:
        {
          return this.parseTopicReferenceThenEqualsSign(54, "%");
        }

      case 32:
        {
          return this.parseTopicReferenceThenEqualsSign(44, "^");
        }

      case 37:
      case 38:
        {
          return this.parseTopicReference("hack");
        }

      case 44:
      case 54:
      case 27:
        {
          const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");

          if (pipeProposal) {
            return this.parseTopicReference(pipeProposal);
          } else {
            throw this.unexpected();
          }
        }

      case 47:
        {
          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());

          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
            this.expectOnePlugin(["jsx", "flow", "typescript"]);
            break;
          } else {
            throw this.unexpected();
          }
        }

      default:
        if (tokenIsIdentifier(type)) {
          if (this.isContextual(123) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {
            return this.parseModuleExpression();
          }

          const canBeArrow = this.state.potentialArrowAt === this.state.start;
          const containsEsc = this.state.containsEsc;
          const id = this.parseIdentifier();

          if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
            const {
              type
            } = this.state;

            if (type === 68) {
              this.resetPreviousNodeTrailingComments(id);
              this.next();
              return this.parseFunction(this.startNodeAtNode(id), undefined, true);
            } else if (tokenIsIdentifier(type)) {
              if (this.lookaheadCharCode() === 61) {
                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
              } else {
                return id;
              }
            } else if (type === 90) {
              this.resetPreviousNodeTrailingComments(id);
              return this.parseDo(this.startNodeAtNode(id), true);
            }
          }

          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
            this.next();
            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
          }

          return id;
        } else {
          throw this.unexpected();
        }

    }
  }

  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
    const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");

    if (pipeProposal) {
      this.state.type = topicTokenType;
      this.state.value = topicTokenValue;
      this.state.pos--;
      this.state.end--;
      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
      return this.parseTopicReference(pipeProposal);
    } else {
      throw this.unexpected();
    }
  }

  parseTopicReference(pipeProposal) {
    const node = this.startNode();
    const startLoc = this.state.startLoc;
    const tokenType = this.state.type;
    this.next();
    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
  }

  finishTopicReference(node, startLoc, pipeProposal, tokenType) {
    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
      const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";

      if (!this.topicReferenceIsAllowedInCurrentContext()) {
        this.raise(pipeProposal === "smart" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {
          at: startLoc
        });
      }

      this.registerTopicReference();
      return this.finishNode(node, nodeType);
    } else {
      throw this.raise(Errors.PipeTopicUnconfiguredToken, {
        at: startLoc,
        token: tokenLabelName(tokenType)
      });
    }
  }

  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
    switch (pipeProposal) {
      case "hack":
        {
          return this.hasPlugin(["pipelineOperator", {
            topicToken: tokenLabelName(tokenType)
          }]);
        }

      case "smart":
        return tokenType === 27;

      default:
        throw this.raise(Errors.PipeTopicRequiresHackPipes, {
          at: startLoc
        });
    }
  }

  parseAsyncArrowUnaryFunction(node) {
    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
    const params = [this.parseIdentifier()];
    this.prodParam.exit();

    if (this.hasPrecedingLineBreak()) {
      this.raise(Errors.LineTerminatorBeforeArrow, {
        at: this.state.curPosition()
      });
    }

    this.expect(19);
    this.parseArrowExpression(node, params, true);
    return node;
  }

  parseDo(node, isAsync) {
    this.expectPlugin("doExpressions");

    if (isAsync) {
      this.expectPlugin("asyncDoExpressions");
    }

    node.async = isAsync;
    this.next();
    const oldLabels = this.state.labels;
    this.state.labels = [];

    if (isAsync) {
      this.prodParam.enter(PARAM_AWAIT);
      node.body = this.parseBlock();
      this.prodParam.exit();
    } else {
      node.body = this.parseBlock();
    }

    this.state.labels = oldLabels;
    return this.finishNode(node, "DoExpression");
  }

  parseSuper() {
    const node = this.startNode();
    this.next();

    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
      this.raise(Errors.SuperNotAllowed, {
        at: node
      });
    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
      this.raise(Errors.UnexpectedSuper, {
        at: node
      });
    }

    if (!this.match(10) && !this.match(0) && !this.match(16)) {
      this.raise(Errors.UnsupportedSuper, {
        at: node
      });
    }

    return this.finishNode(node, "Super");
  }

  parsePrivateName() {
    const node = this.startNode();
    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1));
    const name = this.state.value;
    this.next();
    node.id = this.createIdentifier(id, name);
    return this.finishNode(node, "PrivateName");
  }

  parseFunctionOrFunctionSent() {
    const node = this.startNode();
    this.next();

    if (this.prodParam.hasYield && this.match(16)) {
      const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
      this.next();

      if (this.match(102)) {
        this.expectPlugin("functionSent");
      } else if (!this.hasPlugin("functionSent")) {
        this.unexpected();
      }

      return this.parseMetaProperty(node, meta, "sent");
    }

    return this.parseFunction(node);
  }

  parseMetaProperty(node, meta, propertyName) {
    node.meta = meta;
    const containsEsc = this.state.containsEsc;
    node.property = this.parseIdentifier(true);

    if (node.property.name !== propertyName || containsEsc) {
      this.raise(Errors.UnsupportedMetaProperty, {
        at: node.property,
        target: meta.name,
        onlyValidPropertyName: propertyName
      });
    }

    return this.finishNode(node, "MetaProperty");
  }

  parseImportMetaProperty(node) {
    const id = this.createIdentifier(this.startNodeAtNode(node), "import");
    this.next();

    if (this.isContextual(100)) {
      if (!this.inModule) {
        this.raise(Errors.ImportMetaOutsideModule, {
          at: id
        });
      }

      this.sawUnambiguousESM = true;
    }

    return this.parseMetaProperty(node, id, "meta");
  }

  parseLiteralAtNode(value, type, node) {
    this.addExtra(node, "rawValue", value);
    this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
    node.value = value;
    this.next();
    return this.finishNode(node, type);
  }

  parseLiteral(value, type) {
    const node = this.startNode();
    return this.parseLiteralAtNode(value, type, node);
  }

  parseStringLiteral(value) {
    return this.parseLiteral(value, "StringLiteral");
  }

  parseNumericLiteral(value) {
    return this.parseLiteral(value, "NumericLiteral");
  }

  parseBigIntLiteral(value) {
    return this.parseLiteral(value, "BigIntLiteral");
  }

  parseDecimalLiteral(value) {
    return this.parseLiteral(value, "DecimalLiteral");
  }

  parseRegExpLiteral(value) {
    const node = this.parseLiteral(value.value, "RegExpLiteral");
    node.pattern = value.pattern;
    node.flags = value.flags;
    return node;
  }

  parseBooleanLiteral(value) {
    const node = this.startNode();
    node.value = value;
    this.next();
    return this.finishNode(node, "BooleanLiteral");
  }

  parseNullLiteral() {
    const node = this.startNode();
    this.next();
    return this.finishNode(node, "NullLiteral");
  }

  parseParenAndDistinguishExpression(canBeArrow) {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    let val;
    this.next();
    this.expressionScope.enter(newArrowHeadScope());
    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
    this.state.maybeInArrowParameters = true;
    this.state.inFSharpPipelineDirectBody = false;
    const innerStartPos = this.state.start;
    const innerStartLoc = this.state.startLoc;
    const exprList = [];
    const refExpressionErrors = new ExpressionErrors();
    let first = true;
    let spreadStartLoc;
    let optionalCommaStartLoc;

    while (!this.match(11)) {
      if (first) {
        first = false;
      } else {
        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);

        if (this.match(11)) {
          optionalCommaStartLoc = this.state.startLoc;
          break;
        }
      }

      if (this.match(21)) {
        const spreadNodeStartPos = this.state.start;
        const spreadNodeStartLoc = this.state.startLoc;
        spreadStartLoc = this.state.startLoc;
        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));

        if (!this.checkCommaAfterRest(41)) {
          break;
        }
      } else {
        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
      }
    }

    const innerEndLoc = this.state.lastTokEndLoc;
    this.expect(11);
    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
    let arrowNode = this.startNodeAt(startPos, startLoc);

    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
      this.checkDestructuringPrivate(refExpressionErrors);
      this.expressionScope.validateAsPattern();
      this.expressionScope.exit();
      this.parseArrowExpression(arrowNode, exprList, false);
      return arrowNode;
    }

    this.expressionScope.exit();

    if (!exprList.length) {
      this.unexpected(this.state.lastTokStartLoc);
    }

    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);
    if (spreadStartLoc) this.unexpected(spreadStartLoc);
    this.checkExpressionErrors(refExpressionErrors, true);
    this.toReferencedListDeep(exprList, true);

    if (exprList.length > 1) {
      val = this.startNodeAt(innerStartPos, innerStartLoc);
      val.expressions = exprList;
      this.finishNode(val, "SequenceExpression");
      this.resetEndLocation(val, innerEndLoc);
    } else {
      val = exprList[0];
    }

    return this.wrapParenthesis(startPos, startLoc, val);
  }

  wrapParenthesis(startPos, startLoc, expression) {
    if (!this.options.createParenthesizedExpressions) {
      this.addExtra(expression, "parenthesized", true);
      this.addExtra(expression, "parenStart", startPos);
      this.takeSurroundingComments(expression, startPos, this.state.lastTokEndLoc.index);
      return expression;
    }

    const parenExpression = this.startNodeAt(startPos, startLoc);
    parenExpression.expression = expression;
    this.finishNode(parenExpression, "ParenthesizedExpression");
    return parenExpression;
  }

  shouldParseArrow(params) {
    return !this.canInsertSemicolon();
  }

  parseArrow(node) {
    if (this.eat(19)) {
      return node;
    }
  }

  parseParenItem(node, startPos, startLoc) {
    return node;
  }

  parseNewOrNewTarget() {
    const node = this.startNode();
    this.next();

    if (this.match(16)) {
      const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
      this.next();
      const metaProp = this.parseMetaProperty(node, meta, "target");

      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {
        this.raise(Errors.UnexpectedNewTarget, {
          at: metaProp
        });
      }

      return metaProp;
    }

    return this.parseNew(node);
  }

  parseNew(node) {
    this.parseNewCallee(node);

    if (this.eat(10)) {
      const args = this.parseExprList(11);
      this.toReferencedList(args);
      node.arguments = args;
    } else {
      node.arguments = [];
    }

    return this.finishNode(node, "NewExpression");
  }

  parseNewCallee(node) {
    node.callee = this.parseNoCallExpr();

    if (node.callee.type === "Import") {
      this.raise(Errors.ImportCallNotNewExpression, {
        at: node.callee
      });
    } else if (this.isOptionalChain(node.callee)) {
      this.raise(Errors.OptionalChainingNoNew, {
        at: this.state.lastTokEndLoc
      });
    } else if (this.eat(18)) {
      this.raise(Errors.OptionalChainingNoNew, {
        at: this.state.startLoc
      });
    }
  }

  parseTemplateElement(isTagged) {
    const {
      start,
      startLoc,
      end,
      value
    } = this.state;
    const elemStart = start + 1;
    const elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(startLoc, 1));

    if (value === null) {
      if (!isTagged) {
        this.raise(Errors.InvalidEscapeSequenceTemplate, {
          at: createPositionWithColumnOffset(startLoc, 2)
        });
      }
    }

    const isTail = this.match(24);
    const endOffset = isTail ? -1 : -2;
    const elemEnd = end + endOffset;
    elem.value = {
      raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
      cooked: value === null ? null : value.slice(1, endOffset)
    };
    elem.tail = isTail;
    this.next();
    this.finishNode(elem, "TemplateElement");
    this.resetEndLocation(elem, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
    return elem;
  }

  parseTemplate(isTagged) {
    const node = this.startNode();
    node.expressions = [];
    let curElt = this.parseTemplateElement(isTagged);
    node.quasis = [curElt];

    while (!curElt.tail) {
      node.expressions.push(this.parseTemplateSubstitution());
      this.readTemplateContinuation();
      node.quasis.push(curElt = this.parseTemplateElement(isTagged));
    }

    return this.finishNode(node, "TemplateLiteral");
  }

  parseTemplateSubstitution() {
    return this.parseExpression();
  }

  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
    if (isRecord) {
      this.expectPlugin("recordAndTuple");
    }

    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
    this.state.inFSharpPipelineDirectBody = false;
    const propHash = Object.create(null);
    let first = true;
    const node = this.startNode();
    node.properties = [];
    this.next();

    while (!this.match(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(12);

        if (this.match(close)) {
          this.addTrailingCommaExtraToNode(node);
          break;
        }
      }

      let prop;

      if (isPattern) {
        prop = this.parseBindingProperty();
      } else {
        prop = this.parsePropertyDefinition(refExpressionErrors);
        this.checkProto(prop, isRecord, propHash, refExpressionErrors);
      }

      if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
        this.raise(Errors.InvalidRecordProperty, {
          at: prop
        });
      }

      if (prop.shorthand) {
        this.addExtra(prop, "shorthand", true);
      }

      node.properties.push(prop);
    }

    this.next();
    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
    let type = "ObjectExpression";

    if (isPattern) {
      type = "ObjectPattern";
    } else if (isRecord) {
      type = "RecordExpression";
    }

    return this.finishNode(node, type);
  }

  addTrailingCommaExtraToNode(node) {
    this.addExtra(node, "trailingComma", this.state.lastTokStart);
    this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
  }

  maybeAsyncOrAccessorProp(prop) {
    return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
  }

  parsePropertyDefinition(refExpressionErrors) {
    let decorators = [];

    if (this.match(26)) {
      if (this.hasPlugin("decorators")) {
        this.raise(Errors.UnsupportedPropertyDecorator, {
          at: this.state.startLoc
        });
      }

      while (this.match(26)) {
        decorators.push(this.parseDecorator());
      }
    }

    const prop = this.startNode();
    let isAsync = false;
    let isAccessor = false;
    let startPos;
    let startLoc;

    if (this.match(21)) {
      if (decorators.length) this.unexpected();
      return this.parseSpread();
    }

    if (decorators.length) {
      prop.decorators = decorators;
      decorators = [];
    }

    prop.method = false;

    if (refExpressionErrors) {
      startPos = this.state.start;
      startLoc = this.state.startLoc;
    }

    let isGenerator = this.eat(55);
    this.parsePropertyNamePrefixOperator(prop);
    const containsEsc = this.state.containsEsc;
    const key = this.parsePropertyName(prop, refExpressionErrors);

    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
      const keyName = key.name;

      if (keyName === "async" && !this.hasPrecedingLineBreak()) {
        isAsync = true;
        this.resetPreviousNodeTrailingComments(key);
        isGenerator = this.eat(55);
        this.parsePropertyName(prop);
      }

      if (keyName === "get" || keyName === "set") {
        isAccessor = true;
        this.resetPreviousNodeTrailingComments(key);
        prop.kind = keyName;

        if (this.match(55)) {
          isGenerator = true;
          this.raise(Errors.AccessorIsGenerator, {
            at: this.state.curPosition(),
            kind: keyName
          });
          this.next();
        }

        this.parsePropertyName(prop);
      }
    }

    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
    return prop;
  }

  getGetterSetterExpectedParamCount(method) {
    return method.kind === "get" ? 0 : 1;
  }

  getObjectOrClassMethodParams(method) {
    return method.params;
  }

  checkGetterSetterParams(method) {
    var _params;

    const paramCount = this.getGetterSetterExpectedParamCount(method);
    const params = this.getObjectOrClassMethodParams(method);

    if (params.length !== paramCount) {
      this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, {
        at: method
      });
    }

    if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
      this.raise(Errors.BadSetterRestParameter, {
        at: method
      });
    }
  }

  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
    if (isAccessor) {
      this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
      this.checkGetterSetterParams(prop);
      return prop;
    }

    if (isAsync || isGenerator || this.match(10)) {
      if (isPattern) this.unexpected();
      prop.kind = "method";
      prop.method = true;
      return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
    }
  }

  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
    prop.shorthand = false;

    if (this.eat(14)) {
      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
      return this.finishNode(prop, "ObjectProperty");
    }

    if (!prop.computed && prop.key.type === "Identifier") {
      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);

      if (isPattern) {
        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
      } else if (this.match(29)) {
        const shorthandAssignLoc = this.state.startLoc;

        if (refExpressionErrors != null) {
          if (refExpressionErrors.shorthandAssignLoc === null) {
            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
          }
        } else {
          this.raise(Errors.InvalidCoverInitializedName, {
            at: shorthandAssignLoc
          });
        }

        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
      } else {
        prop.value = cloneIdentifier(prop.key);
      }

      prop.shorthand = true;
      return this.finishNode(prop, "ObjectProperty");
    }
  }

  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
    if (!node) this.unexpected();
    return node;
  }

  parsePropertyName(prop, refExpressionErrors) {
    if (this.eat(0)) {
      prop.computed = true;
      prop.key = this.parseMaybeAssignAllowIn();
      this.expect(3);
    } else {
      const {
        type,
        value
      } = this.state;
      let key;

      if (tokenIsKeywordOrIdentifier(type)) {
        key = this.parseIdentifier(true);
      } else {
        switch (type) {
          case 130:
            key = this.parseNumericLiteral(value);
            break;

          case 129:
            key = this.parseStringLiteral(value);
            break;

          case 131:
            key = this.parseBigIntLiteral(value);
            break;

          case 132:
            key = this.parseDecimalLiteral(value);
            break;

          case 134:
            {
              const privateKeyLoc = this.state.startLoc;

              if (refExpressionErrors != null) {
                if (refExpressionErrors.privateKeyLoc === null) {
                  refExpressionErrors.privateKeyLoc = privateKeyLoc;
                }
              } else {
                this.raise(Errors.UnexpectedPrivateField, {
                  at: privateKeyLoc
                });
              }

              key = this.parsePrivateName();
              break;
            }

          default:
            throw this.unexpected();
        }
      }

      prop.key = key;

      if (type !== 134) {
        prop.computed = false;
      }
    }

    return prop.key;
  }

  initFunction(node, isAsync) {
    node.id = null;
    node.generator = false;
    node.async = !!isAsync;
  }

  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
    this.initFunction(node, isAsync);
    node.generator = !!isGenerator;
    const allowModifiers = isConstructor;
    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
    this.prodParam.enter(functionFlags(isAsync, node.generator));
    this.parseFunctionParams(node, allowModifiers);
    this.parseFunctionBodyAndFinish(node, type, true);
    this.prodParam.exit();
    this.scope.exit();
    return node;
  }

  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
    if (isTuple) {
      this.expectPlugin("recordAndTuple");
    }

    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
    this.state.inFSharpPipelineDirectBody = false;
    const node = this.startNode();
    this.next();
    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
    return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
  }

  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);
    let flags = functionFlags(isAsync, false);

    if (!this.match(5) && this.prodParam.hasIn) {
      flags |= PARAM_IN;
    }

    this.prodParam.enter(flags);
    this.initFunction(node, isAsync);
    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;

    if (params) {
      this.state.maybeInArrowParameters = true;
      this.setArrowFunctionParameters(node, params, trailingCommaLoc);
    }

    this.state.maybeInArrowParameters = false;
    this.parseFunctionBody(node, true);
    this.prodParam.exit();
    this.scope.exit();
    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
    return this.finishNode(node, "ArrowFunctionExpression");
  }

  setArrowFunctionParameters(node, params, trailingCommaLoc) {
    this.toAssignableList(params, trailingCommaLoc, false);
    node.params = params;
  }

  parseFunctionBodyAndFinish(node, type, isMethod = false) {
    this.parseFunctionBody(node, false, isMethod);
    this.finishNode(node, type);
  }

  parseFunctionBody(node, allowExpression, isMethod = false) {
    const isExpression = allowExpression && !this.match(5);
    this.expressionScope.enter(newExpressionScope());

    if (isExpression) {
      node.body = this.parseMaybeAssign();
      this.checkParams(node, false, allowExpression, false);
    } else {
      const oldStrict = this.state.strict;
      const oldLabels = this.state.labels;
      this.state.labels = [];
      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);
      node.body = this.parseBlock(true, false, hasStrictModeDirective => {
        const nonSimple = !this.isSimpleParamList(node.params);

        if (hasStrictModeDirective && nonSimple) {
          this.raise(Errors.IllegalLanguageModeDirective, {
            at: (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.loc.end : node
          });
        }

        const strictModeChanged = !oldStrict && this.state.strict;
        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);

        if (this.state.strict && node.id) {
          this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);
        }
      });
      this.prodParam.exit();
      this.state.labels = oldLabels;
    }

    this.expressionScope.exit();
  }

  isSimpleParameter(node) {
    return node.type === "Identifier";
  }

  isSimpleParamList(params) {
    for (let i = 0, len = params.length; i < len; i++) {
      if (!this.isSimpleParameter(params[i])) return false;
    }

    return true;
  }

  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
    const checkClashes = !allowDuplicates && new Set();
    const formalParameters = {
      type: "FormalParameters"
    };

    for (const param of node.params) {
      this.checkLVal(param, {
        in: formalParameters,
        binding: BIND_VAR,
        checkClashes,
        strictModeChanged
      });
    }
  }

  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
    const elts = [];
    let first = true;

    while (!this.eat(close)) {
      if (first) {
        first = false;
      } else {
        this.expect(12);

        if (this.match(close)) {
          if (nodeForExtra) {
            this.addTrailingCommaExtraToNode(nodeForExtra);
          }

          this.next();
          break;
        }
      }

      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
    }

    return elts;
  }

  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
    let elt;

    if (this.match(12)) {
      if (!allowEmpty) {
        this.raise(Errors.UnexpectedToken, {
          at: this.state.curPosition(),
          unexpected: ","
        });
      }

      elt = null;
    } else if (this.match(21)) {
      const spreadNodeStartPos = this.state.start;
      const spreadNodeStartLoc = this.state.startLoc;
      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);
    } else if (this.match(17)) {
      this.expectPlugin("partialApplication");

      if (!allowPlaceholder) {
        this.raise(Errors.UnexpectedArgumentPlaceholder, {
          at: this.state.startLoc
        });
      }

      const node = this.startNode();
      this.next();
      elt = this.finishNode(node, "ArgumentPlaceholder");
    } else {
      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
    }

    return elt;
  }

  parseIdentifier(liberal) {
    const node = this.startNode();
    const name = this.parseIdentifierName(node.start, liberal);
    return this.createIdentifier(node, name);
  }

  createIdentifier(node, name) {
    node.name = name;
    node.loc.identifierName = name;
    return this.finishNode(node, "Identifier");
  }

  parseIdentifierName(pos, liberal) {
    let name;
    const {
      startLoc,
      type
    } = this.state;

    if (tokenIsKeywordOrIdentifier(type)) {
      name = this.state.value;
    } else {
      throw this.unexpected();
    }

    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);

    if (liberal) {
      if (tokenIsKeyword) {
        this.replaceToken(128);
      }
    } else {
      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);
    }

    this.next();
    return name;
  }

  checkReservedWord(word, startLoc, checkKeywords, isBinding) {
    if (word.length > 10) {
      return;
    }

    if (!canBeReservedWord(word)) {
      return;
    }

    if (word === "yield") {
      if (this.prodParam.hasYield) {
        this.raise(Errors.YieldBindingIdentifier, {
          at: startLoc
        });
        return;
      }
    } else if (word === "await") {
      if (this.prodParam.hasAwait) {
        this.raise(Errors.AwaitBindingIdentifier, {
          at: startLoc
        });
        return;
      }

      if (this.scope.inStaticBlock) {
        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {
          at: startLoc
        });
        return;
      }

      this.expressionScope.recordAsyncArrowParametersError({
        at: startLoc
      });
    } else if (word === "arguments") {
      if (this.scope.inClassAndNotInNonArrowFunction) {
        this.raise(Errors.ArgumentsInClass, {
          at: startLoc
        });
        return;
      }
    }

    if (checkKeywords && isKeyword(word)) {
      this.raise(Errors.UnexpectedKeyword, {
        at: startLoc,
        keyword: word
      });
      return;
    }

    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;

    if (reservedTest(word, this.inModule)) {
      this.raise(Errors.UnexpectedReservedWord, {
        at: startLoc,
        reservedWord: word
      });
    }
  }

  isAwaitAllowed() {
    if (this.prodParam.hasAwait) return true;

    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
      return true;
    }

    return false;
  }

  parseAwait(startPos, startLoc) {
    const node = this.startNodeAt(startPos, startLoc);
    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {
      at: node
    });

    if (this.eat(55)) {
      this.raise(Errors.ObsoleteAwaitStar, {
        at: node
      });
    }

    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
      if (this.isAmbiguousAwait()) {
        this.ambiguousScriptDifferentAst = true;
      } else {
        this.sawUnambiguousESM = true;
      }
    }

    if (!this.state.soloAwait) {
      node.argument = this.parseMaybeUnary(null, true);
    }

    return this.finishNode(node, "AwaitExpression");
  }

  isAmbiguousAwait() {
    if (this.hasPrecedingLineBreak()) return true;
    const {
      type
    } = this.state;
    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 133 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
  }

  parseYield() {
    const node = this.startNode();
    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {
      at: node
    });
    this.next();
    let delegating = false;
    let argument = null;

    if (!this.hasPrecedingLineBreak()) {
      delegating = this.eat(55);

      switch (this.state.type) {
        case 13:
        case 135:
        case 8:
        case 11:
        case 3:
        case 9:
        case 14:
        case 12:
          if (!delegating) break;

        default:
          argument = this.parseMaybeAssign();
      }
    }

    node.delegate = delegating;
    node.argument = argument;
    return this.finishNode(node, "YieldExpression");
  }

  checkPipelineAtInfixOperator(left, leftStartLoc) {
    if (this.hasPlugin(["pipelineOperator", {
      proposal: "smart"
    }])) {
      if (left.type === "SequenceExpression") {
        this.raise(Errors.PipelineHeadSequenceExpression, {
          at: leftStartLoc
        });
      }
    }
  }

  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {
    const bodyNode = this.startNodeAt(startPos, startLoc);

    if (this.isSimpleReference(childExpr)) {
      bodyNode.callee = childExpr;
      return this.finishNode(bodyNode, "PipelineBareFunction");
    } else {
      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
      bodyNode.expression = childExpr;
      return this.finishNode(bodyNode, "PipelineTopicExpression");
    }
  }

  isSimpleReference(expression) {
    switch (expression.type) {
      case "MemberExpression":
        return !expression.computed && this.isSimpleReference(expression.object);

      case "Identifier":
        return true;

      default:
        return false;
    }
  }

  checkSmartPipeTopicBodyEarlyErrors(startLoc) {
    if (this.match(19)) {
      throw this.raise(Errors.PipelineBodyNoArrow, {
        at: this.state.startLoc
      });
    }

    if (!this.topicReferenceWasUsedInCurrentContext()) {
      this.raise(Errors.PipelineTopicUnused, {
        at: startLoc
      });
    }
  }

  withTopicBindingContext(callback) {
    const outerContextTopicState = this.state.topicContext;
    this.state.topicContext = {
      maxNumOfResolvableTopics: 1,
      maxTopicIndex: null
    };

    try {
      return callback();
    } finally {
      this.state.topicContext = outerContextTopicState;
    }
  }

  withSmartMixTopicForbiddingContext(callback) {
    if (this.hasPlugin(["pipelineOperator", {
      proposal: "smart"
    }])) {
      const outerContextTopicState = this.state.topicContext;
      this.state.topicContext = {
        maxNumOfResolvableTopics: 0,
        maxTopicIndex: null
      };

      try {
        return callback();
      } finally {
        this.state.topicContext = outerContextTopicState;
      }
    } else {
      return callback();
    }
  }

  withSoloAwaitPermittingContext(callback) {
    const outerContextSoloAwaitState = this.state.soloAwait;
    this.state.soloAwait = true;

    try {
      return callback();
    } finally {
      this.state.soloAwait = outerContextSoloAwaitState;
    }
  }

  allowInAnd(callback) {
    const flags = this.prodParam.currentFlags();
    const prodParamToSet = PARAM_IN & ~flags;

    if (prodParamToSet) {
      this.prodParam.enter(flags | PARAM_IN);

      try {
        return callback();
      } finally {
        this.prodParam.exit();
      }
    }

    return callback();
  }

  disallowInAnd(callback) {
    const flags = this.prodParam.currentFlags();
    const prodParamToClear = PARAM_IN & flags;

    if (prodParamToClear) {
      this.prodParam.enter(flags & ~PARAM_IN);

      try {
        return callback();
      } finally {
        this.prodParam.exit();
      }
    }

    return callback();
  }

  registerTopicReference() {
    this.state.topicContext.maxTopicIndex = 0;
  }

  topicReferenceIsAllowedInCurrentContext() {
    return this.state.topicContext.maxNumOfResolvableTopics >= 1;
  }

  topicReferenceWasUsedInCurrentContext() {
    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
  }

  parseFSharpPipelineBody(prec) {
    const startPos = this.state.start;
    const startLoc = this.state.startLoc;
    this.state.potentialArrowAt = this.state.start;
    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
    this.state.inFSharpPipelineDirectBody = true;
    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);
    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
    return ret;
  }

  parseModuleExpression() {
    this.expectPlugin("moduleBlocks");
    const node = this.startNode();
    this.next();
    this.eat(5);
    const revertScopes = this.initializeScopes(true);
    this.enterInitialScopes();
    const program = this.startNode();

    try {
      node.body = this.parseProgram(program, 8, "module");
    } finally {
      revertScopes();
    }

    this.eat(8);
    return this.finishNode(node, "ModuleExpression");
  }

  parsePropertyNamePrefixOperator(prop) {}

}

const loopLabel = {
  kind: "loop"
},
      switchLabel = {
  kind: "switch"
};
const FUNC_NO_FLAGS = 0b000,
      FUNC_STATEMENT = 0b001,
      FUNC_HANGING_STATEMENT = 0b010,
      FUNC_NULLABLE_ID = 0b100;
const loneSurrogate = /[\uD800-\uDFFF]/u;
const keywordRelationalOperator = /in(?:stanceof)?/y;

function babel7CompatTokens(tokens, input) {
  for (let i = 0; i < tokens.length; i++) {
    const token = tokens[i];
    const {
      type
    } = token;

    if (typeof type === "number") {
      {
        if (type === 134) {
          const {
            loc,
            start,
            value,
            end
          } = token;
          const hashEndPos = start + 1;
          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
          tokens.splice(i, 1, new Token({
            type: getExportedToken(27),
            value: "#",
            start: start,
            end: hashEndPos,
            startLoc: loc.start,
            endLoc: hashEndLoc
          }), new Token({
            type: getExportedToken(128),
            value: value,
            start: hashEndPos,
            end: end,
            startLoc: hashEndLoc,
            endLoc: loc.end
          }));
          i++;
          continue;
        }

        if (tokenIsTemplate(type)) {
          const {
            loc,
            start,
            value,
            end
          } = token;
          const backquoteEnd = start + 1;
          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
          let startToken;

          if (input.charCodeAt(start) === 96) {
            startToken = new Token({
              type: getExportedToken(22),
              value: "`",
              start: start,
              end: backquoteEnd,
              startLoc: loc.start,
              endLoc: backquoteEndLoc
            });
          } else {
            startToken = new Token({
              type: getExportedToken(8),
              value: "}",
              start: start,
              end: backquoteEnd,
              startLoc: loc.start,
              endLoc: backquoteEndLoc
            });
          }

          let templateValue, templateElementEnd, templateElementEndLoc, endToken;

          if (type === 24) {
            templateElementEnd = end - 1;
            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
            templateValue = value === null ? null : value.slice(1, -1);
            endToken = new Token({
              type: getExportedToken(22),
              value: "`",
              start: templateElementEnd,
              end: end,
              startLoc: templateElementEndLoc,
              endLoc: loc.end
            });
          } else {
            templateElementEnd = end - 2;
            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
            templateValue = value === null ? null : value.slice(1, -2);
            endToken = new Token({
              type: getExportedToken(23),
              value: "${",
              start: templateElementEnd,
              end: end,
              startLoc: templateElementEndLoc,
              endLoc: loc.end
            });
          }

          tokens.splice(i, 1, startToken, new Token({
            type: getExportedToken(20),
            value: templateValue,
            start: backquoteEnd,
            end: templateElementEnd,
            startLoc: backquoteEndLoc,
            endLoc: templateElementEndLoc
          }), endToken);
          i += 2;
          continue;
        }
      }
      token.type = getExportedToken(type);
    }
  }

  return tokens;
}

class StatementParser extends ExpressionParser {
  parseTopLevel(file, program) {
    file.program = this.parseProgram(program);
    file.comments = this.state.comments;

    if (this.options.tokens) {
      file.tokens = babel7CompatTokens(this.tokens, this.input);
    }

    return this.finishNode(file, "File");
  }

  parseProgram(program, end = 135, sourceType = this.options.sourceType) {
    program.sourceType = sourceType;
    program.interpreter = this.parseInterpreterDirective();
    this.parseBlockBody(program, true, true, end);

    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {
        this.raise(Errors.ModuleExportUndefined, {
          at,
          localName
        });
      }
    }

    return this.finishNode(program, "Program");
  }

  stmtToDirective(stmt) {
    const directive = stmt;
    directive.type = "Directive";
    directive.value = directive.expression;
    delete directive.expression;
    const directiveLiteral = directive.value;
    const expressionValue = directiveLiteral.value;
    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
    const val = directiveLiteral.value = raw.slice(1, -1);
    this.addExtra(directiveLiteral, "raw", raw);
    this.addExtra(directiveLiteral, "rawValue", val);
    this.addExtra(directiveLiteral, "expressionValue", expressionValue);
    directiveLiteral.type = "DirectiveLiteral";
    return directive;
  }

  parseInterpreterDirective() {
    if (!this.match(28)) {
      return null;
    }

    const node = this.startNode();
    node.value = this.state.value;
    this.next();
    return this.finishNode(node, "InterpreterDirective");
  }

  isLet(context) {
    if (!this.isContextual(99)) {
      return false;
    }

    return this.isLetKeyword(context);
  }

  isLetKeyword(context) {
    const next = this.nextTokenStart();
    const nextCh = this.codePointAtPos(next);

    if (nextCh === 92 || nextCh === 91) {
      return true;
    }

    if (context) return false;
    if (nextCh === 123) return true;

    if (isIdentifierStart(nextCh)) {
      keywordRelationalOperator.lastIndex = next;

      if (keywordRelationalOperator.test(this.input)) {
        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);

        if (!isIdentifierChar(endCh) && endCh !== 92) {
          return false;
        }
      }

      return true;
    }

    return false;
  }

  parseStatement(context, topLevel) {
    if (this.match(26)) {
      this.parseDecorators(true);
    }

    return this.parseStatementContent(context, topLevel);
  }

  parseStatementContent(context, topLevel) {
    let starttype = this.state.type;
    const node = this.startNode();
    let kind;

    if (this.isLet(context)) {
      starttype = 74;
      kind = "let";
    }

    switch (starttype) {
      case 60:
        return this.parseBreakContinueStatement(node, true);

      case 63:
        return this.parseBreakContinueStatement(node, false);

      case 64:
        return this.parseDebuggerStatement(node);

      case 90:
        return this.parseDoStatement(node);

      case 91:
        return this.parseForStatement(node);

      case 68:
        if (this.lookaheadCharCode() === 46) break;

        if (context) {
          if (this.state.strict) {
            this.raise(Errors.StrictFunction, {
              at: this.state.startLoc
            });
          } else if (context !== "if" && context !== "label") {
            this.raise(Errors.SloppyFunction, {
              at: this.state.startLoc
            });
          }
        }

        return this.parseFunctionStatement(node, false, !context);

      case 80:
        if (context) this.unexpected();
        return this.parseClass(node, true);

      case 69:
        return this.parseIfStatement(node);

      case 70:
        return this.parseReturnStatement(node);

      case 71:
        return this.parseSwitchStatement(node);

      case 72:
        return this.parseThrowStatement(node);

      case 73:
        return this.parseTryStatement(node);

      case 75:
      case 74:
        kind = kind || this.state.value;

        if (context && kind !== "var") {
          this.raise(Errors.UnexpectedLexicalDeclaration, {
            at: this.state.startLoc
          });
        }

        return this.parseVarStatement(node, kind);

      case 92:
        return this.parseWhileStatement(node);

      case 76:
        return this.parseWithStatement(node);

      case 5:
        return this.parseBlock();

      case 13:
        return this.parseEmptyStatement(node);

      case 83:
        {
          const nextTokenCharCode = this.lookaheadCharCode();

          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
            break;
          }
        }

      case 82:
        {
          if (!this.options.allowImportExportEverywhere && !topLevel) {
            this.raise(Errors.UnexpectedImportExport, {
              at: this.state.startLoc
            });
          }

          this.next();
          let result;

          if (starttype === 83) {
            result = this.parseImport(node);

            if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {
              this.sawUnambiguousESM = true;
            }
          } else {
            result = this.parseExport(node);

            if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {
              this.sawUnambiguousESM = true;
            }
          }

          this.assertModuleNodeAllowed(node);
          return result;
        }

      default:
        {
          if (this.isAsyncFunction()) {
            if (context) {
              this.raise(Errors.AsyncFunctionInSingleStatementContext, {
                at: this.state.startLoc
              });
            }

            this.next();
            return this.parseFunctionStatement(node, true, !context);
          }
        }
    }

    const maybeName = this.state.value;
    const expr = this.parseExpression();

    if (tokenIsIdentifier(starttype) && expr.type === "Identifier" && this.eat(14)) {
      return this.parseLabeledStatement(node, maybeName, expr, context);
    } else {
      return this.parseExpressionStatement(node, expr);
    }
  }

  assertModuleNodeAllowed(node) {
    if (!this.options.allowImportExportEverywhere && !this.inModule) {
      this.raise(Errors.ImportOutsideModule, {
        at: node
      });
    }
  }

  takeDecorators(node) {
    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];

    if (decorators.length) {
      node.decorators = decorators;
      this.resetStartLocationFromNode(node, decorators[0]);
      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];
    }
  }

  canHaveLeadingDecorator() {
    return this.match(80);
  }

  parseDecorators(allowExport) {
    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];

    while (this.match(26)) {
      const decorator = this.parseDecorator();
      currentContextDecorators.push(decorator);
    }

    if (this.match(82)) {
      if (!allowExport) {
        this.unexpected();
      }

      if (this.hasPlugin("decorators") && !this.getPluginOption("decorators", "decoratorsBeforeExport")) {
        this.raise(Errors.DecoratorExportClass, {
          at: this.state.startLoc
        });
      }
    } else if (!this.canHaveLeadingDecorator()) {
      throw this.raise(Errors.UnexpectedLeadingDecorator, {
        at: this.state.startLoc
      });
    }
  }

  parseDecorator() {
    this.expectOnePlugin(["decorators-legacy", "decorators"]);
    const node = this.startNode();
    this.next();

    if (this.hasPlugin("decorators")) {
      this.state.decoratorStack.push([]);
      const startPos = this.state.start;
      const startLoc = this.state.startLoc;
      let expr;

      if (this.match(10)) {
        const startPos = this.state.start;
        const startLoc = this.state.startLoc;
        this.next();
        expr = this.parseExpression();
        this.expect(11);
        expr = this.wrapParenthesis(startPos, startLoc, expr);
      } else {
        expr = this.parseIdentifier(false);

        while (this.eat(16)) {
          const node = this.startNodeAt(startPos, startLoc);
          node.object = expr;
          node.property = this.parseIdentifier(true);
          node.computed = false;
          expr = this.finishNode(node, "MemberExpression");
        }
      }

      node.expression = this.parseMaybeDecoratorArguments(expr);
      this.state.decoratorStack.pop();
    } else {
      node.expression = this.parseExprSubscripts();
    }

    return this.finishNode(node, "Decorator");
  }

  parseMaybeDecoratorArguments(expr) {
    if (this.eat(10)) {
      const node = this.startNodeAtNode(expr);
      node.callee = expr;
      node.arguments = this.parseCallExpressionArguments(11, false);
      this.toReferencedList(node.arguments);
      return this.finishNode(node, "CallExpression");
    }

    return expr;
  }

  parseBreakContinueStatement(node, isBreak) {
    this.next();

    if (this.isLineTerminator()) {
      node.label = null;
    } else {
      node.label = this.parseIdentifier();
      this.semicolon();
    }

    this.verifyBreakContinue(node, isBreak);
    return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
  }

  verifyBreakContinue(node, isBreak) {
    let i;

    for (i = 0; i < this.state.labels.length; ++i) {
      const lab = this.state.labels[i];

      if (node.label == null || lab.name === node.label.name) {
        if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
        if (node.label && isBreak) break;
      }
    }

    if (i === this.state.labels.length) {
      const type = isBreak ? "BreakStatement" : "ContinueStatement";
      this.raise(Errors.IllegalBreakContinue, {
        at: node,
        type
      });
    }
  }

  parseDebuggerStatement(node) {
    this.next();
    this.semicolon();
    return this.finishNode(node, "DebuggerStatement");
  }

  parseHeaderExpression() {
    this.expect(10);
    const val = this.parseExpression();
    this.expect(11);
    return val;
  }

  parseDoStatement(node) {
    this.next();
    this.state.labels.push(loopLabel);
    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("do"));
    this.state.labels.pop();
    this.expect(92);
    node.test = this.parseHeaderExpression();
    this.eat(13);
    return this.finishNode(node, "DoWhileStatement");
  }

  parseForStatement(node) {
    this.next();
    this.state.labels.push(loopLabel);
    let awaitAt = null;

    if (this.isAwaitAllowed() && this.eatContextual(96)) {
      awaitAt = this.state.lastTokStartLoc;
    }

    this.scope.enter(SCOPE_OTHER);
    this.expect(10);

    if (this.match(13)) {
      if (awaitAt !== null) {
        this.unexpected(awaitAt);
      }

      return this.parseFor(node, null);
    }

    const startsWithLet = this.isContextual(99);
    const isLet = startsWithLet && this.isLetKeyword();

    if (this.match(74) || this.match(75) || isLet) {
      const init = this.startNode();
      const kind = isLet ? "let" : this.state.value;
      this.next();
      this.parseVar(init, true, kind);
      this.finishNode(init, "VariableDeclaration");

      if ((this.match(58) || this.isContextual(101)) && init.declarations.length === 1) {
        return this.parseForIn(node, init, awaitAt);
      }

      if (awaitAt !== null) {
        this.unexpected(awaitAt);
      }

      return this.parseFor(node, init);
    }

    const startsWithAsync = this.isContextual(95);
    const refExpressionErrors = new ExpressionErrors();
    const init = this.parseExpression(true, refExpressionErrors);
    const isForOf = this.isContextual(101);

    if (isForOf) {
      if (startsWithLet) {
        this.raise(Errors.ForOfLet, {
          at: init
        });
      }

      if (awaitAt === null && startsWithAsync && init.type === "Identifier") {
        this.raise(Errors.ForOfAsync, {
          at: init
        });
      }
    }

    if (isForOf || this.match(58)) {
      this.checkDestructuringPrivate(refExpressionErrors);
      this.toAssignable(init, true);
      const type = isForOf ? "ForOfStatement" : "ForInStatement";
      this.checkLVal(init, {
        in: {
          type
        }
      });
      return this.parseForIn(node, init, awaitAt);
    } else {
      this.checkExpressionErrors(refExpressionErrors, true);
    }

    if (awaitAt !== null) {
      this.unexpected(awaitAt);
    }

    return this.parseFor(node, init);
  }

  parseFunctionStatement(node, isAsync, declarationPosition) {
    this.next();
    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);
  }

  parseIfStatement(node) {
    this.next();
    node.test = this.parseHeaderExpression();
    node.consequent = this.parseStatement("if");
    node.alternate = this.eat(66) ? this.parseStatement("if") : null;
    return this.finishNode(node, "IfStatement");
  }

  parseReturnStatement(node) {
    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
      this.raise(Errors.IllegalReturn, {
        at: this.state.startLoc
      });
    }

    this.next();

    if (this.isLineTerminator()) {
      node.argument = null;
    } else {
      node.argument = this.parseExpression();
      this.semicolon();
    }

    return this.finishNode(node, "ReturnStatement");
  }

  parseSwitchStatement(node) {
    this.next();
    node.discriminant = this.parseHeaderExpression();
    const cases = node.cases = [];
    this.expect(5);
    this.state.labels.push(switchLabel);
    this.scope.enter(SCOPE_OTHER);
    let cur;

    for (let sawDefault; !this.match(8);) {
      if (this.match(61) || this.match(65)) {
        const isCase = this.match(61);
        if (cur) this.finishNode(cur, "SwitchCase");
        cases.push(cur = this.startNode());
        cur.consequent = [];
        this.next();

        if (isCase) {
          cur.test = this.parseExpression();
        } else {
          if (sawDefault) {
            this.raise(Errors.MultipleDefaultsInSwitch, {
              at: this.state.lastTokStartLoc
            });
          }

          sawDefault = true;
          cur.test = null;
        }

        this.expect(14);
      } else {
        if (cur) {
          cur.consequent.push(this.parseStatement(null));
        } else {
          this.unexpected();
        }
      }
    }

    this.scope.exit();
    if (cur) this.finishNode(cur, "SwitchCase");
    this.next();
    this.state.labels.pop();
    return this.finishNode(node, "SwitchStatement");
  }

  parseThrowStatement(node) {
    this.next();

    if (this.hasPrecedingLineBreak()) {
      this.raise(Errors.NewlineAfterThrow, {
        at: this.state.lastTokEndLoc
      });
    }

    node.argument = this.parseExpression();
    this.semicolon();
    return this.finishNode(node, "ThrowStatement");
  }

  parseCatchClauseParam() {
    const param = this.parseBindingAtom();
    const simple = param.type === "Identifier";
    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);
    this.checkLVal(param, {
      in: {
        type: "CatchClause"
      },
      binding: BIND_LEXICAL,
      allowingSloppyLetBinding: true
    });
    return param;
  }

  parseTryStatement(node) {
    this.next();
    node.block = this.parseBlock();
    node.handler = null;

    if (this.match(62)) {
      const clause = this.startNode();
      this.next();

      if (this.match(10)) {
        this.expect(10);
        clause.param = this.parseCatchClauseParam();
        this.expect(11);
      } else {
        clause.param = null;
        this.scope.enter(SCOPE_OTHER);
      }

      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
      this.scope.exit();
      node.handler = this.finishNode(clause, "CatchClause");
    }

    node.finalizer = this.eat(67) ? this.parseBlock() : null;

    if (!node.handler && !node.finalizer) {
      this.raise(Errors.NoCatchOrFinally, {
        at: node
      });
    }

    return this.finishNode(node, "TryStatement");
  }

  parseVarStatement(node, kind, allowMissingInitializer = false) {
    this.next();
    this.parseVar(node, false, kind, allowMissingInitializer);
    this.semicolon();
    return this.finishNode(node, "VariableDeclaration");
  }

  parseWhileStatement(node) {
    this.next();
    node.test = this.parseHeaderExpression();
    this.state.labels.push(loopLabel);
    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("while"));
    this.state.labels.pop();
    return this.finishNode(node, "WhileStatement");
  }

  parseWithStatement(node) {
    if (this.state.strict) {
      this.raise(Errors.StrictWith, {
        at: this.state.startLoc
      });
    }

    this.next();
    node.object = this.parseHeaderExpression();
    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("with"));
    return this.finishNode(node, "WithStatement");
  }

  parseEmptyStatement(node) {
    this.next();
    return this.finishNode(node, "EmptyStatement");
  }

  parseLabeledStatement(node, maybeName, expr, context) {
    for (const label of this.state.labels) {
      if (label.name === maybeName) {
        this.raise(Errors.LabelRedeclaration, {
          at: expr,
          labelName: maybeName
        });
      }
    }

    const kind = tokenIsLoop(this.state.type) ? "loop" : this.match(71) ? "switch" : null;

    for (let i = this.state.labels.length - 1; i >= 0; i--) {
      const label = this.state.labels[i];

      if (label.statementStart === node.start) {
        label.statementStart = this.state.start;
        label.kind = kind;
      } else {
        break;
      }
    }

    this.state.labels.push({
      name: maybeName,
      kind: kind,
      statementStart: this.state.start
    });
    node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
    this.state.labels.pop();
    node.label = expr;
    return this.finishNode(node, "LabeledStatement");
  }

  parseExpressionStatement(node, expr) {
    node.expression = expr;
    this.semicolon();
    return this.finishNode(node, "ExpressionStatement");
  }

  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
    const node = this.startNode();

    if (allowDirectives) {
      this.state.strictErrors.clear();
    }

    this.expect(5);

    if (createNewLexicalScope) {
      this.scope.enter(SCOPE_OTHER);
    }

    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);

    if (createNewLexicalScope) {
      this.scope.exit();
    }

    return this.finishNode(node, "BlockStatement");
  }

  isValidDirective(stmt) {
    return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
  }

  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
    const body = node.body = [];
    const directives = node.directives = [];
    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);
  }

  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
    const oldStrict = this.state.strict;
    let hasStrictModeDirective = false;
    let parsedNonDirective = false;

    while (!this.match(end)) {
      const stmt = this.parseStatement(null, topLevel);

      if (directives && !parsedNonDirective) {
        if (this.isValidDirective(stmt)) {
          const directive = this.stmtToDirective(stmt);
          directives.push(directive);

          if (!hasStrictModeDirective && directive.value.value === "use strict") {
            hasStrictModeDirective = true;
            this.setStrict(true);
          }

          continue;
        }

        parsedNonDirective = true;
        this.state.strictErrors.clear();
      }

      body.push(stmt);
    }

    if (afterBlockParse) {
      afterBlockParse.call(this, hasStrictModeDirective);
    }

    if (!oldStrict) {
      this.setStrict(false);
    }

    this.next();
  }

  parseFor(node, init) {
    node.init = init;
    this.semicolon(false);
    node.test = this.match(13) ? null : this.parseExpression();
    this.semicolon(false);
    node.update = this.match(11) ? null : this.parseExpression();
    this.expect(11);
    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for"));
    this.scope.exit();
    this.state.labels.pop();
    return this.finishNode(node, "ForStatement");
  }

  parseForIn(node, init, awaitAt) {
    const isForIn = this.match(58);
    this.next();

    if (isForIn) {
      if (awaitAt !== null) this.unexpected(awaitAt);
    } else {
      node.await = awaitAt !== null;
    }

    if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
      this.raise(Errors.ForInOfLoopInitializer, {
        at: init,
        type: isForIn ? "ForInStatement" : "ForOfStatement"
      });
    }

    if (init.type === "AssignmentPattern") {
      this.raise(Errors.InvalidLhs, {
        at: init,
        ancestor: {
          type: "ForStatement"
        }
      });
    }

    node.left = init;
    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
    this.expect(11);
    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for"));
    this.scope.exit();
    this.state.labels.pop();
    return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
  }

  parseVar(node, isFor, kind, allowMissingInitializer = false) {
    const declarations = node.declarations = [];
    node.kind = kind;

    for (;;) {
      const decl = this.startNode();
      this.parseVarId(decl, kind);
      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();

      if (decl.init === null && !allowMissingInitializer) {
        if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(101)))) {
          this.raise(Errors.DeclarationMissingInitializer, {
            at: this.state.lastTokEndLoc,
            kind: "destructuring"
          });
        } else if (kind === "const" && !(this.match(58) || this.isContextual(101))) {
          this.raise(Errors.DeclarationMissingInitializer, {
            at: this.state.lastTokEndLoc,
            kind: "const"
          });
        }
      }

      declarations.push(this.finishNode(decl, "VariableDeclarator"));
      if (!this.eat(12)) break;
    }

    return node;
  }

  parseVarId(decl, kind) {
    decl.id = this.parseBindingAtom();
    this.checkLVal(decl.id, {
      in: {
        type: "VariableDeclarator"
      },
      binding: kind === "var" ? BIND_VAR : BIND_LEXICAL
    });
  }

  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {
    const isStatement = statement & FUNC_STATEMENT;
    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;
    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);
    this.initFunction(node, isAsync);

    if (this.match(55) && isHangingStatement) {
      this.raise(Errors.GeneratorInSingleStatementContext, {
        at: this.state.startLoc
      });
    }

    node.generator = this.eat(55);

    if (isStatement) {
      node.id = this.parseFunctionId(requireId);
    }

    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
    this.state.maybeInArrowParameters = false;
    this.scope.enter(SCOPE_FUNCTION);
    this.prodParam.enter(functionFlags(isAsync, node.generator));

    if (!isStatement) {
      node.id = this.parseFunctionId();
    }

    this.parseFunctionParams(node, false);
    this.withSmartMixTopicForbiddingContext(() => {
      this.parseFunctionBodyAndFinish(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
    });
    this.prodParam.exit();
    this.scope.exit();

    if (isStatement && !isHangingStatement) {
      this.registerFunctionStatementId(node);
    }

    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
    return node;
  }

  parseFunctionId(requireId) {
    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
  }

  parseFunctionParams(node, allowModifiers) {
    this.expect(10);
    this.expressionScope.enter(newParameterDeclarationScope());
    node.params = this.parseBindingList(11, 41, false, allowModifiers);
    this.expressionScope.exit();
  }

  registerFunctionStatementId(node) {
    if (!node.id) return;
    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);
  }

  parseClass(node, isStatement, optionalId) {
    this.next();
    this.takeDecorators(node);
    const oldStrict = this.state.strict;
    this.state.strict = true;
    this.parseClassId(node, isStatement, optionalId);
    this.parseClassSuper(node);
    node.body = this.parseClassBody(!!node.superClass, oldStrict);
    return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
  }

  isClassProperty() {
    return this.match(29) || this.match(13) || this.match(8);
  }

  isClassMethod() {
    return this.match(10);
  }

  isNonstaticConstructor(method) {
    return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
  }

  parseClassBody(hadSuperClass, oldStrict) {
    this.classScope.enter();
    const state = {
      hadConstructor: false,
      hadSuperClass
    };
    let decorators = [];
    const classBody = this.startNode();
    classBody.body = [];
    this.expect(5);
    this.withSmartMixTopicForbiddingContext(() => {
      while (!this.match(8)) {
        if (this.eat(13)) {
          if (decorators.length > 0) {
            throw this.raise(Errors.DecoratorSemicolon, {
              at: this.state.lastTokEndLoc
            });
          }

          continue;
        }

        if (this.match(26)) {
          decorators.push(this.parseDecorator());
          continue;
        }

        const member = this.startNode();

        if (decorators.length) {
          member.decorators = decorators;
          this.resetStartLocationFromNode(member, decorators[0]);
          decorators = [];
        }

        this.parseClassMember(classBody, member, state);

        if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
          this.raise(Errors.DecoratorConstructor, {
            at: member
          });
        }
      }
    });
    this.state.strict = oldStrict;
    this.next();

    if (decorators.length) {
      throw this.raise(Errors.TrailingDecorator, {
        at: this.state.startLoc
      });
    }

    this.classScope.exit();
    return this.finishNode(classBody, "ClassBody");
  }

  parseClassMemberFromModifier(classBody, member) {
    const key = this.parseIdentifier(true);

    if (this.isClassMethod()) {
      const method = member;
      method.kind = "method";
      method.computed = false;
      method.key = key;
      method.static = false;
      this.pushClassMethod(classBody, method, false, false, false, false);
      return true;
    } else if (this.isClassProperty()) {
      const prop = member;
      prop.computed = false;
      prop.key = key;
      prop.static = false;
      classBody.body.push(this.parseClassProperty(prop));
      return true;
    }

    this.resetPreviousNodeTrailingComments(key);
    return false;
  }

  parseClassMember(classBody, member, state) {
    const isStatic = this.isContextual(104);

    if (isStatic) {
      if (this.parseClassMemberFromModifier(classBody, member)) {
        return;
      }

      if (this.eat(5)) {
        this.parseClassStaticBlock(classBody, member);
        return;
      }
    }

    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
  }

  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
    const publicMethod = member;
    const privateMethod = member;
    const publicProp = member;
    const privateProp = member;
    const accessorProp = member;
    const method = publicMethod;
    const publicMember = publicMethod;
    member.static = isStatic;
    this.parsePropertyNamePrefixOperator(member);

    if (this.eat(55)) {
      method.kind = "method";
      const isPrivateName = this.match(134);
      this.parseClassElementName(method);

      if (isPrivateName) {
        this.pushClassPrivateMethod(classBody, privateMethod, true, false);
        return;
      }

      if (this.isNonstaticConstructor(publicMethod)) {
        this.raise(Errors.ConstructorIsGenerator, {
          at: publicMethod.key
        });
      }

      this.pushClassMethod(classBody, publicMethod, true, false, false, false);
      return;
    }

    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;
    const isPrivate = this.match(134);
    const key = this.parseClassElementName(member);
    const maybeQuestionTokenStartLoc = this.state.startLoc;
    this.parsePostMemberNameModifiers(publicMember);

    if (this.isClassMethod()) {
      method.kind = "method";

      if (isPrivate) {
        this.pushClassPrivateMethod(classBody, privateMethod, false, false);
        return;
      }

      const isConstructor = this.isNonstaticConstructor(publicMethod);
      let allowsDirectSuper = false;

      if (isConstructor) {
        publicMethod.kind = "constructor";

        if (state.hadConstructor && !this.hasPlugin("typescript")) {
          this.raise(Errors.DuplicateConstructor, {
            at: key
          });
        }

        if (isConstructor && this.hasPlugin("typescript") && member.override) {
          this.raise(Errors.OverrideOnConstructor, {
            at: key
          });
        }

        state.hadConstructor = true;
        allowsDirectSuper = state.hadSuperClass;
      }

      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
    } else if (this.isClassProperty()) {
      if (isPrivate) {
        this.pushClassPrivateProperty(classBody, privateProp);
      } else {
        this.pushClassProperty(classBody, publicProp);
      }
    } else if (isContextual && key.name === "async" && !this.isLineTerminator()) {
      this.resetPreviousNodeTrailingComments(key);
      const isGenerator = this.eat(55);

      if (publicMember.optional) {
        this.unexpected(maybeQuestionTokenStartLoc);
      }

      method.kind = "method";
      const isPrivate = this.match(134);
      this.parseClassElementName(method);
      this.parsePostMemberNameModifiers(publicMember);

      if (isPrivate) {
        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
      } else {
        if (this.isNonstaticConstructor(publicMethod)) {
          this.raise(Errors.ConstructorIsAsync, {
            at: publicMethod.key
          });
        }

        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
      }
    } else if (isContextual && (key.name === "get" || key.name === "set") && !(this.match(55) && this.isLineTerminator())) {
      this.resetPreviousNodeTrailingComments(key);
      method.kind = key.name;
      const isPrivate = this.match(134);
      this.parseClassElementName(publicMethod);

      if (isPrivate) {
        this.pushClassPrivateMethod(classBody, privateMethod, false, false);
      } else {
        if (this.isNonstaticConstructor(publicMethod)) {
          this.raise(Errors.ConstructorIsAccessor, {
            at: publicMethod.key
          });
        }

        this.pushClassMethod(classBody, publicMethod, false, false, false, false);
      }

      this.checkGetterSetterParams(publicMethod);
    } else if (isContextual && key.name === "accessor" && !this.isLineTerminator()) {
      this.expectPlugin("decoratorAutoAccessors");
      this.resetPreviousNodeTrailingComments(key);
      const isPrivate = this.match(134);
      this.parseClassElementName(publicProp);
      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);
    } else if (this.isLineTerminator()) {
      if (isPrivate) {
        this.pushClassPrivateProperty(classBody, privateProp);
      } else {
        this.pushClassProperty(classBody, publicProp);
      }
    } else {
      this.unexpected();
    }
  }

  parseClassElementName(member) {
    const {
      type,
      value
    } = this.state;

    if ((type === 128 || type === 129) && member.static && value === "prototype") {
      this.raise(Errors.StaticPrototype, {
        at: this.state.startLoc
      });
    }

    if (type === 134) {
      if (value === "constructor") {
        this.raise(Errors.ConstructorClassPrivateField, {
          at: this.state.startLoc
        });
      }

      const key = this.parsePrivateName();
      member.key = key;
      return key;
    }

    return this.parsePropertyName(member);
  }

  parseClassStaticBlock(classBody, member) {
    var _member$decorators;

    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);
    const oldLabels = this.state.labels;
    this.state.labels = [];
    this.prodParam.enter(PARAM);
    const body = member.body = [];
    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);
    this.prodParam.exit();
    this.scope.exit();
    this.state.labels = oldLabels;
    classBody.body.push(this.finishNode(member, "StaticBlock"));

    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
      this.raise(Errors.DecoratorStaticBlock, {
        at: member
      });
    }
  }

  pushClassProperty(classBody, prop) {
    if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) {
      this.raise(Errors.ConstructorClassField, {
        at: prop.key
      });
    }

    classBody.body.push(this.parseClassProperty(prop));
  }

  pushClassPrivateProperty(classBody, prop) {
    const node = this.parseClassPrivateProperty(prop);
    classBody.body.push(node);
    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);
  }

  pushClassAccessorProperty(classBody, prop, isPrivate) {
    if (!isPrivate && !prop.computed) {
      const key = prop.key;

      if (key.name === "constructor" || key.value === "constructor") {
        this.raise(Errors.ConstructorClassField, {
          at: key
        });
      }
    }

    const node = this.parseClassAccessorProperty(prop);
    classBody.body.push(node);

    if (isPrivate) {
      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);
    }
  }

  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
  }

  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
    const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
    classBody.body.push(node);
    const kind = node.kind === "get" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === "set" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;
    this.declareClassPrivateMethodInScope(node, kind);
  }

  declareClassPrivateMethodInScope(node, kind) {
    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
  }

  parsePostMemberNameModifiers(methodOrProp) {}

  parseClassPrivateProperty(node) {
    this.parseInitializer(node);
    this.semicolon();
    return this.finishNode(node, "ClassPrivateProperty");
  }

  parseClassProperty(node) {
    this.parseInitializer(node);
    this.semicolon();
    return this.finishNode(node, "ClassProperty");
  }

  parseClassAccessorProperty(node) {
    this.parseInitializer(node);
    this.semicolon();
    return this.finishNode(node, "ClassAccessorProperty");
  }

  parseInitializer(node) {
    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);
    this.expressionScope.enter(newExpressionScope());
    this.prodParam.enter(PARAM);
    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
    this.expressionScope.exit();
    this.prodParam.exit();
    this.scope.exit();
  }

  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {
    if (tokenIsIdentifier(this.state.type)) {
      node.id = this.parseIdentifier();

      if (isStatement) {
        this.declareNameFromIdentifier(node.id, bindingType);
      }
    } else {
      if (optionalId || !isStatement) {
        node.id = null;
      } else {
        throw this.raise(Errors.MissingClassName, {
          at: this.state.startLoc
        });
      }
    }
  }

  parseClassSuper(node) {
    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
  }

  parseExport(node) {
    const hasDefault = this.maybeParseExportDefaultSpecifier(node);
    const parseAfterDefault = !hasDefault || this.eat(12);
    const hasStar = parseAfterDefault && this.eatExportStar(node);
    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
    const isFromRequired = hasDefault || hasStar;

    if (hasStar && !hasNamespace) {
      if (hasDefault) this.unexpected();
      this.parseExportFrom(node, true);
      return this.finishNode(node, "ExportAllDeclaration");
    }

    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);

    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {
      throw this.unexpected(null, 5);
    }

    let hasDeclaration;

    if (isFromRequired || hasSpecifiers) {
      hasDeclaration = false;
      this.parseExportFrom(node, isFromRequired);
    } else {
      hasDeclaration = this.maybeParseExportDeclaration(node);
    }

    if (isFromRequired || hasSpecifiers || hasDeclaration) {
      this.checkExport(node, true, false, !!node.source);
      return this.finishNode(node, "ExportNamedDeclaration");
    }

    if (this.eat(65)) {
      node.declaration = this.parseExportDefaultExpression();
      this.checkExport(node, true, true);
      return this.finishNode(node, "ExportDefaultDeclaration");
    }

    throw this.unexpected(null, 5);
  }

  eatExportStar(node) {
    return this.eat(55);
  }

  maybeParseExportDefaultSpecifier(node) {
    if (this.isExportDefaultSpecifier()) {
      this.expectPlugin("exportDefaultFrom");
      const specifier = this.startNode();
      specifier.exported = this.parseIdentifier(true);
      node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
      return true;
    }

    return false;
  }

  maybeParseExportNamespaceSpecifier(node) {
    if (this.isContextual(93)) {
      if (!node.specifiers) node.specifiers = [];
      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);
      this.next();
      specifier.exported = this.parseModuleExportName();
      node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
      return true;
    }

    return false;
  }

  maybeParseExportNamedSpecifiers(node) {
    if (this.match(5)) {
      if (!node.specifiers) node.specifiers = [];
      const isTypeExport = node.exportKind === "type";
      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
      node.source = null;
      node.declaration = null;

      if (this.hasPlugin("importAssertions")) {
        node.assertions = [];
      }

      return true;
    }

    return false;
  }

  maybeParseExportDeclaration(node) {
    if (this.shouldParseExportDeclaration()) {
      node.specifiers = [];
      node.source = null;

      if (this.hasPlugin("importAssertions")) {
        node.assertions = [];
      }

      node.declaration = this.parseExportDeclaration(node);
      return true;
    }

    return false;
  }

  isAsyncFunction() {
    if (!this.isContextual(95)) return false;
    const next = this.nextTokenStart();
    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, "function");
  }

  parseExportDefaultExpression() {
    const expr = this.startNode();
    const isAsync = this.isAsyncFunction();

    if (this.match(68) || isAsync) {
      this.next();

      if (isAsync) {
        this.next();
      }

      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);
    }

    if (this.match(80)) {
      return this.parseClass(expr, true, true);
    }

    if (this.match(26)) {
      if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport")) {
        this.raise(Errors.DecoratorBeforeExport, {
          at: this.state.startLoc
        });
      }

      this.parseDecorators(false);
      return this.parseClass(expr, true, true);
    }

    if (this.match(75) || this.match(74) || this.isLet()) {
      throw this.raise(Errors.UnsupportedDefaultExport, {
        at: this.state.startLoc
      });
    }

    const res = this.parseMaybeAssignAllowIn();
    this.semicolon();
    return res;
  }

  parseExportDeclaration(node) {
    return this.parseStatement(null);
  }

  isExportDefaultSpecifier() {
    const {
      type
    } = this.state;

    if (tokenIsIdentifier(type)) {
      if (type === 95 && !this.state.containsEsc || type === 99) {
        return false;
      }

      if ((type === 126 || type === 125) && !this.state.containsEsc) {
        const {
          type: nextType
        } = this.lookahead();

        if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {
          this.expectOnePlugin(["flow", "typescript"]);
          return false;
        }
      }
    } else if (!this.match(65)) {
      return false;
    }

    const next = this.nextTokenStart();
    const hasFrom = this.isUnparsedContextual(next, "from");

    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
      return true;
    }

    if (this.match(65) && hasFrom) {
      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
      return nextAfterFrom === 34 || nextAfterFrom === 39;
    }

    return false;
  }

  parseExportFrom(node, expect) {
    if (this.eatContextual(97)) {
      node.source = this.parseImportSource();
      this.checkExport(node);
      const assertions = this.maybeParseImportAssertions();

      if (assertions) {
        node.assertions = assertions;
      }
    } else if (expect) {
      this.unexpected();
    }

    this.semicolon();
  }

  shouldParseExportDeclaration() {
    const {
      type
    } = this.state;

    if (type === 26) {
      this.expectOnePlugin(["decorators", "decorators-legacy"]);

      if (this.hasPlugin("decorators")) {
        if (this.getPluginOption("decorators", "decoratorsBeforeExport")) {
          throw this.raise(Errors.DecoratorBeforeExport, {
            at: this.state.startLoc
          });
        }

        return true;
      }
    }

    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
  }

  checkExport(node, checkNames, isDefault, isFrom) {
    if (checkNames) {
      if (isDefault) {
        this.checkDuplicateExports(node, "default");

        if (this.hasPlugin("exportDefaultFrom")) {
          var _declaration$extra;

          const declaration = node.declaration;

          if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
            this.raise(Errors.ExportDefaultFromAsIdentifier, {
              at: declaration
            });
          }
        }
      } else if (node.specifiers && node.specifiers.length) {
        for (const specifier of node.specifiers) {
          const {
            exported
          } = specifier;
          const exportName = exported.type === "Identifier" ? exported.name : exported.value;
          this.checkDuplicateExports(specifier, exportName);

          if (!isFrom && specifier.local) {
            const {
              local
            } = specifier;

            if (local.type !== "Identifier") {
              this.raise(Errors.ExportBindingIsString, {
                at: specifier,
                localName: local.value,
                exportName
              });
            } else {
              this.checkReservedWord(local.name, local.loc.start, true, false);
              this.scope.checkLocalExport(local);
            }
          }
        }
      } else if (node.declaration) {
        if (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "ClassDeclaration") {
          const id = node.declaration.id;
          if (!id) throw new Error("Assertion failure");
          this.checkDuplicateExports(node, id.name);
        } else if (node.declaration.type === "VariableDeclaration") {
          for (const declaration of node.declaration.declarations) {
            this.checkDeclaration(declaration.id);
          }
        }
      }
    }

    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];

    if (currentContextDecorators.length) {
      throw this.raise(Errors.UnsupportedDecoratorExport, {
        at: node
      });
    }
  }

  checkDeclaration(node) {
    if (node.type === "Identifier") {
      this.checkDuplicateExports(node, node.name);
    } else if (node.type === "ObjectPattern") {
      for (const prop of node.properties) {
        this.checkDeclaration(prop);
      }
    } else if (node.type === "ArrayPattern") {
      for (const elem of node.elements) {
        if (elem) {
          this.checkDeclaration(elem);
        }
      }
    } else if (node.type === "ObjectProperty") {
      this.checkDeclaration(node.value);
    } else if (node.type === "RestElement") {
      this.checkDeclaration(node.argument);
    } else if (node.type === "AssignmentPattern") {
      this.checkDeclaration(node.left);
    }
  }

  checkDuplicateExports(node, exportName) {
    if (this.exportedIdentifiers.has(exportName)) {
      if (exportName === "default") {
        this.raise(Errors.DuplicateDefaultExport, {
          at: node
        });
      } else {
        this.raise(Errors.DuplicateExport, {
          at: node,
          exportName
        });
      }
    }

    this.exportedIdentifiers.add(exportName);
  }

  parseExportSpecifiers(isInTypeExport) {
    const nodes = [];
    let first = true;
    this.expect(5);

    while (!this.eat(8)) {
      if (first) {
        first = false;
      } else {
        this.expect(12);
        if (this.eat(8)) break;
      }

      const isMaybeTypeOnly = this.isContextual(126);
      const isString = this.match(129);
      const node = this.startNode();
      node.local = this.parseModuleExportName();
      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
    }

    return nodes;
  }

  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
    if (this.eatContextual(93)) {
      node.exported = this.parseModuleExportName();
    } else if (isString) {
      node.exported = cloneStringLiteral(node.local);
    } else if (!node.exported) {
      node.exported = cloneIdentifier(node.local);
    }

    return this.finishNode(node, "ExportSpecifier");
  }

  parseModuleExportName() {
    if (this.match(129)) {
      const result = this.parseStringLiteral(this.state.value);
      const surrogate = result.value.match(loneSurrogate);

      if (surrogate) {
        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {
          at: result,
          surrogateCharCode: surrogate[0].charCodeAt(0)
        });
      }

      return result;
    }

    return this.parseIdentifier(true);
  }

  parseImport(node) {
    node.specifiers = [];

    if (!this.match(129)) {
      const hasDefault = this.maybeParseDefaultImportSpecifier(node);
      const parseNext = !hasDefault || this.eat(12);
      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);
      this.expectContextual(97);
    }

    node.source = this.parseImportSource();
    const assertions = this.maybeParseImportAssertions();

    if (assertions) {
      node.assertions = assertions;
    } else {
      const attributes = this.maybeParseModuleAttributes();

      if (attributes) {
        node.attributes = attributes;
      }
    }

    this.semicolon();
    return this.finishNode(node, "ImportDeclaration");
  }

  parseImportSource() {
    if (!this.match(129)) this.unexpected();
    return this.parseExprAtom();
  }

  shouldParseDefaultImport(node) {
    return tokenIsIdentifier(this.state.type);
  }

  parseImportSpecifierLocal(node, specifier, type) {
    specifier.local = this.parseIdentifier();
    node.specifiers.push(this.finishImportSpecifier(specifier, type));
  }

  finishImportSpecifier(specifier, type) {
    this.checkLVal(specifier.local, {
      in: specifier,
      binding: BIND_LEXICAL
    });
    return this.finishNode(specifier, type);
  }

  parseAssertEntries() {
    const attrs = [];
    const attrNames = new Set();

    do {
      if (this.match(8)) {
        break;
      }

      const node = this.startNode();
      const keyName = this.state.value;

      if (attrNames.has(keyName)) {
        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {
          at: this.state.startLoc,
          key: keyName
        });
      }

      attrNames.add(keyName);

      if (this.match(129)) {
        node.key = this.parseStringLiteral(keyName);
      } else {
        node.key = this.parseIdentifier(true);
      }

      this.expect(14);

      if (!this.match(129)) {
        throw this.raise(Errors.ModuleAttributeInvalidValue, {
          at: this.state.startLoc
        });
      }

      node.value = this.parseStringLiteral(this.state.value);
      this.finishNode(node, "ImportAttribute");
      attrs.push(node);
    } while (this.eat(12));

    return attrs;
  }

  maybeParseModuleAttributes() {
    if (this.match(76) && !this.hasPrecedingLineBreak()) {
      this.expectPlugin("moduleAttributes");
      this.next();
    } else {
      if (this.hasPlugin("moduleAttributes")) return [];
      return null;
    }

    const attrs = [];
    const attributes = new Set();

    do {
      const node = this.startNode();
      node.key = this.parseIdentifier(true);

      if (node.key.name !== "type") {
        this.raise(Errors.ModuleAttributeDifferentFromType, {
          at: node.key
        });
      }

      if (attributes.has(node.key.name)) {
        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {
          at: node.key,
          key: node.key.name
        });
      }

      attributes.add(node.key.name);
      this.expect(14);

      if (!this.match(129)) {
        throw this.raise(Errors.ModuleAttributeInvalidValue, {
          at: this.state.startLoc
        });
      }

      node.value = this.parseStringLiteral(this.state.value);
      this.finishNode(node, "ImportAttribute");
      attrs.push(node);
    } while (this.eat(12));

    return attrs;
  }

  maybeParseImportAssertions() {
    if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
      this.expectPlugin("importAssertions");
      this.next();
    } else {
      if (this.hasPlugin("importAssertions")) return [];
      return null;
    }

    this.eat(5);
    const attrs = this.parseAssertEntries();
    this.eat(8);
    return attrs;
  }

  maybeParseDefaultImportSpecifier(node) {
    if (this.shouldParseDefaultImport(node)) {
      this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier");
      return true;
    }

    return false;
  }

  maybeParseStarImportSpecifier(node) {
    if (this.match(55)) {
      const specifier = this.startNode();
      this.next();
      this.expectContextual(93);
      this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier");
      return true;
    }

    return false;
  }

  parseNamedImportSpecifiers(node) {
    let first = true;
    this.expect(5);

    while (!this.eat(8)) {
      if (first) {
        first = false;
      } else {
        if (this.eat(14)) {
          throw this.raise(Errors.DestructureNamedImport, {
            at: this.state.startLoc
          });
        }

        this.expect(12);
        if (this.eat(8)) break;
      }

      const specifier = this.startNode();
      const importedIsString = this.match(129);
      const isMaybeTypeOnly = this.isContextual(126);
      specifier.imported = this.parseModuleExportName();
      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === "type" || node.importKind === "typeof", isMaybeTypeOnly);
      node.specifiers.push(importSpecifier);
    }
  }

  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
    if (this.eatContextual(93)) {
      specifier.local = this.parseIdentifier();
    } else {
      const {
        imported
      } = specifier;

      if (importedIsString) {
        throw this.raise(Errors.ImportBindingIsString, {
          at: specifier,
          importName: imported.value
        });
      }

      this.checkReservedWord(imported.name, specifier.loc.start, true, true);

      if (!specifier.local) {
        specifier.local = cloneIdentifier(imported);
      }
    }

    return this.finishImportSpecifier(specifier, "ImportSpecifier");
  }

  isThisParam(param) {
    return param.type === "Identifier" && param.name === "this";
  }

}

class Parser extends StatementParser {
  constructor(options, input) {
    options = getOptions(options);
    super(options, input);
    this.options = options;
    this.initializeScopes();
    this.plugins = pluginsMap(this.options.plugins);
    this.filename = options.sourceFilename;
  }

  getScopeHandler() {
    return ScopeHandler;
  }

  parse() {
    this.enterInitialScopes();
    const file = this.startNode();
    const program = this.startNode();
    this.nextToken();
    file.errors = null;
    this.parseTopLevel(file, program);
    file.errors = this.state.errors;
    return file;
  }

}

function pluginsMap(plugins) {
  const pluginMap = new Map();

  for (const plugin of plugins) {
    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];
    if (!pluginMap.has(name)) pluginMap.set(name, options || {});
  }

  return pluginMap;
}

function parse(input, options) {
  var _options;

  if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
    options = Object.assign({}, options);

    try {
      options.sourceType = "module";
      const parser = getParser(options, input);
      const ast = parser.parse();

      if (parser.sawUnambiguousESM) {
        return ast;
      }

      if (parser.ambiguousScriptDifferentAst) {
        try {
          options.sourceType = "script";
          return getParser(options, input).parse();
        } catch (_unused) {}
      } else {
        ast.program.sourceType = "script";
      }

      return ast;
    } catch (moduleError) {
      try {
        options.sourceType = "script";
        return getParser(options, input).parse();
      } catch (_unused2) {}

      throw moduleError;
    }
  } else {
    return getParser(options, input).parse();
  }
}
function parseExpression(input, options) {
  const parser = getParser(options, input);

  if (parser.options.strictMode) {
    parser.state.strict = true;
  }

  return parser.getExpression();
}

function generateExportedTokenTypes(internalTokenTypes) {
  const tokenTypes = {};

  for (const typeName of Object.keys(internalTokenTypes)) {
    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);
  }

  return tokenTypes;
}

const tokTypes = generateExportedTokenTypes(tt);

function getParser(options, input) {
  let cls = Parser;

  if (options != null && options.plugins) {
    validatePlugins(options.plugins);
    cls = getParserClass(options.plugins);
  }

  return new cls(options, input);
}

const parserClassCache = {};

function getParserClass(pluginsFromOptions) {
  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));
  const key = pluginList.join("/");
  let cls = parserClassCache[key];

  if (!cls) {
    cls = Parser;

    for (const plugin of pluginList) {
      cls = mixinPlugins[plugin](cls);
    }

    parserClassCache[key] = cls;
  }

  return cls;
}

exports.parse = parse;
exports.parseExpression = parseExpression;
exports.tokTypes = tokTypes;


},{}],2:[function(require,module,exports){
(function (global){(function (){
'use strict';

var objectAssign = require('object-assign');

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"object-assign":80,"util/":5}],3:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],4:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],5:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":4,"_process":83,"inherits":3}],6:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __importDefault(require("../lib/types"));
var shared_1 = __importDefault(require("../lib/shared"));
var es7_1 = __importDefault(require("./es7"));
function default_1(fork) {
    fork.use(es7_1.default);
    var types = fork.use(types_1.default);
    var defaults = fork.use(shared_1.default).defaults;
    var def = types.Type.def;
    var or = types.Type.or;
    def("Noop")
        .bases("Statement")
        .build();
    def("DoExpression")
        .bases("Expression")
        .build("body")
        .field("body", [def("Statement")]);
    def("Super")
        .bases("Expression")
        .build();
    def("BindExpression")
        .bases("Expression")
        .build("object", "callee")
        .field("object", or(def("Expression"), null))
        .field("callee", def("Expression"));
    def("Decorator")
        .bases("Node")
        .build("expression")
        .field("expression", def("Expression"));
    def("Property")
        .field("decorators", or([def("Decorator")], null), defaults["null"]);
    def("MethodDefinition")
        .field("decorators", or([def("Decorator")], null), defaults["null"]);
    def("MetaProperty")
        .bases("Expression")
        .build("meta", "property")
        .field("meta", def("Identifier"))
        .field("property", def("Identifier"));
    def("ParenthesizedExpression")
        .bases("Expression")
        .build("expression")
        .field("expression", def("Expression"));
    def("ImportSpecifier")
        .bases("ModuleSpecifier")
        .build("imported", "local")
        .field("imported", def("Identifier"));
    def("ImportDefaultSpecifier")
        .bases("ModuleSpecifier")
        .build("local");
    def("ImportNamespaceSpecifier")
        .bases("ModuleSpecifier")
        .build("local");
    def("ExportDefaultDeclaration")
        .bases("Declaration")
        .build("declaration")
        .field("declaration", or(def("Declaration"), def("Expression")));
    def("ExportNamedDeclaration")
        .bases("Declaration")
        .build("declaration", "specifiers", "source")
        .field("declaration", or(def("Declaration"), null))
        .field("specifiers", [def("ExportSpecifier")], defaults.emptyArray)
        .field("source", or(def("Literal"), null), defaults["null"]);
    def("ExportSpecifier")
        .bases("ModuleSpecifier")
        .build("local", "exported")
        .field("exported", def("Identifier"));
    def("ExportNamespaceSpecifier")
        .bases("Specifier")
        .build("exported")
        .field("exported", def("Identifier"));
    def("ExportDefaultSpecifier")
        .bases("Specifier")
        .build("exported")
        .field("exported", def("Identifier"));
    def("ExportAllDeclaration")
        .bases("Declaration")
        .build("exported", "source")
        .field("exported", or(def("Identifier"), null))
        .field("source", def("Literal"));
    def("CommentBlock")
        .bases("Comment")
        .build("value", /*optional:*/ "leading", "trailing");
    def("CommentLine")
        .bases("Comment")
        .build("value", /*optional:*/ "leading", "trailing");
    def("Directive")
        .bases("Node")
        .build("value")
        .field("value", def("DirectiveLiteral"));
    def("DirectiveLiteral")
        .bases("Node", "Expression")
        .build("value")
        .field("value", String, defaults["use strict"]);
    def("InterpreterDirective")
        .bases("Node")
        .build("value")
        .field("value", String);
    def("BlockStatement")
        .bases("Statement")
        .build("body")
        .field("body", [def("Statement")])
        .field("directives", [def("Directive")], defaults.emptyArray);
    def("Program")
        .bases("Node")
        .build("body")
        .field("body", [def("Statement")])
        .field("directives", [def("Directive")], defaults.emptyArray)
        .field("interpreter", or(def("InterpreterDirective"), null), defaults["null"]);
    // Split Literal
    def("StringLiteral")
        .bases("Literal")
        .build("value")
        .field("value", String);
    def("NumericLiteral")
        .bases("Literal")
        .build("value")
        .field("value", Number)
        .field("raw", or(String, null), defaults["null"])
        .field("extra", {
        rawValue: Number,
        raw: String
    }, function getDefault() {
        return {
            rawValue: this.value,
            raw: this.value + ""
        };
    });
    def("BigIntLiteral")
        .bases("Literal")
        .build("value")
        // Only String really seems appropriate here, since BigInt values
        // often exceed the limits of JS numbers.
        .field("value", or(String, Number))
        .field("extra", {
        rawValue: String,
        raw: String
    }, function getDefault() {
        return {
            rawValue: String(this.value),
            raw: this.value + "n"
        };
    });
    def("NullLiteral")
        .bases("Literal")
        .build()
        .field("value", null, defaults["null"]);
    def("BooleanLiteral")
        .bases("Literal")
        .build("value")
        .field("value", Boolean);
    def("RegExpLiteral")
        .bases("Literal")
        .build("pattern", "flags")
        .field("pattern", String)
        .field("flags", String)
        .field("value", RegExp, function () {
        return new RegExp(this.pattern, this.flags);
    });
    var ObjectExpressionProperty = or(def("Property"), def("ObjectMethod"), def("ObjectProperty"), def("SpreadProperty"), def("SpreadElement"));
    // Split Property -> ObjectProperty and ObjectMethod
    def("ObjectExpression")
        .bases("Expression")
        .build("properties")
        .field("properties", [ObjectExpressionProperty]);
    // ObjectMethod hoist .value properties to own properties
    def("ObjectMethod")
        .bases("Node", "Function")
        .build("kind", "key", "params", "body", "computed")
        .field("kind", or("method", "get", "set"))
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
        .field("params", [def("Pattern")])
        .field("body", def("BlockStatement"))
        .field("computed", Boolean, defaults["false"])
        .field("generator", Boolean, defaults["false"])
        .field("async", Boolean, defaults["false"])
        .field("accessibility", // TypeScript
    or(def("Literal"), null), defaults["null"])
        .field("decorators", or([def("Decorator")], null), defaults["null"]);
    def("ObjectProperty")
        .bases("Node")
        .build("key", "value")
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
        .field("value", or(def("Expression"), def("Pattern")))
        .field("accessibility", // TypeScript
    or(def("Literal"), null), defaults["null"])
        .field("computed", Boolean, defaults["false"]);
    var ClassBodyElement = or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"), def("ClassPrivateProperty"), def("ClassMethod"), def("ClassPrivateMethod"));
    // MethodDefinition -> ClassMethod
    def("ClassBody")
        .bases("Declaration")
        .build("body")
        .field("body", [ClassBodyElement]);
    def("ClassMethod")
        .bases("Declaration", "Function")
        .build("kind", "key", "params", "body", "computed", "static")
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")));
    def("ClassPrivateMethod")
        .bases("Declaration", "Function")
        .build("key", "params", "body", "kind", "computed", "static")
        .field("key", def("PrivateName"));
    ["ClassMethod",
        "ClassPrivateMethod",
    ].forEach(function (typeName) {
        def(typeName)
            .field("kind", or("get", "set", "method", "constructor"), function () { return "method"; })
            .field("body", def("BlockStatement"))
            .field("computed", Boolean, defaults["false"])
            .field("static", or(Boolean, null), defaults["null"])
            .field("abstract", or(Boolean, null), defaults["null"])
            .field("access", or("public", "private", "protected", null), defaults["null"])
            .field("accessibility", or("public", "private", "protected", null), defaults["null"])
            .field("decorators", or([def("Decorator")], null), defaults["null"])
            .field("optional", or(Boolean, null), defaults["null"]);
    });
    def("ClassPrivateProperty")
        .bases("ClassProperty")
        .build("key", "value")
        .field("key", def("PrivateName"))
        .field("value", or(def("Expression"), null), defaults["null"]);
    def("PrivateName")
        .bases("Expression", "Pattern")
        .build("id")
        .field("id", def("Identifier"));
    var ObjectPatternProperty = or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"), def("SpreadProperty"), // Used by Esprima
    def("ObjectProperty"), // Babel 6
    def("RestProperty") // Babel 6
    );
    // Split into RestProperty and SpreadProperty
    def("ObjectPattern")
        .bases("Pattern")
        .build("properties")
        .field("properties", [ObjectPatternProperty])
        .field("decorators", or([def("Decorator")], null), defaults["null"]);
    def("SpreadProperty")
        .bases("Node")
        .build("argument")
        .field("argument", def("Expression"));
    def("RestProperty")
        .bases("Node")
        .build("argument")
        .field("argument", def("Expression"));
    def("ForAwaitStatement")
        .bases("Statement")
        .build("left", "right", "body")
        .field("left", or(def("VariableDeclaration"), def("Expression")))
        .field("right", def("Expression"))
        .field("body", def("Statement"));
    // The callee node of a dynamic import(...) expression.
    def("Import")
        .bases("Expression")
        .build();
}
exports.default = default_1;
module.exports = exports["default"];

},{"../lib/shared":25,"../lib/types":26,"./es7":12}],7:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var babel_core_1 = __importDefault(require("./babel-core"));
var flow_1 = __importDefault(require("./flow"));
function default_1(fork) {
    fork.use(babel_core_1.default);
    fork.use(flow_1.default);
}
exports.default = default_1;
module.exports = exports["default"];

},{"./babel-core":6,"./flow":14}],8:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __importDefault(require("../lib/types"));
var shared_1 = __importDefault(require("../lib/shared"));
function default_1(fork) {
    var types = fork.use(types_1.default);
    var Type = types.Type;
    var def = Type.def;
    var or = Type.or;
    var shared = fork.use(shared_1.default);
    var defaults = shared.defaults;
    var geq = shared.geq;
    // Abstract supertype of all syntactic entities that are allowed to have a
    // .loc field.
    def("Printable")
        .field("loc", or(def("SourceLocation"), null), defaults["null"], true);
    def("Node")
        .bases("Printable")
        .field("type", String)
        .field("comments", or([def("Comment")], null), defaults["null"], true);
    def("SourceLocation")
        .field("start", def("Position"))
        .field("end", def("Position"))
        .field("source", or(String, null), defaults["null"]);
    def("Position")
        .field("line", geq(1))
        .field("column", geq(0));
    def("File")
        .bases("Node")
        .build("program", "name")
        .field("program", def("Program"))
        .field("name", or(String, null), defaults["null"]);
    def("Program")
        .bases("Node")
        .build("body")
        .field("body", [def("Statement")]);
    def("Function")
        .bases("Node")
        .field("id", or(def("Identifier"), null), defaults["null"])
        .field("params", [def("Pattern")])
        .field("body", def("BlockStatement"))
        .field("generator", Boolean, defaults["false"])
        .field("async", Boolean, defaults["false"]);
    def("Statement").bases("Node");
    // The empty .build() here means that an EmptyStatement can be constructed
    // (i.e. it's not abstract) but that it needs no arguments.
    def("EmptyStatement").bases("Statement").build();
    def("BlockStatement")
        .bases("Statement")
        .build("body")
        .field("body", [def("Statement")]);
    // TODO Figure out how to silently coerce Expressions to
    // ExpressionStatements where a Statement was expected.
    def("ExpressionStatement")
        .bases("Statement")
        .build("expression")
        .field("expression", def("Expression"));
    def("IfStatement")
        .bases("Statement")
        .build("test", "consequent", "alternate")
        .field("test", def("Expression"))
        .field("consequent", def("Statement"))
        .field("alternate", or(def("Statement"), null), defaults["null"]);
    def("LabeledStatement")
        .bases("Statement")
        .build("label", "body")
        .field("label", def("Identifier"))
        .field("body", def("Statement"));
    def("BreakStatement")
        .bases("Statement")
        .build("label")
        .field("label", or(def("Identifier"), null), defaults["null"]);
    def("ContinueStatement")
        .bases("Statement")
        .build("label")
        .field("label", or(def("Identifier"), null), defaults["null"]);
    def("WithStatement")
        .bases("Statement")
        .build("object", "body")
        .field("object", def("Expression"))
        .field("body", def("Statement"));
    def("SwitchStatement")
        .bases("Statement")
        .build("discriminant", "cases", "lexical")
        .field("discriminant", def("Expression"))
        .field("cases", [def("SwitchCase")])
        .field("lexical", Boolean, defaults["false"]);
    def("ReturnStatement")
        .bases("Statement")
        .build("argument")
        .field("argument", or(def("Expression"), null));
    def("ThrowStatement")
        .bases("Statement")
        .build("argument")
        .field("argument", def("Expression"));
    def("TryStatement")
        .bases("Statement")
        .build("block", "handler", "finalizer")
        .field("block", def("BlockStatement"))
        .field("handler", or(def("CatchClause"), null), function () {
        return this.handlers && this.handlers[0] || null;
    })
        .field("handlers", [def("CatchClause")], function () {
        return this.handler ? [this.handler] : [];
    }, true) // Indicates this field is hidden from eachField iteration.
        .field("guardedHandlers", [def("CatchClause")], defaults.emptyArray)
        .field("finalizer", or(def("BlockStatement"), null), defaults["null"]);
    def("CatchClause")
        .bases("Node")
        .build("param", "guard", "body")
        // https://github.com/tc39/proposal-optional-catch-binding
        .field("param", or(def("Pattern"), null), defaults["null"])
        .field("guard", or(def("Expression"), null), defaults["null"])
        .field("body", def("BlockStatement"));
    def("WhileStatement")
        .bases("Statement")
        .build("test", "body")
        .field("test", def("Expression"))
        .field("body", def("Statement"));
    def("DoWhileStatement")
        .bases("Statement")
        .build("body", "test")
        .field("body", def("Statement"))
        .field("test", def("Expression"));
    def("ForStatement")
        .bases("Statement")
        .build("init", "test", "update", "body")
        .field("init", or(def("VariableDeclaration"), def("Expression"), null))
        .field("test", or(def("Expression"), null))
        .field("update", or(def("Expression"), null))
        .field("body", def("Statement"));
    def("ForInStatement")
        .bases("Statement")
        .build("left", "right", "body")
        .field("left", or(def("VariableDeclaration"), def("Expression")))
        .field("right", def("Expression"))
        .field("body", def("Statement"));
    def("DebuggerStatement").bases("Statement").build();
    def("Declaration").bases("Statement");
    def("FunctionDeclaration")
        .bases("Function", "Declaration")
        .build("id", "params", "body")
        .field("id", def("Identifier"));
    def("FunctionExpression")
        .bases("Function", "Expression")
        .build("id", "params", "body");
    def("VariableDeclaration")
        .bases("Declaration")
        .build("kind", "declarations")
        .field("kind", or("var", "let", "const"))
        .field("declarations", [def("VariableDeclarator")]);
    def("VariableDeclarator")
        .bases("Node")
        .build("id", "init")
        .field("id", def("Pattern"))
        .field("init", or(def("Expression"), null), defaults["null"]);
    def("Expression").bases("Node");
    def("ThisExpression").bases("Expression").build();
    def("ArrayExpression")
        .bases("Expression")
        .build("elements")
        .field("elements", [or(def("Expression"), null)]);
    def("ObjectExpression")
        .bases("Expression")
        .build("properties")
        .field("properties", [def("Property")]);
    // TODO Not in the Mozilla Parser API, but used by Esprima.
    def("Property")
        .bases("Node") // Want to be able to visit Property Nodes.
        .build("kind", "key", "value")
        .field("kind", or("init", "get", "set"))
        .field("key", or(def("Literal"), def("Identifier")))
        .field("value", def("Expression"));
    def("SequenceExpression")
        .bases("Expression")
        .build("expressions")
        .field("expressions", [def("Expression")]);
    var UnaryOperator = or("-", "+", "!", "~", "typeof", "void", "delete");
    def("UnaryExpression")
        .bases("Expression")
        .build("operator", "argument", "prefix")
        .field("operator", UnaryOperator)
        .field("argument", def("Expression"))
        // Esprima doesn't bother with this field, presumably because it's
        // always true for unary operators.
        .field("prefix", Boolean, defaults["true"]);
    var BinaryOperator = or("==", "!=", "===", "!==", "<", "<=", ">", ">=", "<<", ">>", ">>>", "+", "-", "*", "/", "%", "**", "&", // TODO Missing from the Parser API.
    "|", "^", "in", "instanceof");
    def("BinaryExpression")
        .bases("Expression")
        .build("operator", "left", "right")
        .field("operator", BinaryOperator)
        .field("left", def("Expression"))
        .field("right", def("Expression"));
    var AssignmentOperator = or("=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "|=", "^=", "&=");
    def("AssignmentExpression")
        .bases("Expression")
        .build("operator", "left", "right")
        .field("operator", AssignmentOperator)
        .field("left", or(def("Pattern"), def("MemberExpression")))
        .field("right", def("Expression"));
    var UpdateOperator = or("++", "--");
    def("UpdateExpression")
        .bases("Expression")
        .build("operator", "argument", "prefix")
        .field("operator", UpdateOperator)
        .field("argument", def("Expression"))
        .field("prefix", Boolean);
    var LogicalOperator = or("||", "&&");
    def("LogicalExpression")
        .bases("Expression")
        .build("operator", "left", "right")
        .field("operator", LogicalOperator)
        .field("left", def("Expression"))
        .field("right", def("Expression"));
    def("ConditionalExpression")
        .bases("Expression")
        .build("test", "consequent", "alternate")
        .field("test", def("Expression"))
        .field("consequent", def("Expression"))
        .field("alternate", def("Expression"));
    def("NewExpression")
        .bases("Expression")
        .build("callee", "arguments")
        .field("callee", def("Expression"))
        // The Mozilla Parser API gives this type as [or(def("Expression"),
        // null)], but null values don't really make sense at the call site.
        // TODO Report this nonsense.
        .field("arguments", [def("Expression")]);
    def("CallExpression")
        .bases("Expression")
        .build("callee", "arguments")
        .field("callee", def("Expression"))
        // See comment for NewExpression above.
        .field("arguments", [def("Expression")]);
    def("MemberExpression")
        .bases("Expression")
        .build("object", "property", "computed")
        .field("object", def("Expression"))
        .field("property", or(def("Identifier"), def("Expression")))
        .field("computed", Boolean, function () {
        var type = this.property.type;
        if (type === 'Literal' ||
            type === 'MemberExpression' ||
            type === 'BinaryExpression') {
            return true;
        }
        return false;
    });
    def("Pattern").bases("Node");
    def("SwitchCase")
        .bases("Node")
        .build("test", "consequent")
        .field("test", or(def("Expression"), null))
        .field("consequent", [def("Statement")]);
    def("Identifier")
        .bases("Expression", "Pattern")
        .build("name")
        .field("name", String)
        .field("optional", Boolean, defaults["false"]);
    def("Literal")
        .bases("Expression")
        .build("value")
        .field("value", or(String, Boolean, null, Number, RegExp))
        .field("regex", or({
        pattern: String,
        flags: String
    }, null), function () {
        if (this.value instanceof RegExp) {
            var flags = "";
            if (this.value.ignoreCase)
                flags += "i";
            if (this.value.multiline)
                flags += "m";
            if (this.value.global)
                flags += "g";
            return {
                pattern: this.value.source,
                flags: flags
            };
        }
        return null;
    });
    // Abstract (non-buildable) comment supertype. Not a Node.
    def("Comment")
        .bases("Printable")
        .field("value", String)
        // A .leading comment comes before the node, whereas a .trailing
        // comment comes after it. These two fields should not both be true,
        // but they might both be false when the comment falls inside a node
        // and the node has no children for the comment to lead or trail,
        // e.g. { /*dangling*/ }.
        .field("leading", Boolean, defaults["true"])
        .field("trailing", Boolean, defaults["false"]);
}
exports.default = default_1;
module.exports = exports["default"];

},{"../lib/shared":25,"../lib/types":26}],9:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __importDefault(require("../lib/types"));
var shared_1 = __importDefault(require("../lib/shared"));
var core_1 = __importDefault(require("./core"));
function default_1(fork) {
    fork.use(core_1.default);
    var types = fork.use(types_1.default);
    var Type = types.Type;
    var def = types.Type.def;
    var or = Type.or;
    var shared = fork.use(shared_1.default);
    var defaults = shared.defaults;
    // https://github.com/tc39/proposal-optional-chaining
    // `a?.b` as per https://github.com/estree/estree/issues/146
    def("OptionalMemberExpression")
        .bases("MemberExpression")
        .build("object", "property", "computed", "optional")
        .field("optional", Boolean, defaults["true"]);
    // a?.b()
    def("OptionalCallExpression")
        .bases("CallExpression")
        .build("callee", "arguments", "optional")
        .field("optional", Boolean, defaults["true"]);
    // https://github.com/tc39/proposal-nullish-coalescing
    // `a ?? b` as per https://github.com/babel/babylon/pull/761/files
    var LogicalOperator = or("||", "&&", "??");
    def("LogicalExpression")
        .field("operator", LogicalOperator);
}
exports.default = default_1;
module.exports = exports["default"];

},{"../lib/shared":25,"../lib/types":26,"./core":8}],10:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var es7_1 = __importDefault(require("./es7"));
var types_1 = __importDefault(require("../lib/types"));
function default_1(fork) {
    fork.use(es7_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    def("ImportExpression")
        .bases("Expression")
        .build("source")
        .field("source", def("Expression"));
}
exports.default = default_1;
module.exports = exports["default"];

},{"../lib/types":26,"./es7":12}],11:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __importDefault(require("./core"));
var types_1 = __importDefault(require("../lib/types"));
var shared_1 = __importDefault(require("../lib/shared"));
function default_1(fork) {
    fork.use(core_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    def("Function")
        .field("generator", Boolean, defaults["false"])
        .field("expression", Boolean, defaults["false"])
        .field("defaults", [or(def("Expression"), null)], defaults.emptyArray)
        // TODO This could be represented as a RestElement in .params.
        .field("rest", or(def("Identifier"), null), defaults["null"]);
    // The ESTree way of representing a ...rest parameter.
    def("RestElement")
        .bases("Pattern")
        .build("argument")
        .field("argument", def("Pattern"))
        .field("typeAnnotation", // for Babylon. Flow parser puts it on the identifier
    or(def("TypeAnnotation"), def("TSTypeAnnotation"), null), defaults["null"]);
    def("SpreadElementPattern")
        .bases("Pattern")
        .build("argument")
        .field("argument", def("Pattern"));
    def("FunctionDeclaration")
        .build("id", "params", "body", "generator", "expression");
    def("FunctionExpression")
        .build("id", "params", "body", "generator", "expression");
    // The Parser API calls this ArrowExpression, but Esprima and all other
    // actual parsers use ArrowFunctionExpression.
    def("ArrowFunctionExpression")
        .bases("Function", "Expression")
        .build("params", "body", "expression")
        // The forced null value here is compatible with the overridden
        // definition of the "id" field in the Function interface.
        .field("id", null, defaults["null"])
        // Arrow function bodies are allowed to be expressions.
        .field("body", or(def("BlockStatement"), def("Expression")))
        // The current spec forbids arrow generators, so I have taken the
        // liberty of enforcing that. TODO Report this.
        .field("generator", false, defaults["false"]);
    def("ForOfStatement")
        .bases("Statement")
        .build("left", "right", "body")
        .field("left", or(def("VariableDeclaration"), def("Pattern")))
        .field("right", def("Expression"))
        .field("body", def("Statement"));
    def("YieldExpression")
        .bases("Expression")
        .build("argument", "delegate")
        .field("argument", or(def("Expression"), null))
        .field("delegate", Boolean, defaults["false"]);
    def("GeneratorExpression")
        .bases("Expression")
        .build("body", "blocks", "filter")
        .field("body", def("Expression"))
        .field("blocks", [def("ComprehensionBlock")])
        .field("filter", or(def("Expression"), null));
    def("ComprehensionExpression")
        .bases("Expression")
        .build("body", "blocks", "filter")
        .field("body", def("Expression"))
        .field("blocks", [def("ComprehensionBlock")])
        .field("filter", or(def("Expression"), null));
    def("ComprehensionBlock")
        .bases("Node")
        .build("left", "right", "each")
        .field("left", def("Pattern"))
        .field("right", def("Expression"))
        .field("each", Boolean);
    def("Property")
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
        .field("value", or(def("Expression"), def("Pattern")))
        .field("method", Boolean, defaults["false"])
        .field("shorthand", Boolean, defaults["false"])
        .field("computed", Boolean, defaults["false"]);
    def("ObjectProperty")
        .field("shorthand", Boolean, defaults["false"]);
    def("PropertyPattern")
        .bases("Pattern")
        .build("key", "pattern")
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
        .field("pattern", def("Pattern"))
        .field("computed", Boolean, defaults["false"]);
    def("ObjectPattern")
        .bases("Pattern")
        .build("properties")
        .field("properties", [or(def("PropertyPattern"), def("Property"))]);
    def("ArrayPattern")
        .bases("Pattern")
        .build("elements")
        .field("elements", [or(def("Pattern"), null)]);
    def("MethodDefinition")
        .bases("Declaration")
        .build("kind", "key", "value", "static")
        .field("kind", or("constructor", "method", "get", "set"))
        .field("key", def("Expression"))
        .field("value", def("Function"))
        .field("computed", Boolean, defaults["false"])
        .field("static", Boolean, defaults["false"]);
    def("SpreadElement")
        .bases("Node")
        .build("argument")
        .field("argument", def("Expression"));
    def("ArrayExpression")
        .field("elements", [or(def("Expression"), def("SpreadElement"), def("RestElement"), null)]);
    def("NewExpression")
        .field("arguments", [or(def("Expression"), def("SpreadElement"))]);
    def("CallExpression")
        .field("arguments", [or(def("Expression"), def("SpreadElement"))]);
    // Note: this node type is *not* an AssignmentExpression with a Pattern on
    // the left-hand side! The existing AssignmentExpression type already
    // supports destructuring assignments. AssignmentPattern nodes may appear
    // wherever a Pattern is allowed, and the right-hand side represents a
    // default value to be destructured against the left-hand side, if no
    // value is otherwise provided. For example: default parameter values.
    def("AssignmentPattern")
        .bases("Pattern")
        .build("left", "right")
        .field("left", def("Pattern"))
        .field("right", def("Expression"));
    var ClassBodyElement = or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"));
    def("ClassProperty")
        .bases("Declaration")
        .build("key")
        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
        .field("computed", Boolean, defaults["false"]);
    def("ClassPropertyDefinition") // static property
        .bases("Declaration")
        .build("definition")
        // Yes, Virginia, circular definitions are permitted.
        .field("definition", ClassBodyElement);
    def("ClassBody")
        .bases("Declaration")
        .build("body")
        .field("body", [ClassBodyElement]);
    def("ClassDeclaration")
        .bases("Declaration")
        .build("id", "body", "superClass")
        .field("id", or(def("Identifier"), null))
        .field("body", def("ClassBody"))
        .field("superClass", or(def("Expression"), null), defaults["null"]);
    def("ClassExpression")
        .bases("Expression")
        .build("id", "body", "superClass")
        .field("id", or(def("Identifier"), null), defaults["null"])
        .field("body", def("ClassBody"))
        .field("superClass", or(def("Expression"), null), defaults["null"]);
    // Specifier and ModuleSpecifier are abstract non-standard types
    // introduced for definitional convenience.
    def("Specifier").bases("Node");
    // This supertype is shared/abused by both def/babel.js and
    // def/esprima.js. In the future, it will be possible to load only one set
    // of definitions appropriate for a given parser, but until then we must
    // rely on default functions to reconcile the conflicting AST formats.
    def("ModuleSpecifier")
        .bases("Specifier")
        // This local field is used by Babel/Acorn. It should not technically
        // be optional in the Babel/Acorn AST format, but it must be optional
        // in the Esprima AST format.
        .field("local", or(def("Identifier"), null), defaults["null"])
        // The id and name fields are used by Esprima. The id field should not
        // technically be optional in the Esprima AST format, but it must be
        // optional in the Babel/Acorn AST format.
        .field("id", or(def("Identifier"), null), defaults["null"])
        .field("name", or(def("Identifier"), null), defaults["null"]);
    // Like ModuleSpecifier, except type:"ImportSpecifier" and buildable.
    // import {<id [as name]>} from ...;
    def("ImportSpecifier")
        .bases("ModuleSpecifier")
        .build("id", "name");
    // import <* as id> from ...;
    def("ImportNamespaceSpecifier")
        .bases("ModuleSpecifier")
        .build("id");
    // import <id> from ...;
    def("ImportDefaultSpecifier")
        .bases("ModuleSpecifier")
        .build("id");
    def("ImportDeclaration")
        .bases("Declaration")
        .build("specifiers", "source", "importKind")
        .field("specifiers", [or(def("ImportSpecifier"), def("ImportNamespaceSpecifier"), def("ImportDefaultSpecifier"))], defaults.emptyArray)
        .field("source", def("Literal"))
        .field("importKind", or("value", "type"), function () {
        return "value";
    });
    def("TaggedTemplateExpression")
        .bases("Expression")
        .build("tag", "quasi")
        .field("tag", def("Expression"))
        .field("quasi", def("TemplateLiteral"));
    def("TemplateLiteral")
        .bases("Expression")
        .build("quasis", "expressions")
        .field("quasis", [def("TemplateElement")])
        .field("expressions", [def("Expression")]);
    def("TemplateElement")
        .bases("Node")
        .build("value", "tail")
        .field("value", { "cooked": String, "raw": String })
        .field("tail", Boolean);
}
exports.default = default_1;
module.exports = exports["default"];

},{"../lib/shared":25,"../lib/types":26,"./core":8}],12:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var es6_1 = __importDefault(require("./es6"));
var types_1 = __importDefault(require("../lib/types"));
var shared_1 = __importDefault(require("../lib/shared"));
function default_1(fork) {
    fork.use(es6_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    def("Function")
        .field("async", Boolean, defaults["false"]);
    def("SpreadProperty")
        .bases("Node")
        .build("argument")
        .field("argument", def("Expression"));
    def("ObjectExpression")
        .field("properties", [or(def("Property"), def("SpreadProperty"), def("SpreadElement"))]);
    def("SpreadPropertyPattern")
        .bases("Pattern")
        .build("argument")
        .field("argument", def("Pattern"));
    def("ObjectPattern")
        .field("properties", [or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"))]);
    def("AwaitExpression")
        .bases("Expression")
        .build("argument", "all")
        .field("argument", or(def("Expression"), null))
        .field("all", Boolean, defaults["false"]);
}
exports.default = default_1;
module.exports = exports["default"];

},{"../lib/shared":25,"../lib/types":26,"./es6":11}],13:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var es7_1 = __importDefault(require("./es7"));
var types_1 = __importDefault(require("../lib/types"));
var shared_1 = __importDefault(require("../lib/shared"));
function default_1(fork) {
    fork.use(es7_1.default);
    var types = fork.use(types_1.default);
    var defaults = fork.use(shared_1.default).defaults;
    var def = types.Type.def;
    var or = types.Type.or;
    def("VariableDeclaration")
        .field("declarations", [or(def("VariableDeclarator"), def("Identifier") // Esprima deviation.
        )]);
    def("Property")
        .field("value", or(def("Expression"), def("Pattern") // Esprima deviation.
    ));
    def("ArrayPattern")
        .field("elements", [or(def("Pattern"), def("SpreadElement"), null)]);
    def("ObjectPattern")
        .field("properties", [or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"), def("SpreadProperty") // Used by Esprima.
        )]);
    // Like ModuleSpecifier, except type:"ExportSpecifier" and buildable.
    // export {<id [as name]>} [from ...];
    def("ExportSpecifier")
        .bases("ModuleSpecifier")
        .build("id", "name");
    // export <*> from ...;
    def("ExportBatchSpecifier")
        .bases("Specifier")
        .build();
    def("ExportDeclaration")
        .bases("Declaration")
        .build("default", "declaration", "specifiers", "source")
        .field("default", Boolean)
        .field("declaration", or(def("Declaration"), def("Expression"), // Implies default.
    null))
        .field("specifiers", [or(def("ExportSpecifier"), def("ExportBatchSpecifier"))], defaults.emptyArray)
        .field("source", or(def("Literal"), null), defaults["null"]);
    def("Block")
        .bases("Comment")
        .build("value", /*optional:*/ "leading", "trailing");
    def("Line")
        .bases("Comment")
        .build("value", /*optional:*/ "leading", "trailing");
}
exports.default = default_1;
module.exports = exports["default"];

},{"../lib/shared":25,"../lib/types":26,"./es7":12}],14:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var es7_1 = __importDefault(require("./es7"));
var type_annotations_1 = __importDefault(require("./type-annotations"));
var types_1 = __importDefault(require("../lib/types"));
var shared_1 = __importDefault(require("../lib/shared"));
function default_1(fork) {
    fork.use(es7_1.default);
    fork.use(type_annotations_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    // Base types
    def("Flow").bases("Node");
    def("FlowType").bases("Flow");
    // Type annotations
    def("AnyTypeAnnotation")
        .bases("FlowType")
        .build();
    def("EmptyTypeAnnotation")
        .bases("FlowType")
        .build();
    def("MixedTypeAnnotation")
        .bases("FlowType")
        .build();
    def("VoidTypeAnnotation")
        .bases("FlowType")
        .build();
    def("NumberTypeAnnotation")
        .bases("FlowType")
        .build();
    def("NumberLiteralTypeAnnotation")
        .bases("FlowType")
        .build("value", "raw")
        .field("value", Number)
        .field("raw", String);
    // Babylon 6 differs in AST from Flow
    // same as NumberLiteralTypeAnnotation
    def("NumericLiteralTypeAnnotation")
        .bases("FlowType")
        .build("value", "raw")
        .field("value", Number)
        .field("raw", String);
    def("StringTypeAnnotation")
        .bases("FlowType")
        .build();
    def("StringLiteralTypeAnnotation")
        .bases("FlowType")
        .build("value", "raw")
        .field("value", String)
        .field("raw", String);
    def("BooleanTypeAnnotation")
        .bases("FlowType")
        .build();
    def("BooleanLiteralTypeAnnotation")
        .bases("FlowType")
        .build("value", "raw")
        .field("value", Boolean)
        .field("raw", String);
    def("TypeAnnotation")
        .bases("Node")
        .build("typeAnnotation")
        .field("typeAnnotation", def("FlowType"));
    def("NullableTypeAnnotation")
        .bases("FlowType")
        .build("typeAnnotation")
        .field("typeAnnotation", def("FlowType"));
    def("NullLiteralTypeAnnotation")
        .bases("FlowType")
        .build();
    def("NullTypeAnnotation")
        .bases("FlowType")
        .build();
    def("ThisTypeAnnotation")
        .bases("FlowType")
        .build();
    def("ExistsTypeAnnotation")
        .bases("FlowType")
        .build();
    def("ExistentialTypeParam")
        .bases("FlowType")
        .build();
    def("FunctionTypeAnnotation")
        .bases("FlowType")
        .build("params", "returnType", "rest", "typeParameters")
        .field("params", [def("FunctionTypeParam")])
        .field("returnType", def("FlowType"))
        .field("rest", or(def("FunctionTypeParam"), null))
        .field("typeParameters", or(def("TypeParameterDeclaration"), null));
    def("FunctionTypeParam")
        .bases("Node")
        .build("name", "typeAnnotation", "optional")
        .field("name", def("Identifier"))
        .field("typeAnnotation", def("FlowType"))
        .field("optional", Boolean);
    def("ArrayTypeAnnotation")
        .bases("FlowType")
        .build("elementType")
        .field("elementType", def("FlowType"));
    def("ObjectTypeAnnotation")
        .bases("FlowType")
        .build("properties", "indexers", "callProperties")
        .field("properties", [
        or(def("ObjectTypeProperty"), def("ObjectTypeSpreadProperty"))
    ])
        .field("indexers", [def("ObjectTypeIndexer")], defaults.emptyArray)
        .field("callProperties", [def("ObjectTypeCallProperty")], defaults.emptyArray)
        .field("inexact", or(Boolean, void 0), defaults["undefined"])
        .field("exact", Boolean, defaults["false"])
        .field("internalSlots", [def("ObjectTypeInternalSlot")], defaults.emptyArray);
    def("Variance")
        .bases("Node")
        .build("kind")
        .field("kind", or("plus", "minus"));
    var LegacyVariance = or(def("Variance"), "plus", "minus", null);
    def("ObjectTypeProperty")
        .bases("Node")
        .build("key", "value", "optional")
        .field("key", or(def("Literal"), def("Identifier")))
        .field("value", def("FlowType"))
        .field("optional", Boolean)
        .field("variance", LegacyVariance, defaults["null"]);
    def("ObjectTypeIndexer")
        .bases("Node")
        .build("id", "key", "value")
        .field("id", def("Identifier"))
        .field("key", def("FlowType"))
        .field("value", def("FlowType"))
        .field("variance", LegacyVariance, defaults["null"]);
    def("ObjectTypeCallProperty")
        .bases("Node")
        .build("value")
        .field("value", def("FunctionTypeAnnotation"))
        .field("static", Boolean, defaults["false"]);
    def("QualifiedTypeIdentifier")
        .bases("Node")
        .build("qualification", "id")
        .field("qualification", or(def("Identifier"), def("QualifiedTypeIdentifier")))
        .field("id", def("Identifier"));
    def("GenericTypeAnnotation")
        .bases("FlowType")
        .build("id", "typeParameters")
        .field("id", or(def("Identifier"), def("QualifiedTypeIdentifier")))
        .field("typeParameters", or(def("TypeParameterInstantiation"), null));
    def("MemberTypeAnnotation")
        .bases("FlowType")
        .build("object", "property")
        .field("object", def("Identifier"))
        .field("property", or(def("MemberTypeAnnotation"), def("GenericTypeAnnotation")));
    def("UnionTypeAnnotation")
        .bases("FlowType")
        .build("types")
        .field("types", [def("FlowType")]);
    def("IntersectionTypeAnnotation")
        .bases("FlowType")
        .build("types")
        .field("types", [def("FlowType")]);
    def("TypeofTypeAnnotation")
        .bases("FlowType")
        .build("argument")
        .field("argument", def("FlowType"));
    def("ObjectTypeSpreadProperty")
        .bases("Node")
        .build("argument")
        .field("argument", def("FlowType"));
    def("ObjectTypeInternalSlot")
        .bases("Node")
        .build("id", "value", "optional", "static", "method")
        .field("id", def("Identifier"))
        .field("value", def("FlowType"))
        .field("optional", Boolean)
        .field("static", Boolean)
        .field("method", Boolean);
    def("TypeParameterDeclaration")
        .bases("Node")
        .build("params")
        .field("params", [def("TypeParameter")]);
    def("TypeParameterInstantiation")
        .bases("Node")
        .build("params")
        .field("params", [def("FlowType")]);
    def("TypeParameter")
        .bases("FlowType")
        .build("name", "variance", "bound")
        .field("name", String)
        .field("variance", LegacyVariance, defaults["null"])
        .field("bound", or(def("TypeAnnotation"), null), defaults["null"]);
    def("ClassProperty")
        .field("variance", LegacyVariance, defaults["null"]);
    def("ClassImplements")
        .bases("Node")
        .build("id")
        .field("id", def("Identifier"))
        .field("superClass", or(def("Expression"), null), defaults["null"])
        .field("typeParameters", or(def("TypeParameterInstantiation"), null), defaults["null"]);
    def("InterfaceTypeAnnotation")
        .bases("FlowType")
        .build("body", "extends")
        .field("body", def("ObjectTypeAnnotation"))
        .field("extends", or([def("InterfaceExtends")], null), defaults["null"]);
    def("InterfaceDeclaration")
        .bases("Declaration")
        .build("id", "body", "extends")
        .field("id", def("Identifier"))
        .field("typeParameters", or(def("TypeParameterDeclaration"), null), defaults["null"])
        .field("body", def("ObjectTypeAnnotation"))
        .field("extends", [def("InterfaceExtends")]);
    def("DeclareInterface")
        .bases("InterfaceDeclaration")
        .build("id", "body", "extends");
    def("InterfaceExtends")
        .bases("Node")
        .build("id")
        .field("id", def("Identifier"))
        .field("typeParameters", or(def("TypeParameterInstantiation"), null), defaults["null"]);
    def("TypeAlias")
        .bases("Declaration")
        .build("id", "typeParameters", "right")
        .field("id", def("Identifier"))
        .field("typeParameters", or(def("TypeParameterDeclaration"), null))
        .field("right", def("FlowType"));
    def("OpaqueType")
        .bases("Declaration")
        .build("id", "typeParameters", "impltype", "supertype")
        .field("id", def("Identifier"))
        .field("typeParameters", or(def("TypeParameterDeclaration"), null))
        .field("impltype", def("FlowType"))
        .field("supertype", def("FlowType"));
    def("DeclareTypeAlias")
        .bases("TypeAlias")
        .build("id", "typeParameters", "right");
    def("DeclareOpaqueType")
        .bases("TypeAlias")
        .build("id", "typeParameters", "supertype");
    def("TypeCastExpression")
        .bases("Expression")
        .build("expression", "typeAnnotation")
        .field("expression", def("Expression"))
        .field("typeAnnotation", def("TypeAnnotation"));
    def("TupleTypeAnnotation")
        .bases("FlowType")
        .build("types")
        .field("types", [def("FlowType")]);
    def("DeclareVariable")
        .bases("Statement")
        .build("id")
        .field("id", def("Identifier"));
    def("DeclareFunction")
        .bases("Statement")
        .build("id")
        .field("id", def("Identifier"));
    def("DeclareClass")
        .bases("InterfaceDeclaration")
        .build("id");
    def("DeclareModule")
        .bases("Statement")
        .build("id", "body")
        .field("id", or(def("Identifier"), def("Literal")))
        .field("body", def("BlockStatement"));
    def("DeclareModuleExports")
        .bases("Statement")
        .build("typeAnnotation")
        .field("typeAnnotation", def("TypeAnnotation"));
    def("DeclareExportDeclaration")
        .bases("Declaration")
        .build("default", "declaration", "specifiers", "source")
        .field("default", Boolean)
        .field("declaration", or(def("DeclareVariable"), def("DeclareFunction"), def("DeclareClass"), def("FlowType"), // Implies default.
    null))
        .field("specifiers", [or(def("ExportSpecifier"), def("ExportBatchSpecifier"))], defaults.emptyArray)
        .field("source", or(def("Literal"), null), defaults["null"]);
    def("DeclareExportAllDeclaration")
        .bases("Declaration")
        .build("source")
        .field("source", or(def("Literal"), null), defaults["null"]);
    def("FlowPredicate").bases("Flow");
    def("InferredPredicate")
        .bases("FlowPredicate")
        .build();
    def("DeclaredPredicate")
        .bases("FlowPredicate")
        .build("value")
        .field("value", def("Expression"));
    def("CallExpression")
        .field("typeArguments", or(null, def("TypeParameterInstantiation")), defaults["null"]);
    def("NewExpression")
        .field("typeArguments", or(null, def("TypeParameterInstantiation")), defaults["null"]);
}
exports.default = default_1;
module.exports = exports["default"];

},{"../lib/shared":25,"../lib/types":26,"./es7":12,"./type-annotations":16}],15:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var es7_1 = __importDefault(require("./es7"));
var types_1 = __importDefault(require("../lib/types"));
var shared_1 = __importDefault(require("../lib/shared"));
function default_1(fork) {
    fork.use(es7_1.default);
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    def("JSXAttribute")
        .bases("Node")
        .build("name", "value")
        .field("name", or(def("JSXIdentifier"), def("JSXNamespacedName")))
        .field("value", or(def("Literal"), // attr="value"
    def("JSXExpressionContainer"), // attr={value}
    null // attr= or just attr
    ), defaults["null"]);
    def("JSXIdentifier")
        .bases("Identifier")
        .build("name")
        .field("name", String);
    def("JSXNamespacedName")
        .bases("Node")
        .build("namespace", "name")
        .field("namespace", def("JSXIdentifier"))
        .field("name", def("JSXIdentifier"));
    def("JSXMemberExpression")
        .bases("MemberExpression")
        .build("object", "property")
        .field("object", or(def("JSXIdentifier"), def("JSXMemberExpression")))
        .field("property", def("JSXIdentifier"))
        .field("computed", Boolean, defaults.false);
    var JSXElementName = or(def("JSXIdentifier"), def("JSXNamespacedName"), def("JSXMemberExpression"));
    def("JSXSpreadAttribute")
        .bases("Node")
        .build("argument")
        .field("argument", def("Expression"));
    var JSXAttributes = [or(def("JSXAttribute"), def("JSXSpreadAttribute"))];
    def("JSXExpressionContainer")
        .bases("Expression")
        .build("expression")
        .field("expression", def("Expression"));
    def("JSXElement")
        .bases("Expression")
        .build("openingElement", "closingElement", "children")
        .field("openingElement", def("JSXOpeningElement"))
        .field("closingElement", or(def("JSXClosingElement"), null), defaults["null"])
        .field("children", [or(def("JSXElement"), def("JSXExpressionContainer"), def("JSXFragment"), def("JSXText"), def("Literal") // TODO Esprima should return JSXText instead.
        )], defaults.emptyArray)
        .field("name", JSXElementName, function () {
        // Little-known fact: the `this` object inside a default function
        // is none other than the partially-built object itself, and any
        // fields initialized directly from builder function arguments
        // (like openingElement, closingElement, and children) are
        // guaranteed to be available.
        return this.openingElement.name;
    }, true) // hidden from traversal
        .field("selfClosing", Boolean, function () {
        return this.openingElement.selfClosing;
    }, true) // hidden from traversal
        .field("attributes", JSXAttributes, function () {
        return this.openingElement.attributes;
    }, true); // hidden from traversal
    def("JSXOpeningElement")
        .bases("Node") // TODO Does this make sense? Can't really be an JSXElement.
        .build("name", "attributes", "selfClosing")
        .field("name", JSXElementName)
        .field("attributes", JSXAttributes, defaults.emptyArray)
        .field("selfClosing", Boolean, defaults["false"]);
    def("JSXClosingElement")
        .bases("Node") // TODO Same concern.
        .build("name")
        .field("name", JSXElementName);
    def("JSXFragment")
        .bases("Expression")
        .build("openingElement", "closingElement", "children")
        .field("openingElement", def("JSXOpeningFragment"))
        .field("closingElement", def("JSXClosingFragment"))
        .field("children", [or(def("JSXElement"), def("JSXExpressionContainer"), def("JSXFragment"), def("JSXText"), def("Literal") // TODO Esprima should return JSXText instead.
        )], defaults.emptyArray);
    def("JSXOpeningFragment")
        .bases("Node") // TODO Same concern.
        .build();
    def("JSXClosingFragment")
        .bases("Node") // TODO Same concern.
        .build();
    def("JSXText")
        .bases("Literal")
        .build("value")
        .field("value", String);
    def("JSXEmptyExpression").bases("Expression").build();
    // This PR has caused many people issues, but supporting it seems like a
    // good idea anyway: https://github.com/babel/babel/pull/4988
    def("JSXSpreadChild")
        .bases("Expression")
        .build("expression")
        .field("expression", def("Expression"));
}
exports.default = default_1;
module.exports = exports["default"];

},{"../lib/shared":25,"../lib/types":26,"./es7":12}],16:[function(require,module,exports){
"use strict";;
/**
 * Type annotation defs shared between Flow and TypeScript.
 * These defs could not be defined in ./flow.ts or ./typescript.ts directly
 * because they use the same name.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __importDefault(require("../lib/types"));
var shared_1 = __importDefault(require("../lib/shared"));
function default_1(fork) {
    var types = fork.use(types_1.default);
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    var TypeAnnotation = or(def("TypeAnnotation"), def("TSTypeAnnotation"), null);
    var TypeParamDecl = or(def("TypeParameterDeclaration"), def("TSTypeParameterDeclaration"), null);
    def("Identifier")
        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
    def("ObjectPattern")
        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
    def("Function")
        .field("returnType", TypeAnnotation, defaults["null"])
        .field("typeParameters", TypeParamDecl, defaults["null"]);
    def("ClassProperty")
        .build("key", "value", "typeAnnotation", "static")
        .field("value", or(def("Expression"), null))
        .field("static", Boolean, defaults["false"])
        .field("typeAnnotation", TypeAnnotation, defaults["null"]);
    ["ClassDeclaration",
        "ClassExpression",
    ].forEach(function (typeName) {
        def(typeName)
            .field("typeParameters", TypeParamDecl, defaults["null"])
            .field("superTypeParameters", or(def("TypeParameterInstantiation"), def("TSTypeParameterInstantiation"), null), defaults["null"])
            .field("implements", or([def("ClassImplements")], [def("TSExpressionWithTypeArguments")]), defaults.emptyArray);
    });
}
exports.default = default_1;
module.exports = exports["default"];

},{"../lib/shared":25,"../lib/types":26}],17:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var babel_core_1 = __importDefault(require("./babel-core"));
var type_annotations_1 = __importDefault(require("./type-annotations"));
var types_1 = __importDefault(require("../lib/types"));
var shared_1 = __importDefault(require("../lib/shared"));
function default_1(fork) {
    // Since TypeScript is parsed by Babylon, include the core Babylon types
    // but omit the Flow-related types.
    fork.use(babel_core_1.default);
    fork.use(type_annotations_1.default);
    var types = fork.use(types_1.default);
    var n = types.namedTypes;
    var def = types.Type.def;
    var or = types.Type.or;
    var defaults = fork.use(shared_1.default).defaults;
    var StringLiteral = types.Type.from(function (value, deep) {
        if (n.StringLiteral &&
            n.StringLiteral.check(value, deep)) {
            return true;
        }
        if (n.Literal &&
            n.Literal.check(value, deep) &&
            typeof value.value === "string") {
            return true;
        }
        return false;
    }, "StringLiteral");
    def("TSType")
        .bases("Node");
    var TSEntityName = or(def("Identifier"), def("TSQualifiedName"));
    def("TSTypeReference")
        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
        .build("typeName", "typeParameters")
        .field("typeName", TSEntityName);
    // An abstract (non-buildable) base type that provide a commonly-needed
    // optional .typeParameters field.
    def("TSHasOptionalTypeParameterInstantiation")
        .field("typeParameters", or(def("TSTypeParameterInstantiation"), null), defaults["null"]);
    // An abstract (non-buildable) base type that provide a commonly-needed
    // optional .typeParameters field.
    def("TSHasOptionalTypeParameters")
        .field("typeParameters", or(def("TSTypeParameterDeclaration"), null, void 0), defaults["null"]);
    // An abstract (non-buildable) base type that provide a commonly-needed
    // optional .typeAnnotation field.
    def("TSHasOptionalTypeAnnotation")
        .field("typeAnnotation", or(def("TSTypeAnnotation"), null), defaults["null"]);
    def("TSQualifiedName")
        .bases("Node")
        .build("left", "right")
        .field("left", TSEntityName)
        .field("right", TSEntityName);
    def("TSAsExpression")
        .bases("Expression", "Pattern")
        .build("expression", "typeAnnotation")
        .field("expression", def("Expression"))
        .field("typeAnnotation", def("TSType"))
        .field("extra", or({ parenthesized: Boolean }, null), defaults["null"]);
    def("TSNonNullExpression")
        .bases("Expression", "Pattern")
        .build("expression")
        .field("expression", def("Expression"));
    [
        "TSAnyKeyword",
        "TSBigIntKeyword",
        "TSBooleanKeyword",
        "TSNeverKeyword",
        "TSNullKeyword",
        "TSNumberKeyword",
        "TSObjectKeyword",
        "TSStringKeyword",
        "TSSymbolKeyword",
        "TSUndefinedKeyword",
        "TSUnknownKeyword",
        "TSVoidKeyword",
        "TSThisType",
    ].forEach(function (keywordType) {
        def(keywordType)
            .bases("TSType")
            .build();
    });
    def("TSArrayType")
        .bases("TSType")
        .build("elementType")
        .field("elementType", def("TSType"));
    def("TSLiteralType")
        .bases("TSType")
        .build("literal")
        .field("literal", or(def("NumericLiteral"), def("StringLiteral"), def("BooleanLiteral"), def("TemplateLiteral"), def("UnaryExpression")));
    ["TSUnionType",
        "TSIntersectionType",
    ].forEach(function (typeName) {
        def(typeName)
            .bases("TSType")
            .build("types")
            .field("types", [def("TSType")]);
    });
    def("TSConditionalType")
        .bases("TSType")
        .build("checkType", "extendsType", "trueType", "falseType")
        .field("checkType", def("TSType"))
        .field("extendsType", def("TSType"))
        .field("trueType", def("TSType"))
        .field("falseType", def("TSType"));
    def("TSInferType")
        .bases("TSType")
        .build("typeParameter")
        .field("typeParameter", def("TSTypeParameter"));
    def("TSParenthesizedType")
        .bases("TSType")
        .build("typeAnnotation")
        .field("typeAnnotation", def("TSType"));
    var ParametersType = [or(def("Identifier"), def("RestElement"), def("ArrayPattern"), def("ObjectPattern"))];
    ["TSFunctionType",
        "TSConstructorType",
    ].forEach(function (typeName) {
        def(typeName)
            .bases("TSType", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
            .build("parameters")
            .field("parameters", ParametersType);
    });
    def("TSDeclareFunction")
        .bases("Declaration", "TSHasOptionalTypeParameters")
        .build("id", "params", "returnType")
        .field("declare", Boolean, defaults["false"])
        .field("async", Boolean, defaults["false"])
        .field("generator", Boolean, defaults["false"])
        .field("id", or(def("Identifier"), null), defaults["null"])
        .field("params", [def("Pattern")])
        // tSFunctionTypeAnnotationCommon
        .field("returnType", or(def("TSTypeAnnotation"), def("Noop"), // Still used?
    null), defaults["null"]);
    def("TSDeclareMethod")
        .bases("Declaration", "TSHasOptionalTypeParameters")
        .build("key", "params", "returnType")
        .field("async", Boolean, defaults["false"])
        .field("generator", Boolean, defaults["false"])
        .field("params", [def("Pattern")])
        // classMethodOrPropertyCommon
        .field("abstract", Boolean, defaults["false"])
        .field("accessibility", or("public", "private", "protected", void 0), defaults["undefined"])
        .field("static", Boolean, defaults["false"])
        .field("computed", Boolean, defaults["false"])
        .field("optional", Boolean, defaults["false"])
        .field("key", or(def("Identifier"), def("StringLiteral"), def("NumericLiteral"), 
    // Only allowed if .computed is true.
    def("Expression")))
        // classMethodOrDeclareMethodCommon
        .field("kind", or("get", "set", "method", "constructor"), function getDefault() { return "method"; })
        .field("access", // Not "accessibility"?
    or("public", "private", "protected", void 0), defaults["undefined"])
        .field("decorators", or([def("Decorator")], null), defaults["null"])
        // tSFunctionTypeAnnotationCommon
        .field("returnType", or(def("TSTypeAnnotation"), def("Noop"), // Still used?
    null), defaults["null"]);
    def("TSMappedType")
        .bases("TSType")
        .build("typeParameter", "typeAnnotation")
        .field("readonly", or(Boolean, "+", "-"), defaults["false"])
        .field("typeParameter", def("TSTypeParameter"))
        .field("optional", or(Boolean, "+", "-"), defaults["false"])
        .field("typeAnnotation", or(def("TSType"), null), defaults["null"]);
    def("TSTupleType")
        .bases("TSType")
        .build("elementTypes")
        .field("elementTypes", [def("TSType")]);
    def("TSRestType")
        .bases("TSType")
        .build("typeAnnotation")
        .field("typeAnnotation", def("TSType"));
    def("TSOptionalType")
        .bases("TSType")
        .build("typeAnnotation")
        .field("typeAnnotation", def("TSType"));
    def("TSIndexedAccessType")
        .bases("TSType")
        .build("objectType", "indexType")
        .field("objectType", def("TSType"))
        .field("indexType", def("TSType"));
    def("TSTypeOperator")
        .bases("TSType")
        .build("operator")
        .field("operator", String)
        .field("typeAnnotation", def("TSType"));
    def("TSTypeAnnotation")
        .bases("Node")
        .build("typeAnnotation")
        .field("typeAnnotation", or(def("TSType"), def("TSTypeAnnotation")));
    def("TSIndexSignature")
        .bases("Declaration", "TSHasOptionalTypeAnnotation")
        .build("parameters", "typeAnnotation")
        .field("parameters", [def("Identifier")]) // Length === 1
        .field("readonly", Boolean, defaults["false"]);
    def("TSPropertySignature")
        .bases("Declaration", "TSHasOptionalTypeAnnotation")
        .build("key", "typeAnnotation", "optional")
        .field("key", def("Expression"))
        .field("computed", Boolean, defaults["false"])
        .field("readonly", Boolean, defaults["false"])
        .field("optional", Boolean, defaults["false"])
        .field("initializer", or(def("Expression"), null), defaults["null"]);
    def("TSMethodSignature")
        .bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
        .build("key", "parameters", "typeAnnotation")
        .field("key", def("Expression"))
        .field("computed", Boolean, defaults["false"])
        .field("optional", Boolean, defaults["false"])
        .field("parameters", ParametersType);
    def("TSTypePredicate")
        .bases("TSTypeAnnotation")
        .build("parameterName", "typeAnnotation")
        .field("parameterName", or(def("Identifier"), def("TSThisType")))
        .field("typeAnnotation", def("TSTypeAnnotation"));
    ["TSCallSignatureDeclaration",
        "TSConstructSignatureDeclaration",
    ].forEach(function (typeName) {
        def(typeName)
            .bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation")
            .build("parameters", "typeAnnotation")
            .field("parameters", ParametersType);
    });
    def("TSEnumMember")
        .bases("Node")
        .build("id", "initializer")
        .field("id", or(def("Identifier"), StringLiteral))
        .field("initializer", or(def("Expression"), null), defaults["null"]);
    def("TSTypeQuery")
        .bases("TSType")
        .build("exprName")
        .field("exprName", or(TSEntityName, def("TSImportType")));
    // Inferred from Babylon's tsParseTypeMember method.
    var TSTypeMember = or(def("TSCallSignatureDeclaration"), def("TSConstructSignatureDeclaration"), def("TSIndexSignature"), def("TSMethodSignature"), def("TSPropertySignature"));
    def("TSTypeLiteral")
        .bases("TSType")
        .build("members")
        .field("members", [TSTypeMember]);
    def("TSTypeParameter")
        .bases("Identifier")
        .build("name", "constraint", "default")
        .field("name", String)
        .field("constraint", or(def("TSType"), void 0), defaults["undefined"])
        .field("default", or(def("TSType"), void 0), defaults["undefined"]);
    def("TSTypeAssertion")
        .bases("Expression", "Pattern")
        .build("typeAnnotation", "expression")
        .field("typeAnnotation", def("TSType"))
        .field("expression", def("Expression"))
        .field("extra", or({ parenthesized: Boolean }, null), defaults["null"]);
    def("TSTypeParameterDeclaration")
        .bases("Declaration")
        .build("params")
        .field("params", [def("TSTypeParameter")]);
    def("TSTypeParameterInstantiation")
        .bases("Node")
        .build("params")
        .field("params", [def("TSType")]);
    def("TSEnumDeclaration")
        .bases("Declaration")
        .build("id", "members")
        .field("id", def("Identifier"))
        .field("const", Boolean, defaults["false"])
        .field("declare", Boolean, defaults["false"])
        .field("members", [def("TSEnumMember")])
        .field("initializer", or(def("Expression"), null), defaults["null"]);
    def("TSTypeAliasDeclaration")
        .bases("Declaration", "TSHasOptionalTypeParameters")
        .build("id", "typeAnnotation")
        .field("id", def("Identifier"))
        .field("declare", Boolean, defaults["false"])
        .field("typeAnnotation", def("TSType"));
    def("TSModuleBlock")
        .bases("Node")
        .build("body")
        .field("body", [def("Statement")]);
    def("TSModuleDeclaration")
        .bases("Declaration")
        .build("id", "body")
        .field("id", or(StringLiteral, TSEntityName))
        .field("declare", Boolean, defaults["false"])
        .field("global", Boolean, defaults["false"])
        .field("body", or(def("TSModuleBlock"), def("TSModuleDeclaration"), null), defaults["null"]);
    def("TSImportType")
        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
        .build("argument", "qualifier", "typeParameters")
        .field("argument", StringLiteral)
        .field("qualifier", or(TSEntityName, void 0), defaults["undefined"]);
    def("TSImportEqualsDeclaration")
        .bases("Declaration")
        .build("id", "moduleReference")
        .field("id", def("Identifier"))
        .field("isExport", Boolean, defaults["false"])
        .field("moduleReference", or(TSEntityName, def("TSExternalModuleReference")));
    def("TSExternalModuleReference")
        .bases("Declaration")
        .build("expression")
        .field("expression", StringLiteral);
    def("TSExportAssignment")
        .bases("Statement")
        .build("expression")
        .field("expression", def("Expression"));
    def("TSNamespaceExportDeclaration")
        .bases("Declaration")
        .build("id")
        .field("id", def("Identifier"));
    def("TSInterfaceBody")
        .bases("Node")
        .build("body")
        .field("body", [TSTypeMember]);
    def("TSExpressionWithTypeArguments")
        .bases("TSType", "TSHasOptionalTypeParameterInstantiation")
        .build("expression", "typeParameters")
        .field("expression", TSEntityName);
    def("TSInterfaceDeclaration")
        .bases("Declaration", "TSHasOptionalTypeParameters")
        .build("id", "body")
        .field("id", TSEntityName)
        .field("declare", Boolean, defaults["false"])
        .field("extends", or([def("TSExpressionWithTypeArguments")], null), defaults["null"])
        .field("body", def("TSInterfaceBody"));
    def("TSParameterProperty")
        .bases("Pattern")
        .build("parameter")
        .field("accessibility", or("public", "private", "protected", void 0), defaults["undefined"])
        .field("readonly", Boolean, defaults["false"])
        .field("parameter", or(def("Identifier"), def("AssignmentPattern")));
    def("ClassProperty")
        .field("access", // Not "accessibility"?
    or("public", "private", "protected", void 0), defaults["undefined"]);
    // Defined already in es6 and babel-core.
    def("ClassBody")
        .field("body", [or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"), def("ClassPrivateProperty"), def("ClassMethod"), def("ClassPrivateMethod"), 
        // Just need to add these types:
        def("TSDeclareMethod"), TSTypeMember)]);
}
exports.default = default_1;
module.exports = exports["default"];

},{"../lib/shared":25,"../lib/types":26,"./babel-core":6,"./type-annotations":16}],18:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __importDefault(require("./lib/types"));
var path_visitor_1 = __importDefault(require("./lib/path-visitor"));
var equiv_1 = __importDefault(require("./lib/equiv"));
var path_1 = __importDefault(require("./lib/path"));
var node_path_1 = __importDefault(require("./lib/node-path"));
function default_1(defs) {
    var fork = createFork();
    var types = fork.use(types_1.default);
    defs.forEach(fork.use);
    types.finalize();
    var PathVisitor = fork.use(path_visitor_1.default);
    return {
        Type: types.Type,
        builtInTypes: types.builtInTypes,
        namedTypes: types.namedTypes,
        builders: types.builders,
        defineMethod: types.defineMethod,
        getFieldNames: types.getFieldNames,
        getFieldValue: types.getFieldValue,
        eachField: types.eachField,
        someField: types.someField,
        getSupertypeNames: types.getSupertypeNames,
        getBuilderName: types.getBuilderName,
        astNodesAreEquivalent: fork.use(equiv_1.default),
        finalize: types.finalize,
        Path: fork.use(path_1.default),
        NodePath: fork.use(node_path_1.default),
        PathVisitor: PathVisitor,
        use: fork.use,
        visit: PathVisitor.visit,
    };
}
exports.default = default_1;
function createFork() {
    var used = [];
    var usedResult = [];
    function use(plugin) {
        var idx = used.indexOf(plugin);
        if (idx === -1) {
            idx = used.length;
            used.push(plugin);
            usedResult[idx] = plugin(fork);
        }
        return usedResult[idx];
    }
    var fork = { use: use };
    return fork;
}
module.exports = exports["default"];

},{"./lib/equiv":20,"./lib/node-path":21,"./lib/path":23,"./lib/path-visitor":22,"./lib/types":26}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var namedTypes;
(function (namedTypes) {
})(namedTypes = exports.namedTypes || (exports.namedTypes = {}));

},{}],20:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __importDefault(require("./types"));
function default_1(fork) {
    var types = fork.use(types_1.default);
    var getFieldNames = types.getFieldNames;
    var getFieldValue = types.getFieldValue;
    var isArray = types.builtInTypes.array;
    var isObject = types.builtInTypes.object;
    var isDate = types.builtInTypes.Date;
    var isRegExp = types.builtInTypes.RegExp;
    var hasOwn = Object.prototype.hasOwnProperty;
    function astNodesAreEquivalent(a, b, problemPath) {
        if (isArray.check(problemPath)) {
            problemPath.length = 0;
        }
        else {
            problemPath = null;
        }
        return areEquivalent(a, b, problemPath);
    }
    astNodesAreEquivalent.assert = function (a, b) {
        var problemPath = [];
        if (!astNodesAreEquivalent(a, b, problemPath)) {
            if (problemPath.length === 0) {
                if (a !== b) {
                    throw new Error("Nodes must be equal");
                }
            }
            else {
                throw new Error("Nodes differ in the following path: " +
                    problemPath.map(subscriptForProperty).join(""));
            }
        }
    };
    function subscriptForProperty(property) {
        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {
            return "." + property;
        }
        return "[" + JSON.stringify(property) + "]";
    }
    function areEquivalent(a, b, problemPath) {
        if (a === b) {
            return true;
        }
        if (isArray.check(a)) {
            return arraysAreEquivalent(a, b, problemPath);
        }
        if (isObject.check(a)) {
            return objectsAreEquivalent(a, b, problemPath);
        }
        if (isDate.check(a)) {
            return isDate.check(b) && (+a === +b);
        }
        if (isRegExp.check(a)) {
            return isRegExp.check(b) && (a.source === b.source &&
                a.global === b.global &&
                a.multiline === b.multiline &&
                a.ignoreCase === b.ignoreCase);
        }
        return a == b;
    }
    function arraysAreEquivalent(a, b, problemPath) {
        isArray.assert(a);
        var aLength = a.length;
        if (!isArray.check(b) || b.length !== aLength) {
            if (problemPath) {
                problemPath.push("length");
            }
            return false;
        }
        for (var i = 0; i < aLength; ++i) {
            if (problemPath) {
                problemPath.push(i);
            }
            if (i in a !== i in b) {
                return false;
            }
            if (!areEquivalent(a[i], b[i], problemPath)) {
                return false;
            }
            if (problemPath) {
                var problemPathTail = problemPath.pop();
                if (problemPathTail !== i) {
                    throw new Error("" + problemPathTail);
                }
            }
        }
        return true;
    }
    function objectsAreEquivalent(a, b, problemPath) {
        isObject.assert(a);
        if (!isObject.check(b)) {
            return false;
        }
        // Fast path for a common property of AST nodes.
        if (a.type !== b.type) {
            if (problemPath) {
                problemPath.push("type");
            }
            return false;
        }
        var aNames = getFieldNames(a);
        var aNameCount = aNames.length;
        var bNames = getFieldNames(b);
        var bNameCount = bNames.length;
        if (aNameCount === bNameCount) {
            for (var i = 0; i < aNameCount; ++i) {
                var name = aNames[i];
                var aChild = getFieldValue(a, name);
                var bChild = getFieldValue(b, name);
                if (problemPath) {
                    problemPath.push(name);
                }
                if (!areEquivalent(aChild, bChild, problemPath)) {
                    return false;
                }
                if (problemPath) {
                    var problemPathTail = problemPath.pop();
                    if (problemPathTail !== name) {
                        throw new Error("" + problemPathTail);
                    }
                }
            }
            return true;
        }
        if (!problemPath) {
            return false;
        }
        // Since aNameCount !== bNameCount, we need to find some name that's
        // missing in aNames but present in bNames, or vice-versa.
        var seenNames = Object.create(null);
        for (i = 0; i < aNameCount; ++i) {
            seenNames[aNames[i]] = true;
        }
        for (i = 0; i < bNameCount; ++i) {
            name = bNames[i];
            if (!hasOwn.call(seenNames, name)) {
                problemPath.push(name);
                return false;
            }
            delete seenNames[name];
        }
        for (name in seenNames) {
            problemPath.push(name);
            break;
        }
        return false;
    }
    return astNodesAreEquivalent;
}
exports.default = default_1;
module.exports = exports["default"];

},{"./types":26}],21:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __importDefault(require("./types"));
var path_1 = __importDefault(require("./path"));
var scope_1 = __importDefault(require("./scope"));
function nodePathPlugin(fork) {
    var types = fork.use(types_1.default);
    var n = types.namedTypes;
    var b = types.builders;
    var isNumber = types.builtInTypes.number;
    var isArray = types.builtInTypes.array;
    var Path = fork.use(path_1.default);
    var Scope = fork.use(scope_1.default);
    var NodePath = function NodePath(value, parentPath, name) {
        if (!(this instanceof NodePath)) {
            throw new Error("NodePath constructor cannot be invoked without 'new'");
        }
        Path.call(this, value, parentPath, name);
    };
    var NPp = NodePath.prototype = Object.create(Path.prototype, {
        constructor: {
            value: NodePath,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperties(NPp, {
        node: {
            get: function () {
                Object.defineProperty(this, "node", {
                    configurable: true,
                    value: this._computeNode()
                });
                return this.node;
            }
        },
        parent: {
            get: function () {
                Object.defineProperty(this, "parent", {
                    configurable: true,
                    value: this._computeParent()
                });
                return this.parent;
            }
        },
        scope: {
            get: function () {
                Object.defineProperty(this, "scope", {
                    configurable: true,
                    value: this._computeScope()
                });
                return this.scope;
            }
        }
    });
    NPp.replace = function () {
        delete this.node;
        delete this.parent;
        delete this.scope;
        return Path.prototype.replace.apply(this, arguments);
    };
    NPp.prune = function () {
        var remainingNodePath = this.parent;
        this.replace();
        return cleanUpNodesAfterPrune(remainingNodePath);
    };
    // The value of the first ancestor Path whose value is a Node.
    NPp._computeNode = function () {
        var value = this.value;
        if (n.Node.check(value)) {
            return value;
        }
        var pp = this.parentPath;
        return pp && pp.node || null;
    };
    // The first ancestor Path whose value is a Node distinct from this.node.
    NPp._computeParent = function () {
        var value = this.value;
        var pp = this.parentPath;
        if (!n.Node.check(value)) {
            while (pp && !n.Node.check(pp.value)) {
                pp = pp.parentPath;
            }
            if (pp) {
                pp = pp.parentPath;
            }
        }
        while (pp && !n.Node.check(pp.value)) {
            pp = pp.parentPath;
        }
        return pp || null;
    };
    // The closest enclosing scope that governs this node.
    NPp._computeScope = function () {
        var value = this.value;
        var pp = this.parentPath;
        var scope = pp && pp.scope;
        if (n.Node.check(value) &&
            Scope.isEstablishedBy(value)) {
            scope = new Scope(this, scope);
        }
        return scope || null;
    };
    NPp.getValueProperty = function (name) {
        return types.getFieldValue(this.value, name);
    };
    /**
     * Determine whether this.node needs to be wrapped in parentheses in order
     * for a parser to reproduce the same local AST structure.
     *
     * For instance, in the expression `(1 + 2) * 3`, the BinaryExpression
     * whose operator is "+" needs parentheses, because `1 + 2 * 3` would
     * parse differently.
     *
     * If assumeExpressionContext === true, we don't worry about edge cases
     * like an anonymous FunctionExpression appearing lexically first in its
     * enclosing statement and thus needing parentheses to avoid being parsed
     * as a FunctionDeclaration with a missing name.
     */
    NPp.needsParens = function (assumeExpressionContext) {
        var pp = this.parentPath;
        if (!pp) {
            return false;
        }
        var node = this.value;
        // Only expressions need parentheses.
        if (!n.Expression.check(node)) {
            return false;
        }
        // Identifiers never need parentheses.
        if (node.type === "Identifier") {
            return false;
        }
        while (!n.Node.check(pp.value)) {
            pp = pp.parentPath;
            if (!pp) {
                return false;
            }
        }
        var parent = pp.value;
        switch (node.type) {
            case "UnaryExpression":
            case "SpreadElement":
            case "SpreadProperty":
                return parent.type === "MemberExpression"
                    && this.name === "object"
                    && parent.object === node;
            case "BinaryExpression":
            case "LogicalExpression":
                switch (parent.type) {
                    case "CallExpression":
                        return this.name === "callee"
                            && parent.callee === node;
                    case "UnaryExpression":
                    case "SpreadElement":
                    case "SpreadProperty":
                        return true;
                    case "MemberExpression":
                        return this.name === "object"
                            && parent.object === node;
                    case "BinaryExpression":
                    case "LogicalExpression": {
                        var n_1 = node;
                        var po = parent.operator;
                        var pp_1 = PRECEDENCE[po];
                        var no = n_1.operator;
                        var np = PRECEDENCE[no];
                        if (pp_1 > np) {
                            return true;
                        }
                        if (pp_1 === np && this.name === "right") {
                            if (parent.right !== n_1) {
                                throw new Error("Nodes must be equal");
                            }
                            return true;
                        }
                    }
                    default:
                        return false;
                }
            case "SequenceExpression":
                switch (parent.type) {
                    case "ForStatement":
                        // Although parentheses wouldn't hurt around sequence
                        // expressions in the head of for loops, traditional style
                        // dictates that e.g. i++, j++ should not be wrapped with
                        // parentheses.
                        return false;
                    case "ExpressionStatement":
                        return this.name !== "expression";
                    default:
                        // Otherwise err on the side of overparenthesization, adding
                        // explicit exceptions above if this proves overzealous.
                        return true;
                }
            case "YieldExpression":
                switch (parent.type) {
                    case "BinaryExpression":
                    case "LogicalExpression":
                    case "UnaryExpression":
                    case "SpreadElement":
                    case "SpreadProperty":
                    case "CallExpression":
                    case "MemberExpression":
                    case "NewExpression":
                    case "ConditionalExpression":
                    case "YieldExpression":
                        return true;
                    default:
                        return false;
                }
            case "Literal":
                return parent.type === "MemberExpression"
                    && isNumber.check(node.value)
                    && this.name === "object"
                    && parent.object === node;
            case "AssignmentExpression":
            case "ConditionalExpression":
                switch (parent.type) {
                    case "UnaryExpression":
                    case "SpreadElement":
                    case "SpreadProperty":
                    case "BinaryExpression":
                    case "LogicalExpression":
                        return true;
                    case "CallExpression":
                        return this.name === "callee"
                            && parent.callee === node;
                    case "ConditionalExpression":
                        return this.name === "test"
                            && parent.test === node;
                    case "MemberExpression":
                        return this.name === "object"
                            && parent.object === node;
                    default:
                        return false;
                }
            default:
                if (parent.type === "NewExpression" &&
                    this.name === "callee" &&
                    parent.callee === node) {
                    return containsCallExpression(node);
                }
        }
        if (assumeExpressionContext !== true &&
            !this.canBeFirstInStatement() &&
            this.firstInStatement())
            return true;
        return false;
    };
    function isBinary(node) {
        return n.BinaryExpression.check(node)
            || n.LogicalExpression.check(node);
    }
    // @ts-ignore 'isUnaryLike' is declared but its value is never read. [6133]
    function isUnaryLike(node) {
        return n.UnaryExpression.check(node)
            // I considered making SpreadElement and SpreadProperty subtypes
            // of UnaryExpression, but they're not really Expression nodes.
            || (n.SpreadElement && n.SpreadElement.check(node))
            || (n.SpreadProperty && n.SpreadProperty.check(node));
    }
    var PRECEDENCE = {};
    [["||"],
        ["&&"],
        ["|"],
        ["^"],
        ["&"],
        ["==", "===", "!=", "!=="],
        ["<", ">", "<=", ">=", "in", "instanceof"],
        [">>", "<<", ">>>"],
        ["+", "-"],
        ["*", "/", "%"]
    ].forEach(function (tier, i) {
        tier.forEach(function (op) {
            PRECEDENCE[op] = i;
        });
    });
    function containsCallExpression(node) {
        if (n.CallExpression.check(node)) {
            return true;
        }
        if (isArray.check(node)) {
            return node.some(containsCallExpression);
        }
        if (n.Node.check(node)) {
            return types.someField(node, function (_name, child) {
                return containsCallExpression(child);
            });
        }
        return false;
    }
    NPp.canBeFirstInStatement = function () {
        var node = this.node;
        return !n.FunctionExpression.check(node)
            && !n.ObjectExpression.check(node);
    };
    NPp.firstInStatement = function () {
        return firstInStatement(this);
    };
    function firstInStatement(path) {
        for (var node, parent; path.parent; path = path.parent) {
            node = path.node;
            parent = path.parent.node;
            if (n.BlockStatement.check(parent) &&
                path.parent.name === "body" &&
                path.name === 0) {
                if (parent.body[0] !== node) {
                    throw new Error("Nodes must be equal");
                }
                return true;
            }
            if (n.ExpressionStatement.check(parent) &&
                path.name === "expression") {
                if (parent.expression !== node) {
                    throw new Error("Nodes must be equal");
                }
                return true;
            }
            if (n.SequenceExpression.check(parent) &&
                path.parent.name === "expressions" &&
                path.name === 0) {
                if (parent.expressions[0] !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            if (n.CallExpression.check(parent) &&
                path.name === "callee") {
                if (parent.callee !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            if (n.MemberExpression.check(parent) &&
                path.name === "object") {
                if (parent.object !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            if (n.ConditionalExpression.check(parent) &&
                path.name === "test") {
                if (parent.test !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            if (isBinary(parent) &&
                path.name === "left") {
                if (parent.left !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            if (n.UnaryExpression.check(parent) &&
                !parent.prefix &&
                path.name === "argument") {
                if (parent.argument !== node) {
                    throw new Error("Nodes must be equal");
                }
                continue;
            }
            return false;
        }
        return true;
    }
    /**
     * Pruning certain nodes will result in empty or incomplete nodes, here we clean those nodes up.
     */
    function cleanUpNodesAfterPrune(remainingNodePath) {
        if (n.VariableDeclaration.check(remainingNodePath.node)) {
            var declarations = remainingNodePath.get('declarations').value;
            if (!declarations || declarations.length === 0) {
                return remainingNodePath.prune();
            }
        }
        else if (n.ExpressionStatement.check(remainingNodePath.node)) {
            if (!remainingNodePath.get('expression').value) {
                return remainingNodePath.prune();
            }
        }
        else if (n.IfStatement.check(remainingNodePath.node)) {
            cleanUpIfStatementAfterPrune(remainingNodePath);
        }
        return remainingNodePath;
    }
    function cleanUpIfStatementAfterPrune(ifStatement) {
        var testExpression = ifStatement.get('test').value;
        var alternate = ifStatement.get('alternate').value;
        var consequent = ifStatement.get('consequent').value;
        if (!consequent && !alternate) {
            var testExpressionStatement = b.expressionStatement(testExpression);
            ifStatement.replace(testExpressionStatement);
        }
        else if (!consequent && alternate) {
            var negatedTestExpression = b.unaryExpression('!', testExpression, true);
            if (n.UnaryExpression.check(testExpression) && testExpression.operator === '!') {
                negatedTestExpression = testExpression.argument;
            }
            ifStatement.get("test").replace(negatedTestExpression);
            ifStatement.get("consequent").replace(alternate);
            ifStatement.get("alternate").replace();
        }
    }
    return NodePath;
}
exports.default = nodePathPlugin;
module.exports = exports["default"];

},{"./path":23,"./scope":24,"./types":26}],22:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __importDefault(require("./types"));
var node_path_1 = __importDefault(require("./node-path"));
var hasOwn = Object.prototype.hasOwnProperty;
function pathVisitorPlugin(fork) {
    var types = fork.use(types_1.default);
    var NodePath = fork.use(node_path_1.default);
    var isArray = types.builtInTypes.array;
    var isObject = types.builtInTypes.object;
    var isFunction = types.builtInTypes.function;
    var undefined;
    var PathVisitor = function PathVisitor() {
        if (!(this instanceof PathVisitor)) {
            throw new Error("PathVisitor constructor cannot be invoked without 'new'");
        }
        // Permanent state.
        this._reusableContextStack = [];
        this._methodNameTable = computeMethodNameTable(this);
        this._shouldVisitComments =
            hasOwn.call(this._methodNameTable, "Block") ||
                hasOwn.call(this._methodNameTable, "Line");
        this.Context = makeContextConstructor(this);
        // State reset every time PathVisitor.prototype.visit is called.
        this._visiting = false;
        this._changeReported = false;
    };
    function computeMethodNameTable(visitor) {
        var typeNames = Object.create(null);
        for (var methodName in visitor) {
            if (/^visit[A-Z]/.test(methodName)) {
                typeNames[methodName.slice("visit".length)] = true;
            }
        }
        var supertypeTable = types.computeSupertypeLookupTable(typeNames);
        var methodNameTable = Object.create(null);
        var typeNameKeys = Object.keys(supertypeTable);
        var typeNameCount = typeNameKeys.length;
        for (var i = 0; i < typeNameCount; ++i) {
            var typeName = typeNameKeys[i];
            methodName = "visit" + supertypeTable[typeName];
            if (isFunction.check(visitor[methodName])) {
                methodNameTable[typeName] = methodName;
            }
        }
        return methodNameTable;
    }
    PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {
        if (methods instanceof PathVisitor) {
            return methods;
        }
        if (!isObject.check(methods)) {
            // An empty visitor?
            return new PathVisitor;
        }
        var Visitor = function Visitor() {
            if (!(this instanceof Visitor)) {
                throw new Error("Visitor constructor cannot be invoked without 'new'");
            }
            PathVisitor.call(this);
        };
        var Vp = Visitor.prototype = Object.create(PVp);
        Vp.constructor = Visitor;
        extend(Vp, methods);
        extend(Visitor, PathVisitor);
        isFunction.assert(Visitor.fromMethodsObject);
        isFunction.assert(Visitor.visit);
        return new Visitor;
    };
    function extend(target, source) {
        for (var property in source) {
            if (hasOwn.call(source, property)) {
                target[property] = source[property];
            }
        }
        return target;
    }
    PathVisitor.visit = function visit(node, methods) {
        return PathVisitor.fromMethodsObject(methods).visit(node);
    };
    var PVp = PathVisitor.prototype;
    PVp.visit = function () {
        if (this._visiting) {
            throw new Error("Recursively calling visitor.visit(path) resets visitor state. " +
                "Try this.visit(path) or this.traverse(path) instead.");
        }
        // Private state that needs to be reset before every traversal.
        this._visiting = true;
        this._changeReported = false;
        this._abortRequested = false;
        var argc = arguments.length;
        var args = new Array(argc);
        for (var i = 0; i < argc; ++i) {
            args[i] = arguments[i];
        }
        if (!(args[0] instanceof NodePath)) {
            args[0] = new NodePath({ root: args[0] }).get("root");
        }
        // Called with the same arguments as .visit.
        this.reset.apply(this, args);
        var didNotThrow;
        try {
            var root = this.visitWithoutReset(args[0]);
            didNotThrow = true;
        }
        finally {
            this._visiting = false;
            if (!didNotThrow && this._abortRequested) {
                // If this.visitWithoutReset threw an exception and
                // this._abortRequested was set to true, return the root of
                // the AST instead of letting the exception propagate, so that
                // client code does not have to provide a try-catch block to
                // intercept the AbortRequest exception.  Other kinds of
                // exceptions will propagate without being intercepted and
                // rethrown by a catch block, so their stacks will accurately
                // reflect the original throwing context.
                return args[0].value;
            }
        }
        return root;
    };
    PVp.AbortRequest = function AbortRequest() { };
    PVp.abort = function () {
        var visitor = this;
        visitor._abortRequested = true;
        var request = new visitor.AbortRequest();
        // If you decide to catch this exception and stop it from propagating,
        // make sure to call its cancel method to avoid silencing other
        // exceptions that might be thrown later in the traversal.
        request.cancel = function () {
            visitor._abortRequested = false;
        };
        throw request;
    };
    PVp.reset = function (_path /*, additional arguments */) {
        // Empty stub; may be reassigned or overridden by subclasses.
    };
    PVp.visitWithoutReset = function (path) {
        if (this instanceof this.Context) {
            // Since this.Context.prototype === this, there's a chance we
            // might accidentally call context.visitWithoutReset. If that
            // happens, re-invoke the method against context.visitor.
            return this.visitor.visitWithoutReset(path);
        }
        if (!(path instanceof NodePath)) {
            throw new Error("");
        }
        var value = path.value;
        var methodName = value &&
            typeof value === "object" &&
            typeof value.type === "string" &&
            this._methodNameTable[value.type];
        if (methodName) {
            var context = this.acquireContext(path);
            try {
                return context.invokeVisitorMethod(methodName);
            }
            finally {
                this.releaseContext(context);
            }
        }
        else {
            // If there was no visitor method to call, visit the children of
            // this node generically.
            return visitChildren(path, this);
        }
    };
    function visitChildren(path, visitor) {
        if (!(path instanceof NodePath)) {
            throw new Error("");
        }
        if (!(visitor instanceof PathVisitor)) {
            throw new Error("");
        }
        var value = path.value;
        if (isArray.check(value)) {
            path.each(visitor.visitWithoutReset, visitor);
        }
        else if (!isObject.check(value)) {
            // No children to visit.
        }
        else {
            var childNames = types.getFieldNames(value);
            // The .comments field of the Node type is hidden, so we only
            // visit it if the visitor defines visitBlock or visitLine, and
            // value.comments is defined.
            if (visitor._shouldVisitComments &&
                value.comments &&
                childNames.indexOf("comments") < 0) {
                childNames.push("comments");
            }
            var childCount = childNames.length;
            var childPaths = [];
            for (var i = 0; i < childCount; ++i) {
                var childName = childNames[i];
                if (!hasOwn.call(value, childName)) {
                    value[childName] = types.getFieldValue(value, childName);
                }
                childPaths.push(path.get(childName));
            }
            for (var i = 0; i < childCount; ++i) {
                visitor.visitWithoutReset(childPaths[i]);
            }
        }
        return path.value;
    }
    PVp.acquireContext = function (path) {
        if (this._reusableContextStack.length === 0) {
            return new this.Context(path);
        }
        return this._reusableContextStack.pop().reset(path);
    };
    PVp.releaseContext = function (context) {
        if (!(context instanceof this.Context)) {
            throw new Error("");
        }
        this._reusableContextStack.push(context);
        context.currentPath = null;
    };
    PVp.reportChanged = function () {
        this._changeReported = true;
    };
    PVp.wasChangeReported = function () {
        return this._changeReported;
    };
    function makeContextConstructor(visitor) {
        function Context(path) {
            if (!(this instanceof Context)) {
                throw new Error("");
            }
            if (!(this instanceof PathVisitor)) {
                throw new Error("");
            }
            if (!(path instanceof NodePath)) {
                throw new Error("");
            }
            Object.defineProperty(this, "visitor", {
                value: visitor,
                writable: false,
                enumerable: true,
                configurable: false
            });
            this.currentPath = path;
            this.needToCallTraverse = true;
            Object.seal(this);
        }
        if (!(visitor instanceof PathVisitor)) {
            throw new Error("");
        }
        // Note that the visitor object is the prototype of Context.prototype,
        // so all visitor methods are inherited by context objects.
        var Cp = Context.prototype = Object.create(visitor);
        Cp.constructor = Context;
        extend(Cp, sharedContextProtoMethods);
        return Context;
    }
    // Every PathVisitor has a different this.Context constructor and
    // this.Context.prototype object, but those prototypes can all use the
    // same reset, invokeVisitorMethod, and traverse function objects.
    var sharedContextProtoMethods = Object.create(null);
    sharedContextProtoMethods.reset =
        function reset(path) {
            if (!(this instanceof this.Context)) {
                throw new Error("");
            }
            if (!(path instanceof NodePath)) {
                throw new Error("");
            }
            this.currentPath = path;
            this.needToCallTraverse = true;
            return this;
        };
    sharedContextProtoMethods.invokeVisitorMethod =
        function invokeVisitorMethod(methodName) {
            if (!(this instanceof this.Context)) {
                throw new Error("");
            }
            if (!(this.currentPath instanceof NodePath)) {
                throw new Error("");
            }
            var result = this.visitor[methodName].call(this, this.currentPath);
            if (result === false) {
                // Visitor methods return false to indicate that they have handled
                // their own traversal needs, and we should not complain if
                // this.needToCallTraverse is still true.
                this.needToCallTraverse = false;
            }
            else if (result !== undefined) {
                // Any other non-undefined value returned from the visitor method
                // is interpreted as a replacement value.
                this.currentPath = this.currentPath.replace(result)[0];
                if (this.needToCallTraverse) {
                    // If this.traverse still hasn't been called, visit the
                    // children of the replacement node.
                    this.traverse(this.currentPath);
                }
            }
            if (this.needToCallTraverse !== false) {
                throw new Error("Must either call this.traverse or return false in " + methodName);
            }
            var path = this.currentPath;
            return path && path.value;
        };
    sharedContextProtoMethods.traverse =
        function traverse(path, newVisitor) {
            if (!(this instanceof this.Context)) {
                throw new Error("");
            }
            if (!(path instanceof NodePath)) {
                throw new Error("");
            }
            if (!(this.currentPath instanceof NodePath)) {
                throw new Error("");
            }
            this.needToCallTraverse = false;
            return visitChildren(path, PathVisitor.fromMethodsObject(newVisitor || this.visitor));
        };
    sharedContextProtoMethods.visit =
        function visit(path, newVisitor) {
            if (!(this instanceof this.Context)) {
                throw new Error("");
            }
            if (!(path instanceof NodePath)) {
                throw new Error("");
            }
            if (!(this.currentPath instanceof NodePath)) {
                throw new Error("");
            }
            this.needToCallTraverse = false;
            return PathVisitor.fromMethodsObject(newVisitor || this.visitor).visitWithoutReset(path);
        };
    sharedContextProtoMethods.reportChanged = function reportChanged() {
        this.visitor.reportChanged();
    };
    sharedContextProtoMethods.abort = function abort() {
        this.needToCallTraverse = false;
        this.visitor.abort();
    };
    return PathVisitor;
}
exports.default = pathVisitorPlugin;
module.exports = exports["default"];

},{"./node-path":21,"./types":26}],23:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __importDefault(require("./types"));
var Op = Object.prototype;
var hasOwn = Op.hasOwnProperty;
function pathPlugin(fork) {
    var types = fork.use(types_1.default);
    var isArray = types.builtInTypes.array;
    var isNumber = types.builtInTypes.number;
    var Path = function Path(value, parentPath, name) {
        if (!(this instanceof Path)) {
            throw new Error("Path constructor cannot be invoked without 'new'");
        }
        if (parentPath) {
            if (!(parentPath instanceof Path)) {
                throw new Error("");
            }
        }
        else {
            parentPath = null;
            name = null;
        }
        // The value encapsulated by this Path, generally equal to
        // parentPath.value[name] if we have a parentPath.
        this.value = value;
        // The immediate parent Path of this Path.
        this.parentPath = parentPath;
        // The name of the property of parentPath.value through which this
        // Path's value was reached.
        this.name = name;
        // Calling path.get("child") multiple times always returns the same
        // child Path object, for both performance and consistency reasons.
        this.__childCache = null;
    };
    var Pp = Path.prototype;
    function getChildCache(path) {
        // Lazily create the child cache. This also cheapens cache
        // invalidation, since you can just reset path.__childCache to null.
        return path.__childCache || (path.__childCache = Object.create(null));
    }
    function getChildPath(path, name) {
        var cache = getChildCache(path);
        var actualChildValue = path.getValueProperty(name);
        var childPath = cache[name];
        if (!hasOwn.call(cache, name) ||
            // Ensure consistency between cache and reality.
            childPath.value !== actualChildValue) {
            childPath = cache[name] = new path.constructor(actualChildValue, path, name);
        }
        return childPath;
    }
    // This method is designed to be overridden by subclasses that need to
    // handle missing properties, etc.
    Pp.getValueProperty = function getValueProperty(name) {
        return this.value[name];
    };
    Pp.get = function get() {
        var names = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            names[_i] = arguments[_i];
        }
        var path = this;
        var count = names.length;
        for (var i = 0; i < count; ++i) {
            path = getChildPath(path, names[i]);
        }
        return path;
    };
    Pp.each = function each(callback, context) {
        var childPaths = [];
        var len = this.value.length;
        var i = 0;
        // Collect all the original child paths before invoking the callback.
        for (var i = 0; i < len; ++i) {
            if (hasOwn.call(this.value, i)) {
                childPaths[i] = this.get(i);
            }
        }
        // Invoke the callback on just the original child paths, regardless of
        // any modifications made to the array by the callback. I chose these
        // semantics over cleverly invoking the callback on new elements because
        // this way is much easier to reason about.
        context = context || this;
        for (i = 0; i < len; ++i) {
            if (hasOwn.call(childPaths, i)) {
                callback.call(context, childPaths[i]);
            }
        }
    };
    Pp.map = function map(callback, context) {
        var result = [];
        this.each(function (childPath) {
            result.push(callback.call(this, childPath));
        }, context);
        return result;
    };
    Pp.filter = function filter(callback, context) {
        var result = [];
        this.each(function (childPath) {
            if (callback.call(this, childPath)) {
                result.push(childPath);
            }
        }, context);
        return result;
    };
    function emptyMoves() { }
    function getMoves(path, offset, start, end) {
        isArray.assert(path.value);
        if (offset === 0) {
            return emptyMoves;
        }
        var length = path.value.length;
        if (length < 1) {
            return emptyMoves;
        }
        var argc = arguments.length;
        if (argc === 2) {
            start = 0;
            end = length;
        }
        else if (argc === 3) {
            start = Math.max(start, 0);
            end = length;
        }
        else {
            start = Math.max(start, 0);
            end = Math.min(end, length);
        }
        isNumber.assert(start);
        isNumber.assert(end);
        var moves = Object.create(null);
        var cache = getChildCache(path);
        for (var i = start; i < end; ++i) {
            if (hasOwn.call(path.value, i)) {
                var childPath = path.get(i);
                if (childPath.name !== i) {
                    throw new Error("");
                }
                var newIndex = i + offset;
                childPath.name = newIndex;
                moves[newIndex] = childPath;
                delete cache[i];
            }
        }
        delete cache.length;
        return function () {
            for (var newIndex in moves) {
                var childPath = moves[newIndex];
                if (childPath.name !== +newIndex) {
                    throw new Error("");
                }
                cache[newIndex] = childPath;
                path.value[newIndex] = childPath.value;
            }
        };
    }
    Pp.shift = function shift() {
        var move = getMoves(this, -1);
        var result = this.value.shift();
        move();
        return result;
    };
    Pp.unshift = function unshift() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var move = getMoves(this, args.length);
        var result = this.value.unshift.apply(this.value, args);
        move();
        return result;
    };
    Pp.push = function push() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        isArray.assert(this.value);
        delete getChildCache(this).length;
        return this.value.push.apply(this.value, args);
    };
    Pp.pop = function pop() {
        isArray.assert(this.value);
        var cache = getChildCache(this);
        delete cache[this.value.length - 1];
        delete cache.length;
        return this.value.pop();
    };
    Pp.insertAt = function insertAt(index) {
        var argc = arguments.length;
        var move = getMoves(this, argc - 1, index);
        if (move === emptyMoves && argc <= 1) {
            return this;
        }
        index = Math.max(index, 0);
        for (var i = 1; i < argc; ++i) {
            this.value[index + i - 1] = arguments[i];
        }
        move();
        return this;
    };
    Pp.insertBefore = function insertBefore() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var pp = this.parentPath;
        var argc = args.length;
        var insertAtArgs = [this.name];
        for (var i = 0; i < argc; ++i) {
            insertAtArgs.push(args[i]);
        }
        return pp.insertAt.apply(pp, insertAtArgs);
    };
    Pp.insertAfter = function insertAfter() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var pp = this.parentPath;
        var argc = args.length;
        var insertAtArgs = [this.name + 1];
        for (var i = 0; i < argc; ++i) {
            insertAtArgs.push(args[i]);
        }
        return pp.insertAt.apply(pp, insertAtArgs);
    };
    function repairRelationshipWithParent(path) {
        if (!(path instanceof Path)) {
            throw new Error("");
        }
        var pp = path.parentPath;
        if (!pp) {
            // Orphan paths have no relationship to repair.
            return path;
        }
        var parentValue = pp.value;
        var parentCache = getChildCache(pp);
        // Make sure parentCache[path.name] is populated.
        if (parentValue[path.name] === path.value) {
            parentCache[path.name] = path;
        }
        else if (isArray.check(parentValue)) {
            // Something caused path.name to become out of date, so attempt to
            // recover by searching for path.value in parentValue.
            var i = parentValue.indexOf(path.value);
            if (i >= 0) {
                parentCache[path.name = i] = path;
            }
        }
        else {
            // If path.value disagrees with parentValue[path.name], and
            // path.name is not an array index, let path.value become the new
            // parentValue[path.name] and update parentCache accordingly.
            parentValue[path.name] = path.value;
            parentCache[path.name] = path;
        }
        if (parentValue[path.name] !== path.value) {
            throw new Error("");
        }
        if (path.parentPath.get(path.name) !== path) {
            throw new Error("");
        }
        return path;
    }
    Pp.replace = function replace(replacement) {
        var results = [];
        var parentValue = this.parentPath.value;
        var parentCache = getChildCache(this.parentPath);
        var count = arguments.length;
        repairRelationshipWithParent(this);
        if (isArray.check(parentValue)) {
            var originalLength = parentValue.length;
            var move = getMoves(this.parentPath, count - 1, this.name + 1);
            var spliceArgs = [this.name, 1];
            for (var i = 0; i < count; ++i) {
                spliceArgs.push(arguments[i]);
            }
            var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);
            if (splicedOut[0] !== this.value) {
                throw new Error("");
            }
            if (parentValue.length !== (originalLength - 1 + count)) {
                throw new Error("");
            }
            move();
            if (count === 0) {
                delete this.value;
                delete parentCache[this.name];
                this.__childCache = null;
            }
            else {
                if (parentValue[this.name] !== replacement) {
                    throw new Error("");
                }
                if (this.value !== replacement) {
                    this.value = replacement;
                    this.__childCache = null;
                }
                for (i = 0; i < count; ++i) {
                    results.push(this.parentPath.get(this.name + i));
                }
                if (results[0] !== this) {
                    throw new Error("");
                }
            }
        }
        else if (count === 1) {
            if (this.value !== replacement) {
                this.__childCache = null;
            }
            this.value = parentValue[this.name] = replacement;
            results.push(this);
        }
        else if (count === 0) {
            delete parentValue[this.name];
            delete this.value;
            this.__childCache = null;
            // Leave this path cached as parentCache[this.name], even though
            // it no longer has a value defined.
        }
        else {
            throw new Error("Could not replace path");
        }
        return results;
    };
    return Path;
}
exports.default = pathPlugin;
module.exports = exports["default"];

},{"./types":26}],24:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __importDefault(require("./types"));
var hasOwn = Object.prototype.hasOwnProperty;
function scopePlugin(fork) {
    var types = fork.use(types_1.default);
    var Type = types.Type;
    var namedTypes = types.namedTypes;
    var Node = namedTypes.Node;
    var Expression = namedTypes.Expression;
    var isArray = types.builtInTypes.array;
    var b = types.builders;
    var Scope = function Scope(path, parentScope) {
        if (!(this instanceof Scope)) {
            throw new Error("Scope constructor cannot be invoked without 'new'");
        }
        ScopeType.assert(path.value);
        var depth;
        if (parentScope) {
            if (!(parentScope instanceof Scope)) {
                throw new Error("");
            }
            depth = parentScope.depth + 1;
        }
        else {
            parentScope = null;
            depth = 0;
        }
        Object.defineProperties(this, {
            path: { value: path },
            node: { value: path.value },
            isGlobal: { value: !parentScope, enumerable: true },
            depth: { value: depth },
            parent: { value: parentScope },
            bindings: { value: {} },
            types: { value: {} },
        });
    };
    var scopeTypes = [
        // Program nodes introduce global scopes.
        namedTypes.Program,
        // Function is the supertype of FunctionExpression,
        // FunctionDeclaration, ArrowExpression, etc.
        namedTypes.Function,
        // In case you didn't know, the caught parameter shadows any variable
        // of the same name in an outer scope.
        namedTypes.CatchClause
    ];
    var ScopeType = Type.or.apply(Type, scopeTypes);
    Scope.isEstablishedBy = function (node) {
        return ScopeType.check(node);
    };
    var Sp = Scope.prototype;
    // Will be overridden after an instance lazily calls scanScope.
    Sp.didScan = false;
    Sp.declares = function (name) {
        this.scan();
        return hasOwn.call(this.bindings, name);
    };
    Sp.declaresType = function (name) {
        this.scan();
        return hasOwn.call(this.types, name);
    };
    Sp.declareTemporary = function (prefix) {
        if (prefix) {
            if (!/^[a-z$_]/i.test(prefix)) {
                throw new Error("");
            }
        }
        else {
            prefix = "t$";
        }
        // Include this.depth in the name to make sure the name does not
        // collide with any variables in nested/enclosing scopes.
        prefix += this.depth.toString(36) + "$";
        this.scan();
        var index = 0;
        while (this.declares(prefix + index)) {
            ++index;
        }
        var name = prefix + index;
        return this.bindings[name] = types.builders.identifier(name);
    };
    Sp.injectTemporary = function (identifier, init) {
        identifier || (identifier = this.declareTemporary());
        var bodyPath = this.path.get("body");
        if (namedTypes.BlockStatement.check(bodyPath.value)) {
            bodyPath = bodyPath.get("body");
        }
        bodyPath.unshift(b.variableDeclaration("var", [b.variableDeclarator(identifier, init || null)]));
        return identifier;
    };
    Sp.scan = function (force) {
        if (force || !this.didScan) {
            for (var name in this.bindings) {
                // Empty out this.bindings, just in cases.
                delete this.bindings[name];
            }
            scanScope(this.path, this.bindings, this.types);
            this.didScan = true;
        }
    };
    Sp.getBindings = function () {
        this.scan();
        return this.bindings;
    };
    Sp.getTypes = function () {
        this.scan();
        return this.types;
    };
    function scanScope(path, bindings, scopeTypes) {
        var node = path.value;
        ScopeType.assert(node);
        if (namedTypes.CatchClause.check(node)) {
            // A catch clause establishes a new scope but the only variable
            // bound in that scope is the catch parameter. Any other
            // declarations create bindings in the outer scope.
            addPattern(path.get("param"), bindings);
        }
        else {
            recursiveScanScope(path, bindings, scopeTypes);
        }
    }
    function recursiveScanScope(path, bindings, scopeTypes) {
        var node = path.value;
        if (path.parent &&
            namedTypes.FunctionExpression.check(path.parent.node) &&
            path.parent.node.id) {
            addPattern(path.parent.get("id"), bindings);
        }
        if (!node) {
            // None of the remaining cases matter if node is falsy.
        }
        else if (isArray.check(node)) {
            path.each(function (childPath) {
                recursiveScanChild(childPath, bindings, scopeTypes);
            });
        }
        else if (namedTypes.Function.check(node)) {
            path.get("params").each(function (paramPath) {
                addPattern(paramPath, bindings);
            });
            recursiveScanChild(path.get("body"), bindings, scopeTypes);
        }
        else if ((namedTypes.TypeAlias && namedTypes.TypeAlias.check(node)) ||
            (namedTypes.InterfaceDeclaration && namedTypes.InterfaceDeclaration.check(node)) ||
            (namedTypes.TSTypeAliasDeclaration && namedTypes.TSTypeAliasDeclaration.check(node)) ||
            (namedTypes.TSInterfaceDeclaration && namedTypes.TSInterfaceDeclaration.check(node))) {
            addTypePattern(path.get("id"), scopeTypes);
        }
        else if (namedTypes.VariableDeclarator.check(node)) {
            addPattern(path.get("id"), bindings);
            recursiveScanChild(path.get("init"), bindings, scopeTypes);
        }
        else if (node.type === "ImportSpecifier" ||
            node.type === "ImportNamespaceSpecifier" ||
            node.type === "ImportDefaultSpecifier") {
            addPattern(
            // Esprima used to use the .name field to refer to the local
            // binding identifier for ImportSpecifier nodes, but .id for
            // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.
            // ESTree/Acorn/ESpree use .local for all three node types.
            path.get(node.local ? "local" :
                node.name ? "name" : "id"), bindings);
        }
        else if (Node.check(node) && !Expression.check(node)) {
            types.eachField(node, function (name, child) {
                var childPath = path.get(name);
                if (!pathHasValue(childPath, child)) {
                    throw new Error("");
                }
                recursiveScanChild(childPath, bindings, scopeTypes);
            });
        }
    }
    function pathHasValue(path, value) {
        if (path.value === value) {
            return true;
        }
        // Empty arrays are probably produced by defaults.emptyArray, in which
        // case is makes sense to regard them as equivalent, if not ===.
        if (Array.isArray(path.value) &&
            path.value.length === 0 &&
            Array.isArray(value) &&
            value.length === 0) {
            return true;
        }
        return false;
    }
    function recursiveScanChild(path, bindings, scopeTypes) {
        var node = path.value;
        if (!node || Expression.check(node)) {
            // Ignore falsy values and Expressions.
        }
        else if (namedTypes.FunctionDeclaration.check(node) &&
            node.id !== null) {
            addPattern(path.get("id"), bindings);
        }
        else if (namedTypes.ClassDeclaration &&
            namedTypes.ClassDeclaration.check(node)) {
            addPattern(path.get("id"), bindings);
        }
        else if (ScopeType.check(node)) {
            if (namedTypes.CatchClause.check(node) &&
                // TODO Broaden this to accept any pattern.
                namedTypes.Identifier.check(node.param)) {
                var catchParamName = node.param.name;
                var hadBinding = hasOwn.call(bindings, catchParamName);
                // Any declarations that occur inside the catch body that do
                // not have the same name as the catch parameter should count
                // as bindings in the outer scope.
                recursiveScanScope(path.get("body"), bindings, scopeTypes);
                // If a new binding matching the catch parameter name was
                // created while scanning the catch body, ignore it because it
                // actually refers to the catch parameter and not the outer
                // scope that we're currently scanning.
                if (!hadBinding) {
                    delete bindings[catchParamName];
                }
            }
        }
        else {
            recursiveScanScope(path, bindings, scopeTypes);
        }
    }
    function addPattern(patternPath, bindings) {
        var pattern = patternPath.value;
        namedTypes.Pattern.assert(pattern);
        if (namedTypes.Identifier.check(pattern)) {
            if (hasOwn.call(bindings, pattern.name)) {
                bindings[pattern.name].push(patternPath);
            }
            else {
                bindings[pattern.name] = [patternPath];
            }
        }
        else if (namedTypes.AssignmentPattern &&
            namedTypes.AssignmentPattern.check(pattern)) {
            addPattern(patternPath.get('left'), bindings);
        }
        else if (namedTypes.ObjectPattern &&
            namedTypes.ObjectPattern.check(pattern)) {
            patternPath.get('properties').each(function (propertyPath) {
                var property = propertyPath.value;
                if (namedTypes.Pattern.check(property)) {
                    addPattern(propertyPath, bindings);
                }
                else if (namedTypes.Property.check(property)) {
                    addPattern(propertyPath.get('value'), bindings);
                }
                else if (namedTypes.SpreadProperty &&
                    namedTypes.SpreadProperty.check(property)) {
                    addPattern(propertyPath.get('argument'), bindings);
                }
            });
        }
        else if (namedTypes.ArrayPattern &&
            namedTypes.ArrayPattern.check(pattern)) {
            patternPath.get('elements').each(function (elementPath) {
                var element = elementPath.value;
                if (namedTypes.Pattern.check(element)) {
                    addPattern(elementPath, bindings);
                }
                else if (namedTypes.SpreadElement &&
                    namedTypes.SpreadElement.check(element)) {
                    addPattern(elementPath.get("argument"), bindings);
                }
            });
        }
        else if (namedTypes.PropertyPattern &&
            namedTypes.PropertyPattern.check(pattern)) {
            addPattern(patternPath.get('pattern'), bindings);
        }
        else if ((namedTypes.SpreadElementPattern &&
            namedTypes.SpreadElementPattern.check(pattern)) ||
            (namedTypes.SpreadPropertyPattern &&
                namedTypes.SpreadPropertyPattern.check(pattern))) {
            addPattern(patternPath.get('argument'), bindings);
        }
    }
    function addTypePattern(patternPath, types) {
        var pattern = patternPath.value;
        namedTypes.Pattern.assert(pattern);
        if (namedTypes.Identifier.check(pattern)) {
            if (hasOwn.call(types, pattern.name)) {
                types[pattern.name].push(patternPath);
            }
            else {
                types[pattern.name] = [patternPath];
            }
        }
    }
    Sp.lookup = function (name) {
        for (var scope = this; scope; scope = scope.parent)
            if (scope.declares(name))
                break;
        return scope;
    };
    Sp.lookupType = function (name) {
        for (var scope = this; scope; scope = scope.parent)
            if (scope.declaresType(name))
                break;
        return scope;
    };
    Sp.getGlobalScope = function () {
        var scope = this;
        while (!scope.isGlobal)
            scope = scope.parent;
        return scope;
    };
    return Scope;
}
exports.default = scopePlugin;
module.exports = exports["default"];

},{"./types":26}],25:[function(require,module,exports){
"use strict";;
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __importDefault(require("./types"));
function default_1(fork) {
    var types = fork.use(types_1.default);
    var Type = types.Type;
    var builtin = types.builtInTypes;
    var isNumber = builtin.number;
    // An example of constructing a new type with arbitrary constraints from
    // an existing type.
    function geq(than) {
        return Type.from(function (value) { return isNumber.check(value) && value >= than; }, isNumber + " >= " + than);
    }
    ;
    // Default value-returning functions that may optionally be passed as a
    // third argument to Def.prototype.field.
    var defaults = {
        // Functions were used because (among other reasons) that's the most
        // elegant way to allow for the emptyArray one always to give a new
        // array instance.
        "null": function () { return null; },
        "emptyArray": function () { return []; },
        "false": function () { return false; },
        "true": function () { return true; },
        "undefined": function () { },
        "use strict": function () { return "use strict"; }
    };
    var naiveIsPrimitive = Type.or(builtin.string, builtin.number, builtin.boolean, builtin.null, builtin.undefined);
    var isPrimitive = Type.from(function (value) {
        if (value === null)
            return true;
        var type = typeof value;
        if (type === "object" ||
            type === "function") {
            return false;
        }
        return true;
    }, naiveIsPrimitive.toString());
    return {
        geq: geq,
        defaults: defaults,
        isPrimitive: isPrimitive,
    };
}
exports.default = default_1;
module.exports = exports["default"];

},{"./types":26}],26:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Op = Object.prototype;
var objToStr = Op.toString;
var hasOwn = Op.hasOwnProperty;
var BaseType = /** @class */ (function () {
    function BaseType() {
    }
    BaseType.prototype.assert = function (value, deep) {
        if (!this.check(value, deep)) {
            var str = shallowStringify(value);
            throw new Error(str + " does not match type " + this);
        }
        return true;
    };
    BaseType.prototype.arrayOf = function () {
        var elemType = this;
        return new ArrayType(elemType);
    };
    return BaseType;
}());
var ArrayType = /** @class */ (function (_super) {
    __extends(ArrayType, _super);
    function ArrayType(elemType) {
        var _this = _super.call(this) || this;
        _this.elemType = elemType;
        _this.kind = "ArrayType";
        return _this;
    }
    ArrayType.prototype.toString = function () {
        return "[" + this.elemType + "]";
    };
    ArrayType.prototype.check = function (value, deep) {
        var _this = this;
        return Array.isArray(value) && value.every(function (elem) { return _this.elemType.check(elem, deep); });
    };
    return ArrayType;
}(BaseType));
var IdentityType = /** @class */ (function (_super) {
    __extends(IdentityType, _super);
    function IdentityType(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.kind = "IdentityType";
        return _this;
    }
    IdentityType.prototype.toString = function () {
        return String(this.value);
    };
    IdentityType.prototype.check = function (value, deep) {
        var result = value === this.value;
        if (!result && typeof deep === "function") {
            deep(this, value);
        }
        return result;
    };
    return IdentityType;
}(BaseType));
var ObjectType = /** @class */ (function (_super) {
    __extends(ObjectType, _super);
    function ObjectType(fields) {
        var _this = _super.call(this) || this;
        _this.fields = fields;
        _this.kind = "ObjectType";
        return _this;
    }
    ObjectType.prototype.toString = function () {
        return "{ " + this.fields.join(", ") + " }";
    };
    ObjectType.prototype.check = function (value, deep) {
        return (objToStr.call(value) === objToStr.call({}) &&
            this.fields.every(function (field) {
                return field.type.check(value[field.name], deep);
            }));
    };
    return ObjectType;
}(BaseType));
var OrType = /** @class */ (function (_super) {
    __extends(OrType, _super);
    function OrType(types) {
        var _this = _super.call(this) || this;
        _this.types = types;
        _this.kind = "OrType";
        return _this;
    }
    OrType.prototype.toString = function () {
        return this.types.join(" | ");
    };
    OrType.prototype.check = function (value, deep) {
        return this.types.some(function (type) {
            return type.check(value, deep);
        });
    };
    return OrType;
}(BaseType));
var PredicateType = /** @class */ (function (_super) {
    __extends(PredicateType, _super);
    function PredicateType(name, predicate) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.predicate = predicate;
        _this.kind = "PredicateType";
        return _this;
    }
    PredicateType.prototype.toString = function () {
        return this.name;
    };
    PredicateType.prototype.check = function (value, deep) {
        var result = this.predicate(value, deep);
        if (!result && typeof deep === "function") {
            deep(this, value);
        }
        return result;
    };
    return PredicateType;
}(BaseType));
var Def = /** @class */ (function () {
    function Def(type, typeName) {
        this.type = type;
        this.typeName = typeName;
        this.baseNames = [];
        this.ownFields = Object.create(null);
        // Includes own typeName. Populated during finalization.
        this.allSupertypes = Object.create(null);
        // Linear inheritance hierarchy. Populated during finalization.
        this.supertypeList = [];
        // Includes inherited fields.
        this.allFields = Object.create(null);
        // Non-hidden keys of allFields.
        this.fieldNames = [];
        // This property will be overridden as true by individual Def instances
        // when they are finalized.
        this.finalized = false;
        // False by default until .build(...) is called on an instance.
        this.buildable = false;
        this.buildParams = [];
    }
    Def.prototype.isSupertypeOf = function (that) {
        if (that instanceof Def) {
            if (this.finalized !== true ||
                that.finalized !== true) {
                throw new Error("");
            }
            return hasOwn.call(that.allSupertypes, this.typeName);
        }
        else {
            throw new Error(that + " is not a Def");
        }
    };
    Def.prototype.checkAllFields = function (value, deep) {
        var allFields = this.allFields;
        if (this.finalized !== true) {
            throw new Error("" + this.typeName);
        }
        function checkFieldByName(name) {
            var field = allFields[name];
            var type = field.type;
            var child = field.getValue(value);
            return type.check(child, deep);
        }
        return value !== null &&
            typeof value === "object" &&
            Object.keys(allFields).every(checkFieldByName);
    };
    Def.prototype.bases = function () {
        var supertypeNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            supertypeNames[_i] = arguments[_i];
        }
        var bases = this.baseNames;
        if (this.finalized) {
            if (supertypeNames.length !== bases.length) {
                throw new Error("");
            }
            for (var i = 0; i < supertypeNames.length; i++) {
                if (supertypeNames[i] !== bases[i]) {
                    throw new Error("");
                }
            }
            return this;
        }
        supertypeNames.forEach(function (baseName) {
            // This indexOf lookup may be O(n), but the typical number of base
            // names is very small, and indexOf is a native Array method.
            if (bases.indexOf(baseName) < 0) {
                bases.push(baseName);
            }
        });
        return this; // For chaining.
    };
    return Def;
}());
exports.Def = Def;
var Field = /** @class */ (function () {
    function Field(name, type, defaultFn, hidden) {
        this.name = name;
        this.type = type;
        this.defaultFn = defaultFn;
        this.hidden = !!hidden;
    }
    Field.prototype.toString = function () {
        return JSON.stringify(this.name) + ": " + this.type;
    };
    Field.prototype.getValue = function (obj) {
        var value = obj[this.name];
        if (typeof value !== "undefined") {
            return value;
        }
        if (typeof this.defaultFn === "function") {
            value = this.defaultFn.call(obj);
        }
        return value;
    };
    return Field;
}());
function shallowStringify(value) {
    if (Array.isArray(value)) {
        return "[" + value.map(shallowStringify).join(", ") + "]";
    }
    if (value && typeof value === "object") {
        return "{ " + Object.keys(value).map(function (key) {
            return key + ": " + value[key];
        }).join(", ") + " }";
    }
    return JSON.stringify(value);
}
function typesPlugin(_fork) {
    var Type = {
        or: function () {
            var types = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                types[_i] = arguments[_i];
            }
            return new OrType(types.map(function (type) { return Type.from(type); }));
        },
        from: function (value, name) {
            if (value instanceof ArrayType ||
                value instanceof IdentityType ||
                value instanceof ObjectType ||
                value instanceof OrType ||
                value instanceof PredicateType) {
                return value;
            }
            // The Def type is used as a helper for constructing compound
            // interface types for AST nodes.
            if (value instanceof Def) {
                return value.type;
            }
            // Support [ElemType] syntax.
            if (isArray.check(value)) {
                if (value.length !== 1) {
                    throw new Error("only one element type is permitted for typed arrays");
                }
                return new ArrayType(Type.from(value[0]));
            }
            // Support { someField: FieldType, ... } syntax.
            if (isObject.check(value)) {
                return new ObjectType(Object.keys(value).map(function (name) {
                    return new Field(name, Type.from(value[name], name));
                }));
            }
            if (typeof value === "function") {
                var bicfIndex = builtInCtorFns.indexOf(value);
                if (bicfIndex >= 0) {
                    return builtInCtorTypes[bicfIndex];
                }
                if (typeof name !== "string") {
                    throw new Error("missing name");
                }
                return new PredicateType(name, value);
            }
            // As a last resort, toType returns a type that matches any value that
            // is === from. This is primarily useful for literal values like
            // toType(null), but it has the additional advantage of allowing
            // toType to be a total function.
            return new IdentityType(value);
        },
        // Define a type whose name is registered in a namespace (the defCache) so
        // that future definitions will return the same type given the same name.
        // In particular, this system allows for circular and forward definitions.
        // The Def object d returned from Type.def may be used to configure the
        // type d.type by calling methods such as d.bases, d.build, and d.field.
        def: function (typeName) {
            return hasOwn.call(defCache, typeName)
                ? defCache[typeName]
                : defCache[typeName] = new DefImpl(typeName);
        },
        hasDef: function (typeName) {
            return hasOwn.call(defCache, typeName);
        }
    };
    var builtInCtorFns = [];
    var builtInCtorTypes = [];
    var builtInTypes = {};
    function defBuiltInType(example, name) {
        var objStr = objToStr.call(example);
        var type = new PredicateType(name, function (value) { return objToStr.call(value) === objStr; });
        builtInTypes[name] = type;
        if (example && typeof example.constructor === "function") {
            builtInCtorFns.push(example.constructor);
            builtInCtorTypes.push(type);
        }
        return type;
    }
    // These types check the underlying [[Class]] attribute of the given
    // value, rather than using the problematic typeof operator. Note however
    // that no subtyping is considered; so, for instance, isObject.check
    // returns false for [], /./, new Date, and null.
    var isString = defBuiltInType("truthy", "string");
    var isFunction = defBuiltInType(function () { }, "function");
    var isArray = defBuiltInType([], "array");
    var isObject = defBuiltInType({}, "object");
    var isRegExp = defBuiltInType(/./, "RegExp");
    var isDate = defBuiltInType(new Date, "Date");
    var isNumber = defBuiltInType(3, "number");
    var isBoolean = defBuiltInType(true, "boolean");
    var isNull = defBuiltInType(null, "null");
    var isUndefined = defBuiltInType(void 0, "undefined");
    // In order to return the same Def instance every time Type.def is called
    // with a particular name, those instances need to be stored in a cache.
    var defCache = Object.create(null);
    function defFromValue(value) {
        if (value && typeof value === "object") {
            var type = value.type;
            if (typeof type === "string" &&
                hasOwn.call(defCache, type)) {
                var d = defCache[type];
                if (d.finalized) {
                    return d;
                }
            }
        }
        return null;
    }
    var DefImpl = /** @class */ (function (_super) {
        __extends(DefImpl, _super);
        function DefImpl(typeName) {
            var _this = _super.call(this, new PredicateType(typeName, function (value, deep) { return _this.check(value, deep); }), typeName) || this;
            return _this;
        }
        DefImpl.prototype.check = function (value, deep) {
            if (this.finalized !== true) {
                throw new Error("prematurely checking unfinalized type " + this.typeName);
            }
            // A Def type can only match an object value.
            if (value === null || typeof value !== "object") {
                return false;
            }
            var vDef = defFromValue(value);
            if (!vDef) {
                // If we couldn't infer the Def associated with the given value,
                // and we expected it to be a SourceLocation or a Position, it was
                // probably just missing a "type" field (because Esprima does not
                // assign a type property to such nodes). Be optimistic and let
                // this.checkAllFields make the final decision.
                if (this.typeName === "SourceLocation" ||
                    this.typeName === "Position") {
                    return this.checkAllFields(value, deep);
                }
                // Calling this.checkAllFields for any other type of node is both
                // bad for performance and way too forgiving.
                return false;
            }
            // If checking deeply and vDef === this, then we only need to call
            // checkAllFields once. Calling checkAllFields is too strict when deep
            // is false, because then we only care about this.isSupertypeOf(vDef).
            if (deep && vDef === this) {
                return this.checkAllFields(value, deep);
            }
            // In most cases we rely exclusively on isSupertypeOf to make O(1)
            // subtyping determinations. This suffices in most situations outside
            // of unit tests, since interface conformance is checked whenever new
            // instances are created using builder functions.
            if (!this.isSupertypeOf(vDef)) {
                return false;
            }
            // The exception is when deep is true; then, we recursively check all
            // fields.
            if (!deep) {
                return true;
            }
            // Use the more specific Def (vDef) to perform the deep check, but
            // shallow-check fields defined by the less specific Def (this).
            return vDef.checkAllFields(value, deep)
                && this.checkAllFields(value, false);
        };
        DefImpl.prototype.build = function () {
            var _this = this;
            var buildParams = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                buildParams[_i] = arguments[_i];
            }
            // Calling Def.prototype.build multiple times has the effect of merely
            // redefining this property.
            this.buildParams = buildParams;
            if (this.buildable) {
                // If this Def is already buildable, update self.buildParams and
                // continue using the old builder function.
                return this;
            }
            // Every buildable type will have its "type" field filled in
            // automatically. This includes types that are not subtypes of Node,
            // like SourceLocation, but that seems harmless (TODO?).
            this.field("type", String, function () { return _this.typeName; });
            // Override Dp.buildable for this Def instance.
            this.buildable = true;
            var addParam = function (built, param, arg, isArgAvailable) {
                if (hasOwn.call(built, param))
                    return;
                var all = _this.allFields;
                if (!hasOwn.call(all, param)) {
                    throw new Error("" + param);
                }
                var field = all[param];
                var type = field.type;
                var value;
                if (isArgAvailable) {
                    value = arg;
                }
                else if (field.defaultFn) {
                    // Expose the partially-built object to the default
                    // function as its `this` object.
                    value = field.defaultFn.call(built);
                }
                else {
                    var message = "no value or default function given for field " +
                        JSON.stringify(param) + " of " + _this.typeName + "(" +
                        _this.buildParams.map(function (name) {
                            return all[name];
                        }).join(", ") + ")";
                    throw new Error(message);
                }
                if (!type.check(value)) {
                    throw new Error(shallowStringify(value) +
                        " does not match field " + field +
                        " of type " + _this.typeName);
                }
                built[param] = value;
            };
            // Calling the builder function will construct an instance of the Def,
            // with positional arguments mapped to the fields original passed to .build.
            // If not enough arguments are provided, the default value for the remaining fields
            // will be used.
            var builder = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var argc = args.length;
                if (!_this.finalized) {
                    throw new Error("attempting to instantiate unfinalized type " +
                        _this.typeName);
                }
                var built = Object.create(nodePrototype);
                _this.buildParams.forEach(function (param, i) {
                    if (i < argc) {
                        addParam(built, param, args[i], true);
                    }
                    else {
                        addParam(built, param, null, false);
                    }
                });
                Object.keys(_this.allFields).forEach(function (param) {
                    // Use the default value.
                    addParam(built, param, null, false);
                });
                // Make sure that the "type" field was filled automatically.
                if (built.type !== _this.typeName) {
                    throw new Error("");
                }
                return built;
            };
            // Calling .from on the builder function will construct an instance of the Def,
            // using field values from the passed object. For fields missing from the passed object,
            // their default value will be used.
            builder.from = function (obj) {
                if (!_this.finalized) {
                    throw new Error("attempting to instantiate unfinalized type " +
                        _this.typeName);
                }
                var built = Object.create(nodePrototype);
                Object.keys(_this.allFields).forEach(function (param) {
                    if (hasOwn.call(obj, param)) {
                        addParam(built, param, obj[param], true);
                    }
                    else {
                        addParam(built, param, null, false);
                    }
                });
                // Make sure that the "type" field was filled automatically.
                if (built.type !== _this.typeName) {
                    throw new Error("");
                }
                return built;
            };
            Object.defineProperty(builders, getBuilderName(this.typeName), {
                enumerable: true,
                value: builder
            });
            return this;
        };
        // The reason fields are specified using .field(...) instead of an object
        // literal syntax is somewhat subtle: the object literal syntax would
        // support only one key and one value, but with .field(...) we can pass
        // any number of arguments to specify the field.
        DefImpl.prototype.field = function (name, type, defaultFn, hidden) {
            if (this.finalized) {
                console.error("Ignoring attempt to redefine field " +
                    JSON.stringify(name) + " of finalized type " +
                    JSON.stringify(this.typeName));
                return this;
            }
            this.ownFields[name] = new Field(name, Type.from(type), defaultFn, hidden);
            return this; // For chaining.
        };
        DefImpl.prototype.finalize = function () {
            var _this = this;
            // It's not an error to finalize a type more than once, but only the
            // first call to .finalize does anything.
            if (!this.finalized) {
                var allFields = this.allFields;
                var allSupertypes = this.allSupertypes;
                this.baseNames.forEach(function (name) {
                    var def = defCache[name];
                    if (def instanceof Def) {
                        def.finalize();
                        extend(allFields, def.allFields);
                        extend(allSupertypes, def.allSupertypes);
                    }
                    else {
                        var message = "unknown supertype name " +
                            JSON.stringify(name) +
                            " for subtype " +
                            JSON.stringify(_this.typeName);
                        throw new Error(message);
                    }
                });
                // TODO Warn if fields are overridden with incompatible types.
                extend(allFields, this.ownFields);
                allSupertypes[this.typeName] = this;
                this.fieldNames.length = 0;
                for (var fieldName in allFields) {
                    if (hasOwn.call(allFields, fieldName) &&
                        !allFields[fieldName].hidden) {
                        this.fieldNames.push(fieldName);
                    }
                }
                // Types are exported only once they have been finalized.
                Object.defineProperty(namedTypes, this.typeName, {
                    enumerable: true,
                    value: this.type
                });
                this.finalized = true;
                // A linearization of the inheritance hierarchy.
                populateSupertypeList(this.typeName, this.supertypeList);
                if (this.buildable &&
                    this.supertypeList.lastIndexOf("Expression") >= 0) {
                    wrapExpressionBuilderWithStatement(this.typeName);
                }
            }
        };
        return DefImpl;
    }(Def));
    // Note that the list returned by this function is a copy of the internal
    // supertypeList, *without* the typeName itself as the first element.
    function getSupertypeNames(typeName) {
        if (!hasOwn.call(defCache, typeName)) {
            throw new Error("");
        }
        var d = defCache[typeName];
        if (d.finalized !== true) {
            throw new Error("");
        }
        return d.supertypeList.slice(1);
    }
    // Returns an object mapping from every known type in the defCache to the
    // most specific supertype whose name is an own property of the candidates
    // object.
    function computeSupertypeLookupTable(candidates) {
        var table = {};
        var typeNames = Object.keys(defCache);
        var typeNameCount = typeNames.length;
        for (var i = 0; i < typeNameCount; ++i) {
            var typeName = typeNames[i];
            var d = defCache[typeName];
            if (d.finalized !== true) {
                throw new Error("" + typeName);
            }
            for (var j = 0; j < d.supertypeList.length; ++j) {
                var superTypeName = d.supertypeList[j];
                if (hasOwn.call(candidates, superTypeName)) {
                    table[typeName] = superTypeName;
                    break;
                }
            }
        }
        return table;
    }
    var builders = Object.create(null);
    // This object is used as prototype for any node created by a builder.
    var nodePrototype = {};
    // Call this function to define a new method to be shared by all AST
    // nodes. The replaced method (if any) is returned for easy wrapping.
    function defineMethod(name, func) {
        var old = nodePrototype[name];
        // Pass undefined as func to delete nodePrototype[name].
        if (isUndefined.check(func)) {
            delete nodePrototype[name];
        }
        else {
            isFunction.assert(func);
            Object.defineProperty(nodePrototype, name, {
                enumerable: true,
                configurable: true,
                value: func
            });
        }
        return old;
    }
    function getBuilderName(typeName) {
        return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {
            var len = upperCasePrefix.length;
            switch (len) {
                case 0: return "";
                // If there's only one initial capital letter, just lower-case it.
                case 1: return upperCasePrefix.toLowerCase();
                default:
                    // If there's more than one initial capital letter, lower-case
                    // all but the last one, so that XMLDefaultDeclaration (for
                    // example) becomes xmlDefaultDeclaration.
                    return upperCasePrefix.slice(0, len - 1).toLowerCase() +
                        upperCasePrefix.charAt(len - 1);
            }
        });
    }
    function getStatementBuilderName(typeName) {
        typeName = getBuilderName(typeName);
        return typeName.replace(/(Expression)?$/, "Statement");
    }
    var namedTypes = {};
    // Like Object.keys, but aware of what fields each AST type should have.
    function getFieldNames(object) {
        var d = defFromValue(object);
        if (d) {
            return d.fieldNames.slice(0);
        }
        if ("type" in object) {
            throw new Error("did not recognize object of type " +
                JSON.stringify(object.type));
        }
        return Object.keys(object);
    }
    // Get the value of an object property, taking object.type and default
    // functions into account.
    function getFieldValue(object, fieldName) {
        var d = defFromValue(object);
        if (d) {
            var field = d.allFields[fieldName];
            if (field) {
                return field.getValue(object);
            }
        }
        return object && object[fieldName];
    }
    // Iterate over all defined fields of an object, including those missing
    // or undefined, passing each field name and effective value (as returned
    // by getFieldValue) to the callback. If the object has no corresponding
    // Def, the callback will never be called.
    function eachField(object, callback, context) {
        getFieldNames(object).forEach(function (name) {
            callback.call(this, name, getFieldValue(object, name));
        }, context);
    }
    // Similar to eachField, except that iteration stops as soon as the
    // callback returns a truthy value. Like Array.prototype.some, the final
    // result is either true or false to indicates whether the callback
    // returned true for any element or not.
    function someField(object, callback, context) {
        return getFieldNames(object).some(function (name) {
            return callback.call(this, name, getFieldValue(object, name));
        }, context);
    }
    // Adds an additional builder for Expression subtypes
    // that wraps the built Expression in an ExpressionStatements.
    function wrapExpressionBuilderWithStatement(typeName) {
        var wrapperName = getStatementBuilderName(typeName);
        // skip if the builder already exists
        if (builders[wrapperName])
            return;
        // the builder function to wrap with builders.ExpressionStatement
        var wrapped = builders[getBuilderName(typeName)];
        // skip if there is nothing to wrap
        if (!wrapped)
            return;
        var builder = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return builders.expressionStatement(wrapped.apply(builders, args));
        };
        builder.from = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return builders.expressionStatement(wrapped.from.apply(builders, args));
        };
        builders[wrapperName] = builder;
    }
    function populateSupertypeList(typeName, list) {
        list.length = 0;
        list.push(typeName);
        var lastSeen = Object.create(null);
        for (var pos = 0; pos < list.length; ++pos) {
            typeName = list[pos];
            var d = defCache[typeName];
            if (d.finalized !== true) {
                throw new Error("");
            }
            // If we saw typeName earlier in the breadth-first traversal,
            // delete the last-seen occurrence.
            if (hasOwn.call(lastSeen, typeName)) {
                delete list[lastSeen[typeName]];
            }
            // Record the new index of the last-seen occurrence of typeName.
            lastSeen[typeName] = pos;
            // Enqueue the base names of this type.
            list.push.apply(list, d.baseNames);
        }
        // Compaction loop to remove array holes.
        for (var to = 0, from = to, len = list.length; from < len; ++from) {
            if (hasOwn.call(list, from)) {
                list[to++] = list[from];
            }
        }
        list.length = to;
    }
    function extend(into, from) {
        Object.keys(from).forEach(function (name) {
            into[name] = from[name];
        });
        return into;
    }
    function finalize() {
        Object.keys(defCache).forEach(function (name) {
            defCache[name].finalize();
        });
    }
    return {
        Type: Type,
        builtInTypes: builtInTypes,
        getSupertypeNames: getSupertypeNames,
        computeSupertypeLookupTable: computeSupertypeLookupTable,
        builders: builders,
        defineMethod: defineMethod,
        getBuilderName: getBuilderName,
        getStatementBuilderName: getStatementBuilderName,
        namedTypes: namedTypes,
        getFieldNames: getFieldNames,
        getFieldValue: getFieldValue,
        eachField: eachField,
        someField: someField,
        finalize: finalize,
    };
}
exports.default = typesPlugin;
;

},{}],27:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fork_1 = __importDefault(require("./fork"));
var core_1 = __importDefault(require("./def/core"));
var es6_1 = __importDefault(require("./def/es6"));
var es7_1 = __importDefault(require("./def/es7"));
var es2020_1 = __importDefault(require("./def/es2020"));
var jsx_1 = __importDefault(require("./def/jsx"));
var flow_1 = __importDefault(require("./def/flow"));
var esprima_1 = __importDefault(require("./def/esprima"));
var babel_1 = __importDefault(require("./def/babel"));
var typescript_1 = __importDefault(require("./def/typescript"));
var es_proposals_1 = __importDefault(require("./def/es-proposals"));
var namedTypes_1 = require("./gen/namedTypes");
exports.namedTypes = namedTypes_1.namedTypes;
var _a = fork_1.default([
    // This core module of AST types captures ES5 as it is parsed today by
    // git://github.com/ariya/esprima.git#master.
    core_1.default,
    // Feel free to add to or remove from this list of extension modules to
    // configure the precise type hierarchy that you need.
    es6_1.default,
    es7_1.default,
    es2020_1.default,
    jsx_1.default,
    flow_1.default,
    esprima_1.default,
    babel_1.default,
    typescript_1.default,
    es_proposals_1.default,
]), astNodesAreEquivalent = _a.astNodesAreEquivalent, builders = _a.builders, builtInTypes = _a.builtInTypes, defineMethod = _a.defineMethod, eachField = _a.eachField, finalize = _a.finalize, getBuilderName = _a.getBuilderName, getFieldNames = _a.getFieldNames, getFieldValue = _a.getFieldValue, getSupertypeNames = _a.getSupertypeNames, n = _a.namedTypes, NodePath = _a.NodePath, Path = _a.Path, PathVisitor = _a.PathVisitor, someField = _a.someField, Type = _a.Type, use = _a.use, visit = _a.visit;
exports.astNodesAreEquivalent = astNodesAreEquivalent;
exports.builders = builders;
exports.builtInTypes = builtInTypes;
exports.defineMethod = defineMethod;
exports.eachField = eachField;
exports.finalize = finalize;
exports.getBuilderName = getBuilderName;
exports.getFieldNames = getFieldNames;
exports.getFieldValue = getFieldValue;
exports.getSupertypeNames = getSupertypeNames;
exports.NodePath = NodePath;
exports.Path = Path;
exports.PathVisitor = PathVisitor;
exports.someField = someField;
exports.Type = Type;
exports.use = use;
exports.visit = visit;
// Populate the exported fields of the namedTypes namespace, while still
// retaining its member types.
Object.assign(namedTypes_1.namedTypes, n);

},{"./def/babel":7,"./def/core":8,"./def/es-proposals":9,"./def/es2020":10,"./def/es6":11,"./def/es7":12,"./def/esprima":13,"./def/flow":14,"./def/jsx":15,"./def/typescript":17,"./fork":18,"./gen/namedTypes":19}],28:[function(require,module,exports){

},{}],29:[function(require,module,exports){
arguments[4][28][0].apply(exports,arguments)
},{"dup":28}],30:[function(require,module,exports){
module.exports={
  "O_RDONLY": 0,
  "O_WRONLY": 1,
  "O_RDWR": 2,
  "S_IFMT": 61440,
  "S_IFREG": 32768,
  "S_IFDIR": 16384,
  "S_IFCHR": 8192,
  "S_IFBLK": 24576,
  "S_IFIFO": 4096,
  "S_IFLNK": 40960,
  "S_IFSOCK": 49152,
  "O_CREAT": 512,
  "O_EXCL": 2048,
  "O_NOCTTY": 131072,
  "O_TRUNC": 1024,
  "O_APPEND": 8,
  "O_DIRECTORY": 1048576,
  "O_NOFOLLOW": 256,
  "O_SYNC": 128,
  "O_SYMLINK": 2097152,
  "O_NONBLOCK": 4,
  "S_IRWXU": 448,
  "S_IRUSR": 256,
  "S_IWUSR": 128,
  "S_IXUSR": 64,
  "S_IRWXG": 56,
  "S_IRGRP": 32,
  "S_IWGRP": 16,
  "S_IXGRP": 8,
  "S_IRWXO": 7,
  "S_IROTH": 4,
  "S_IWOTH": 2,
  "S_IXOTH": 1,
  "E2BIG": 7,
  "EACCES": 13,
  "EADDRINUSE": 48,
  "EADDRNOTAVAIL": 49,
  "EAFNOSUPPORT": 47,
  "EAGAIN": 35,
  "EALREADY": 37,
  "EBADF": 9,
  "EBADMSG": 94,
  "EBUSY": 16,
  "ECANCELED": 89,
  "ECHILD": 10,
  "ECONNABORTED": 53,
  "ECONNREFUSED": 61,
  "ECONNRESET": 54,
  "EDEADLK": 11,
  "EDESTADDRREQ": 39,
  "EDOM": 33,
  "EDQUOT": 69,
  "EEXIST": 17,
  "EFAULT": 14,
  "EFBIG": 27,
  "EHOSTUNREACH": 65,
  "EIDRM": 90,
  "EILSEQ": 92,
  "EINPROGRESS": 36,
  "EINTR": 4,
  "EINVAL": 22,
  "EIO": 5,
  "EISCONN": 56,
  "EISDIR": 21,
  "ELOOP": 62,
  "EMFILE": 24,
  "EMLINK": 31,
  "EMSGSIZE": 40,
  "EMULTIHOP": 95,
  "ENAMETOOLONG": 63,
  "ENETDOWN": 50,
  "ENETRESET": 52,
  "ENETUNREACH": 51,
  "ENFILE": 23,
  "ENOBUFS": 55,
  "ENODATA": 96,
  "ENODEV": 19,
  "ENOENT": 2,
  "ENOEXEC": 8,
  "ENOLCK": 77,
  "ENOLINK": 97,
  "ENOMEM": 12,
  "ENOMSG": 91,
  "ENOPROTOOPT": 42,
  "ENOSPC": 28,
  "ENOSR": 98,
  "ENOSTR": 99,
  "ENOSYS": 78,
  "ENOTCONN": 57,
  "ENOTDIR": 20,
  "ENOTEMPTY": 66,
  "ENOTSOCK": 38,
  "ENOTSUP": 45,
  "ENOTTY": 25,
  "ENXIO": 6,
  "EOPNOTSUPP": 102,
  "EOVERFLOW": 84,
  "EPERM": 1,
  "EPIPE": 32,
  "EPROTO": 100,
  "EPROTONOSUPPORT": 43,
  "EPROTOTYPE": 41,
  "ERANGE": 34,
  "EROFS": 30,
  "ESPIPE": 29,
  "ESRCH": 3,
  "ESTALE": 70,
  "ETIME": 101,
  "ETIMEDOUT": 60,
  "ETXTBSY": 26,
  "EWOULDBLOCK": 35,
  "EXDEV": 18,
  "SIGHUP": 1,
  "SIGINT": 2,
  "SIGQUIT": 3,
  "SIGILL": 4,
  "SIGTRAP": 5,
  "SIGABRT": 6,
  "SIGIOT": 6,
  "SIGBUS": 10,
  "SIGFPE": 8,
  "SIGKILL": 9,
  "SIGUSR1": 30,
  "SIGSEGV": 11,
  "SIGUSR2": 31,
  "SIGPIPE": 13,
  "SIGALRM": 14,
  "SIGTERM": 15,
  "SIGCHLD": 20,
  "SIGCONT": 19,
  "SIGSTOP": 17,
  "SIGTSTP": 18,
  "SIGTTIN": 21,
  "SIGTTOU": 22,
  "SIGURG": 16,
  "SIGXCPU": 24,
  "SIGXFSZ": 25,
  "SIGVTALRM": 26,
  "SIGPROF": 27,
  "SIGWINCH": 28,
  "SIGIO": 23,
  "SIGSYS": 12,
  "SSL_OP_ALL": 2147486719,
  "SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION": 262144,
  "SSL_OP_CIPHER_SERVER_PREFERENCE": 4194304,
  "SSL_OP_CISCO_ANYCONNECT": 32768,
  "SSL_OP_COOKIE_EXCHANGE": 8192,
  "SSL_OP_CRYPTOPRO_TLSEXT_BUG": 2147483648,
  "SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS": 2048,
  "SSL_OP_EPHEMERAL_RSA": 0,
  "SSL_OP_LEGACY_SERVER_CONNECT": 4,
  "SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER": 32,
  "SSL_OP_MICROSOFT_SESS_ID_BUG": 1,
  "SSL_OP_MSIE_SSLV2_RSA_PADDING": 0,
  "SSL_OP_NETSCAPE_CA_DN_BUG": 536870912,
  "SSL_OP_NETSCAPE_CHALLENGE_BUG": 2,
  "SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG": 1073741824,
  "SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG": 8,
  "SSL_OP_NO_COMPRESSION": 131072,
  "SSL_OP_NO_QUERY_MTU": 4096,
  "SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION": 65536,
  "SSL_OP_NO_SSLv2": 16777216,
  "SSL_OP_NO_SSLv3": 33554432,
  "SSL_OP_NO_TICKET": 16384,
  "SSL_OP_NO_TLSv1": 67108864,
  "SSL_OP_NO_TLSv1_1": 268435456,
  "SSL_OP_NO_TLSv1_2": 134217728,
  "SSL_OP_PKCS1_CHECK_1": 0,
  "SSL_OP_PKCS1_CHECK_2": 0,
  "SSL_OP_SINGLE_DH_USE": 1048576,
  "SSL_OP_SINGLE_ECDH_USE": 524288,
  "SSL_OP_SSLEAY_080_CLIENT_DH_BUG": 128,
  "SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG": 0,
  "SSL_OP_TLS_BLOCK_PADDING_BUG": 512,
  "SSL_OP_TLS_D5_BUG": 256,
  "SSL_OP_TLS_ROLLBACK_BUG": 8388608,
  "ENGINE_METHOD_DSA": 2,
  "ENGINE_METHOD_DH": 4,
  "ENGINE_METHOD_RAND": 8,
  "ENGINE_METHOD_ECDH": 16,
  "ENGINE_METHOD_ECDSA": 32,
  "ENGINE_METHOD_CIPHERS": 64,
  "ENGINE_METHOD_DIGESTS": 128,
  "ENGINE_METHOD_STORE": 256,
  "ENGINE_METHOD_PKEY_METHS": 512,
  "ENGINE_METHOD_PKEY_ASN1_METHS": 1024,
  "ENGINE_METHOD_ALL": 65535,
  "ENGINE_METHOD_NONE": 0,
  "DH_CHECK_P_NOT_SAFE_PRIME": 2,
  "DH_CHECK_P_NOT_PRIME": 1,
  "DH_UNABLE_TO_CHECK_GENERATOR": 4,
  "DH_NOT_SUITABLE_GENERATOR": 8,
  "NPN_ENABLED": 1,
  "RSA_PKCS1_PADDING": 1,
  "RSA_SSLV23_PADDING": 2,
  "RSA_NO_PADDING": 3,
  "RSA_PKCS1_OAEP_PADDING": 4,
  "RSA_X931_PADDING": 5,
  "RSA_PKCS1_PSS_PADDING": 6,
  "POINT_CONVERSION_COMPRESSED": 2,
  "POINT_CONVERSION_UNCOMPRESSED": 4,
  "POINT_CONVERSION_HYBRID": 6,
  "F_OK": 0,
  "R_OK": 4,
  "W_OK": 2,
  "X_OK": 1,
  "UV_UDP_REUSEADDR": 4
}

},{}],31:[function(require,module,exports){
(function webpackUniversalModuleDefinition(root, factory) {
/* istanbul ignore next */
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
/* istanbul ignore next */
	else if(typeof exports === 'object')
		exports["esprima"] = factory();
	else
		root["esprima"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/* istanbul ignore if */
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/*
	  Copyright JS Foundation and other contributors, https://js.foundation/

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var comment_handler_1 = __webpack_require__(1);
	var jsx_parser_1 = __webpack_require__(3);
	var parser_1 = __webpack_require__(8);
	var tokenizer_1 = __webpack_require__(15);
	function parse(code, options, delegate) {
	    var commentHandler = null;
	    var proxyDelegate = function (node, metadata) {
	        if (delegate) {
	            delegate(node, metadata);
	        }
	        if (commentHandler) {
	            commentHandler.visit(node, metadata);
	        }
	    };
	    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;
	    var collectComment = false;
	    if (options) {
	        collectComment = (typeof options.comment === 'boolean' && options.comment);
	        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);
	        if (collectComment || attachComment) {
	            commentHandler = new comment_handler_1.CommentHandler();
	            commentHandler.attach = attachComment;
	            options.comment = true;
	            parserDelegate = proxyDelegate;
	        }
	    }
	    var isModule = false;
	    if (options && typeof options.sourceType === 'string') {
	        isModule = (options.sourceType === 'module');
	    }
	    var parser;
	    if (options && typeof options.jsx === 'boolean' && options.jsx) {
	        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
	    }
	    else {
	        parser = new parser_1.Parser(code, options, parserDelegate);
	    }
	    var program = isModule ? parser.parseModule() : parser.parseScript();
	    var ast = program;
	    if (collectComment && commentHandler) {
	        ast.comments = commentHandler.comments;
	    }
	    if (parser.config.tokens) {
	        ast.tokens = parser.tokens;
	    }
	    if (parser.config.tolerant) {
	        ast.errors = parser.errorHandler.errors;
	    }
	    return ast;
	}
	exports.parse = parse;
	function parseModule(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'module';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseModule = parseModule;
	function parseScript(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'script';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseScript = parseScript;
	function tokenize(code, options, delegate) {
	    var tokenizer = new tokenizer_1.Tokenizer(code, options);
	    var tokens;
	    tokens = [];
	    try {
	        while (true) {
	            var token = tokenizer.getNextToken();
	            if (!token) {
	                break;
	            }
	            if (delegate) {
	                token = delegate(token);
	            }
	            tokens.push(token);
	        }
	    }
	    catch (e) {
	        tokenizer.errorHandler.tolerate(e);
	    }
	    if (tokenizer.errorHandler.tolerant) {
	        tokens.errors = tokenizer.errors();
	    }
	    return tokens;
	}
	exports.tokenize = tokenize;
	var syntax_1 = __webpack_require__(2);
	exports.Syntax = syntax_1.Syntax;
	// Sync with *.json manifests.
	exports.version = '4.0.1';


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __webpack_require__(2);
	var CommentHandler = (function () {
	    function CommentHandler() {
	        this.attach = false;
	        this.comments = [];
	        this.stack = [];
	        this.leading = [];
	        this.trailing = [];
	    }
	    CommentHandler.prototype.insertInnerComments = function (node, metadata) {
	        //  innnerComments for properties empty block
	        //  `function a() {/** comments **\/}`
	        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
	            var innerComments = [];
	            for (var i = this.leading.length - 1; i >= 0; --i) {
	                var entry = this.leading[i];
	                if (metadata.end.offset >= entry.start) {
	                    innerComments.unshift(entry.comment);
	                    this.leading.splice(i, 1);
	                    this.trailing.splice(i, 1);
	                }
	            }
	            if (innerComments.length) {
	                node.innerComments = innerComments;
	            }
	        }
	    };
	    CommentHandler.prototype.findTrailingComments = function (metadata) {
	        var trailingComments = [];
	        if (this.trailing.length > 0) {
	            for (var i = this.trailing.length - 1; i >= 0; --i) {
	                var entry_1 = this.trailing[i];
	                if (entry_1.start >= metadata.end.offset) {
	                    trailingComments.unshift(entry_1.comment);
	                }
	            }
	            this.trailing.length = 0;
	            return trailingComments;
	        }
	        var entry = this.stack[this.stack.length - 1];
	        if (entry && entry.node.trailingComments) {
	            var firstComment = entry.node.trailingComments[0];
	            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
	                trailingComments = entry.node.trailingComments;
	                delete entry.node.trailingComments;
	            }
	        }
	        return trailingComments;
	    };
	    CommentHandler.prototype.findLeadingComments = function (metadata) {
	        var leadingComments = [];
	        var target;
	        while (this.stack.length > 0) {
	            var entry = this.stack[this.stack.length - 1];
	            if (entry && entry.start >= metadata.start.offset) {
	                target = entry.node;
	                this.stack.pop();
	            }
	            else {
	                break;
	            }
	        }
	        if (target) {
	            var count = target.leadingComments ? target.leadingComments.length : 0;
	            for (var i = count - 1; i >= 0; --i) {
	                var comment = target.leadingComments[i];
	                if (comment.range[1] <= metadata.start.offset) {
	                    leadingComments.unshift(comment);
	                    target.leadingComments.splice(i, 1);
	                }
	            }
	            if (target.leadingComments && target.leadingComments.length === 0) {
	                delete target.leadingComments;
	            }
	            return leadingComments;
	        }
	        for (var i = this.leading.length - 1; i >= 0; --i) {
	            var entry = this.leading[i];
	            if (entry.start <= metadata.start.offset) {
	                leadingComments.unshift(entry.comment);
	                this.leading.splice(i, 1);
	            }
	        }
	        return leadingComments;
	    };
	    CommentHandler.prototype.visitNode = function (node, metadata) {
	        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
	            return;
	        }
	        this.insertInnerComments(node, metadata);
	        var trailingComments = this.findTrailingComments(metadata);
	        var leadingComments = this.findLeadingComments(metadata);
	        if (leadingComments.length > 0) {
	            node.leadingComments = leadingComments;
	        }
	        if (trailingComments.length > 0) {
	            node.trailingComments = trailingComments;
	        }
	        this.stack.push({
	            node: node,
	            start: metadata.start.offset
	        });
	    };
	    CommentHandler.prototype.visitComment = function (node, metadata) {
	        var type = (node.type[0] === 'L') ? 'Line' : 'Block';
	        var comment = {
	            type: type,
	            value: node.value
	        };
	        if (node.range) {
	            comment.range = node.range;
	        }
	        if (node.loc) {
	            comment.loc = node.loc;
	        }
	        this.comments.push(comment);
	        if (this.attach) {
	            var entry = {
	                comment: {
	                    type: type,
	                    value: node.value,
	                    range: [metadata.start.offset, metadata.end.offset]
	                },
	                start: metadata.start.offset
	            };
	            if (node.loc) {
	                entry.comment.loc = node.loc;
	            }
	            node.type = type;
	            this.leading.push(entry);
	            this.trailing.push(entry);
	        }
	    };
	    CommentHandler.prototype.visit = function (node, metadata) {
	        if (node.type === 'LineComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (node.type === 'BlockComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (this.attach) {
	            this.visitNode(node, metadata);
	        }
	    };
	    return CommentHandler;
	}());
	exports.CommentHandler = CommentHandler;


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Syntax = {
	    AssignmentExpression: 'AssignmentExpression',
	    AssignmentPattern: 'AssignmentPattern',
	    ArrayExpression: 'ArrayExpression',
	    ArrayPattern: 'ArrayPattern',
	    ArrowFunctionExpression: 'ArrowFunctionExpression',
	    AwaitExpression: 'AwaitExpression',
	    BlockStatement: 'BlockStatement',
	    BinaryExpression: 'BinaryExpression',
	    BreakStatement: 'BreakStatement',
	    CallExpression: 'CallExpression',
	    CatchClause: 'CatchClause',
	    ClassBody: 'ClassBody',
	    ClassDeclaration: 'ClassDeclaration',
	    ClassExpression: 'ClassExpression',
	    ConditionalExpression: 'ConditionalExpression',
	    ContinueStatement: 'ContinueStatement',
	    DoWhileStatement: 'DoWhileStatement',
	    DebuggerStatement: 'DebuggerStatement',
	    EmptyStatement: 'EmptyStatement',
	    ExportAllDeclaration: 'ExportAllDeclaration',
	    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
	    ExportNamedDeclaration: 'ExportNamedDeclaration',
	    ExportSpecifier: 'ExportSpecifier',
	    ExpressionStatement: 'ExpressionStatement',
	    ForStatement: 'ForStatement',
	    ForOfStatement: 'ForOfStatement',
	    ForInStatement: 'ForInStatement',
	    FunctionDeclaration: 'FunctionDeclaration',
	    FunctionExpression: 'FunctionExpression',
	    Identifier: 'Identifier',
	    IfStatement: 'IfStatement',
	    ImportDeclaration: 'ImportDeclaration',
	    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	    ImportSpecifier: 'ImportSpecifier',
	    Literal: 'Literal',
	    LabeledStatement: 'LabeledStatement',
	    LogicalExpression: 'LogicalExpression',
	    MemberExpression: 'MemberExpression',
	    MetaProperty: 'MetaProperty',
	    MethodDefinition: 'MethodDefinition',
	    NewExpression: 'NewExpression',
	    ObjectExpression: 'ObjectExpression',
	    ObjectPattern: 'ObjectPattern',
	    Program: 'Program',
	    Property: 'Property',
	    RestElement: 'RestElement',
	    ReturnStatement: 'ReturnStatement',
	    SequenceExpression: 'SequenceExpression',
	    SpreadElement: 'SpreadElement',
	    Super: 'Super',
	    SwitchCase: 'SwitchCase',
	    SwitchStatement: 'SwitchStatement',
	    TaggedTemplateExpression: 'TaggedTemplateExpression',
	    TemplateElement: 'TemplateElement',
	    TemplateLiteral: 'TemplateLiteral',
	    ThisExpression: 'ThisExpression',
	    ThrowStatement: 'ThrowStatement',
	    TryStatement: 'TryStatement',
	    UnaryExpression: 'UnaryExpression',
	    UpdateExpression: 'UpdateExpression',
	    VariableDeclaration: 'VariableDeclaration',
	    VariableDeclarator: 'VariableDeclarator',
	    WhileStatement: 'WhileStatement',
	    WithStatement: 'WithStatement',
	    YieldExpression: 'YieldExpression'
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
/* istanbul ignore next */
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var character_1 = __webpack_require__(4);
	var JSXNode = __webpack_require__(5);
	var jsx_syntax_1 = __webpack_require__(6);
	var Node = __webpack_require__(7);
	var parser_1 = __webpack_require__(8);
	var token_1 = __webpack_require__(13);
	var xhtml_entities_1 = __webpack_require__(14);
	token_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';
	token_1.TokenName[101 /* Text */] = 'JSXText';
	// Fully qualified element name, e.g. <svg:path> returns "svg:path"
	function getQualifiedElementName(elementName) {
	    var qualifiedName;
	    switch (elementName.type) {
	        case jsx_syntax_1.JSXSyntax.JSXIdentifier:
	            var id = elementName;
	            qualifiedName = id.name;
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
	            var ns = elementName;
	            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +
	                getQualifiedElementName(ns.name);
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
	            var expr = elementName;
	            qualifiedName = getQualifiedElementName(expr.object) + '.' +
	                getQualifiedElementName(expr.property);
	            break;
	        /* istanbul ignore next */
	        default:
	            break;
	    }
	    return qualifiedName;
	}
	var JSXParser = (function (_super) {
	    __extends(JSXParser, _super);
	    function JSXParser(code, options, delegate) {
	        return _super.call(this, code, options, delegate) || this;
	    }
	    JSXParser.prototype.parsePrimaryExpression = function () {
	        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
	    };
	    JSXParser.prototype.startJSX = function () {
	        // Unwind the scanner before the lookahead token.
	        this.scanner.index = this.startMarker.index;
	        this.scanner.lineNumber = this.startMarker.line;
	        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
	    };
	    JSXParser.prototype.finishJSX = function () {
	        // Prime the next lookahead.
	        this.nextToken();
	    };
	    JSXParser.prototype.reenterJSX = function () {
	        this.startJSX();
	        this.expectJSX('}');
	        // Pop the closing '}' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	    };
	    JSXParser.prototype.createJSXNode = function () {
	        this.collectComments();
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.createJSXChildNode = function () {
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.scanXHTMLEntity = function (quote) {
	        var result = '&';
	        var valid = true;
	        var terminated = false;
	        var numeric = false;
	        var hex = false;
	        while (!this.scanner.eof() && valid && !terminated) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === quote) {
	                break;
	            }
	            terminated = (ch === ';');
	            result += ch;
	            ++this.scanner.index;
	            if (!terminated) {
	                switch (result.length) {
	                    case 2:
	                        // e.g. '&#123;'
	                        numeric = (ch === '#');
	                        break;
	                    case 3:
	                        if (numeric) {
	                            // e.g. '&#x41;'
	                            hex = (ch === 'x');
	                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
	                            numeric = numeric && !hex;
	                        }
	                        break;
	                    default:
	                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
	                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
	                        break;
	                }
	            }
	        }
	        if (valid && terminated && result.length > 2) {
	            // e.g. '&#x41;' becomes just '#x41'
	            var str = result.substr(1, result.length - 2);
	            if (numeric && str.length > 1) {
	                result = String.fromCharCode(parseInt(str.substr(1), 10));
	            }
	            else if (hex && str.length > 2) {
	                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
	            }
	            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
	                result = xhtml_entities_1.XHTMLEntities[str];
	            }
	        }
	        return result;
	    };
	    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
	    JSXParser.prototype.lexJSX = function () {
	        var cp = this.scanner.source.charCodeAt(this.scanner.index);
	        // < > / : = { }
	        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
	            var value = this.scanner.source[this.scanner.index++];
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index - 1,
	                end: this.scanner.index
	            };
	        }
	        // " '
	        if (cp === 34 || cp === 39) {
	            var start = this.scanner.index;
	            var quote = this.scanner.source[this.scanner.index++];
	            var str = '';
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source[this.scanner.index++];
	                if (ch === quote) {
	                    break;
	                }
	                else if (ch === '&') {
	                    str += this.scanXHTMLEntity(quote);
	                }
	                else {
	                    str += ch;
	                }
	            }
	            return {
	                type: 8 /* StringLiteral */,
	                value: str,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // ... or .
	        if (cp === 46) {
	            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
	            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
	            var value = (n1 === 46 && n2 === 46) ? '...' : '.';
	            var start = this.scanner.index;
	            this.scanner.index += value.length;
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // `
	        if (cp === 96) {
	            // Only placeholder, since it will be rescanned as a real assignment expression.
	            return {
	                type: 10 /* Template */,
	                value: '',
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index,
	                end: this.scanner.index
	            };
	        }
	        // Identifer can not contain backslash (char code 92).
	        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {
	            var start = this.scanner.index;
	            ++this.scanner.index;
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source.charCodeAt(this.scanner.index);
	                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {
	                    ++this.scanner.index;
	                }
	                else if (ch === 45) {
	                    // Hyphen (char code 45) can be part of an identifier.
	                    ++this.scanner.index;
	                }
	                else {
	                    break;
	                }
	            }
	            var id = this.scanner.source.slice(start, this.scanner.index);
	            return {
	                type: 100 /* Identifier */,
	                value: id,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        return this.scanner.lex();
	    };
	    JSXParser.prototype.nextJSXToken = function () {
	        this.collectComments();
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = this.lexJSX();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        if (this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.nextJSXText = function () {
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var start = this.scanner.index;
	        var text = '';
	        while (!this.scanner.eof()) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === '{' || ch === '<') {
	                break;
	            }
	            ++this.scanner.index;
	            text += ch;
	            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.scanner.lineNumber;
	                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
	                    ++this.scanner.index;
	                }
	                this.scanner.lineStart = this.scanner.index;
	            }
	        }
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = {
	            type: 101 /* Text */,
	            value: text,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: this.scanner.lineStart,
	            start: start,
	            end: this.scanner.index
	        };
	        if ((text.length > 0) && this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.peekJSXToken = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.lexJSX();
	        this.scanner.restoreState(state);
	        return next;
	    };
	    // Expect the next JSX token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    JSXParser.prototype.expectJSX = function (value) {
	        var token = this.nextJSXToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next JSX token matches the specified punctuator.
	    JSXParser.prototype.matchJSX = function (value) {
	        var next = this.peekJSXToken();
	        return next.type === 7 /* Punctuator */ && next.value === value;
	    };
	    JSXParser.prototype.parseJSXIdentifier = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 100 /* Identifier */) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
	    };
	    JSXParser.prototype.parseJSXElementName = function () {
	        var node = this.createJSXNode();
	        var elementName = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = elementName;
	            this.expectJSX(':');
	            var name_1 = this.parseJSXIdentifier();
	            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
	        }
	        else if (this.matchJSX('.')) {
	            while (this.matchJSX('.')) {
	                var object = elementName;
	                this.expectJSX('.');
	                var property = this.parseJSXIdentifier();
	                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
	            }
	        }
	        return elementName;
	    };
	    JSXParser.prototype.parseJSXAttributeName = function () {
	        var node = this.createJSXNode();
	        var attributeName;
	        var identifier = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = identifier;
	            this.expectJSX(':');
	            var name_2 = this.parseJSXIdentifier();
	            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
	        }
	        else {
	            attributeName = identifier;
	        }
	        return attributeName;
	    };
	    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 8 /* StringLiteral */) {
	            this.throwUnexpectedToken(token);
	        }
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    JSXParser.prototype.parseJSXExpressionAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.finishJSX();
	        if (this.match('}')) {
	            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
	        }
	        var expression = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXAttributeValue = function () {
	        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :
	            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
	    };
	    JSXParser.prototype.parseJSXNameValueAttribute = function () {
	        var node = this.createJSXNode();
	        var name = this.parseJSXAttributeName();
	        var value = null;
	        if (this.matchJSX('=')) {
	            this.expectJSX('=');
	            value = this.parseJSXAttributeValue();
	        }
	        return this.finalize(node, new JSXNode.JSXAttribute(name, value));
	    };
	    JSXParser.prototype.parseJSXSpreadAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.expectJSX('...');
	        this.finishJSX();
	        var argument = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
	    };
	    JSXParser.prototype.parseJSXAttributes = function () {
	        var attributes = [];
	        while (!this.matchJSX('/') && !this.matchJSX('>')) {
	            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :
	                this.parseJSXNameValueAttribute();
	            attributes.push(attribute);
	        }
	        return attributes;
	    };
	    JSXParser.prototype.parseJSXOpeningElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXBoundaryElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        if (this.matchJSX('/')) {
	            this.expectJSX('/');
	            var name_3 = this.parseJSXElementName();
	            this.expectJSX('>');
	            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
	        }
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXEmptyExpression = function () {
	        var node = this.createJSXChildNode();
	        this.collectComments();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        return this.finalize(node, new JSXNode.JSXEmptyExpression());
	    };
	    JSXParser.prototype.parseJSXExpressionContainer = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        var expression;
	        if (this.matchJSX('}')) {
	            expression = this.parseJSXEmptyExpression();
	            this.expectJSX('}');
	        }
	        else {
	            this.finishJSX();
	            expression = this.parseAssignmentExpression();
	            this.reenterJSX();
	        }
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXChildren = function () {
	        var children = [];
	        while (!this.scanner.eof()) {
	            var node = this.createJSXChildNode();
	            var token = this.nextJSXText();
	            if (token.start < token.end) {
	                var raw = this.getTokenRaw(token);
	                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
	                children.push(child);
	            }
	            if (this.scanner.source[this.scanner.index] === '{') {
	                var container = this.parseJSXExpressionContainer();
	                children.push(container);
	            }
	            else {
	                break;
	            }
	        }
	        return children;
	    };
	    JSXParser.prototype.parseComplexJSXElement = function (el) {
	        var stack = [];
	        while (!this.scanner.eof()) {
	            el.children = el.children.concat(this.parseJSXChildren());
	            var node = this.createJSXChildNode();
	            var element = this.parseJSXBoundaryElement();
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
	                var opening = element;
	                if (opening.selfClosing) {
	                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
	                    el.children.push(child);
	                }
	                else {
	                    stack.push(el);
	                    el = { node: node, opening: opening, closing: null, children: [] };
	                }
	            }
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
	                el.closing = element;
	                var open_1 = getQualifiedElementName(el.opening.name);
	                var close_1 = getQualifiedElementName(el.closing.name);
	                if (open_1 !== close_1) {
	                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
	                }
	                if (stack.length > 0) {
	                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
	                    el = stack[stack.length - 1];
	                    el.children.push(child);
	                    stack.pop();
	                }
	                else {
	                    break;
	                }
	            }
	        }
	        return el;
	    };
	    JSXParser.prototype.parseJSXElement = function () {
	        var node = this.createJSXNode();
	        var opening = this.parseJSXOpeningElement();
	        var children = [];
	        var closing = null;
	        if (!opening.selfClosing) {
	            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });
	            children = el.children;
	            closing = el.closing;
	        }
	        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
	    };
	    JSXParser.prototype.parseJSXRoot = function () {
	        // Pop the opening '<' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	        this.startJSX();
	        var element = this.parseJSXElement();
	        this.finishJSX();
	        return element;
	    };
	    JSXParser.prototype.isStartOfExpression = function () {
	        return _super.prototype.isStartOfExpression.call(this) || this.match('<');
	    };
	    return JSXParser;
	}(parser_1.Parser));
	exports.JSXParser = JSXParser;


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// See also tools/generate-unicode-regex.js.
	var Regex = {
	    // Unicode v8.0.0 NonAsciiIdentifierStart:
	    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
	    // Unicode v8.0.0 NonAsciiIdentifierPart:
	    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	};
	exports.Character = {
	    /* tslint:disable:no-bitwise */
	    fromCodePoint: function (cp) {
	        return (cp < 0x10000) ? String.fromCharCode(cp) :
	            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
	                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
	    },
	    // https://tc39.github.io/ecma262/#sec-white-space
	    isWhiteSpace: function (cp) {
	        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||
	            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);
	    },
	    // https://tc39.github.io/ecma262/#sec-line-terminators
	    isLineTerminator: function (cp) {
	        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);
	    },
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    isIdentifierStart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));
	    },
	    isIdentifierPart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp >= 0x30 && cp <= 0x39) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));
	    },
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    isDecimalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39); // 0..9
	    },
	    isHexDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39) ||
	            (cp >= 0x41 && cp <= 0x46) ||
	            (cp >= 0x61 && cp <= 0x66); // a..f
	    },
	    isOctalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x37); // 0..7
	    }
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var jsx_syntax_1 = __webpack_require__(6);
	/* tslint:disable:max-classes-per-file */
	var JSXClosingElement = (function () {
	    function JSXClosingElement(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
	        this.name = name;
	    }
	    return JSXClosingElement;
	}());
	exports.JSXClosingElement = JSXClosingElement;
	var JSXElement = (function () {
	    function JSXElement(openingElement, children, closingElement) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXElement;
	        this.openingElement = openingElement;
	        this.children = children;
	        this.closingElement = closingElement;
	    }
	    return JSXElement;
	}());
	exports.JSXElement = JSXElement;
	var JSXEmptyExpression = (function () {
	    function JSXEmptyExpression() {
	        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
	    }
	    return JSXEmptyExpression;
	}());
	exports.JSXEmptyExpression = JSXEmptyExpression;
	var JSXExpressionContainer = (function () {
	    function JSXExpressionContainer(expression) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
	        this.expression = expression;
	    }
	    return JSXExpressionContainer;
	}());
	exports.JSXExpressionContainer = JSXExpressionContainer;
	var JSXIdentifier = (function () {
	    function JSXIdentifier(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
	        this.name = name;
	    }
	    return JSXIdentifier;
	}());
	exports.JSXIdentifier = JSXIdentifier;
	var JSXMemberExpression = (function () {
	    function JSXMemberExpression(object, property) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
	        this.object = object;
	        this.property = property;
	    }
	    return JSXMemberExpression;
	}());
	exports.JSXMemberExpression = JSXMemberExpression;
	var JSXAttribute = (function () {
	    function JSXAttribute(name, value) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
	        this.name = name;
	        this.value = value;
	    }
	    return JSXAttribute;
	}());
	exports.JSXAttribute = JSXAttribute;
	var JSXNamespacedName = (function () {
	    function JSXNamespacedName(namespace, name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
	        this.namespace = namespace;
	        this.name = name;
	    }
	    return JSXNamespacedName;
	}());
	exports.JSXNamespacedName = JSXNamespacedName;
	var JSXOpeningElement = (function () {
	    function JSXOpeningElement(name, selfClosing, attributes) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
	        this.name = name;
	        this.selfClosing = selfClosing;
	        this.attributes = attributes;
	    }
	    return JSXOpeningElement;
	}());
	exports.JSXOpeningElement = JSXOpeningElement;
	var JSXSpreadAttribute = (function () {
	    function JSXSpreadAttribute(argument) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
	        this.argument = argument;
	    }
	    return JSXSpreadAttribute;
	}());
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	var JSXText = (function () {
	    function JSXText(value, raw) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXText;
	        this.value = value;
	        this.raw = raw;
	    }
	    return JSXText;
	}());
	exports.JSXText = JSXText;


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JSXSyntax = {
	    JSXAttribute: 'JSXAttribute',
	    JSXClosingElement: 'JSXClosingElement',
	    JSXElement: 'JSXElement',
	    JSXEmptyExpression: 'JSXEmptyExpression',
	    JSXExpressionContainer: 'JSXExpressionContainer',
	    JSXIdentifier: 'JSXIdentifier',
	    JSXMemberExpression: 'JSXMemberExpression',
	    JSXNamespacedName: 'JSXNamespacedName',
	    JSXOpeningElement: 'JSXOpeningElement',
	    JSXSpreadAttribute: 'JSXSpreadAttribute',
	    JSXText: 'JSXText'
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __webpack_require__(2);
	/* tslint:disable:max-classes-per-file */
	var ArrayExpression = (function () {
	    function ArrayExpression(elements) {
	        this.type = syntax_1.Syntax.ArrayExpression;
	        this.elements = elements;
	    }
	    return ArrayExpression;
	}());
	exports.ArrayExpression = ArrayExpression;
	var ArrayPattern = (function () {
	    function ArrayPattern(elements) {
	        this.type = syntax_1.Syntax.ArrayPattern;
	        this.elements = elements;
	    }
	    return ArrayPattern;
	}());
	exports.ArrayPattern = ArrayPattern;
	var ArrowFunctionExpression = (function () {
	    function ArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = false;
	    }
	    return ArrowFunctionExpression;
	}());
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	var AssignmentExpression = (function () {
	    function AssignmentExpression(operator, left, right) {
	        this.type = syntax_1.Syntax.AssignmentExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentExpression;
	}());
	exports.AssignmentExpression = AssignmentExpression;
	var AssignmentPattern = (function () {
	    function AssignmentPattern(left, right) {
	        this.type = syntax_1.Syntax.AssignmentPattern;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentPattern;
	}());
	exports.AssignmentPattern = AssignmentPattern;
	var AsyncArrowFunctionExpression = (function () {
	    function AsyncArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = true;
	    }
	    return AsyncArrowFunctionExpression;
	}());
	exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;
	var AsyncFunctionDeclaration = (function () {
	    function AsyncFunctionDeclaration(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionDeclaration;
	}());
	exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;
	var AsyncFunctionExpression = (function () {
	    function AsyncFunctionExpression(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionExpression;
	}());
	exports.AsyncFunctionExpression = AsyncFunctionExpression;
	var AwaitExpression = (function () {
	    function AwaitExpression(argument) {
	        this.type = syntax_1.Syntax.AwaitExpression;
	        this.argument = argument;
	    }
	    return AwaitExpression;
	}());
	exports.AwaitExpression = AwaitExpression;
	var BinaryExpression = (function () {
	    function BinaryExpression(operator, left, right) {
	        var logical = (operator === '||' || operator === '&&');
	        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return BinaryExpression;
	}());
	exports.BinaryExpression = BinaryExpression;
	var BlockStatement = (function () {
	    function BlockStatement(body) {
	        this.type = syntax_1.Syntax.BlockStatement;
	        this.body = body;
	    }
	    return BlockStatement;
	}());
	exports.BlockStatement = BlockStatement;
	var BreakStatement = (function () {
	    function BreakStatement(label) {
	        this.type = syntax_1.Syntax.BreakStatement;
	        this.label = label;
	    }
	    return BreakStatement;
	}());
	exports.BreakStatement = BreakStatement;
	var CallExpression = (function () {
	    function CallExpression(callee, args) {
	        this.type = syntax_1.Syntax.CallExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return CallExpression;
	}());
	exports.CallExpression = CallExpression;
	var CatchClause = (function () {
	    function CatchClause(param, body) {
	        this.type = syntax_1.Syntax.CatchClause;
	        this.param = param;
	        this.body = body;
	    }
	    return CatchClause;
	}());
	exports.CatchClause = CatchClause;
	var ClassBody = (function () {
	    function ClassBody(body) {
	        this.type = syntax_1.Syntax.ClassBody;
	        this.body = body;
	    }
	    return ClassBody;
	}());
	exports.ClassBody = ClassBody;
	var ClassDeclaration = (function () {
	    function ClassDeclaration(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassDeclaration;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassDeclaration;
	}());
	exports.ClassDeclaration = ClassDeclaration;
	var ClassExpression = (function () {
	    function ClassExpression(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassExpression;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassExpression;
	}());
	exports.ClassExpression = ClassExpression;
	var ComputedMemberExpression = (function () {
	    function ComputedMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = true;
	        this.object = object;
	        this.property = property;
	    }
	    return ComputedMemberExpression;
	}());
	exports.ComputedMemberExpression = ComputedMemberExpression;
	var ConditionalExpression = (function () {
	    function ConditionalExpression(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.ConditionalExpression;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return ConditionalExpression;
	}());
	exports.ConditionalExpression = ConditionalExpression;
	var ContinueStatement = (function () {
	    function ContinueStatement(label) {
	        this.type = syntax_1.Syntax.ContinueStatement;
	        this.label = label;
	    }
	    return ContinueStatement;
	}());
	exports.ContinueStatement = ContinueStatement;
	var DebuggerStatement = (function () {
	    function DebuggerStatement() {
	        this.type = syntax_1.Syntax.DebuggerStatement;
	    }
	    return DebuggerStatement;
	}());
	exports.DebuggerStatement = DebuggerStatement;
	var Directive = (function () {
	    function Directive(expression, directive) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	        this.directive = directive;
	    }
	    return Directive;
	}());
	exports.Directive = Directive;
	var DoWhileStatement = (function () {
	    function DoWhileStatement(body, test) {
	        this.type = syntax_1.Syntax.DoWhileStatement;
	        this.body = body;
	        this.test = test;
	    }
	    return DoWhileStatement;
	}());
	exports.DoWhileStatement = DoWhileStatement;
	var EmptyStatement = (function () {
	    function EmptyStatement() {
	        this.type = syntax_1.Syntax.EmptyStatement;
	    }
	    return EmptyStatement;
	}());
	exports.EmptyStatement = EmptyStatement;
	var ExportAllDeclaration = (function () {
	    function ExportAllDeclaration(source) {
	        this.type = syntax_1.Syntax.ExportAllDeclaration;
	        this.source = source;
	    }
	    return ExportAllDeclaration;
	}());
	exports.ExportAllDeclaration = ExportAllDeclaration;
	var ExportDefaultDeclaration = (function () {
	    function ExportDefaultDeclaration(declaration) {
	        this.type = syntax_1.Syntax.ExportDefaultDeclaration;
	        this.declaration = declaration;
	    }
	    return ExportDefaultDeclaration;
	}());
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	var ExportNamedDeclaration = (function () {
	    function ExportNamedDeclaration(declaration, specifiers, source) {
	        this.type = syntax_1.Syntax.ExportNamedDeclaration;
	        this.declaration = declaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ExportNamedDeclaration;
	}());
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	var ExportSpecifier = (function () {
	    function ExportSpecifier(local, exported) {
	        this.type = syntax_1.Syntax.ExportSpecifier;
	        this.exported = exported;
	        this.local = local;
	    }
	    return ExportSpecifier;
	}());
	exports.ExportSpecifier = ExportSpecifier;
	var ExpressionStatement = (function () {
	    function ExpressionStatement(expression) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	    }
	    return ExpressionStatement;
	}());
	exports.ExpressionStatement = ExpressionStatement;
	var ForInStatement = (function () {
	    function ForInStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForInStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	        this.each = false;
	    }
	    return ForInStatement;
	}());
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = (function () {
	    function ForOfStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForOfStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	    }
	    return ForOfStatement;
	}());
	exports.ForOfStatement = ForOfStatement;
	var ForStatement = (function () {
	    function ForStatement(init, test, update, body) {
	        this.type = syntax_1.Syntax.ForStatement;
	        this.init = init;
	        this.test = test;
	        this.update = update;
	        this.body = body;
	    }
	    return ForStatement;
	}());
	exports.ForStatement = ForStatement;
	var FunctionDeclaration = (function () {
	    function FunctionDeclaration(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionDeclaration;
	}());
	exports.FunctionDeclaration = FunctionDeclaration;
	var FunctionExpression = (function () {
	    function FunctionExpression(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionExpression;
	}());
	exports.FunctionExpression = FunctionExpression;
	var Identifier = (function () {
	    function Identifier(name) {
	        this.type = syntax_1.Syntax.Identifier;
	        this.name = name;
	    }
	    return Identifier;
	}());
	exports.Identifier = Identifier;
	var IfStatement = (function () {
	    function IfStatement(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.IfStatement;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return IfStatement;
	}());
	exports.IfStatement = IfStatement;
	var ImportDeclaration = (function () {
	    function ImportDeclaration(specifiers, source) {
	        this.type = syntax_1.Syntax.ImportDeclaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ImportDeclaration;
	}());
	exports.ImportDeclaration = ImportDeclaration;
	var ImportDefaultSpecifier = (function () {
	    function ImportDefaultSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportDefaultSpecifier;
	        this.local = local;
	    }
	    return ImportDefaultSpecifier;
	}());
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	var ImportNamespaceSpecifier = (function () {
	    function ImportNamespaceSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
	        this.local = local;
	    }
	    return ImportNamespaceSpecifier;
	}());
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
	var ImportSpecifier = (function () {
	    function ImportSpecifier(local, imported) {
	        this.type = syntax_1.Syntax.ImportSpecifier;
	        this.local = local;
	        this.imported = imported;
	    }
	    return ImportSpecifier;
	}());
	exports.ImportSpecifier = ImportSpecifier;
	var LabeledStatement = (function () {
	    function LabeledStatement(label, body) {
	        this.type = syntax_1.Syntax.LabeledStatement;
	        this.label = label;
	        this.body = body;
	    }
	    return LabeledStatement;
	}());
	exports.LabeledStatement = LabeledStatement;
	var Literal = (function () {
	    function Literal(value, raw) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	    }
	    return Literal;
	}());
	exports.Literal = Literal;
	var MetaProperty = (function () {
	    function MetaProperty(meta, property) {
	        this.type = syntax_1.Syntax.MetaProperty;
	        this.meta = meta;
	        this.property = property;
	    }
	    return MetaProperty;
	}());
	exports.MetaProperty = MetaProperty;
	var MethodDefinition = (function () {
	    function MethodDefinition(key, computed, value, kind, isStatic) {
	        this.type = syntax_1.Syntax.MethodDefinition;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.static = isStatic;
	    }
	    return MethodDefinition;
	}());
	exports.MethodDefinition = MethodDefinition;
	var Module = (function () {
	    function Module(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'module';
	    }
	    return Module;
	}());
	exports.Module = Module;
	var NewExpression = (function () {
	    function NewExpression(callee, args) {
	        this.type = syntax_1.Syntax.NewExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return NewExpression;
	}());
	exports.NewExpression = NewExpression;
	var ObjectExpression = (function () {
	    function ObjectExpression(properties) {
	        this.type = syntax_1.Syntax.ObjectExpression;
	        this.properties = properties;
	    }
	    return ObjectExpression;
	}());
	exports.ObjectExpression = ObjectExpression;
	var ObjectPattern = (function () {
	    function ObjectPattern(properties) {
	        this.type = syntax_1.Syntax.ObjectPattern;
	        this.properties = properties;
	    }
	    return ObjectPattern;
	}());
	exports.ObjectPattern = ObjectPattern;
	var Property = (function () {
	    function Property(kind, key, computed, value, method, shorthand) {
	        this.type = syntax_1.Syntax.Property;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.method = method;
	        this.shorthand = shorthand;
	    }
	    return Property;
	}());
	exports.Property = Property;
	var RegexLiteral = (function () {
	    function RegexLiteral(value, raw, pattern, flags) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	        this.regex = { pattern: pattern, flags: flags };
	    }
	    return RegexLiteral;
	}());
	exports.RegexLiteral = RegexLiteral;
	var RestElement = (function () {
	    function RestElement(argument) {
	        this.type = syntax_1.Syntax.RestElement;
	        this.argument = argument;
	    }
	    return RestElement;
	}());
	exports.RestElement = RestElement;
	var ReturnStatement = (function () {
	    function ReturnStatement(argument) {
	        this.type = syntax_1.Syntax.ReturnStatement;
	        this.argument = argument;
	    }
	    return ReturnStatement;
	}());
	exports.ReturnStatement = ReturnStatement;
	var Script = (function () {
	    function Script(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'script';
	    }
	    return Script;
	}());
	exports.Script = Script;
	var SequenceExpression = (function () {
	    function SequenceExpression(expressions) {
	        this.type = syntax_1.Syntax.SequenceExpression;
	        this.expressions = expressions;
	    }
	    return SequenceExpression;
	}());
	exports.SequenceExpression = SequenceExpression;
	var SpreadElement = (function () {
	    function SpreadElement(argument) {
	        this.type = syntax_1.Syntax.SpreadElement;
	        this.argument = argument;
	    }
	    return SpreadElement;
	}());
	exports.SpreadElement = SpreadElement;
	var StaticMemberExpression = (function () {
	    function StaticMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = false;
	        this.object = object;
	        this.property = property;
	    }
	    return StaticMemberExpression;
	}());
	exports.StaticMemberExpression = StaticMemberExpression;
	var Super = (function () {
	    function Super() {
	        this.type = syntax_1.Syntax.Super;
	    }
	    return Super;
	}());
	exports.Super = Super;
	var SwitchCase = (function () {
	    function SwitchCase(test, consequent) {
	        this.type = syntax_1.Syntax.SwitchCase;
	        this.test = test;
	        this.consequent = consequent;
	    }
	    return SwitchCase;
	}());
	exports.SwitchCase = SwitchCase;
	var SwitchStatement = (function () {
	    function SwitchStatement(discriminant, cases) {
	        this.type = syntax_1.Syntax.SwitchStatement;
	        this.discriminant = discriminant;
	        this.cases = cases;
	    }
	    return SwitchStatement;
	}());
	exports.SwitchStatement = SwitchStatement;
	var TaggedTemplateExpression = (function () {
	    function TaggedTemplateExpression(tag, quasi) {
	        this.type = syntax_1.Syntax.TaggedTemplateExpression;
	        this.tag = tag;
	        this.quasi = quasi;
	    }
	    return TaggedTemplateExpression;
	}());
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	var TemplateElement = (function () {
	    function TemplateElement(value, tail) {
	        this.type = syntax_1.Syntax.TemplateElement;
	        this.value = value;
	        this.tail = tail;
	    }
	    return TemplateElement;
	}());
	exports.TemplateElement = TemplateElement;
	var TemplateLiteral = (function () {
	    function TemplateLiteral(quasis, expressions) {
	        this.type = syntax_1.Syntax.TemplateLiteral;
	        this.quasis = quasis;
	        this.expressions = expressions;
	    }
	    return TemplateLiteral;
	}());
	exports.TemplateLiteral = TemplateLiteral;
	var ThisExpression = (function () {
	    function ThisExpression() {
	        this.type = syntax_1.Syntax.ThisExpression;
	    }
	    return ThisExpression;
	}());
	exports.ThisExpression = ThisExpression;
	var ThrowStatement = (function () {
	    function ThrowStatement(argument) {
	        this.type = syntax_1.Syntax.ThrowStatement;
	        this.argument = argument;
	    }
	    return ThrowStatement;
	}());
	exports.ThrowStatement = ThrowStatement;
	var TryStatement = (function () {
	    function TryStatement(block, handler, finalizer) {
	        this.type = syntax_1.Syntax.TryStatement;
	        this.block = block;
	        this.handler = handler;
	        this.finalizer = finalizer;
	    }
	    return TryStatement;
	}());
	exports.TryStatement = TryStatement;
	var UnaryExpression = (function () {
	    function UnaryExpression(operator, argument) {
	        this.type = syntax_1.Syntax.UnaryExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = true;
	    }
	    return UnaryExpression;
	}());
	exports.UnaryExpression = UnaryExpression;
	var UpdateExpression = (function () {
	    function UpdateExpression(operator, argument, prefix) {
	        this.type = syntax_1.Syntax.UpdateExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = prefix;
	    }
	    return UpdateExpression;
	}());
	exports.UpdateExpression = UpdateExpression;
	var VariableDeclaration = (function () {
	    function VariableDeclaration(declarations, kind) {
	        this.type = syntax_1.Syntax.VariableDeclaration;
	        this.declarations = declarations;
	        this.kind = kind;
	    }
	    return VariableDeclaration;
	}());
	exports.VariableDeclaration = VariableDeclaration;
	var VariableDeclarator = (function () {
	    function VariableDeclarator(id, init) {
	        this.type = syntax_1.Syntax.VariableDeclarator;
	        this.id = id;
	        this.init = init;
	    }
	    return VariableDeclarator;
	}());
	exports.VariableDeclarator = VariableDeclarator;
	var WhileStatement = (function () {
	    function WhileStatement(test, body) {
	        this.type = syntax_1.Syntax.WhileStatement;
	        this.test = test;
	        this.body = body;
	    }
	    return WhileStatement;
	}());
	exports.WhileStatement = WhileStatement;
	var WithStatement = (function () {
	    function WithStatement(object, body) {
	        this.type = syntax_1.Syntax.WithStatement;
	        this.object = object;
	        this.body = body;
	    }
	    return WithStatement;
	}());
	exports.WithStatement = WithStatement;
	var YieldExpression = (function () {
	    function YieldExpression(argument, delegate) {
	        this.type = syntax_1.Syntax.YieldExpression;
	        this.argument = argument;
	        this.delegate = delegate;
	    }
	    return YieldExpression;
	}());
	exports.YieldExpression = YieldExpression;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __webpack_require__(9);
	var error_handler_1 = __webpack_require__(10);
	var messages_1 = __webpack_require__(11);
	var Node = __webpack_require__(7);
	var scanner_1 = __webpack_require__(12);
	var syntax_1 = __webpack_require__(2);
	var token_1 = __webpack_require__(13);
	var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
	var Parser = (function () {
	    function Parser(code, options, delegate) {
	        if (options === void 0) { options = {}; }
	        this.config = {
	            range: (typeof options.range === 'boolean') && options.range,
	            loc: (typeof options.loc === 'boolean') && options.loc,
	            source: null,
	            tokens: (typeof options.tokens === 'boolean') && options.tokens,
	            comment: (typeof options.comment === 'boolean') && options.comment,
	            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant
	        };
	        if (this.config.loc && options.source && options.source !== null) {
	            this.config.source = String(options.source);
	        }
	        this.delegate = delegate;
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = this.config.tolerant;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = this.config.comment;
	        this.operatorPrecedence = {
	            ')': 0,
	            ';': 0,
	            ',': 0,
	            '=': 0,
	            ']': 0,
	            '||': 1,
	            '&&': 2,
	            '|': 3,
	            '^': 4,
	            '&': 5,
	            '==': 6,
	            '!=': 6,
	            '===': 6,
	            '!==': 6,
	            '<': 7,
	            '>': 7,
	            '<=': 7,
	            '>=': 7,
	            '<<': 8,
	            '>>': 8,
	            '>>>': 8,
	            '+': 9,
	            '-': 9,
	            '*': 11,
	            '/': 11,
	            '%': 11
	        };
	        this.lookahead = {
	            type: 2 /* EOF */,
	            value: '',
	            lineNumber: this.scanner.lineNumber,
	            lineStart: 0,
	            start: 0,
	            end: 0
	        };
	        this.hasLineTerminator = false;
	        this.context = {
	            isModule: false,
	            await: false,
	            allowIn: true,
	            allowStrictDirective: true,
	            allowYield: true,
	            firstCoverInitializedNameError: null,
	            isAssignmentTarget: false,
	            isBindingElement: false,
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            labelSet: {},
	            strict: false
	        };
	        this.tokens = [];
	        this.startMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.lastMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.nextToken();
	        this.lastMarker = {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    }
	    Parser.prototype.throwError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.lastMarker.line;
	        var column = this.lastMarker.column + 1;
	        throw this.errorHandler.createError(index, line, column, msg);
	    };
	    Parser.prototype.tolerateError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.scanner.lineNumber;
	        var column = this.lastMarker.column + 1;
	        this.errorHandler.tolerateError(index, line, column, msg);
	    };
	    // Throw an exception because of the token.
	    Parser.prototype.unexpectedTokenError = function (token, message) {
	        var msg = message || messages_1.Messages.UnexpectedToken;
	        var value;
	        if (token) {
	            if (!message) {
	                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :
	                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :
	                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :
	                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :
	                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :
	                                    messages_1.Messages.UnexpectedToken;
	                if (token.type === 4 /* Keyword */) {
	                    if (this.scanner.isFutureReservedWord(token.value)) {
	                        msg = messages_1.Messages.UnexpectedReserved;
	                    }
	                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
	                        msg = messages_1.Messages.StrictReservedWord;
	                    }
	                }
	            }
	            value = token.value;
	        }
	        else {
	            value = 'ILLEGAL';
	        }
	        msg = msg.replace('%0', value);
	        if (token && typeof token.lineNumber === 'number') {
	            var index = token.start;
	            var line = token.lineNumber;
	            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
	            var column = token.start - lastMarkerLineStart + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	        else {
	            var index = this.lastMarker.index;
	            var line = this.lastMarker.line;
	            var column = this.lastMarker.column + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	    };
	    Parser.prototype.throwUnexpectedToken = function (token, message) {
	        throw this.unexpectedTokenError(token, message);
	    };
	    Parser.prototype.tolerateUnexpectedToken = function (token, message) {
	        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
	    };
	    Parser.prototype.collectComments = function () {
	        if (!this.config.comment) {
	            this.scanner.scanComments();
	        }
	        else {
	            var comments = this.scanner.scanComments();
	            if (comments.length > 0 && this.delegate) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var node = void 0;
	                    node = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: this.scanner.source.slice(e.slice[0], e.slice[1])
	                    };
	                    if (this.config.range) {
	                        node.range = e.range;
	                    }
	                    if (this.config.loc) {
	                        node.loc = e.loc;
	                    }
	                    var metadata = {
	                        start: {
	                            line: e.loc.start.line,
	                            column: e.loc.start.column,
	                            offset: e.range[0]
	                        },
	                        end: {
	                            line: e.loc.end.line,
	                            column: e.loc.end.column,
	                            offset: e.range[1]
	                        }
	                    };
	                    this.delegate(node, metadata);
	                }
	            }
	        }
	    };
	    // From internal representation to an external structure
	    Parser.prototype.getTokenRaw = function (token) {
	        return this.scanner.source.slice(token.start, token.end);
	    };
	    Parser.prototype.convertToken = function (token) {
	        var t = {
	            type: token_1.TokenName[token.type],
	            value: this.getTokenRaw(token)
	        };
	        if (this.config.range) {
	            t.range = [token.start, token.end];
	        }
	        if (this.config.loc) {
	            t.loc = {
	                start: {
	                    line: this.startMarker.line,
	                    column: this.startMarker.column
	                },
	                end: {
	                    line: this.scanner.lineNumber,
	                    column: this.scanner.index - this.scanner.lineStart
	                }
	            };
	        }
	        if (token.type === 9 /* RegularExpression */) {
	            var pattern = token.pattern;
	            var flags = token.flags;
	            t.regex = { pattern: pattern, flags: flags };
	        }
	        return t;
	    };
	    Parser.prototype.nextToken = function () {
	        var token = this.lookahead;
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        this.collectComments();
	        if (this.scanner.index !== this.startMarker.index) {
	            this.startMarker.index = this.scanner.index;
	            this.startMarker.line = this.scanner.lineNumber;
	            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        }
	        var next = this.scanner.lex();
	        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);
	        if (next && this.context.strict && next.type === 3 /* Identifier */) {
	            if (this.scanner.isStrictModeReservedWord(next.value)) {
	                next.type = 4 /* Keyword */;
	            }
	        }
	        this.lookahead = next;
	        if (this.config.tokens && next.type !== 2 /* EOF */) {
	            this.tokens.push(this.convertToken(next));
	        }
	        return token;
	    };
	    Parser.prototype.nextRegexToken = function () {
	        this.collectComments();
	        var token = this.scanner.scanRegExp();
	        if (this.config.tokens) {
	            // Pop the previous token, '/' or '/='
	            // This is added from the lookahead token.
	            this.tokens.pop();
	            this.tokens.push(this.convertToken(token));
	        }
	        // Prime the next lookahead.
	        this.lookahead = token;
	        this.nextToken();
	        return token;
	    };
	    Parser.prototype.createNode = function () {
	        return {
	            index: this.startMarker.index,
	            line: this.startMarker.line,
	            column: this.startMarker.column
	        };
	    };
	    Parser.prototype.startNode = function (token, lastLineStart) {
	        if (lastLineStart === void 0) { lastLineStart = 0; }
	        var column = token.start - token.lineStart;
	        var line = token.lineNumber;
	        if (column < 0) {
	            column += lastLineStart;
	            line--;
	        }
	        return {
	            index: token.start,
	            line: line,
	            column: column
	        };
	    };
	    Parser.prototype.finalize = function (marker, node) {
	        if (this.config.range) {
	            node.range = [marker.index, this.lastMarker.index];
	        }
	        if (this.config.loc) {
	            node.loc = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column
	                }
	            };
	            if (this.config.source) {
	                node.loc.source = this.config.source;
	            }
	        }
	        if (this.delegate) {
	            var metadata = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                    offset: marker.index
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column,
	                    offset: this.lastMarker.index
	                }
	            };
	            this.delegate(node, metadata);
	        }
	        return node;
	    };
	    // Expect the next token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    Parser.prototype.expect = function (value) {
	        var token = this.nextToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
	    Parser.prototype.expectCommaSeparator = function () {
	        if (this.config.tolerant) {
	            var token = this.lookahead;
	            if (token.type === 7 /* Punctuator */ && token.value === ',') {
	                this.nextToken();
	            }
	            else if (token.type === 7 /* Punctuator */ && token.value === ';') {
	                this.nextToken();
	                this.tolerateUnexpectedToken(token);
	            }
	            else {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
	            }
	        }
	        else {
	            this.expect(',');
	        }
	    };
	    // Expect the next token to match the specified keyword.
	    // If not, an exception will be thrown.
	    Parser.prototype.expectKeyword = function (keyword) {
	        var token = this.nextToken();
	        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next token matches the specified punctuator.
	    Parser.prototype.match = function (value) {
	        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;
	    };
	    // Return true if the next token matches the specified keyword
	    Parser.prototype.matchKeyword = function (keyword) {
	        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token matches the specified contextual keyword
	    // (where an identifier is sometimes a keyword depending on the context)
	    Parser.prototype.matchContextualKeyword = function (keyword) {
	        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token is an assignment operator
	    Parser.prototype.matchAssign = function () {
	        if (this.lookahead.type !== 7 /* Punctuator */) {
	            return false;
	        }
	        var op = this.lookahead.value;
	        return op === '=' ||
	            op === '*=' ||
	            op === '**=' ||
	            op === '/=' ||
	            op === '%=' ||
	            op === '+=' ||
	            op === '-=' ||
	            op === '<<=' ||
	            op === '>>=' ||
	            op === '>>>=' ||
	            op === '&=' ||
	            op === '^=' ||
	            op === '|=';
	    };
	    // Cover grammar support.
	    //
	    // When an assignment expression position starts with an left parenthesis, the determination of the type
	    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
	    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
	    //
	    // There are three productions that can be parsed in a parentheses pair that needs to be determined
	    // after the outermost pair is closed. They are:
	    //
	    //   1. AssignmentExpression
	    //   2. BindingElements
	    //   3. AssignmentTargets
	    //
	    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
	    // binding element or assignment target.
	    //
	    // The three productions have the relationship:
	    //
	    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
	    //
	    // with a single exception that CoverInitializedName when used directly in an Expression, generates
	    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
	    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
	    //
	    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
	    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
	    // the CoverInitializedName check is conducted.
	    //
	    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
	    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
	    // pattern. The CoverInitializedName check is deferred.
	    Parser.prototype.isolateCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        if (this.context.firstCoverInitializedNameError !== null) {
	            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
	        }
	        this.context.isBindingElement = previousIsBindingElement;
	        this.context.isAssignmentTarget = previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.inheritCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
	        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.consumeSemicolon = function () {
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else if (!this.hasLineTerminator) {
	            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.lastMarker.index = this.startMarker.index;
	            this.lastMarker.line = this.startMarker.line;
	            this.lastMarker.column = this.startMarker.column;
	        }
	    };
	    // https://tc39.github.io/ecma262/#sec-primary-expression
	    Parser.prototype.parsePrimaryExpression = function () {
	        var node = this.createNode();
	        var expr;
	        var token, raw;
	        switch (this.lookahead.type) {
	            case 3 /* Identifier */:
	                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {
	                    this.tolerateUnexpectedToken(this.lookahead);
	                }
	                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
	                break;
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	                if (this.context.strict && this.lookahead.octal) {
	                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
	                }
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 1 /* BooleanLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
	                break;
	            case 5 /* NullLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(null, raw));
	                break;
	            case 10 /* Template */:
	                expr = this.parseTemplateLiteral();
	                break;
	            case 7 /* Punctuator */:
	                switch (this.lookahead.value) {
	                    case '(':
	                        this.context.isBindingElement = false;
	                        expr = this.inheritCoverGrammar(this.parseGroupExpression);
	                        break;
	                    case '[':
	                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);
	                        break;
	                    case '{':
	                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);
	                        break;
	                    case '/':
	                    case '/=':
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                        this.scanner.index = this.startMarker.index;
	                        token = this.nextRegexToken();
	                        raw = this.getTokenRaw(token);
	                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
	                        break;
	                    default:
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                }
	                break;
	            case 4 /* Keyword */:
	                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
	                    expr = this.parseIdentifierName();
	                }
	                else if (!this.context.strict && this.matchKeyword('let')) {
	                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
	                }
	                else {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    if (this.matchKeyword('function')) {
	                        expr = this.parseFunctionExpression();
	                    }
	                    else if (this.matchKeyword('this')) {
	                        this.nextToken();
	                        expr = this.finalize(node, new Node.ThisExpression());
	                    }
	                    else if (this.matchKeyword('class')) {
	                        expr = this.parseClassExpression();
	                    }
	                    else {
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                    }
	                }
	                break;
	            default:
	                expr = this.throwUnexpectedToken(this.nextToken());
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-array-initializer
	    Parser.prototype.parseSpreadElement = function () {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
	        return this.finalize(node, new Node.SpreadElement(arg));
	    };
	    Parser.prototype.parseArrayInitializer = function () {
	        var node = this.createNode();
	        var elements = [];
	        this.expect('[');
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else if (this.match('...')) {
	                var element = this.parseSpreadElement();
	                if (!this.match(']')) {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    this.expect(',');
	                }
	                elements.push(element);
	            }
	            else {
	                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayExpression(elements));
	    };
	    // https://tc39.github.io/ecma262/#sec-object-initializer
	    Parser.prototype.parsePropertyMethod = function (params) {
	        this.context.isAssignmentTarget = false;
	        this.context.isBindingElement = false;
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = params.simple;
	        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
	        if (this.context.strict && params.firstRestricted) {
	            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
	        }
	        if (this.context.strict && params.stricted) {
	            this.tolerateUnexpectedToken(params.stricted, params.message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        return body;
	    };
	    Parser.prototype.parsePropertyMethodFunction = function () {
	        var isGenerator = false;
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    Parser.prototype.parsePropertyMethodAsyncFunction = function () {
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        var previousAwait = this.context.await;
	        this.context.allowYield = false;
	        this.context.await = true;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        this.context.await = previousAwait;
	        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
	    };
	    Parser.prototype.parseObjectPropertyKey = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        var key;
	        switch (token.type) {
	            case 8 /* StringLiteral */:
	            case 6 /* NumericLiteral */:
	                if (this.context.strict && token.octal) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
	                }
	                var raw = this.getTokenRaw(token);
	                key = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 3 /* Identifier */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 4 /* Keyword */:
	                key = this.finalize(node, new Node.Identifier(token.value));
	                break;
	            case 7 /* Punctuator */:
	                if (token.value === '[') {
	                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    this.expect(']');
	                }
	                else {
	                    key = this.throwUnexpectedToken(token);
	                }
	                break;
	            default:
	                key = this.throwUnexpectedToken(token);
	        }
	        return key;
	    };
	    Parser.prototype.isPropertyKey = function (key, value) {
	        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||
	            (key.type === syntax_1.Syntax.Literal && key.value === value);
	    };
	    Parser.prototype.parseObjectProperty = function (hasProto) {
	        var node = this.createNode();
	        var token = this.lookahead;
	        var kind;
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var shorthand = false;
	        var isAsync = false;
	        if (token.type === 3 /* Identifier */) {
	            var id = token.value;
	            this.nextToken();
	            computed = this.match('[');
	            isAsync = !this.hasLineTerminator && (id === 'async') &&
	                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');
	            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
	        }
	        else if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
	            kind = 'get';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.context.allowYield = false;
	            value = this.parseGetterMethod();
	        }
	        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
	            kind = 'set';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseSetterMethod();
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        else {
	            if (!key) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            kind = 'init';
	            if (this.match(':') && !isAsync) {
	                if (!computed && this.isPropertyKey(key, '__proto__')) {
	                    if (hasProto.value) {
	                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
	                    }
	                    hasProto.value = true;
	                }
	                this.nextToken();
	                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
	            }
	            else if (this.match('(')) {
	                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	                method = true;
	            }
	            else if (token.type === 3 /* Identifier */) {
	                var id = this.finalize(node, new Node.Identifier(token.value));
	                if (this.match('=')) {
	                    this.context.firstCoverInitializedNameError = this.lookahead;
	                    this.nextToken();
	                    shorthand = true;
	                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    value = this.finalize(node, new Node.AssignmentPattern(id, init));
	                }
	                else {
	                    shorthand = true;
	                    value = id;
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectInitializer = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var properties = [];
	        var hasProto = { value: false };
	        while (!this.match('}')) {
	            properties.push(this.parseObjectProperty(hasProto));
	            if (!this.match('}')) {
	                this.expectCommaSeparator();
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectExpression(properties));
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literals
	    Parser.prototype.parseTemplateHead = function () {
	        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateElement = function () {
	        if (this.lookahead.type !== 10 /* Template */) {
	            this.throwUnexpectedToken();
	        }
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateLiteral = function () {
	        var node = this.createNode();
	        var expressions = [];
	        var quasis = [];
	        var quasi = this.parseTemplateHead();
	        quasis.push(quasi);
	        while (!quasi.tail) {
	            expressions.push(this.parseExpression());
	            quasi = this.parseTemplateElement();
	            quasis.push(quasi);
	        }
	        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
	    };
	    // https://tc39.github.io/ecma262/#sec-grouping-operator
	    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	            case syntax_1.Syntax.MemberExpression:
	            case syntax_1.Syntax.RestElement:
	            case syntax_1.Syntax.AssignmentPattern:
	                break;
	            case syntax_1.Syntax.SpreadElement:
	                expr.type = syntax_1.Syntax.RestElement;
	                this.reinterpretExpressionAsPattern(expr.argument);
	                break;
	            case syntax_1.Syntax.ArrayExpression:
	                expr.type = syntax_1.Syntax.ArrayPattern;
	                for (var i = 0; i < expr.elements.length; i++) {
	                    if (expr.elements[i] !== null) {
	                        this.reinterpretExpressionAsPattern(expr.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectExpression:
	                expr.type = syntax_1.Syntax.ObjectPattern;
	                for (var i = 0; i < expr.properties.length; i++) {
	                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
	                }
	                break;
	            case syntax_1.Syntax.AssignmentExpression:
	                expr.type = syntax_1.Syntax.AssignmentPattern;
	                delete expr.operator;
	                this.reinterpretExpressionAsPattern(expr.left);
	                break;
	            default:
	                // Allow other node type for tolerant parsing.
	                break;
	        }
	    };
	    Parser.prototype.parseGroupExpression = function () {
	        var expr;
	        this.expect('(');
	        if (this.match(')')) {
	            this.nextToken();
	            if (!this.match('=>')) {
	                this.expect('=>');
	            }
	            expr = {
	                type: ArrowParameterPlaceHolder,
	                params: [],
	                async: false
	            };
	        }
	        else {
	            var startToken = this.lookahead;
	            var params = [];
	            if (this.match('...')) {
	                expr = this.parseRestElement(params);
	                this.expect(')');
	                if (!this.match('=>')) {
	                    this.expect('=>');
	                }
	                expr = {
	                    type: ArrowParameterPlaceHolder,
	                    params: [expr],
	                    async: false
	                };
	            }
	            else {
	                var arrow = false;
	                this.context.isBindingElement = true;
	                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                if (this.match(',')) {
	                    var expressions = [];
	                    this.context.isAssignmentTarget = false;
	                    expressions.push(expr);
	                    while (this.lookahead.type !== 2 /* EOF */) {
	                        if (!this.match(',')) {
	                            break;
	                        }
	                        this.nextToken();
	                        if (this.match(')')) {
	                            this.nextToken();
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else if (this.match('...')) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            expressions.push(this.parseRestElement(params));
	                            this.expect(')');
	                            if (!this.match('=>')) {
	                                this.expect('=>');
	                            }
	                            this.context.isBindingElement = false;
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else {
	                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        if (arrow) {
	                            break;
	                        }
	                    }
	                    if (!arrow) {
	                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	                    }
	                }
	                if (!arrow) {
	                    this.expect(')');
	                    if (this.match('=>')) {
	                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: [expr],
	                                async: false
	                            };
	                        }
	                        if (!arrow) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
	                                for (var i = 0; i < expr.expressions.length; i++) {
	                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);
	                                }
	                            }
	                            else {
	                                this.reinterpretExpressionAsPattern(expr);
	                            }
	                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: parameters,
	                                async: false
	                            };
	                        }
	                    }
	                    this.context.isBindingElement = false;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions
	    Parser.prototype.parseArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAssignmentExpression);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.isIdentifierName = function (token) {
	        return token.type === 3 /* Identifier */ ||
	            token.type === 4 /* Keyword */ ||
	            token.type === 1 /* BooleanLiteral */ ||
	            token.type === 5 /* NullLiteral */;
	    };
	    Parser.prototype.parseIdentifierName = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (!this.isIdentifierName(token)) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseNewExpression = function () {
	        var node = this.createNode();
	        var id = this.parseIdentifierName();
	        assert_1.assert(id.name === 'new', 'New expression must start with `new`');
	        var expr;
	        if (this.match('.')) {
	            this.nextToken();
	            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {
	                var property = this.parseIdentifierName();
	                expr = new Node.MetaProperty(id, property);
	            }
	            else {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
	            var args = this.match('(') ? this.parseArguments() : [];
	            expr = new Node.NewExpression(callee, args);
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return this.finalize(node, expr);
	    };
	    Parser.prototype.parseAsyncArgument = function () {
	        var arg = this.parseAssignmentExpression();
	        this.context.firstCoverInitializedNameError = null;
	        return arg;
	    };
	    Parser.prototype.parseAsyncArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAsyncArgument);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
	        var startToken = this.lookahead;
	        var maybeAsync = this.matchContextualKeyword('async');
	        var previousAllowIn = this.context.allowIn;
	        this.context.allowIn = true;
	        var expr;
	        if (this.matchKeyword('super') && this.context.inFunctionBody) {
	            expr = this.createNode();
	            this.nextToken();
	            expr = this.finalize(expr, new Node.Super());
	            if (!this.match('(') && !this.match('.') && !this.match('[')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        }
	        while (true) {
	            if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.match('(')) {
	                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = false;
	                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
	                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
	                if (asyncArrow && this.match('=>')) {
	                    for (var i = 0; i < args.length; ++i) {
	                        this.reinterpretExpressionAsPattern(args[i]);
	                    }
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: args,
	                        async: true
	                    };
	                }
	            }
	            else if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        this.context.allowIn = previousAllowIn;
	        return expr;
	    };
	    Parser.prototype.parseSuper = function () {
	        var node = this.createNode();
	        this.expectKeyword('super');
	        if (!this.match('[') && !this.match('.')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        return this.finalize(node, new Node.Super());
	    };
	    Parser.prototype.parseLeftHandSideExpression = function () {
	        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
	        var node = this.startNode(this.lookahead);
	        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :
	            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        while (true) {
	            if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-update-expressions
	    Parser.prototype.parseUpdateExpression = function () {
	        var expr;
	        var startToken = this.lookahead;
	        if (this.match('++') || this.match('--')) {
	            var node = this.startNode(startToken);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
	            }
	            if (!this.context.isAssignmentTarget) {
	                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	            }
	            var prefix = true;
	            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {
	                if (this.match('++') || this.match('--')) {
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
	                    }
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    var operator = this.nextToken().value;
	                    var prefix = false;
	                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-unary-operators
	    Parser.prototype.parseAwaitExpression = function () {
	        var node = this.createNode();
	        this.nextToken();
	        var argument = this.parseUnaryExpression();
	        return this.finalize(node, new Node.AwaitExpression(argument));
	    };
	    Parser.prototype.parseUnaryExpression = function () {
	        var expr;
	        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||
	            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
	            var node = this.startNode(this.lookahead);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
	            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
	                this.tolerateError(messages_1.Messages.StrictDelete);
	            }
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else if (this.context.await && this.matchContextualKeyword('await')) {
	            expr = this.parseAwaitExpression();
	        }
	        else {
	            expr = this.parseUpdateExpression();
	        }
	        return expr;
	    };
	    Parser.prototype.parseExponentiationExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-exp-operator
	    // https://tc39.github.io/ecma262/#sec-multiplicative-operators
	    // https://tc39.github.io/ecma262/#sec-additive-operators
	    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
	    // https://tc39.github.io/ecma262/#sec-relational-operators
	    // https://tc39.github.io/ecma262/#sec-equality-operators
	    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
	    // https://tc39.github.io/ecma262/#sec-binary-logical-operators
	    Parser.prototype.binaryPrecedence = function (token) {
	        var op = token.value;
	        var precedence;
	        if (token.type === 7 /* Punctuator */) {
	            precedence = this.operatorPrecedence[op] || 0;
	        }
	        else if (token.type === 4 /* Keyword */) {
	            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;
	        }
	        else {
	            precedence = 0;
	        }
	        return precedence;
	    };
	    Parser.prototype.parseBinaryExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
	        var token = this.lookahead;
	        var prec = this.binaryPrecedence(token);
	        if (prec > 0) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var markers = [startToken, this.lookahead];
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            var stack = [left, token.value, right];
	            var precedences = [prec];
	            while (true) {
	                prec = this.binaryPrecedence(this.lookahead);
	                if (prec <= 0) {
	                    break;
	                }
	                // Reduce: make a binary expression from the three topmost entries.
	                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {
	                    right = stack.pop();
	                    var operator = stack.pop();
	                    precedences.pop();
	                    left = stack.pop();
	                    markers.pop();
	                    var node = this.startNode(markers[markers.length - 1]);
	                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
	                }
	                // Shift.
	                stack.push(this.nextToken().value);
	                precedences.push(prec);
	                markers.push(this.lookahead);
	                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
	            }
	            // Final reduce to clean-up the stack.
	            var i = stack.length - 1;
	            expr = stack[i];
	            var lastMarker = markers.pop();
	            while (i > 1) {
	                var marker = markers.pop();
	                var lastLineStart = lastMarker && lastMarker.lineStart;
	                var node = this.startNode(marker, lastLineStart);
	                var operator = stack[i - 1];
	                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
	                i -= 2;
	                lastMarker = marker;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-conditional-operator
	    Parser.prototype.parseConditionalExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
	        if (this.match('?')) {
	            this.nextToken();
	            var previousAllowIn = this.context.allowIn;
	            this.context.allowIn = true;
	            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowIn = previousAllowIn;
	            this.expect(':');
	            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-assignment-operators
	    Parser.prototype.checkPatternParam = function (options, param) {
	        switch (param.type) {
	            case syntax_1.Syntax.Identifier:
	                this.validateParam(options, param, param.name);
	                break;
	            case syntax_1.Syntax.RestElement:
	                this.checkPatternParam(options, param.argument);
	                break;
	            case syntax_1.Syntax.AssignmentPattern:
	                this.checkPatternParam(options, param.left);
	                break;
	            case syntax_1.Syntax.ArrayPattern:
	                for (var i = 0; i < param.elements.length; i++) {
	                    if (param.elements[i] !== null) {
	                        this.checkPatternParam(options, param.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectPattern:
	                for (var i = 0; i < param.properties.length; i++) {
	                    this.checkPatternParam(options, param.properties[i].value);
	                }
	                break;
	            default:
	                break;
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	    };
	    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
	        var params = [expr];
	        var options;
	        var asyncArrow = false;
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	                break;
	            case ArrowParameterPlaceHolder:
	                params = expr.params;
	                asyncArrow = expr.async;
	                break;
	            default:
	                return null;
	        }
	        options = {
	            simple: true,
	            paramSet: {}
	        };
	        for (var i = 0; i < params.length; ++i) {
	            var param = params[i];
	            if (param.type === syntax_1.Syntax.AssignmentPattern) {
	                if (param.right.type === syntax_1.Syntax.YieldExpression) {
	                    if (param.right.argument) {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                    param.right.type = syntax_1.Syntax.Identifier;
	                    param.right.name = 'yield';
	                    delete param.right.argument;
	                    delete param.right.delegate;
	                }
	            }
	            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.checkPatternParam(options, param);
	            params[i] = param;
	        }
	        if (this.context.strict || !this.context.allowYield) {
	            for (var i = 0; i < params.length; ++i) {
	                var param = params[i];
	                if (param.type === syntax_1.Syntax.YieldExpression) {
	                    this.throwUnexpectedToken(this.lookahead);
	                }
	            }
	        }
	        if (options.message === messages_1.Messages.StrictParamDupe) {
	            var token = this.context.strict ? options.stricted : options.firstRestricted;
	            this.throwUnexpectedToken(token, options.message);
	        }
	        return {
	            simple: options.simple,
	            params: params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.parseAssignmentExpression = function () {
	        var expr;
	        if (!this.context.allowYield && this.matchKeyword('yield')) {
	            expr = this.parseYieldExpression();
	        }
	        else {
	            var startToken = this.lookahead;
	            var token = startToken;
	            expr = this.parseConditionalExpression();
	            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {
	                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {
	                    var arg = this.parsePrimaryExpression();
	                    this.reinterpretExpressionAsPattern(arg);
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: [arg],
	                        async: true
	                    };
	                }
	            }
	            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
	                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                var isAsync = expr.async;
	                var list = this.reinterpretAsCoverFormalsList(expr);
	                if (list) {
	                    if (this.hasLineTerminator) {
	                        this.tolerateUnexpectedToken(this.lookahead);
	                    }
	                    this.context.firstCoverInitializedNameError = null;
	                    var previousStrict = this.context.strict;
	                    var previousAllowStrictDirective = this.context.allowStrictDirective;
	                    this.context.allowStrictDirective = list.simple;
	                    var previousAllowYield = this.context.allowYield;
	                    var previousAwait = this.context.await;
	                    this.context.allowYield = true;
	                    this.context.await = isAsync;
	                    var node = this.startNode(startToken);
	                    this.expect('=>');
	                    var body = void 0;
	                    if (this.match('{')) {
	                        var previousAllowIn = this.context.allowIn;
	                        this.context.allowIn = true;
	                        body = this.parseFunctionSourceElements();
	                        this.context.allowIn = previousAllowIn;
	                    }
	                    else {
	                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    }
	                    var expression = body.type !== syntax_1.Syntax.BlockStatement;
	                    if (this.context.strict && list.firstRestricted) {
	                        this.throwUnexpectedToken(list.firstRestricted, list.message);
	                    }
	                    if (this.context.strict && list.stricted) {
	                        this.tolerateUnexpectedToken(list.stricted, list.message);
	                    }
	                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :
	                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
	                    this.context.strict = previousStrict;
	                    this.context.allowStrictDirective = previousAllowStrictDirective;
	                    this.context.allowYield = previousAllowYield;
	                    this.context.await = previousAwait;
	                }
	            }
	            else {
	                if (this.matchAssign()) {
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
	                        var id = expr;
	                        if (this.scanner.isRestrictedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
	                        }
	                        if (this.scanner.isStrictModeReservedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	                        }
	                    }
	                    if (!this.match('=')) {
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                    }
	                    else {
	                        this.reinterpretExpressionAsPattern(expr);
	                    }
	                    token = this.nextToken();
	                    var operator = token.value;
	                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
	                    this.context.firstCoverInitializedNameError = null;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-comma-operator
	    Parser.prototype.parseExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        if (this.match(',')) {
	            var expressions = [];
	            expressions.push(expr);
	            while (this.lookahead.type !== 2 /* EOF */) {
	                if (!this.match(',')) {
	                    break;
	                }
	                this.nextToken();
	                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	            }
	            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-block
	    Parser.prototype.parseStatementListItem = function () {
	        var statement;
	        this.context.isAssignmentTarget = true;
	        this.context.isBindingElement = true;
	        if (this.lookahead.type === 4 /* Keyword */) {
	            switch (this.lookahead.value) {
	                case 'export':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
	                    }
	                    statement = this.parseExportDeclaration();
	                    break;
	                case 'import':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
	                    }
	                    statement = this.parseImportDeclaration();
	                    break;
	                case 'const':
	                    statement = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'function':
	                    statement = this.parseFunctionDeclaration();
	                    break;
	                case 'class':
	                    statement = this.parseClassDeclaration();
	                    break;
	                case 'let':
	                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
	                    break;
	                default:
	                    statement = this.parseStatement();
	                    break;
	            }
	        }
	        else {
	            statement = this.parseStatement();
	        }
	        return statement;
	    };
	    Parser.prototype.parseBlock = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var block = [];
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            block.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.BlockStatement(block));
	    };
	    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations
	    Parser.prototype.parseLexicalBinding = function (kind, options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, kind);
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (kind === 'const') {
	            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
	                if (this.match('=')) {
	                    this.nextToken();
	                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                }
	                else {
	                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
	                }
	            }
	        }
	        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {
	            this.expect('=');
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseBindingList = function (kind, options) {
	        var list = [this.parseLexicalBinding(kind, options)];
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseLexicalBinding(kind, options));
	        }
	        return list;
	    };
	    Parser.prototype.isLexicalDeclaration = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.scanner.lex();
	        this.scanner.restoreState(state);
	        return (next.type === 3 /* Identifier */) ||
	            (next.type === 7 /* Punctuator */ && next.value === '[') ||
	            (next.type === 7 /* Punctuator */ && next.value === '{') ||
	            (next.type === 4 /* Keyword */ && next.value === 'let') ||
	            (next.type === 4 /* Keyword */ && next.value === 'yield');
	    };
	    Parser.prototype.parseLexicalDeclaration = function (options) {
	        var node = this.createNode();
	        var kind = this.nextToken().value;
	        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
	        var declarations = this.parseBindingList(kind, options);
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
	    };
	    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
	    Parser.prototype.parseBindingRestElement = function (params, kind) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params, kind);
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseArrayPattern = function (params, kind) {
	        var node = this.createNode();
	        this.expect('[');
	        var elements = [];
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else {
	                if (this.match('...')) {
	                    elements.push(this.parseBindingRestElement(params, kind));
	                    break;
	                }
	                else {
	                    elements.push(this.parsePatternWithDefault(params, kind));
	                }
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayPattern(elements));
	    };
	    Parser.prototype.parsePropertyPattern = function (params, kind) {
	        var node = this.createNode();
	        var computed = false;
	        var shorthand = false;
	        var method = false;
	        var key;
	        var value;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            var keyToken = this.lookahead;
	            key = this.parseVariableIdentifier();
	            var init = this.finalize(node, new Node.Identifier(keyToken.value));
	            if (this.match('=')) {
	                params.push(keyToken);
	                shorthand = true;
	                this.nextToken();
	                var expr = this.parseAssignmentExpression();
	                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
	            }
	            else if (!this.match(':')) {
	                params.push(keyToken);
	                shorthand = true;
	                value = init;
	            }
	            else {
	                this.expect(':');
	                value = this.parsePatternWithDefault(params, kind);
	            }
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.expect(':');
	            value = this.parsePatternWithDefault(params, kind);
	        }
	        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectPattern = function (params, kind) {
	        var node = this.createNode();
	        var properties = [];
	        this.expect('{');
	        while (!this.match('}')) {
	            properties.push(this.parsePropertyPattern(params, kind));
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectPattern(properties));
	    };
	    Parser.prototype.parsePattern = function (params, kind) {
	        var pattern;
	        if (this.match('[')) {
	            pattern = this.parseArrayPattern(params, kind);
	        }
	        else if (this.match('{')) {
	            pattern = this.parseObjectPattern(params, kind);
	        }
	        else {
	            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
	                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
	            }
	            params.push(this.lookahead);
	            pattern = this.parseVariableIdentifier(kind);
	        }
	        return pattern;
	    };
	    Parser.prototype.parsePatternWithDefault = function (params, kind) {
	        var startToken = this.lookahead;
	        var pattern = this.parsePattern(params, kind);
	        if (this.match('=')) {
	            this.nextToken();
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = true;
	            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowYield = previousAllowYield;
	            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
	        }
	        return pattern;
	    };
	    // https://tc39.github.io/ecma262/#sec-variable-statement
	    Parser.prototype.parseVariableIdentifier = function (kind) {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (token.type === 4 /* Keyword */ && token.value === 'yield') {
	            if (this.context.strict) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else if (!this.context.allowYield) {
	                this.throwUnexpectedToken(token);
	            }
	        }
	        else if (token.type !== 3 /* Identifier */) {
	            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else {
	                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
	                    this.throwUnexpectedToken(token);
	                }
	            }
	        }
	        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {
	            this.tolerateUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseVariableDeclaration = function (options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, 'var');
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (this.match('=')) {
	            this.nextToken();
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
	            this.expect('=');
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseVariableDeclarationList = function (options) {
	        var opt = { inFor: options.inFor };
	        var list = [];
	        list.push(this.parseVariableDeclaration(opt));
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseVariableDeclaration(opt));
	        }
	        return list;
	    };
	    Parser.prototype.parseVariableStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('var');
	        var declarations = this.parseVariableDeclarationList({ inFor: false });
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
	    };
	    // https://tc39.github.io/ecma262/#sec-empty-statement
	    Parser.prototype.parseEmptyStatement = function () {
	        var node = this.createNode();
	        this.expect(';');
	        return this.finalize(node, new Node.EmptyStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-expression-statement
	    Parser.prototype.parseExpressionStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ExpressionStatement(expr));
	    };
	    // https://tc39.github.io/ecma262/#sec-if-statement
	    Parser.prototype.parseIfClause = function () {
	        if (this.context.strict && this.matchKeyword('function')) {
	            this.tolerateError(messages_1.Messages.StrictFunction);
	        }
	        return this.parseStatement();
	    };
	    Parser.prototype.parseIfStatement = function () {
	        var node = this.createNode();
	        var consequent;
	        var alternate = null;
	        this.expectKeyword('if');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            consequent = this.parseIfClause();
	            if (this.matchKeyword('else')) {
	                this.nextToken();
	                alternate = this.parseIfClause();
	            }
	        }
	        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
	    };
	    // https://tc39.github.io/ecma262/#sec-do-while-statement
	    Parser.prototype.parseDoWhileStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('do');
	        var previousInIteration = this.context.inIteration;
	        this.context.inIteration = true;
	        var body = this.parseStatement();
	        this.context.inIteration = previousInIteration;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	        }
	        else {
	            this.expect(')');
	            if (this.match(';')) {
	                this.nextToken();
	            }
	        }
	        return this.finalize(node, new Node.DoWhileStatement(body, test));
	    };
	    // https://tc39.github.io/ecma262/#sec-while-statement
	    Parser.prototype.parseWhileStatement = function () {
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.parseStatement();
	            this.context.inIteration = previousInIteration;
	        }
	        return this.finalize(node, new Node.WhileStatement(test, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-for-statement
	    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
	    Parser.prototype.parseForStatement = function () {
	        var init = null;
	        var test = null;
	        var update = null;
	        var forIn = true;
	        var left, right;
	        var node = this.createNode();
	        this.expectKeyword('for');
	        this.expect('(');
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else {
	            if (this.matchKeyword('var')) {
	                init = this.createNode();
	                this.nextToken();
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                var declarations = this.parseVariableDeclarationList({ inFor: true });
	                this.context.allowIn = previousAllowIn;
	                if (declarations.length === 1 && this.matchKeyword('in')) {
	                    var decl = declarations[0];
	                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
	                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
	                    }
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.expect(';');
	                }
	            }
	            else if (this.matchKeyword('const') || this.matchKeyword('let')) {
	                init = this.createNode();
	                var kind = this.nextToken().value;
	                if (!this.context.strict && this.lookahead.value === 'in') {
	                    init = this.finalize(init, new Node.Identifier(kind));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else {
	                    var previousAllowIn = this.context.allowIn;
	                    this.context.allowIn = false;
	                    var declarations = this.parseBindingList(kind, { inFor: true });
	                    this.context.allowIn = previousAllowIn;
	                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseExpression();
	                        init = null;
	                    }
	                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseAssignmentExpression();
	                        init = null;
	                        forIn = false;
	                    }
	                    else {
	                        this.consumeSemicolon();
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                    }
	                }
	            }
	            else {
	                var initStartToken = this.lookahead;
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                this.context.allowIn = previousAllowIn;
	                if (this.matchKeyword('in')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (this.matchContextualKeyword('of')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    if (this.match(',')) {
	                        var initSeq = [init];
	                        while (this.match(',')) {
	                            this.nextToken();
	                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
	                    }
	                    this.expect(';');
	                }
	            }
	        }
	        if (typeof left === 'undefined') {
	            if (!this.match(';')) {
	                test = this.parseExpression();
	            }
	            this.expect(';');
	            if (!this.match(')')) {
	                update = this.parseExpression();
	            }
	        }
	        var body;
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.isolateCoverGrammar(this.parseStatement);
	            this.context.inIteration = previousInIteration;
	        }
	        return (typeof left === 'undefined') ?
	            this.finalize(node, new Node.ForStatement(init, test, update, body)) :
	            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :
	                this.finalize(node, new Node.ForOfStatement(left, right, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-continue-statement
	    Parser.prototype.parseContinueStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('continue');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            label = id;
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration) {
	            this.throwError(messages_1.Messages.IllegalContinue);
	        }
	        return this.finalize(node, new Node.ContinueStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-break-statement
	    Parser.prototype.parseBreakStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('break');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	            label = id;
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration && !this.context.inSwitch) {
	            this.throwError(messages_1.Messages.IllegalBreak);
	        }
	        return this.finalize(node, new Node.BreakStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-return-statement
	    Parser.prototype.parseReturnStatement = function () {
	        if (!this.context.inFunctionBody) {
	            this.tolerateError(messages_1.Messages.IllegalReturn);
	        }
	        var node = this.createNode();
	        this.expectKeyword('return');
	        var hasArgument = (!this.match(';') && !this.match('}') &&
	            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||
	            this.lookahead.type === 8 /* StringLiteral */ ||
	            this.lookahead.type === 10 /* Template */;
	        var argument = hasArgument ? this.parseExpression() : null;
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ReturnStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-with-statement
	    Parser.prototype.parseWithStatement = function () {
	        if (this.context.strict) {
	            this.tolerateError(messages_1.Messages.StrictModeWith);
	        }
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('with');
	        this.expect('(');
	        var object = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            body = this.parseStatement();
	        }
	        return this.finalize(node, new Node.WithStatement(object, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-switch-statement
	    Parser.prototype.parseSwitchCase = function () {
	        var node = this.createNode();
	        var test;
	        if (this.matchKeyword('default')) {
	            this.nextToken();
	            test = null;
	        }
	        else {
	            this.expectKeyword('case');
	            test = this.parseExpression();
	        }
	        this.expect(':');
	        var consequent = [];
	        while (true) {
	            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
	                break;
	            }
	            consequent.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.SwitchCase(test, consequent));
	    };
	    Parser.prototype.parseSwitchStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('switch');
	        this.expect('(');
	        var discriminant = this.parseExpression();
	        this.expect(')');
	        var previousInSwitch = this.context.inSwitch;
	        this.context.inSwitch = true;
	        var cases = [];
	        var defaultFound = false;
	        this.expect('{');
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            var clause = this.parseSwitchCase();
	            if (clause.test === null) {
	                if (defaultFound) {
	                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
	                }
	                defaultFound = true;
	            }
	            cases.push(clause);
	        }
	        this.expect('}');
	        this.context.inSwitch = previousInSwitch;
	        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
	    };
	    // https://tc39.github.io/ecma262/#sec-labelled-statements
	    Parser.prototype.parseLabelledStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var statement;
	        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {
	            this.nextToken();
	            var id = expr;
	            var key = '$' + id.name;
	            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
	            }
	            this.context.labelSet[key] = true;
	            var body = void 0;
	            if (this.matchKeyword('class')) {
	                this.tolerateUnexpectedToken(this.lookahead);
	                body = this.parseClassDeclaration();
	            }
	            else if (this.matchKeyword('function')) {
	                var token = this.lookahead;
	                var declaration = this.parseFunctionDeclaration();
	                if (this.context.strict) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
	                }
	                else if (declaration.generator) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
	                }
	                body = declaration;
	            }
	            else {
	                body = this.parseStatement();
	            }
	            delete this.context.labelSet[key];
	            statement = new Node.LabeledStatement(id, body);
	        }
	        else {
	            this.consumeSemicolon();
	            statement = new Node.ExpressionStatement(expr);
	        }
	        return this.finalize(node, statement);
	    };
	    // https://tc39.github.io/ecma262/#sec-throw-statement
	    Parser.prototype.parseThrowStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('throw');
	        if (this.hasLineTerminator) {
	            this.throwError(messages_1.Messages.NewlineAfterThrow);
	        }
	        var argument = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ThrowStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-try-statement
	    Parser.prototype.parseCatchClause = function () {
	        var node = this.createNode();
	        this.expectKeyword('catch');
	        this.expect('(');
	        if (this.match(')')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        var params = [];
	        var param = this.parsePattern(params);
	        var paramMap = {};
	        for (var i = 0; i < params.length; i++) {
	            var key = '$' + params[i].value;
	            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
	                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
	            }
	            paramMap[key] = true;
	        }
	        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(param.name)) {
	                this.tolerateError(messages_1.Messages.StrictCatchVariable);
	            }
	        }
	        this.expect(')');
	        var body = this.parseBlock();
	        return this.finalize(node, new Node.CatchClause(param, body));
	    };
	    Parser.prototype.parseFinallyClause = function () {
	        this.expectKeyword('finally');
	        return this.parseBlock();
	    };
	    Parser.prototype.parseTryStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('try');
	        var block = this.parseBlock();
	        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
	        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
	        if (!handler && !finalizer) {
	            this.throwError(messages_1.Messages.NoCatchOrFinally);
	        }
	        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
	    };
	    // https://tc39.github.io/ecma262/#sec-debugger-statement
	    Parser.prototype.parseDebuggerStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('debugger');
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.DebuggerStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations
	    Parser.prototype.parseStatement = function () {
	        var statement;
	        switch (this.lookahead.type) {
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	            case 10 /* Template */:
	            case 9 /* RegularExpression */:
	                statement = this.parseExpressionStatement();
	                break;
	            case 7 /* Punctuator */:
	                var value = this.lookahead.value;
	                if (value === '{') {
	                    statement = this.parseBlock();
	                }
	                else if (value === '(') {
	                    statement = this.parseExpressionStatement();
	                }
	                else if (value === ';') {
	                    statement = this.parseEmptyStatement();
	                }
	                else {
	                    statement = this.parseExpressionStatement();
	                }
	                break;
	            case 3 /* Identifier */:
	                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
	                break;
	            case 4 /* Keyword */:
	                switch (this.lookahead.value) {
	                    case 'break':
	                        statement = this.parseBreakStatement();
	                        break;
	                    case 'continue':
	                        statement = this.parseContinueStatement();
	                        break;
	                    case 'debugger':
	                        statement = this.parseDebuggerStatement();
	                        break;
	                    case 'do':
	                        statement = this.parseDoWhileStatement();
	                        break;
	                    case 'for':
	                        statement = this.parseForStatement();
	                        break;
	                    case 'function':
	                        statement = this.parseFunctionDeclaration();
	                        break;
	                    case 'if':
	                        statement = this.parseIfStatement();
	                        break;
	                    case 'return':
	                        statement = this.parseReturnStatement();
	                        break;
	                    case 'switch':
	                        statement = this.parseSwitchStatement();
	                        break;
	                    case 'throw':
	                        statement = this.parseThrowStatement();
	                        break;
	                    case 'try':
	                        statement = this.parseTryStatement();
	                        break;
	                    case 'var':
	                        statement = this.parseVariableStatement();
	                        break;
	                    case 'while':
	                        statement = this.parseWhileStatement();
	                        break;
	                    case 'with':
	                        statement = this.parseWithStatement();
	                        break;
	                    default:
	                        statement = this.parseExpressionStatement();
	                        break;
	                }
	                break;
	            default:
	                statement = this.throwUnexpectedToken(this.lookahead);
	        }
	        return statement;
	    };
	    // https://tc39.github.io/ecma262/#sec-function-definitions
	    Parser.prototype.parseFunctionSourceElements = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var body = this.parseDirectivePrologues();
	        var previousLabelSet = this.context.labelSet;
	        var previousInIteration = this.context.inIteration;
	        var previousInSwitch = this.context.inSwitch;
	        var previousInFunctionBody = this.context.inFunctionBody;
	        this.context.labelSet = {};
	        this.context.inIteration = false;
	        this.context.inSwitch = false;
	        this.context.inFunctionBody = true;
	        while (this.lookahead.type !== 2 /* EOF */) {
	            if (this.match('}')) {
	                break;
	            }
	            body.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        this.context.labelSet = previousLabelSet;
	        this.context.inIteration = previousInIteration;
	        this.context.inSwitch = previousInSwitch;
	        this.context.inFunctionBody = previousInFunctionBody;
	        return this.finalize(node, new Node.BlockStatement(body));
	    };
	    Parser.prototype.validateParam = function (options, param, name) {
	        var key = '$' + name;
	        if (this.context.strict) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        else if (!options.firstRestricted) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            else if (this.scanner.isStrictModeReservedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictReservedWord;
	            }
	            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        /* istanbul ignore next */
	        if (typeof Object.defineProperty === 'function') {
	            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
	        }
	        else {
	            options.paramSet[key] = true;
	        }
	    };
	    Parser.prototype.parseRestElement = function (params) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params);
	        if (this.match('=')) {
	            this.throwError(messages_1.Messages.DefaultRestParameter);
	        }
	        if (!this.match(')')) {
	            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
	        }
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseFormalParameter = function (options) {
	        var params = [];
	        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
	        for (var i = 0; i < params.length; i++) {
	            this.validateParam(options, params[i], params[i].value);
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	        options.params.push(param);
	    };
	    Parser.prototype.parseFormalParameters = function (firstRestricted) {
	        var options;
	        options = {
	            simple: true,
	            params: [],
	            firstRestricted: firstRestricted
	        };
	        this.expect('(');
	        if (!this.match(')')) {
	            options.paramSet = {};
	            while (this.lookahead.type !== 2 /* EOF */) {
	                this.parseFormalParameter(options);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expect(',');
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return {
	            simple: options.simple,
	            params: options.params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.matchAsyncFunction = function () {
	        var match = this.matchContextualKeyword('async');
	        if (match) {
	            var state = this.scanner.saveState();
	            this.scanner.scanComments();
	            var next = this.scanner.lex();
	            this.scanner.restoreState(state);
	            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');
	        }
	        return match;
	    };
	    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted = null;
	        if (!identifierIsOptional || !this.match('(')) {
	            var token = this.lookahead;
	            id = this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :
	            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
	    };
	    Parser.prototype.parseFunctionExpression = function () {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted;
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        if (!this.match('(')) {
	            var token = this.lookahead;
	            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :
	            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
	    Parser.prototype.parseDirective = function () {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;
	        this.consumeSemicolon();
	        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
	    };
	    Parser.prototype.parseDirectivePrologues = function () {
	        var firstRestricted = null;
	        var body = [];
	        while (true) {
	            var token = this.lookahead;
	            if (token.type !== 8 /* StringLiteral */) {
	                break;
	            }
	            var statement = this.parseDirective();
	            body.push(statement);
	            var directive = statement.directive;
	            if (typeof directive !== 'string') {
	                break;
	            }
	            if (directive === 'use strict') {
	                this.context.strict = true;
	                if (firstRestricted) {
	                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
	                }
	                if (!this.context.allowStrictDirective) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
	                }
	            }
	            else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }
	        return body;
	    };
	    // https://tc39.github.io/ecma262/#sec-method-definitions
	    Parser.prototype.qualifiedPropertyName = function (token) {
	        switch (token.type) {
	            case 3 /* Identifier */:
	            case 8 /* StringLiteral */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 4 /* Keyword */:
	                return true;
	            case 7 /* Punctuator */:
	                return token.value === '[';
	            default:
	                break;
	        }
	        return false;
	    };
	    Parser.prototype.parseGetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length > 0) {
	            this.tolerateError(messages_1.Messages.BadGetterArity);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseSetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length !== 1) {
	            this.tolerateError(messages_1.Messages.BadSetterArity);
	        }
	        else if (formalParameters.params[0] instanceof Node.RestElement) {
	            this.tolerateError(messages_1.Messages.BadSetterRestParameter);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseGeneratorMethod = function () {
	        var node = this.createNode();
	        var isGenerator = true;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        this.context.allowYield = false;
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-generator-function-definitions
	    Parser.prototype.isStartOfExpression = function () {
	        var start = true;
	        var value = this.lookahead.value;
	        switch (this.lookahead.type) {
	            case 7 /* Punctuator */:
	                start = (value === '[') || (value === '(') || (value === '{') ||
	                    (value === '+') || (value === '-') ||
	                    (value === '!') || (value === '~') ||
	                    (value === '++') || (value === '--') ||
	                    (value === '/') || (value === '/='); // regular expression literal
	                break;
	            case 4 /* Keyword */:
	                start = (value === 'class') || (value === 'delete') ||
	                    (value === 'function') || (value === 'let') || (value === 'new') ||
	                    (value === 'super') || (value === 'this') || (value === 'typeof') ||
	                    (value === 'void') || (value === 'yield');
	                break;
	            default:
	                break;
	        }
	        return start;
	    };
	    Parser.prototype.parseYieldExpression = function () {
	        var node = this.createNode();
	        this.expectKeyword('yield');
	        var argument = null;
	        var delegate = false;
	        if (!this.hasLineTerminator) {
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = false;
	            delegate = this.match('*');
	            if (delegate) {
	                this.nextToken();
	                argument = this.parseAssignmentExpression();
	            }
	            else if (this.isStartOfExpression()) {
	                argument = this.parseAssignmentExpression();
	            }
	            this.context.allowYield = previousAllowYield;
	        }
	        return this.finalize(node, new Node.YieldExpression(argument, delegate));
	    };
	    // https://tc39.github.io/ecma262/#sec-class-definitions
	    Parser.prototype.parseClassElement = function (hasConstructor) {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var kind = '';
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var isStatic = false;
	        var isAsync = false;
	        if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            var id = key;
	            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
	                token = this.lookahead;
	                isStatic = true;
	                computed = this.match('[');
	                if (this.match('*')) {
	                    this.nextToken();
	                }
	                else {
	                    key = this.parseObjectPropertyKey();
	                }
	            }
	            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {
	                var punctuator = this.lookahead.value;
	                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
	                    isAsync = true;
	                    token = this.lookahead;
	                    key = this.parseObjectPropertyKey();
	                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {
	                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
	                    }
	                }
	            }
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */) {
	            if (token.value === 'get' && lookaheadPropertyKey) {
	                kind = 'get';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                this.context.allowYield = false;
	                value = this.parseGetterMethod();
	            }
	            else if (token.value === 'set' && lookaheadPropertyKey) {
	                kind = 'set';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                value = this.parseSetterMethod();
	            }
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        if (!kind && key && this.match('(')) {
	            kind = 'init';
	            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	            method = true;
	        }
	        if (!kind) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        if (kind === 'init') {
	            kind = 'method';
	        }
	        if (!computed) {
	            if (isStatic && this.isPropertyKey(key, 'prototype')) {
	                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
	            }
	            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
	                if (kind !== 'method' || !method || (value && value.generator)) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
	                }
	                if (hasConstructor.value) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
	                }
	                else {
	                    hasConstructor.value = true;
	                }
	                kind = 'constructor';
	            }
	        }
	        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
	    };
	    Parser.prototype.parseClassElementList = function () {
	        var body = [];
	        var hasConstructor = { value: false };
	        this.expect('{');
	        while (!this.match('}')) {
	            if (this.match(';')) {
	                this.nextToken();
	            }
	            else {
	                body.push(this.parseClassElement(hasConstructor));
	            }
	        }
	        this.expect('}');
	        return body;
	    };
	    Parser.prototype.parseClassBody = function () {
	        var node = this.createNode();
	        var elementList = this.parseClassElementList();
	        return this.finalize(node, new Node.ClassBody(elementList));
	    };
	    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
	    };
	    Parser.prototype.parseClassExpression = function () {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
	    };
	    // https://tc39.github.io/ecma262/#sec-scripts
	    // https://tc39.github.io/ecma262/#sec-modules
	    Parser.prototype.parseModule = function () {
	        this.context.strict = true;
	        this.context.isModule = true;
	        this.scanner.isModule = true;
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Module(body));
	    };
	    Parser.prototype.parseScript = function () {
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Script(body));
	    };
	    // https://tc39.github.io/ecma262/#sec-imports
	    Parser.prototype.parseModuleSpecifier = function () {
	        var node = this.createNode();
	        if (this.lookahead.type !== 8 /* StringLiteral */) {
	            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
	        }
	        var token = this.nextToken();
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    // import {<foo as bar>} ...;
	    Parser.prototype.parseImportSpecifier = function () {
	        var node = this.createNode();
	        var imported;
	        var local;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            imported = this.parseVariableIdentifier();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	        }
	        else {
	            imported = this.parseIdentifierName();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.ImportSpecifier(local, imported));
	    };
	    // {foo, bar as bas}
	    Parser.prototype.parseNamedImports = function () {
	        this.expect('{');
	        var specifiers = [];
	        while (!this.match('}')) {
	            specifiers.push(this.parseImportSpecifier());
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return specifiers;
	    };
	    // import <foo> ...;
	    Parser.prototype.parseImportDefaultSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportDefaultSpecifier(local));
	    };
	    // import <* as foo> ...;
	    Parser.prototype.parseImportNamespaceSpecifier = function () {
	        var node = this.createNode();
	        this.expect('*');
	        if (!this.matchContextualKeyword('as')) {
	            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
	        }
	        this.nextToken();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
	    };
	    Parser.prototype.parseImportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalImportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('import');
	        var src;
	        var specifiers = [];
	        if (this.lookahead.type === 8 /* StringLiteral */) {
	            // import 'foo';
	            src = this.parseModuleSpecifier();
	        }
	        else {
	            if (this.match('{')) {
	                // import {bar}
	                specifiers = specifiers.concat(this.parseNamedImports());
	            }
	            else if (this.match('*')) {
	                // import * as foo
	                specifiers.push(this.parseImportNamespaceSpecifier());
	            }
	            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
	                // import foo
	                specifiers.push(this.parseImportDefaultSpecifier());
	                if (this.match(',')) {
	                    this.nextToken();
	                    if (this.match('*')) {
	                        // import foo, * as foo
	                        specifiers.push(this.parseImportNamespaceSpecifier());
	                    }
	                    else if (this.match('{')) {
	                        // import foo, {bar}
	                        specifiers = specifiers.concat(this.parseNamedImports());
	                    }
	                    else {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            src = this.parseModuleSpecifier();
	        }
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
	    };
	    // https://tc39.github.io/ecma262/#sec-exports
	    Parser.prototype.parseExportSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        var exported = local;
	        if (this.matchContextualKeyword('as')) {
	            this.nextToken();
	            exported = this.parseIdentifierName();
	        }
	        return this.finalize(node, new Node.ExportSpecifier(local, exported));
	    };
	    Parser.prototype.parseExportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalExportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('export');
	        var exportDeclaration;
	        if (this.matchKeyword('default')) {
	            // export default ...
	            this.nextToken();
	            if (this.matchKeyword('function')) {
	                // export default function foo () {}
	                // export default function () {}
	                var declaration = this.parseFunctionDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchKeyword('class')) {
	                // export default class foo {}
	                var declaration = this.parseClassDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchContextualKeyword('async')) {
	                // export default async function f () {}
	                // export default async function () {}
	                // export default async x => x
	                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else {
	                if (this.matchContextualKeyword('from')) {
	                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
	                }
	                // export default {};
	                // export default [];
	                // export default (1 + 2);
	                var declaration = this.match('{') ? this.parseObjectInitializer() :
	                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
	                this.consumeSemicolon();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	        }
	        else if (this.match('*')) {
	            // export * from 'foo';
	            this.nextToken();
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            var src = this.parseModuleSpecifier();
	            this.consumeSemicolon();
	            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
	        }
	        else if (this.lookahead.type === 4 /* Keyword */) {
	            // export var f = 1;
	            var declaration = void 0;
	            switch (this.lookahead.value) {
	                case 'let':
	                case 'const':
	                    declaration = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'var':
	                case 'class':
	                case 'function':
	                    declaration = this.parseStatementListItem();
	                    break;
	                default:
	                    this.throwUnexpectedToken(this.lookahead);
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else if (this.matchAsyncFunction()) {
	            var declaration = this.parseFunctionDeclaration();
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else {
	            var specifiers = [];
	            var source = null;
	            var isExportFromIdentifier = false;
	            this.expect('{');
	            while (!this.match('}')) {
	                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
	                specifiers.push(this.parseExportSpecifier());
	                if (!this.match('}')) {
	                    this.expect(',');
	                }
	            }
	            this.expect('}');
	            if (this.matchContextualKeyword('from')) {
	                // export {default} from 'foo';
	                // export {foo} from 'foo';
	                this.nextToken();
	                source = this.parseModuleSpecifier();
	                this.consumeSemicolon();
	            }
	            else if (isExportFromIdentifier) {
	                // export {default}; // missing fromClause
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            else {
	                // export {foo};
	                this.consumeSemicolon();
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
	        }
	        return exportDeclaration;
	    };
	    return Parser;
	}());
	exports.Parser = Parser;


/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";
	// Ensure the condition is true, otherwise throw an error.
	// This is only to have a better contract semantic, i.e. another safety net
	// to catch a logic error. The condition shall be fulfilled in normal case.
	// Do NOT use this to enforce a certain condition on any user input.
	Object.defineProperty(exports, "__esModule", { value: true });
	function assert(condition, message) {
	    /* istanbul ignore if */
	    if (!condition) {
	        throw new Error('ASSERT: ' + message);
	    }
	}
	exports.assert = assert;


/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";
	/* tslint:disable:max-classes-per-file */
	Object.defineProperty(exports, "__esModule", { value: true });
	var ErrorHandler = (function () {
	    function ErrorHandler() {
	        this.errors = [];
	        this.tolerant = false;
	    }
	    ErrorHandler.prototype.recordError = function (error) {
	        this.errors.push(error);
	    };
	    ErrorHandler.prototype.tolerate = function (error) {
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    ErrorHandler.prototype.constructError = function (msg, column) {
	        var error = new Error(msg);
	        try {
	            throw error;
	        }
	        catch (base) {
	            /* istanbul ignore else */
	            if (Object.create && Object.defineProperty) {
	                error = Object.create(base);
	                Object.defineProperty(error, 'column', { value: column });
	            }
	        }
	        /* istanbul ignore next */
	        return error;
	    };
	    ErrorHandler.prototype.createError = function (index, line, col, description) {
	        var msg = 'Line ' + line + ': ' + description;
	        var error = this.constructError(msg, col);
	        error.index = index;
	        error.lineNumber = line;
	        error.description = description;
	        return error;
	    };
	    ErrorHandler.prototype.throwError = function (index, line, col, description) {
	        throw this.createError(index, line, col, description);
	    };
	    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
	        var error = this.createError(index, line, col, description);
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    return ErrorHandler;
	}());
	exports.ErrorHandler = ErrorHandler;


/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// Error messages should be identical to V8.
	exports.Messages = {
	    BadGetterArity: 'Getter must not have any formal parameters',
	    BadSetterArity: 'Setter must have exactly one formal parameter',
	    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
	    ConstructorIsAsync: 'Class constructor may not be an async method',
	    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
	    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
	    DefaultRestParameter: 'Unexpected token =',
	    DuplicateBinding: 'Duplicate binding %0',
	    DuplicateConstructor: 'A class may only have one constructor',
	    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
	    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
	    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
	    IllegalBreak: 'Illegal break statement',
	    IllegalContinue: 'Illegal continue statement',
	    IllegalExportDeclaration: 'Unexpected token',
	    IllegalImportDeclaration: 'Unexpected token',
	    IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
	    IllegalReturn: 'Illegal return statement',
	    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
	    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
	    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
	    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
	    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
	    InvalidModuleSpecifier: 'Unexpected token',
	    InvalidRegExp: 'Invalid regular expression',
	    LetInLexicalBinding: 'let is disallowed as a lexically bound name',
	    MissingFromClause: 'Unexpected token',
	    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
	    NewlineAfterThrow: 'Illegal newline after throw',
	    NoAsAfterImportNamespace: 'Unexpected token',
	    NoCatchOrFinally: 'Missing catch or finally after try',
	    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
	    Redeclaration: '%0 \'%1\' has already been declared',
	    StaticPrototype: 'Classes may not have static property named prototype',
	    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
	    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
	    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
	    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
	    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
	    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictModeWith: 'Strict mode code may not include a with statement',
	    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
	    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
	    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
	    StrictReservedWord: 'Use of future reserved word in strict mode',
	    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
	    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
	    UnexpectedEOS: 'Unexpected end of input',
	    UnexpectedIdentifier: 'Unexpected identifier',
	    UnexpectedNumber: 'Unexpected number',
	    UnexpectedReserved: 'Unexpected reserved word',
	    UnexpectedString: 'Unexpected string',
	    UnexpectedTemplate: 'Unexpected quasi %0',
	    UnexpectedToken: 'Unexpected token %0',
	    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
	    UnknownLabel: 'Undefined label \'%0\'',
	    UnterminatedRegExp: 'Invalid regular expression: missing /'
	};


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __webpack_require__(9);
	var character_1 = __webpack_require__(4);
	var messages_1 = __webpack_require__(11);
	function hexValue(ch) {
	    return '0123456789abcdef'.indexOf(ch.toLowerCase());
	}
	function octalValue(ch) {
	    return '01234567'.indexOf(ch);
	}
	var Scanner = (function () {
	    function Scanner(code, handler) {
	        this.source = code;
	        this.errorHandler = handler;
	        this.trackComment = false;
	        this.isModule = false;
	        this.length = code.length;
	        this.index = 0;
	        this.lineNumber = (code.length > 0) ? 1 : 0;
	        this.lineStart = 0;
	        this.curlyStack = [];
	    }
	    Scanner.prototype.saveState = function () {
	        return {
	            index: this.index,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart
	        };
	    };
	    Scanner.prototype.restoreState = function (state) {
	        this.index = state.index;
	        this.lineNumber = state.lineNumber;
	        this.lineStart = state.lineStart;
	    };
	    Scanner.prototype.eof = function () {
	        return this.index >= this.length;
	    };
	    Scanner.prototype.throwUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    Scanner.prototype.tolerateUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    // https://tc39.github.io/ecma262/#sec-comments
	    Scanner.prototype.skipSingleLineComment = function (offset) {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - offset;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - offset
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            ++this.index;
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (this.trackComment) {
	                    loc.end = {
	                        line: this.lineNumber,
	                        column: this.index - this.lineStart - 1
	                    };
	                    var entry = {
	                        multiLine: false,
	                        slice: [start + offset, this.index - 1],
	                        range: [start, this.index - 1],
	                        loc: loc
	                    };
	                    comments.push(entry);
	                }
	                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                return comments;
	            }
	        }
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: false,
	                slice: [start + offset, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        return comments;
	    };
	    Scanner.prototype.skipMultiLineComment = function () {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - 2;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - 2
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                ++this.index;
	                this.lineStart = this.index;
	            }
	            else if (ch === 0x2A) {
	                // Block comment ends with '*/'.
	                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
	                    this.index += 2;
	                    if (this.trackComment) {
	                        loc.end = {
	                            line: this.lineNumber,
	                            column: this.index - this.lineStart
	                        };
	                        var entry = {
	                            multiLine: true,
	                            slice: [start + 2, this.index - 2],
	                            range: [start, this.index],
	                            loc: loc
	                        };
	                        comments.push(entry);
	                    }
	                    return comments;
	                }
	                ++this.index;
	            }
	            else {
	                ++this.index;
	            }
	        }
	        // Ran off the end of the file - the whole thing is a comment
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: true,
	                slice: [start + 2, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        this.tolerateUnexpectedToken();
	        return comments;
	    };
	    Scanner.prototype.scanComments = function () {
	        var comments;
	        if (this.trackComment) {
	            comments = [];
	        }
	        var start = (this.index === 0);
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isWhiteSpace(ch)) {
	                ++this.index;
	            }
	            else if (character_1.Character.isLineTerminator(ch)) {
	                ++this.index;
	                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                start = true;
	            }
	            else if (ch === 0x2F) {
	                ch = this.source.charCodeAt(this.index + 1);
	                if (ch === 0x2F) {
	                    this.index += 2;
	                    var comment = this.skipSingleLineComment(2);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                    start = true;
	                }
	                else if (ch === 0x2A) {
	                    this.index += 2;
	                    var comment = this.skipMultiLineComment();
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (start && ch === 0x2D) {
	                // U+003E is '>'
	                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {
	                    // '-->' is a single-line comment
	                    this.index += 3;
	                    var comment = this.skipSingleLineComment(3);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (ch === 0x3C && !this.isModule) {
	                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
	                    this.index += 4; // `<!--`
	                    var comment = this.skipSingleLineComment(4);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else {
	                break;
	            }
	        }
	        return comments;
	    };
	    // https://tc39.github.io/ecma262/#sec-future-reserved-words
	    Scanner.prototype.isFutureReservedWord = function (id) {
	        switch (id) {
	            case 'enum':
	            case 'export':
	            case 'import':
	            case 'super':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isStrictModeReservedWord = function (id) {
	        switch (id) {
	            case 'implements':
	            case 'interface':
	            case 'package':
	            case 'private':
	            case 'protected':
	            case 'public':
	            case 'static':
	            case 'yield':
	            case 'let':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isRestrictedWord = function (id) {
	        return id === 'eval' || id === 'arguments';
	    };
	    // https://tc39.github.io/ecma262/#sec-keywords
	    Scanner.prototype.isKeyword = function (id) {
	        switch (id.length) {
	            case 2:
	                return (id === 'if') || (id === 'in') || (id === 'do');
	            case 3:
	                return (id === 'var') || (id === 'for') || (id === 'new') ||
	                    (id === 'try') || (id === 'let');
	            case 4:
	                return (id === 'this') || (id === 'else') || (id === 'case') ||
	                    (id === 'void') || (id === 'with') || (id === 'enum');
	            case 5:
	                return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                    (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                    (id === 'class') || (id === 'super');
	            case 6:
	                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                    (id === 'switch') || (id === 'export') || (id === 'import');
	            case 7:
	                return (id === 'default') || (id === 'finally') || (id === 'extends');
	            case 8:
	                return (id === 'function') || (id === 'continue') || (id === 'debugger');
	            case 10:
	                return (id === 'instanceof');
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.codePointAt = function (i) {
	        var cp = this.source.charCodeAt(i);
	        if (cp >= 0xD800 && cp <= 0xDBFF) {
	            var second = this.source.charCodeAt(i + 1);
	            if (second >= 0xDC00 && second <= 0xDFFF) {
	                var first = cp;
	                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            }
	        }
	        return cp;
	    };
	    Scanner.prototype.scanHexEscape = function (prefix) {
	        var len = (prefix === 'u') ? 4 : 2;
	        var code = 0;
	        for (var i = 0; i < len; ++i) {
	            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                code = code * 16 + hexValue(this.source[this.index++]);
	            }
	            else {
	                return null;
	            }
	        }
	        return String.fromCharCode(code);
	    };
	    Scanner.prototype.scanUnicodeCodePointEscape = function () {
	        var ch = this.source[this.index];
	        var code = 0;
	        // At least, one hex digit is required.
	        if (ch === '}') {
	            this.throwUnexpectedToken();
	        }
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
	                break;
	            }
	            code = code * 16 + hexValue(ch);
	        }
	        if (code > 0x10FFFF || ch !== '}') {
	            this.throwUnexpectedToken();
	        }
	        return character_1.Character.fromCodePoint(code);
	    };
	    Scanner.prototype.getIdentifier = function () {
	        var start = this.index++;
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (ch === 0x5C) {
	                // Blackslash (U+005C) marks Unicode escape sequence.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            else if (ch >= 0xD800 && ch < 0xDFFF) {
	                // Need to handle surrogate pairs.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            if (character_1.Character.isIdentifierPart(ch)) {
	                ++this.index;
	            }
	            else {
	                break;
	            }
	        }
	        return this.source.slice(start, this.index);
	    };
	    Scanner.prototype.getComplexIdentifier = function () {
	        var cp = this.codePointAt(this.index);
	        var id = character_1.Character.fromCodePoint(cp);
	        this.index += id.length;
	        // '\u' (U+005C, U+0075) denotes an escaped character.
	        var ch;
	        if (cp === 0x5C) {
	            if (this.source.charCodeAt(this.index) !== 0x75) {
	                this.throwUnexpectedToken();
	            }
	            ++this.index;
	            if (this.source[this.index] === '{') {
	                ++this.index;
	                ch = this.scanUnicodeCodePointEscape();
	            }
	            else {
	                ch = this.scanHexEscape('u');
	                if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken();
	                }
	            }
	            id = ch;
	        }
	        while (!this.eof()) {
	            cp = this.codePointAt(this.index);
	            if (!character_1.Character.isIdentifierPart(cp)) {
	                break;
	            }
	            ch = character_1.Character.fromCodePoint(cp);
	            id += ch;
	            this.index += ch.length;
	            // '\u' (U+005C, U+0075) denotes an escaped character.
	            if (cp === 0x5C) {
	                id = id.substr(0, id.length - 1);
	                if (this.source.charCodeAt(this.index) !== 0x75) {
	                    this.throwUnexpectedToken();
	                }
	                ++this.index;
	                if (this.source[this.index] === '{') {
	                    ++this.index;
	                    ch = this.scanUnicodeCodePointEscape();
	                }
	                else {
	                    ch = this.scanHexEscape('u');
	                    if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                        this.throwUnexpectedToken();
	                    }
	                }
	                id += ch;
	            }
	        }
	        return id;
	    };
	    Scanner.prototype.octalToDecimal = function (ch) {
	        // \0 is not octal escape sequence
	        var octal = (ch !== '0');
	        var code = octalValue(ch);
	        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	            octal = true;
	            code = code * 8 + octalValue(this.source[this.index++]);
	            // 3 digits are only allowed when string starts
	            // with 0, 1, 2, 3
	            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                code = code * 8 + octalValue(this.source[this.index++]);
	            }
	        }
	        return {
	            code: code,
	            octal: octal
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    Scanner.prototype.scanIdentifier = function () {
	        var type;
	        var start = this.index;
	        // Backslash (U+005C) starts an escaped character.
	        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();
	        // There is no keyword or literal with only one character.
	        // Thus, it must be an identifier.
	        if (id.length === 1) {
	            type = 3 /* Identifier */;
	        }
	        else if (this.isKeyword(id)) {
	            type = 4 /* Keyword */;
	        }
	        else if (id === 'null') {
	            type = 5 /* NullLiteral */;
	        }
	        else if (id === 'true' || id === 'false') {
	            type = 1 /* BooleanLiteral */;
	        }
	        else {
	            type = 3 /* Identifier */;
	        }
	        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {
	            var restore = this.index;
	            this.index = start;
	            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
	            this.index = restore;
	        }
	        return {
	            type: type,
	            value: id,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-punctuators
	    Scanner.prototype.scanPunctuator = function () {
	        var start = this.index;
	        // Check for most common single-character punctuators.
	        var str = this.source[this.index];
	        switch (str) {
	            case '(':
	            case '{':
	                if (str === '{') {
	                    this.curlyStack.push('{');
	                }
	                ++this.index;
	                break;
	            case '.':
	                ++this.index;
	                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
	                    // Spread operator: ...
	                    this.index += 2;
	                    str = '...';
	                }
	                break;
	            case '}':
	                ++this.index;
	                this.curlyStack.pop();
	                break;
	            case ')':
	            case ';':
	            case ',':
	            case '[':
	            case ']':
	            case ':':
	            case '?':
	            case '~':
	                ++this.index;
	                break;
	            default:
	                // 4-character punctuator.
	                str = this.source.substr(this.index, 4);
	                if (str === '>>>=') {
	                    this.index += 4;
	                }
	                else {
	                    // 3-character punctuators.
	                    str = str.substr(0, 3);
	                    if (str === '===' || str === '!==' || str === '>>>' ||
	                        str === '<<=' || str === '>>=' || str === '**=') {
	                        this.index += 3;
	                    }
	                    else {
	                        // 2-character punctuators.
	                        str = str.substr(0, 2);
	                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
	                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
	                            str === '++' || str === '--' || str === '<<' || str === '>>' ||
	                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
	                            str === '<=' || str === '>=' || str === '=>' || str === '**') {
	                            this.index += 2;
	                        }
	                        else {
	                            // 1-character punctuators.
	                            str = this.source[this.index];
	                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
	                                ++this.index;
	                            }
	                        }
	                    }
	                }
	        }
	        if (this.index === start) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 7 /* Punctuator */,
	            value: str,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    Scanner.prototype.scanHexLiteral = function (start) {
	        var num = '';
	        while (!this.eof()) {
	            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt('0x' + num, 16),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanBinaryLiteral = function (start) {
	        var num = '';
	        var ch;
	        while (!this.eof()) {
	            ch = this.source[this.index];
	            if (ch !== '0' && ch !== '1') {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            // only 0b or 0B
	            this.throwUnexpectedToken();
	        }
	        if (!this.eof()) {
	            ch = this.source.charCodeAt(this.index);
	            /* istanbul ignore else */
	            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
	                this.throwUnexpectedToken();
	            }
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 2),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanOctalLiteral = function (prefix, start) {
	        var num = '';
	        var octal = false;
	        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
	            octal = true;
	            num = '0' + this.source[this.index++];
	        }
	        else {
	            ++this.index;
	        }
	        while (!this.eof()) {
	            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (!octal && num.length === 0) {
	            // only 0o or 0O
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 8),
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.isImplicitOctalLiteral = function () {
	        // Implicit octal, unless there is a non-octal digit.
	        // (Annex B.1.1 on Numeric Literals)
	        for (var i = this.index + 1; i < this.length; ++i) {
	            var ch = this.source[i];
	            if (ch === '8' || ch === '9') {
	                return false;
	            }
	            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                return true;
	            }
	        }
	        return true;
	    };
	    Scanner.prototype.scanNumericLiteral = function () {
	        var start = this.index;
	        var ch = this.source[start];
	        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
	        var num = '';
	        if (ch !== '.') {
	            num = this.source[this.index++];
	            ch = this.source[this.index];
	            // Hex number starts with '0x'.
	            // Octal number starts with '0'.
	            // Octal number in ES6 starts with '0o'.
	            // Binary number in ES6 starts with '0b'.
	            if (num === '0') {
	                if (ch === 'x' || ch === 'X') {
	                    ++this.index;
	                    return this.scanHexLiteral(start);
	                }
	                if (ch === 'b' || ch === 'B') {
	                    ++this.index;
	                    return this.scanBinaryLiteral(start);
	                }
	                if (ch === 'o' || ch === 'O') {
	                    return this.scanOctalLiteral(ch, start);
	                }
	                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                    if (this.isImplicitOctalLiteral()) {
	                        return this.scanOctalLiteral(ch, start);
	                    }
	                }
	            }
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === '.') {
	            num += this.source[this.index++];
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === 'e' || ch === 'E') {
	            num += this.source[this.index++];
	            ch = this.source[this.index];
	            if (ch === '+' || ch === '-') {
	                num += this.source[this.index++];
	            }
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                    num += this.source[this.index++];
	                }
	            }
	            else {
	                this.throwUnexpectedToken();
	            }
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseFloat(num),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-string-literals
	    Scanner.prototype.scanStringLiteral = function () {
	        var start = this.index;
	        var quote = this.source[start];
	        assert_1.assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
	        ++this.index;
	        var octal = false;
	        var str = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === quote) {
	                quote = '';
	                break;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                str += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var unescaped_1 = this.scanHexEscape(ch);
	                                if (unescaped_1 === null) {
	                                    this.throwUnexpectedToken();
	                                }
	                                str += unescaped_1;
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            str += unescaped;
	                            break;
	                        case 'n':
	                            str += '\n';
	                            break;
	                        case 'r':
	                            str += '\r';
	                            break;
	                        case 't':
	                            str += '\t';
	                            break;
	                        case 'b':
	                            str += '\b';
	                            break;
	                        case 'f':
	                            str += '\f';
	                            break;
	                        case 'v':
	                            str += '\x0B';
	                            break;
	                        case '8':
	                        case '9':
	                            str += ch;
	                            this.tolerateUnexpectedToken();
	                            break;
	                        default:
	                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                var octToDec = this.octalToDecimal(ch);
	                                octal = octToDec.octal || octal;
	                                str += String.fromCharCode(octToDec.code);
	                            }
	                            else {
	                                str += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                break;
	            }
	            else {
	                str += ch;
	            }
	        }
	        if (quote !== '') {
	            this.index = start;
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 8 /* StringLiteral */,
	            value: str,
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components
	    Scanner.prototype.scanTemplate = function () {
	        var cooked = '';
	        var terminated = false;
	        var start = this.index;
	        var head = (this.source[start] === '`');
	        var tail = false;
	        var rawOffset = 2;
	        ++this.index;
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === '`') {
	                rawOffset = 1;
	                tail = true;
	                terminated = true;
	                break;
	            }
	            else if (ch === '$') {
	                if (this.source[this.index] === '{') {
	                    this.curlyStack.push('${');
	                    ++this.index;
	                    terminated = true;
	                    break;
	                }
	                cooked += ch;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'n':
	                            cooked += '\n';
	                            break;
	                        case 'r':
	                            cooked += '\r';
	                            break;
	                        case 't':
	                            cooked += '\t';
	                            break;
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                cooked += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var restore = this.index;
	                                var unescaped_2 = this.scanHexEscape(ch);
	                                if (unescaped_2 !== null) {
	                                    cooked += unescaped_2;
	                                }
	                                else {
	                                    this.index = restore;
	                                    cooked += ch;
	                                }
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            cooked += unescaped;
	                            break;
	                        case 'b':
	                            cooked += '\b';
	                            break;
	                        case 'f':
	                            cooked += '\f';
	                            break;
	                        case 'v':
	                            cooked += '\v';
	                            break;
	                        default:
	                            if (ch === '0') {
	                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                                    // Illegal: \01 \02 and so on
	                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                                }
	                                cooked += '\0';
	                            }
	                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                // Illegal: \1 \2
	                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                            }
	                            else {
	                                cooked += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.lineNumber;
	                if (ch === '\r' && this.source[this.index] === '\n') {
	                    ++this.index;
	                }
	                this.lineStart = this.index;
	                cooked += '\n';
	            }
	            else {
	                cooked += ch;
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken();
	        }
	        if (!head) {
	            this.curlyStack.pop();
	        }
	        return {
	            type: 10 /* Template */,
	            value: this.source.slice(start + 1, this.index - rawOffset),
	            cooked: cooked,
	            head: head,
	            tail: tail,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	    Scanner.prototype.testRegExp = function (pattern, flags) {
	        // The BMP character to use as a replacement for astral symbols when
	        // translating an ES6 "u"-flagged pattern to an ES5-compatible
	        // approximation.
	        // Note: replacing with '\uFFFF' enables false positives in unlikely
	        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
	        // pattern that would not be detected by this substitution.
	        var astralSubstitute = '\uFFFF';
	        var tmp = pattern;
	        var self = this;
	        if (flags.indexOf('u') >= 0) {
	            tmp = tmp
	                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
	                var codePoint = parseInt($1 || $2, 16);
	                if (codePoint > 0x10FFFF) {
	                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	                }
	                if (codePoint <= 0xFFFF) {
	                    return String.fromCharCode(codePoint);
	                }
	                return astralSubstitute;
	            })
	                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
	        }
	        // First, detect invalid regular expressions.
	        try {
	            RegExp(tmp);
	        }
	        catch (e) {
	            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	        }
	        // Return a regular expression object for this pattern-flag pair, or
	        // `null` in case the current environment doesn't support the flags it
	        // uses.
	        try {
	            return new RegExp(pattern, flags);
	        }
	        catch (exception) {
	            /* istanbul ignore next */
	            return null;
	        }
	    };
	    Scanner.prototype.scanRegExpBody = function () {
	        var ch = this.source[this.index];
	        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
	        var str = this.source[this.index++];
	        var classMarker = false;
	        var terminated = false;
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            str += ch;
	            if (ch === '\\') {
	                ch = this.source[this.index++];
	                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	                }
	                str += ch;
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	            }
	            else if (classMarker) {
	                if (ch === ']') {
	                    classMarker = false;
	                }
	            }
	            else {
	                if (ch === '/') {
	                    terminated = true;
	                    break;
	                }
	                else if (ch === '[') {
	                    classMarker = true;
	                }
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	        }
	        // Exclude leading and trailing slash.
	        return str.substr(1, str.length - 2);
	    };
	    Scanner.prototype.scanRegExpFlags = function () {
	        var str = '';
	        var flags = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index];
	            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                break;
	            }
	            ++this.index;
	            if (ch === '\\' && !this.eof()) {
	                ch = this.source[this.index];
	                if (ch === 'u') {
	                    ++this.index;
	                    var restore = this.index;
	                    var char = this.scanHexEscape('u');
	                    if (char !== null) {
	                        flags += char;
	                        for (str += '\\u'; restore < this.index; ++restore) {
	                            str += this.source[restore];
	                        }
	                    }
	                    else {
	                        this.index = restore;
	                        flags += 'u';
	                        str += '\\u';
	                    }
	                    this.tolerateUnexpectedToken();
	                }
	                else {
	                    str += '\\';
	                    this.tolerateUnexpectedToken();
	                }
	            }
	            else {
	                flags += ch;
	                str += ch;
	            }
	        }
	        return flags;
	    };
	    Scanner.prototype.scanRegExp = function () {
	        var start = this.index;
	        var pattern = this.scanRegExpBody();
	        var flags = this.scanRegExpFlags();
	        var value = this.testRegExp(pattern, flags);
	        return {
	            type: 9 /* RegularExpression */,
	            value: '',
	            pattern: pattern,
	            flags: flags,
	            regex: value,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.lex = function () {
	        if (this.eof()) {
	            return {
	                type: 2 /* EOF */,
	                value: '',
	                lineNumber: this.lineNumber,
	                lineStart: this.lineStart,
	                start: this.index,
	                end: this.index
	            };
	        }
	        var cp = this.source.charCodeAt(this.index);
	        if (character_1.Character.isIdentifierStart(cp)) {
	            return this.scanIdentifier();
	        }
	        // Very common: ( and ) and ;
	        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
	            return this.scanPunctuator();
	        }
	        // String literal starts with single quote (U+0027) or double quote (U+0022).
	        if (cp === 0x27 || cp === 0x22) {
	            return this.scanStringLiteral();
	        }
	        // Dot (.) U+002E can also start a floating-point number, hence the need
	        // to check the next character.
	        if (cp === 0x2E) {
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
	                return this.scanNumericLiteral();
	            }
	            return this.scanPunctuator();
	        }
	        if (character_1.Character.isDecimalDigit(cp)) {
	            return this.scanNumericLiteral();
	        }
	        // Template literals start with ` (U+0060) for template head
	        // or } (U+007D) for template middle or template tail.
	        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {
	            return this.scanTemplate();
	        }
	        // Possible identifier start in a surrogate pair.
	        if (cp >= 0xD800 && cp < 0xDFFF) {
	            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
	                return this.scanIdentifier();
	            }
	        }
	        return this.scanPunctuator();
	    };
	    return Scanner;
	}());
	exports.Scanner = Scanner;


/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TokenName = {};
	exports.TokenName[1 /* BooleanLiteral */] = 'Boolean';
	exports.TokenName[2 /* EOF */] = '<end>';
	exports.TokenName[3 /* Identifier */] = 'Identifier';
	exports.TokenName[4 /* Keyword */] = 'Keyword';
	exports.TokenName[5 /* NullLiteral */] = 'Null';
	exports.TokenName[6 /* NumericLiteral */] = 'Numeric';
	exports.TokenName[7 /* Punctuator */] = 'Punctuator';
	exports.TokenName[8 /* StringLiteral */] = 'String';
	exports.TokenName[9 /* RegularExpression */] = 'RegularExpression';
	exports.TokenName[10 /* Template */] = 'Template';


/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	// Generated by generate-xhtml-entities.js. DO NOT MODIFY!
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.XHTMLEntities = {
	    quot: '\u0022',
	    amp: '\u0026',
	    apos: '\u0027',
	    gt: '\u003E',
	    nbsp: '\u00A0',
	    iexcl: '\u00A1',
	    cent: '\u00A2',
	    pound: '\u00A3',
	    curren: '\u00A4',
	    yen: '\u00A5',
	    brvbar: '\u00A6',
	    sect: '\u00A7',
	    uml: '\u00A8',
	    copy: '\u00A9',
	    ordf: '\u00AA',
	    laquo: '\u00AB',
	    not: '\u00AC',
	    shy: '\u00AD',
	    reg: '\u00AE',
	    macr: '\u00AF',
	    deg: '\u00B0',
	    plusmn: '\u00B1',
	    sup2: '\u00B2',
	    sup3: '\u00B3',
	    acute: '\u00B4',
	    micro: '\u00B5',
	    para: '\u00B6',
	    middot: '\u00B7',
	    cedil: '\u00B8',
	    sup1: '\u00B9',
	    ordm: '\u00BA',
	    raquo: '\u00BB',
	    frac14: '\u00BC',
	    frac12: '\u00BD',
	    frac34: '\u00BE',
	    iquest: '\u00BF',
	    Agrave: '\u00C0',
	    Aacute: '\u00C1',
	    Acirc: '\u00C2',
	    Atilde: '\u00C3',
	    Auml: '\u00C4',
	    Aring: '\u00C5',
	    AElig: '\u00C6',
	    Ccedil: '\u00C7',
	    Egrave: '\u00C8',
	    Eacute: '\u00C9',
	    Ecirc: '\u00CA',
	    Euml: '\u00CB',
	    Igrave: '\u00CC',
	    Iacute: '\u00CD',
	    Icirc: '\u00CE',
	    Iuml: '\u00CF',
	    ETH: '\u00D0',
	    Ntilde: '\u00D1',
	    Ograve: '\u00D2',
	    Oacute: '\u00D3',
	    Ocirc: '\u00D4',
	    Otilde: '\u00D5',
	    Ouml: '\u00D6',
	    times: '\u00D7',
	    Oslash: '\u00D8',
	    Ugrave: '\u00D9',
	    Uacute: '\u00DA',
	    Ucirc: '\u00DB',
	    Uuml: '\u00DC',
	    Yacute: '\u00DD',
	    THORN: '\u00DE',
	    szlig: '\u00DF',
	    agrave: '\u00E0',
	    aacute: '\u00E1',
	    acirc: '\u00E2',
	    atilde: '\u00E3',
	    auml: '\u00E4',
	    aring: '\u00E5',
	    aelig: '\u00E6',
	    ccedil: '\u00E7',
	    egrave: '\u00E8',
	    eacute: '\u00E9',
	    ecirc: '\u00EA',
	    euml: '\u00EB',
	    igrave: '\u00EC',
	    iacute: '\u00ED',
	    icirc: '\u00EE',
	    iuml: '\u00EF',
	    eth: '\u00F0',
	    ntilde: '\u00F1',
	    ograve: '\u00F2',
	    oacute: '\u00F3',
	    ocirc: '\u00F4',
	    otilde: '\u00F5',
	    ouml: '\u00F6',
	    divide: '\u00F7',
	    oslash: '\u00F8',
	    ugrave: '\u00F9',
	    uacute: '\u00FA',
	    ucirc: '\u00FB',
	    uuml: '\u00FC',
	    yacute: '\u00FD',
	    thorn: '\u00FE',
	    yuml: '\u00FF',
	    OElig: '\u0152',
	    oelig: '\u0153',
	    Scaron: '\u0160',
	    scaron: '\u0161',
	    Yuml: '\u0178',
	    fnof: '\u0192',
	    circ: '\u02C6',
	    tilde: '\u02DC',
	    Alpha: '\u0391',
	    Beta: '\u0392',
	    Gamma: '\u0393',
	    Delta: '\u0394',
	    Epsilon: '\u0395',
	    Zeta: '\u0396',
	    Eta: '\u0397',
	    Theta: '\u0398',
	    Iota: '\u0399',
	    Kappa: '\u039A',
	    Lambda: '\u039B',
	    Mu: '\u039C',
	    Nu: '\u039D',
	    Xi: '\u039E',
	    Omicron: '\u039F',
	    Pi: '\u03A0',
	    Rho: '\u03A1',
	    Sigma: '\u03A3',
	    Tau: '\u03A4',
	    Upsilon: '\u03A5',
	    Phi: '\u03A6',
	    Chi: '\u03A7',
	    Psi: '\u03A8',
	    Omega: '\u03A9',
	    alpha: '\u03B1',
	    beta: '\u03B2',
	    gamma: '\u03B3',
	    delta: '\u03B4',
	    epsilon: '\u03B5',
	    zeta: '\u03B6',
	    eta: '\u03B7',
	    theta: '\u03B8',
	    iota: '\u03B9',
	    kappa: '\u03BA',
	    lambda: '\u03BB',
	    mu: '\u03BC',
	    nu: '\u03BD',
	    xi: '\u03BE',
	    omicron: '\u03BF',
	    pi: '\u03C0',
	    rho: '\u03C1',
	    sigmaf: '\u03C2',
	    sigma: '\u03C3',
	    tau: '\u03C4',
	    upsilon: '\u03C5',
	    phi: '\u03C6',
	    chi: '\u03C7',
	    psi: '\u03C8',
	    omega: '\u03C9',
	    thetasym: '\u03D1',
	    upsih: '\u03D2',
	    piv: '\u03D6',
	    ensp: '\u2002',
	    emsp: '\u2003',
	    thinsp: '\u2009',
	    zwnj: '\u200C',
	    zwj: '\u200D',
	    lrm: '\u200E',
	    rlm: '\u200F',
	    ndash: '\u2013',
	    mdash: '\u2014',
	    lsquo: '\u2018',
	    rsquo: '\u2019',
	    sbquo: '\u201A',
	    ldquo: '\u201C',
	    rdquo: '\u201D',
	    bdquo: '\u201E',
	    dagger: '\u2020',
	    Dagger: '\u2021',
	    bull: '\u2022',
	    hellip: '\u2026',
	    permil: '\u2030',
	    prime: '\u2032',
	    Prime: '\u2033',
	    lsaquo: '\u2039',
	    rsaquo: '\u203A',
	    oline: '\u203E',
	    frasl: '\u2044',
	    euro: '\u20AC',
	    image: '\u2111',
	    weierp: '\u2118',
	    real: '\u211C',
	    trade: '\u2122',
	    alefsym: '\u2135',
	    larr: '\u2190',
	    uarr: '\u2191',
	    rarr: '\u2192',
	    darr: '\u2193',
	    harr: '\u2194',
	    crarr: '\u21B5',
	    lArr: '\u21D0',
	    uArr: '\u21D1',
	    rArr: '\u21D2',
	    dArr: '\u21D3',
	    hArr: '\u21D4',
	    forall: '\u2200',
	    part: '\u2202',
	    exist: '\u2203',
	    empty: '\u2205',
	    nabla: '\u2207',
	    isin: '\u2208',
	    notin: '\u2209',
	    ni: '\u220B',
	    prod: '\u220F',
	    sum: '\u2211',
	    minus: '\u2212',
	    lowast: '\u2217',
	    radic: '\u221A',
	    prop: '\u221D',
	    infin: '\u221E',
	    ang: '\u2220',
	    and: '\u2227',
	    or: '\u2228',
	    cap: '\u2229',
	    cup: '\u222A',
	    int: '\u222B',
	    there4: '\u2234',
	    sim: '\u223C',
	    cong: '\u2245',
	    asymp: '\u2248',
	    ne: '\u2260',
	    equiv: '\u2261',
	    le: '\u2264',
	    ge: '\u2265',
	    sub: '\u2282',
	    sup: '\u2283',
	    nsub: '\u2284',
	    sube: '\u2286',
	    supe: '\u2287',
	    oplus: '\u2295',
	    otimes: '\u2297',
	    perp: '\u22A5',
	    sdot: '\u22C5',
	    lceil: '\u2308',
	    rceil: '\u2309',
	    lfloor: '\u230A',
	    rfloor: '\u230B',
	    loz: '\u25CA',
	    spades: '\u2660',
	    clubs: '\u2663',
	    hearts: '\u2665',
	    diams: '\u2666',
	    lang: '\u27E8',
	    rang: '\u27E9'
	};


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var error_handler_1 = __webpack_require__(10);
	var scanner_1 = __webpack_require__(12);
	var token_1 = __webpack_require__(13);
	var Reader = (function () {
	    function Reader() {
	        this.values = [];
	        this.curly = this.paren = -1;
	    }
	    // A function following one of those tokens is an expression.
	    Reader.prototype.beforeFunctionExpression = function (t) {
	        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
	            'return', 'case', 'delete', 'throw', 'void',
	            // assignment operators
	            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',
	            '&=', '|=', '^=', ',',
	            // binary/unary operators
	            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
	            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
	            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
	    };
	    // Determine if forward slash (/) is an operator or part of a regular expression
	    // https://github.com/mozilla/sweet.js/wiki/design
	    Reader.prototype.isRegexStart = function () {
	        var previous = this.values[this.values.length - 1];
	        var regex = (previous !== null);
	        switch (previous) {
	            case 'this':
	            case ']':
	                regex = false;
	                break;
	            case ')':
	                var keyword = this.values[this.paren - 1];
	                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');
	                break;
	            case '}':
	                // Dividing a function by anything makes little sense,
	                // but we have to check for that.
	                regex = false;
	                if (this.values[this.curly - 3] === 'function') {
	                    // Anonymous function, e.g. function(){} /42
	                    var check = this.values[this.curly - 4];
	                    regex = check ? !this.beforeFunctionExpression(check) : false;
	                }
	                else if (this.values[this.curly - 4] === 'function') {
	                    // Named function, e.g. function f(){} /42/
	                    var check = this.values[this.curly - 5];
	                    regex = check ? !this.beforeFunctionExpression(check) : true;
	                }
	                break;
	            default:
	                break;
	        }
	        return regex;
	    };
	    Reader.prototype.push = function (token) {
	        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {
	            if (token.value === '{') {
	                this.curly = this.values.length;
	            }
	            else if (token.value === '(') {
	                this.paren = this.values.length;
	            }
	            this.values.push(token.value);
	        }
	        else {
	            this.values.push(null);
	        }
	    };
	    return Reader;
	}());
	var Tokenizer = (function () {
	    function Tokenizer(code, config) {
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;
	        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;
	        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;
	        this.buffer = [];
	        this.reader = new Reader();
	    }
	    Tokenizer.prototype.errors = function () {
	        return this.errorHandler.errors;
	    };
	    Tokenizer.prototype.getNextToken = function () {
	        if (this.buffer.length === 0) {
	            var comments = this.scanner.scanComments();
	            if (this.scanner.trackComment) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
	                    var comment = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: value
	                    };
	                    if (this.trackRange) {
	                        comment.range = e.range;
	                    }
	                    if (this.trackLoc) {
	                        comment.loc = e.loc;
	                    }
	                    this.buffer.push(comment);
	                }
	            }
	            if (!this.scanner.eof()) {
	                var loc = void 0;
	                if (this.trackLoc) {
	                    loc = {
	                        start: {
	                            line: this.scanner.lineNumber,
	                            column: this.scanner.index - this.scanner.lineStart
	                        },
	                        end: {}
	                    };
	                }
	                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();
	                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
	                this.reader.push(token);
	                var entry = {
	                    type: token_1.TokenName[token.type],
	                    value: this.scanner.source.slice(token.start, token.end)
	                };
	                if (this.trackRange) {
	                    entry.range = [token.start, token.end];
	                }
	                if (this.trackLoc) {
	                    loc.end = {
	                        line: this.scanner.lineNumber,
	                        column: this.scanner.index - this.scanner.lineStart
	                    };
	                    entry.loc = loc;
	                }
	                if (token.type === 9 /* RegularExpression */) {
	                    var pattern = token.pattern;
	                    var flags = token.flags;
	                    entry.regex = { pattern: pattern, flags: flags };
	                }
	                this.buffer.push(entry);
	            }
	        }
	        return this.buffer.shift();
	    };
	    return Tokenizer;
	}());
	exports.Tokenizer = Tokenizer;


/***/ }
/******/ ])
});
;
},{}],32:[function(require,module,exports){
// Generated by js_of_ocaml 4.0.0+git-v0.24.0-11241-g3826b32
(function(a){typeof
globalThis!=="object"&&(this?b():(a.defineProperty(a.prototype,"_T_",{configurable:true,get:b}),_T_));function
b(){var
b=this||self;b.globalThis=b;delete
a.prototype._T_}}(Object));(function(ar){"use strict";var
dZ="member_property_expression",DB=8483,Gq=12538,AH="children",e0="predicate_expression",DA="??",Dz="Identifier",ot=64311,i3=192,Gp=11710,AG=122654,Go=110947,Gn=67591,Q0="!",Q1="directive",SS=163,cY="block",q4=126553,AF=12735,p8=68096,c1="params",yo=93071,aP=122,Gm=72767,AE=181,g4="for_statement",a7=128,AD="start",pk=43867,RZ="_method",Gl=70414,i2=">",eZ="catch_body",yn=120121,P5="the end of an expression statement (`;`)",Gk=124907,SR=1027,os=126558,dY="jsx_fragment",AC=42527,ym="decorators",Gj=82943,Dy=71039,yk=110882,yl=67514,RX=8472,RY="update",yj=12783,Dx=12438,AB=12352,Gi=8511,AA=42961,kC="method",p7=120713,g3=8191,dX="function_param",Az=67871,cs="throw",Ay=11507,f3="class_extends",Gh=43470,dW="object_key_literal",Dw=71903,Gg=65437,eY="jsx_child",Gf=43311,q3=119995,yi=67637,or=68116,yh=66204,Dv=65470,SQ="<<=",Ge="e",yg=67391,q2=11631,oq=69956,i1="tparams",Gd=66735,Ax=64217,Du=43697,QZ="Invalid binary/octal ",yf=-43,ye=43255,op="do",Aw=43301,eX="binding_pattern",Dt=120487,g2="jsx_attribute_value_literal",pj="package",eW="interface_declaration",Gc=72750,Av=119892,QY="tail",QX=-53,eV=111,P4=180,yd=119807,Au=71959,QW=8206,Gb=65613,hs="type",yc=55215,Ds=-42,f2="export_default_declaration_decl",oo=72970,QV="filtered_out",Dr=70416,QU=229,f1="function_this_param",SP="module",pi="try",yb=70143,At=125183,ya=70412,r="@])",g1="binary",SO="infinity",p6="private",Dq=65500,q1="has_unknown_members",eU="pattern_array_rest_element",P3="Property",hQ="implements",Ga=12548,RW=211,f0="if_alternate_statement",F$=124903,Dp=43395,jd="src/parser/type_parser.ml",F_=66915,q0=126552,x$=120712,ph=126555,x_=120596,b7="raw",cr=112,fZ="class_declaration",eT="statement",Do=126624,As=71235,fY="meta_property",x8=44002,x9=8467,dV="class_property_value",Dn=8318,dU="optional_call",Ar=43761,hr="kind",fX="class_identifier",F9=69955,x7=66378,Aq=120512,Dm=68220,a3=110,F8=123583,kt="declare",fW="typeof_member_identifier",eS="catch_clause",Dl=11742,F7=70831,on=8468,dT="for_in_assignment_pattern",P2=-32,fV="object_",x5=43262,x6="mixins",dS="type_param",RV="visit_trailing_comment",Ap=71839,ks="boolean",eR="call",SN="expected *",Ao=43010,x4=241,bD="expression",kI="column",x3=43595,Dk=43258,x2=191456,g0="member_type_identifier",kl=117,Dj=43754,qZ=126544,SM="Assert_failure",x0=66517,x1=42964,fU="enum_number_member",P1="a string",An=65855,Di=119993,xZ="opaque",QT=870530776,Am=67711,Dh=66994,gZ="enum_symbol_body",P0=185,QS=219,p5="filter",Al=43615,p4=126560,F6=19903,ij="get",Dg=64316,QR="Fatal error: exception %s\n",p3="exported",SL=">=",bV="return",ol="members",om=256,F5=66962,xY=64279,F4=67829,PZ="Enum `",QQ="&&=",eQ="object_property",F3=67589,gY="pattern_object_property",dR="template_literal_element",Df=69551,c0=127343600,qY=70452,gX="class_element",F2="ENOENT",De=71131,PY=200,F0=120137,F1=94098,qX=72349,SK=1328,gW="function_identifier",xX=126543,eP="jsx_attribute_name",Dd=43487,H="@[<2>{ ",SJ="ENOTEMPTY",xW=65908,Dc=72191,ok=120513,Ak=92909,QP="bound",Db=162,PX=172,oj=120070,dQ="enum_number_body",fT="update_expression",dP="spread_element",fS="for_in_left_declaration",pg=64319,kr="%d",Da=12703,qW=11687,SI="@,))@]",FZ=42239,gV="type_cast",xV=42508,eO="class_implements_interface",xU=67640,Aj=605857695,QO="Cygwin",RU="buffer.ml",Ai=124908,SH="handler",xT=66207,Ah=66963,qV=11558,SG="-=",au=113,C$=113775,PW="collect_comments",p2=126540,i0="set",fR="assignment_pattern",bB="right",fQ="object_key_identifier",pf=120133,C_="Invalid number ",xS=42963,oi=12539,C8=68023,C9=43798,cA=100,gU="pattern_literal",dO="generic_type",QN="*",Ag=42783,C7=42890,xR=230,qU="else",xP=70851,xQ=69289,PV="the start of a statement",oh="properties",xO=43696,Af=110959,fP="declare_function",qT=120597,gT="object_indexer_property_type",Ae=70492,xN=2048,kk="arguments",J="comments",C6=43042,hn=107,xM=110575,RT=161,FY=67431,og="line",kq="declaration",ba="static",fO="pattern_identifier",FX=69958,SF="the",FW="Unix.Unix_error",xL=43814,hq="annot",xK=65786,C4=66303,C5=64967,FU=64255,FV=8584,of=120655,PU="Stack_overflow",FT=43700,dN="syntax_opt",RS="/static/",gS="comprehension",C3=253,QM="Not_found",SE="+=",PT=235,xH=68680,xI=66954,xJ=64324,Ad=72966,SD=174,QL=-1053382366,xG="rest",dL="pattern_array_element",dM="jsx_attribute_value_expression",qS=65595,gR="pattern_array_e",SC=243,FS=43711,xF="rmdir",oe="symbol",C2=69926,xE=43741,ch="typeParameters",kj="const",PS=1026,QK=149,xD=12341,C1=72847,xC=66993,QJ=202,cV="false",a2=106,xA=120076,xB=186,cU=0x80,Ab=125124,Ac="Fatal error: exception ",pe=67593,C0=69297,xz=44031,QI=234,QH="all_comments",xy=92927,Aa=68095,bC=8231,gQ="object_key_computed",fN="labeled_statement",gP="function_param_pattern",pd=126590,CY=65481,CZ=43442,RR="collect_comments_opt",gO="variable_declarator",jh="_",CX="compare: functional value",CW=67967,jc="computed",fM="object_property_type",aO="id",CV=126562,hP=114,RQ="comment_bounds",FR=70853,FQ=69247,dK="class_private_field",CU=42237,z$=72329,PR="Invalid_argument",FP=113770,pc=94031,CT=120092,fL="declare_class",z_=67839,FO=72250,PQ=249,PP="%ni",CS=92879,SB="prototype",hM="`.",fK=8287,od=65344,z9="&",cj="debugger",fJ="type_identifier_reference",SA="Internal Error: Found private field in object props",gN="sequence",dJ="call_type_args",QG=238,FN=12348,Sz="++",FM=68863,xw=72001,xx=70084,FL="label",i8=-45,eN="jsx_opening_attribute",CR=43583,qR="%F",xv=43784,z8=113791,fI="call_arguments",pb=126503,xu=43743,bU="0",z7=119967,qQ=126538,gM="new_",iZ=449540197,z6=64109,CQ=68466,CP=177983,aQ=248,dI="program",ad="@,]@]",FK=68031,dH="function_type",fH="type_",pa=8484,CO=67382,CM=42537,CN=226,FJ=66559,CL=42993,FI=64274,qP=71236,xt=120069,z5=72105,z3=126570,z4="object",xs=42959,cg="break",fG="for_of_statement",xr=43695,qO=126551,CK=66955,p1=126520,xq=66499,kB=1024,xo=67455,xp=43018,QF=198,oc=126522,gL="function_declaration",xn=73064,eM="await",FG=92728,FH=70418,FF=68119,fF="function_rest_param",FE=42653,qN=11703,cK="left",qM=70449,FD=184,gK="declare_type_alias",fE=0xffffff,qL=70302,Sy="/=",QE="|=",FC=55242,FA=126583,FB=124927,xl=124895,xm=72959,CJ=65497,RP="Invalid legacy octal ",hp="typeof",xk="explicit_type",gJ="statement_list",CI=65495,fD="class_method",o$=8526,p0=244,Fz=67861,qK=119994,ob="enum",QD=2147483647,CH=69762,Sx=208,kp="in",Fy=11702,oa=67638,PO=", characters ",xj=70753,jb="super",Fx=92783,xi=8304,n$=126504,gI="import_specifier",z2=68324,xh=101589,CG=67646,fC="expression_or_spread",z1=74879,CF=43792,o_=43260,Fw=93052,QC="{",z0=65574,CE=125258,jg=224,dG="jsx_element_name_member_expression",kA="instanceof",CC=69599,CD=43560,gH="function_expression",n_=223,xg=72242,CB=11498,Fu=126467,Fv=73112,RO=140,pZ=70107,xf=13311,fB="jsx_children",qJ=126548,xe=63743,n9=43471,dF="jsx_expression",zZ=69864,CA=71998,xd=72000,qI=126591,n8=12592,dE="type_params",Cz=126578,n7=126537,G="{ ",Cy=123627,gG="jsx_spread_attribute",$="@,",Cx=70161,xc=187,o9=126500,eL="label_identifier",Cw=42606,gF="number_literal_type",pY=42999,Ft=64310,QB=-594953737,Fs=122623,qH="hasUnknownMembers",dD="array",RN="^=",eK="enum_string_member",Cv=65536,Fr=65615,hk="void",zY=65135,x=")",Sw=138,zX=70002,kz="let",xb=70271,Cu="nan",o="@[%s =@ ",Ct=194559,Fq=110579,dC="binding_type_identifier",Cs=42735,Sv=0xdfff,bS="/",eJ="for_in_statement_lhs",Fo=43503,Fp=8516,Fm=66938,Fn="ENOTDIR",PN="TypeParameterInstantiation",Cq=69749,Cr=65381,Cp=83526,ja="number",xa=12447,QA=154,pX=70286,Fk=72160,Fl=43493,PM=206,eI="enum_member_identifier",o8=70280,ki="function",pW=70162,Co=255,w$=67702,Cn=66771,w_=70312,Qz="|",zW=93759,RM="End_of_file",w9=43709,ii="new",Cm="Failure",ko="local",w8=101631,o7=8489,pV="with",gE="enum_declaration",w7=218,zV=70457,o6=8488,fA="member",qG=64325,Fj=247,zU=70448,Cl=69967,qF=126535,w6=71934,dB="import_named_specifier",Ck=65312,Fi=126619,fz="type_annotation",RL=0xdc00,Fg=131071,Fh=120770,w5=67002,fx="with_",fy="statement_fork_point",RK="finalizer",w4=12320,PL="elements",dA="literal",zT=68607,w3=8507,o5="each",Su="Sys_error",Fe=123535,Ff=130,eH="bigint_literal_type",zS=64829,pU=11727,w2=120538,eG="member_private_name",fw="type_alias",Qy="Printexc.handle_uncaught_exception",qE=126556,gD="tagged_template",eF="pattern_object_property_literal_key",Fd=43881,n6=72192,Cj=67826,w0=124910,w1=66511,hj="int_of_string",Ci=43249,y="None",St="FunctionTypeParam",cz="name",wZ=70285,b8=103,wY=120744,dy=12288,dz="intersection_type",Fc=11679,qD=11559,PK="callee",Ch=71295,wX=70018,Cg=11567,Fb=42954,Ss="*-/",bW="predicate",dx="expression_statement",RJ="regexp",wW=65479,Qx=132,Cf=11389,bK="optional",PJ=-602162310,m="@]",wV=120003,zR=72249,Qw="Unexpected ",Ce=73008,pT="finally",fv="toplevel_statement_list",RI="end",Fa=178207,Sr="&=",E$=70301,Sq="%Li",Cc=72161,Cd=69746,wT=70460,wU=12799,o4=65535,Cb="loc",zQ=69375,Ca=43518,PI=205,B$=65487,gC="while_",B_=183983,eE="typeof_expression",E_=-673950933,E9=42559,Sp="||",zP=124926,wS=55291,gB="jsx_element_name_identifier",gA=8239,n5="mixed",Qv=136,B9=-253313196,zO=11734,pS=67827,wR=68287,E8=119976,So="**",n=" =",o3=888960333,zN=124902,eD="tuple_type",Sn=227,wQ=70726,B8=73111,pR=126602,wP=126529,eC="object_property_value_type",t="%a",RH=", ",Sm="<=",wO=69423,PH=199,o2=11695,B7=12294,pQ=11711,E7=67583,Sl=710,qC=126584,wN=68295,B6=72703,B5="prefix",RG=-80,qB=69415,wM=11492,kH="class",pP=65575,cq="continue",zM=65663,RF=2047,n4=68120,zK=71086,zL=19967,c2=782176664,E6=120779,n3=8486,cM=" ",PG="||=",Qu="Undefined_recursive_module",B4=66863,Sk="RestElement",o1=126634,zJ=66377,E5=74751,gz="jsx_element_name_namespaced",wL=43334,wK=66815,cp="typeAnnotation",E4=120126,gy="array_element",qA=64285,Si=189,Sj="**=",L="()",B3=8543,dw="declare_module",eB="export_batch_specifier",RE="%i",RD=">>>=",E3=68029,Sh="importKind",co="extends",zI=64296,n2=43259,zH=71679,E2=64913,wI=119969,wJ=94175,B2=72440,qz=65141,eA="function_",B1=43071,B0=42888,E1=69807,bk="variance",hm=123,fu="import_default_specifier",PF=">>>",BZ=43764,cL="pattern",BY=71947,E0=70655,i$="consequent",RC=4096,zG=183,EZ=68447,wH=65473,hi=0xff,BX=73648,ft="call_type_arg",gx=8238,EY=68899,wG=93026,ac="@[<2>[",EX=110588,dv="comment",RB=191,gw="switch_case",Qt=175,BW=71942,fs="do_while",i7="constructor",wF=43587,BV=43586,br="yield",zF=67462,PE="fd ",wE=-61,BU="target",pO=72272,kh="var",Qs="impltype",qy=70108,kg="0o",zE=119972,BT=92991,o0=70441,qx=8450,wD=120074,EW=66717,gv="interface_type",pN=43880,at="%B",zD=111355,iY=5760,EV=11630,oZ=126499,BS="of",PD=">>",Qr="Popping lex mode from empty stack",oY=120629,hl=108,wC=43002,RA="%=",pM=126539,EU=126502,du="template_literal",zC="src/parser/statement_parser.ml",zB=": Not a directory",PC="b",zA=67461,BR=11519,Qq="src/parser/flow_lexer.ml",Qp="Out_of_memory",zz=120570,fr=12287,BQ=126534,ET="index out of bounds",BP=73029,qw="_bigarr02",oX=126571,Rz="))",fq="for_statement_init",Sg="supertype",gu="class_property",oW="}",iq="this",gt="declare_module_exports",Qo="@",dt="union_type",cT=0xffff,ez="variance_opt",BO=94032,Ry=222,ES=42124,gs="this_expression",ey="jsx_element",Qn="typeArguments",BN=65019,EQ=125251,ER=64111,EP=8471,ex="typeof_qualified_identifier",BM=70497,Qm="EnumDefaultedMember",fp=8202,wB=66927,cn="switch",EO=69634,gr="unary_expression",zy=71215,Ql=126,wA=67679,BL=65597,Sf=207,wz=120686,n1=72163,zx=67001,zw=42962,BK=64262,kG=124,ds=65279,BJ=126495,Rx=169,EN=71944,PB=-10,pL="alternate",EL=92975,EM=65489,iX=252,EJ=67807,EK=43187,zv=68850,pK="export",wy=66383,Qk="===",fo=".",gq="type_args",Se=147,wx=92159,Qj=0xf0,fn="jsx_element_name",BI=72283,BH=171,ip=116,zu=110587,oV=70279,EH=75075,EI=65338,gp="function_params",ww=126627,Rw=213,qv=73065,wv=71352,n0=119970,zt=70005,BG=12295,nZ=120771,EG=71494,EF=11557,BF=42191,Rv="flags",EE=68437,zs=70730,ew="optional_indexed_access",fm="pattern_object_p",zr=42785,ev="nullable_type",ax="value",ED=12343,zp=68415,zq=11694,Qi=221,EC=11726,go="syntax",EB=119964,PA="&&",BE=68497,EA=73097,hh="null",nY=126523,Ez=120084,BD=126601,wu=8454,BC="expressions",wt=72144,kf='"',N="(@[",Sd=1022,Pz=231,zo=170,pJ=12448,BB=68786,qu="<",Px=931,Py="(",Rt=196,Ru=0x800,qt="an identifier",oU=69959,BA=68799,Sc="leadingComments",Ey=72969,ws=182,Bz=100351,fl="enum_defaulted_member",Ex=69839,wr=94026,Ew=209,Sb=">>=",wq=131,nX=12336,b5="empty",Pv=331416730,Pw=204,Ev=70479,Eu=69487,zn=101640,By=43123,Pu="([^/]+)",oT=8319,Rs=165,eu="object_type_property_setter",Rr=909,Et=0xf,zm=12591,D=125,wp=92735,Pt="cases",wo=183969,ih="bigint",Rq="Division_by_zero",Bw=67071,Bx=12329,oS=120004,Bv=69414,qs="if",wn=126519,Es="immediately within another function.",Bu=55238,zl=126498,Sa="qualification",wm=66256,F="@ }@]",ke=118,qr=11565,nW=120122,et="pattern_object_rest_property",Bt=74862,pI="'",zj=-26065557,zk=124911,jf=119,ci=104,fk="assignment",Bs=8457,kF="from",Br=64321,Eq=113817,Er=65629,zi=42655,cX=102,zh=43137,zg=11502,q=";@ ",cm=101,es="pattern_array_element_pattern",aF="body",er="jsx_member_expression",wl=65547,eq="jsx_attribute_value",ep="jsx_namespaced_name",pH=72967,Ep=126550,ky=254,En=43807,Eo=43738,nV=126589,oR=8455,pG=126628,Em=11670,Ps="*=",oQ=120134,eo="conditional",R$=" : flags Open_text and Open_binary are not compatible",nU=119965,wk=69890,ze=72817,zf=164,Bq=43822,qq=69744,Pr="\\\\",Bp=43638,wi=93047,wj="AssignmentPattern",nT=64322,zd=123190,Rp=188,dr="object_spread_property_type",zc=70783,El=113663,R_=160,nS=42622,qp=43823,cZ="init",je=109,wh=66503,oP="proto",Bo=74649,fj="optional_member",Ek=40981,wg=120654,e="@ ",dq="enum_boolean_body",en="export_named_specifier",em="declare_interface",wf=70451,el="pattern_object_property_computed_key",pE=-97,pF=120539,qo=64317,we=12543,fi="export_named_declaration_specifier",wd=43359,oN=126530,oO=72713,Bn=113800,Qh=195,wc=72367,zb=72103,wb=70278,fh="if_consequent_statement",kn=-85,nR=126496,fg="try_catch",gm="computed_key",gn="class_",za=173823,ek="pattern_object_property_identifier_key",R9="f",ej="arrow_function",qn=8485,Ej=126546,ei="enum_boolean_member",Bm=94177,kE="delete",y$=232,Ro="blocks",gl="pattern_array_rest_element_pattern",wa=78894,qm=66512,Ei=94111,i6="string",hO="test",v9=69572,v_=66463,v$=66335,v7=72348,v8=73061,ig=":",ff="enum_body",v6=110590,fe="function_this_param_type",Eh=215,v5=77823,Qg="minus",Rn=201,y_=119980,gk="private_name",dp="object_key",eh="function_param_type",Rm="<<",y9=11718,il="as",R8="delegate",cS="true",Eg=67413,oM=70854,Ef=73439,v4=43776,y6=71723,y7=11505,y8=214,Bk=120628,Bl=43513,fd="jsx_attribute_name_namespaced",nP=120127,nQ="Map.bal",oL="any",Pq="@[",R7="camlinternalMod.ml",pD=126559,bJ="import",nO=70404,eg="jsx_spread_child",y5=233,Bj=67897,Ee=119974,bq=8233,v3=68405,nN=239,Pp="attributes",Qf=173,fc="object_internal_slot_property_type",v2=71351,Ed=242,Bi=67643,nM="shorthand",gj="for_in_statement",v1=126463,Bh=71338,Eb=69445,Ec=65370,v0=73055,y4=167,y3=64911,ef="pattern_object_property_pattern",Po=212,Rl=197,pC=126579,Bg=64286,Ea="explicitType",y1=67669,y2=43866,Qe="Sys_blocked_io",oK="catch",Bf=123197,vZ=64466,vY=65140,vX=73030,Be=69404,nL="protected",R6=8204,vW=67504,Bd=193,kd=246,y0=43713,pB=120571,fb="array_type",Pn="%u",dn="export_default_declaration",fa="class_expression",R5="quasi",a1="%S",yZ=8525,pA=126515,D$=120485,nK=43519,ql=120745,pz=94178,D_=126588,aC=127,yY=66855,Rk="@{",Rj="visit_leading_comment",vV=67742,Ri=" : flags Open_rdonly and Open_wronly are not compatible",D9=120144,py="returnType",ik=-744106340,i_=240,gi="-",qk=8469,hN="async",px=126521,D8=72095,nJ=216,Rh=" : file already exists",vT=178205,vU=8449,oJ=94179,Bc=42774,qj="case",Bb=66965,vS=66431,Qd=190,dm="declare_export_declaration",kx="targs",gh="type_identifier",yX=64284,Ba=43013,qi=43815,gg="function_body_any",yW=66966,oI=120687,D7=66939,yV=66978,Rg=168,pw="public",vR=68115,yU=43712,pv=65598,oH=126547,D6=110591,dl="indexed_access",Pm=12520,bT="interface",ir=-46,dj="string_literal_type",dk="import_namespace_specifier",vQ=120132,oG=11735,A$=67505,qh=119893,oF="bool",kD=1000,cI="default",yT=236,i="",vP="exportKind",Pl="trailingComments",oE="^",A_=71983,D5=8348,yS=66977,A9=65594,e_="logical",e$="jsx_member_expression_identifier",qg=210,R4="cooked",gf="for_of_left_declaration",iW=0x3f,yR=72202,b6="argument",D4=12442,vO=43645,nI=120085,D3=42539,oD=126468,R3=166,Rf="Match_failure",vN=68191,bp="src/parser/flow_ast.ml",qf=11647,ge="declare_variable",ho="+",vM=71127,nH=120145,di="declare_export_declaration_decl",pu=64318,R2=179,ee="class_implements",Pk="!=",Qc="inexact",R1="%li",Re=237,kw="a",oC=73062,A8=178,e9=65278,ed="function_rest_param_type",D2=77711,yP=70066,yQ=43714,Rd=-696510241,oB=70480,yO=69748,A7=113788,vL=94207,Pj="\r\n",dh="class_body",yM=126651,yN=68735,D1=43273,qe=119996,pt=67644,Rc=0xe0,ec="catch_clause_pattern",e8="boolean_literal_type",nG=126554,oA=126557,A6=113807,ps=126536,Rb="%",i5="property",D0=71956,Pi="#",yL=123213,km="meta",eb="for_of_assignment_pattern",dg="if_statement",vK=66421,A5=8505,vJ=225,kc=250,yK=100343,pr="Literal",DZ=42887,io=115,Ra=";",yJ=1255,A4="=",DX=126566,DY=93823,gd="opaque_type",Q$="!==",e7="jsx_attribute",gc="type_annotation_hint",cW=0x8000,A3=73727,Q9="range",Q_=245,DW="jsError",pq=70006,DV=43492,pp="@]}",z="(Some ",DU=8477,Qb=129,A2=71487,qd=126564,Q8="\n",DT=126514,vI=70080,df="generic_identifier_type",yI=66811,e6="typeof_identifier",Q7="~",DS=65007,gb="pattern_object_rest_property_pattern",vH=194,Qa=1039100673,yH=66461,DR=70319,po=11719,DQ=72271,a6=-48,ea="enum_string_body",DP=70461,ga="export_named_declaration",vF=110930,vG=92862,P$="??=",yG=70440,oz="while",bj="camlinternalFormat.ml",vE=43782,P_=203,A1=173791,DO=11263,oy=1114111,yF=42969,ox=70750,d$="jsx_identifier",DN=70105,vD=43014,A0=11564,d_="typeof_type",Q6="EEXIST",vC=64847,vA=71167,vB=42511,yE=72712,AZ=92995,yD=43704,kv=121,d9="object_call_property_type",vz=64433,ku="operator",qc=68296,d8="class_decorator",e4=120,e5="for_of_statement_lhs",DM=11623,yC=67004,vy=71999,yA=70708,yB=512,AY=110927,yz=71423,Q5=0x7ff0,vw=93951,vx=12292,f$="object_type",nF="types",DL=110580,P9=177,vv=126633,yy=12686,e3=8286,Ph=144,AX=73647,Q4=228,P8="tokens",ow=70855,im="0x",vu=70366,AW="\n",de="variable_declaration",AV=65276,ov=119981,vt=71945,AU=43887,cl=105,DK=8335,yx=123565,yw=69505,AT=70187,d7="jsx_attribute_name_identifier",f9="source",f_="pattern_object_property_key",qb=65548,DJ=66175,yv=92766,d6="pattern_assignment_pattern",f8="object_type_property_getter",pn=8305,ck="generator",nE="for",P6="PropertyDefinition",P7="--",bi=-36,AS="mkdir",AR=68223,d5="generic_qualified_identifier_type",yu=11686,d4="jsx_closing_element",DI=43790,qa=": No such file or directory",AQ=69687,yt=66348,pm=72162,vs=43388,vr=72768,AP=68351,f="<2>",p$=64297,vq=125259,ys=220,M=",@ ",Q3="win32",nD=70281,dd="member_property_identifier",AN=68149,AO=68111,vp=71450,DH=43009,d3="member_property",vo=73458,cJ="identifier",vn=67423,vm=66775,DG=110951,Q2="Internal Error: Found object private prop",f7="super_expression",d2="jsx_opening_element",AM=177976,f6="variable_declarator_pattern",dc="pattern_expression",e2="jsx_member_expression_object",DF=68252,yr=77808,i9=-835925911,e1="import_declaration",DE=55203,Pf="Pervasives.do_at_exit",Pg="utf8",cy="key",yq=43702,d1="spread_property",pl=126563,vk=863850040,vl=70106,nC=67592,f5="function_expression_or_method",DD=71958,f4="for_init_declaration",vj=71955,nB=123214,AL=68479,Pe="==",AK=43019,vi=123180,nA=217,i4="specifiers",d0="function_body",AJ=69622,p_=8487,vh=43641,Pd="Unexpected token `",Pc="v",yp=123135,AI=69295,p9=120093,DC=8521,ou=43642,R0=176;function
bGC(d,b,e,c,f){if(c<=b)for(var
a=1;a<=f;a++)e[c+a]=d[b+a];else
for(var
a=f;a>=1;a--)e[c+a]=d[b+a];return 0}function
bGD(a){var
c=[0];while(a!==0){var
d=a[1];for(var
b=1;b<d.length;b++)c.push(d[b]);a=a[2]}return c}function
bGG(e,f,d){var
a=new
Array(d+1);a[0]=0;for(var
b=1,c=f+1;b<=d;b++,c++)a[b]=e[c];return a}function
GH(c,b,a){var
d=String.fromCharCode;if(b==0&&a<=RC&&a==c.length)return d.apply(null,c);var
e=i;for(;0<a;b+=kB,a-=kB)e+=d.apply(null,c.slice(b,b+Math.min(a,kB)));return e}function
q6(b){if(ar.Uint8Array)var
c=new(ar.Uint8Array)(b.l);else
var
c=new
Array(b.l);var
e=b.c,d=e.length,a=0;for(;a<d;a++)c[a]=e.charCodeAt(a);for(d=b.l;a<d;a++)c[a]=0;b.c=c;b.t=4;return c}function
hS(d,e,b,f,c){if(c==0)return 0;if(f==0&&(c>=b.l||b.t==2&&c>=b.c.length)){b.c=d.t==4?GH(d.c,e,c):e==0&&d.c.length==c?d.c:d.c.substr(e,c);b.t=b.c.length==b.l?0:2}else
if(b.t==2&&f==b.c.length){b.c+=d.t==4?GH(d.c,e,c):e==0&&d.c.length==c?d.c:d.c.substr(e,c);b.t=b.c.length==b.l?0:2}else{if(b.t!=4)q6(b);var
g=d.c,h=b.c;if(d.t==4)if(f<=e)for(var
a=0;a<c;a++)h[f+a]=g[e+a];else
for(var
a=c-1;a>=0;a--)h[f+a]=g[e+a];else{var
i=Math.min(c,g.length-e);for(var
a=0;a<i;a++)h[f+a]=g.charCodeAt(e+a);for(;a<c;a++)h[f+a]=0}}return 0}function
g7(a){return a}function
hT(a,b,c,d,e){hS(g7(a),b,c,d,e);return 0}function
bHh(b,a){throw[0,b,a]}function
jn(b,a){if(b==0)return i;if(a.repeat)return a.repeat(b);var
d=i,c=0;for(;;){if(b&1)d+=a;b>>=1;if(b==0)return d;a+=a;c++;if(c==9)a.slice(0,1)}}function
jj(a){if(a.t==2)a.c+=jn(a.l-a.c.length,"\0");else
a.c=GH(a.c,0,a.c.length);a.t=0}function
To(a){if(a.length<24){for(var
b=0;b<a.length;b++)if(a.charCodeAt(b)>aC)return false;return true}else
return!/[^\x00-\x7f]/.test(a)}function
GJ(e){for(var
k=i,c=i,g,f,h,a,b=0,j=e.length;b<j;b++){f=e.charCodeAt(b);if(f<cU){for(var
d=b+1;d<j&&(f=e.charCodeAt(d))<cU;d++);if(d-b>yB){c.substr(0,1);k+=c;c=i;k+=e.slice(b,d)}else
c+=e.slice(b,d);if(d==j)break;b=d}a=1;if(++b<j&&((h=e.charCodeAt(b))&-64)==a7){g=h+(f<<6);if(f<Rc){a=g-0x3080;if(a<cU)a=1}else{a=2;if(++b<j&&((h=e.charCodeAt(b))&-64)==a7){g=h+(g<<6);if(f<Qj){a=g-0xe2080;if(a<Ru||a>=0xd7ff&&a<0xe000)a=2}else{a=3;if(++b<j&&((h=e.charCodeAt(b))&-64)==a7&&f<0xf5){a=h-0x3c82080+(g<<6);if(a<0x10000||a>0x10ffff)a=3}}}}}if(a<4){b-=a;c+="\ufffd"}else
if(a>cT)c+=String.fromCharCode(0xd7c0+(a>>10),RL+(a&0x3FF));else
c+=String.fromCharCode(a);if(c.length>kB){c.substr(0,1);k+=c;c=i}}return k+c}function
g5(c,a,b){this.t=c;this.c=a;this.l=b}g5.prototype.toString=function(){switch(this.t){case
9:return this.c;default:jj(this);case
0:if(To(this.c)){this.t=9;return this.c}this.t=8;case
8:return this.c}};g5.prototype.toUtf16=function(){var
a=this.toString();if(this.t==9)return a;return GJ(a)};g5.prototype.slice=function(){var
a=this.t==4?this.c.slice():this.c;return new
g5(this.t,a,this.l)};function
S2(a){return new
g5(0,a,a.length)}function
a(a){return S2(a)}function
GF(c,b){bHh(c,a(b))}var
aX=[0];function
bl(a){GF(aX.Invalid_argument,a)}function
S0(){bl(ET)}function
aG(a,c,b){b&=hi;if(a.t!=4){if(c==a.c.length){a.c+=String.fromCharCode(b);if(c+1==a.l)a.t=0;return 0}q6(a)}a.c[c]=b;return 0}function
is(b,a,c){if(a>>>0>=b.l)S0();return aG(b,a,c)}function
bL(a,b){switch(a.t&6){default:if(b>=a.c.length)return 0;case
0:return a.c.charCodeAt(b);case
4:return a.c[b]}}function
ht(c,a){if(c.fun)return ht(c.fun,a);if(typeof
c!=="function")return c;var
b=c.length|0;if(b===0)return c.apply(null,a);var
e=a.length|0,d=b-e|0;if(d==0)return c.apply(null,a);else
if(d<0)return ht(c.apply(null,a.slice(0,b)),a.slice(b));else
return function(){var
e=arguments.length==0?1:arguments.length,d=new
Array(a.length+e);for(var
b=0;b<a.length;b++)d[b]=a[b];for(var
b=0;b<arguments.length;b++)d[a.length+b]=arguments[b];return ht(c,d)}}function
kJ(){bl(ET)}function
bb(a,b){if(b>>>0>=a.length-1)kJ();return a}function
bGN(a){if(isFinite(a)){if(Math.abs(a)>=2.2250738585072014e-308)return 0;if(a!=0)return 1;return 2}return isNaN(a)?4:3}function
hw(a){a.t&6&&jj(a);return a.c}var
bHr=Math.log2&&Math.log2(1.1235582092889474E+307)==1020;function
bHq(a){if(bHr)return Math.floor(Math.log2(a));var
b=0;if(a==0)return-Infinity;if(a>=1)while(a>=2){a/=2;b++}else
while(a<1){a*=2;b--}return b}function
Gv(c){var
a=new(ar.Float32Array)(1);a[0]=c;var
b=new(ar.Int32Array)(a.buffer);return b[0]|0}var
Tb=Math.pow(2,-24);function
Ti(a){throw a}function
Tj(){Ti(aX.Division_by_zero)}function
aj(b,c,a){this.lo=b&fE;this.mi=c&fE;this.hi=a&cT}aj.prototype.caml_custom="_j";aj.prototype.copy=function(){return new
aj(this.lo,this.mi,this.hi)};aj.prototype.ucompare=function(a){if(this.hi>a.hi)return 1;if(this.hi<a.hi)return-1;if(this.mi>a.mi)return 1;if(this.mi<a.mi)return-1;if(this.lo>a.lo)return 1;if(this.lo<a.lo)return-1;return 0};aj.prototype.compare=function(a){var
b=this.hi<<16,c=a.hi<<16;if(b>c)return 1;if(b<c)return-1;if(this.mi>a.mi)return 1;if(this.mi<a.mi)return-1;if(this.lo>a.lo)return 1;if(this.lo<a.lo)return-1;return 0};aj.prototype.neg=function(){var
a=-this.lo,b=-this.mi+(a>>24),c=-this.hi+(b>>24);return new
aj(a,b,c)};aj.prototype.add=function(a){var
b=this.lo+a.lo,c=this.mi+a.mi+(b>>24),d=this.hi+a.hi+(c>>24);return new
aj(b,c,d)};aj.prototype.sub=function(a){var
b=this.lo-a.lo,c=this.mi-a.mi+(b>>24),d=this.hi-a.hi+(c>>24);return new
aj(b,c,d)};aj.prototype.mul=function(a){var
b=this.lo*a.lo,c=(b*Tb|0)+this.mi*a.lo+this.lo*a.mi,d=(c*Tb|0)+this.hi*a.lo+this.mi*a.mi+this.lo*a.hi;return new
aj(b,c,d)};aj.prototype.isZero=function(){return(this.lo|this.mi|this.hi)==0};aj.prototype.isNeg=function(){return this.hi<<16<0};aj.prototype.and=function(a){return new
aj(this.lo&a.lo,this.mi&a.mi,this.hi&a.hi)};aj.prototype.or=function(a){return new
aj(this.lo|a.lo,this.mi|a.mi,this.hi|a.hi)};aj.prototype.xor=function(a){return new
aj(this.lo^a.lo,this.mi^a.mi,this.hi^a.hi)};aj.prototype.shift_left=function(a){a=a&63;if(a==0)return this;if(a<24)return new
aj(this.lo<<a,this.mi<<a|this.lo>>24-a,this.hi<<a|this.mi>>24-a);if(a<48)return new
aj(0,this.lo<<a-24,this.mi<<a-24|this.lo>>48-a);return new
aj(0,0,this.lo<<a-48)};aj.prototype.shift_right_unsigned=function(a){a=a&63;if(a==0)return this;if(a<24)return new
aj(this.lo>>a|this.mi<<24-a,this.mi>>a|this.hi<<24-a,this.hi>>a);if(a<48)return new
aj(this.mi>>a-24|this.hi<<48-a,this.hi>>a-24,0);return new
aj(this.hi>>a-48,0,0)};aj.prototype.shift_right=function(a){a=a&63;if(a==0)return this;var
c=this.hi<<16>>16;if(a<24)return new
aj(this.lo>>a|this.mi<<24-a,this.mi>>a|c<<24-a,this.hi<<16>>a>>>16);var
b=this.hi<<16>>31;if(a<48)return new
aj(this.mi>>a-24|this.hi<<48-a,this.hi<<16>>a-24>>16,b&cT);return new
aj(this.hi<<16>>a-32,b,b)};aj.prototype.lsl1=function(){this.hi=this.hi<<1|this.mi>>23;this.mi=(this.mi<<1|this.lo>>23)&fE;this.lo=this.lo<<1&fE};aj.prototype.lsr1=function(){this.lo=(this.lo>>>1|this.mi<<23)&fE;this.mi=(this.mi>>>1|this.hi<<23)&fE;this.hi=this.hi>>>1};aj.prototype.udivmod=function(e){var
c=0,b=this.copy(),a=e.copy(),d=new
aj(0,0,0);while(b.ucompare(a)>0){c++;a.lsl1()}while(c>=0){c--;d.lsl1();if(b.ucompare(a)>=0){d.lo++;b=b.sub(a)}a.lsr1()}return{quotient:d,modulus:b}};aj.prototype.div=function(a){var
b=this;if(a.isZero())Tj();var
d=b.hi^a.hi;if(b.hi&cW)b=b.neg();if(a.hi&cW)a=a.neg();var
c=b.udivmod(a).quotient;if(d&cW)c=c.neg();return c};aj.prototype.mod=function(b){var
a=this;if(b.isZero())Tj();var
d=a.hi;if(a.hi&cW)a=a.neg();if(b.hi&cW)b=b.neg();var
c=a.udivmod(b).modulus;if(d&cW)c=c.neg();return c};aj.prototype.toInt=function(){return this.lo|this.mi<<24};aj.prototype.toFloat=function(){return(this.hi<<16)*Math.pow(2,32)+this.mi*Math.pow(2,24)+this.lo};aj.prototype.toArray=function(){return[this.hi>>8,this.hi&hi,this.mi>>16,this.mi>>8&hi,this.mi&hi,this.lo>>16,this.lo>>8&hi,this.lo&hi]};aj.prototype.lo32=function(){return this.lo|(this.mi&hi)<<24};aj.prototype.hi32=function(){return this.mi>>>8&cT|this.hi<<16};function
q9(b,c,a){return new
aj(b,c,a)}function
q8(a){if(!isFinite(a)){if(isNaN(a))return q9(1,0,Q5);return a>0?q9(0,0,Q5):q9(0,0,0xfff0)}var
f=a==0&&1/a==-Infinity?cW:a>=0?0:cW;if(f)a=-a;var
b=bHq(a)+1023;if(b<=0){b=0;a/=Math.pow(2,-PS)}else{a/=Math.pow(2,b-SR);if(a<16){a*=2;b-=1}if(b==0)a/=2}var
d=Math.pow(2,24),c=a|0;a=(a-c)*d;var
e=a|0;a=(a-e)*d;var
g=a|0;c=c&Et|f|b<<4;return q9(g,e,c)}function
kN(a){return a.toArray()}function
SZ(c,b,g){c.write(32,b.dims.length);c.write(32,b.kind|b.layout<<8);if(b.caml_custom==qw)for(var
a=0;a<b.dims.length;a++)if(b.dims[a]<cT)c.write(16,b.dims[a]);else{c.write(16,cT);c.write(32,0);c.write(32,b.dims[a])}else
for(var
a=0;a<b.dims.length;a++)c.write(32,b.dims[a]);switch(b.kind){case
2:case
3:case
12:for(var
a=0;a<b.data.length;a++)c.write(8,b.data[a]);break;case
4:case
5:for(var
a=0;a<b.data.length;a++)c.write(16,b.data[a]);break;case
6:for(var
a=0;a<b.data.length;a++)c.write(32,b.data[a]);break;case
8:case
9:c.write(8,0);for(var
a=0;a<b.data.length;a++)c.write(32,b.data[a]);break;case
7:for(var
a=0;a<b.data.length/2;a++){var
e=kN(b.get(a));for(var
d=0;d<8;d++)c.write(8,e[d])}break;case
1:for(var
a=0;a<b.data.length;a++){var
e=kN(q8(b.get(a)));for(var
d=0;d<8;d++)c.write(8,e[d])}break;case
0:for(var
a=0;a<b.data.length;a++){var
e=Gv(b.get(a));c.write(32,e)}break;case
10:for(var
a=0;a<b.data.length/2;a++){var
d=b.get(a);c.write(32,Gv(d[1]));c.write(32,Gv(d[2]))}break;case
11:for(var
a=0;a<b.data.length/2;a++){var
f=b.get(a),e=kN(q8(f[1]));for(var
d=0;d<8;d++)c.write(8,e[d]);var
e=kN(q8(f[2]));for(var
d=0;d<8;d++)c.write(8,e[d])}break}g[0]=(4+b.dims.length)*4;g[1]=(4+b.dims.length)*8}function
SX(a){switch(a){case
7:case
10:case
11:return 2;default:return 1}}function
bGH(c,e){var
b=ar,a;switch(c){case
0:a=b.Float32Array;break;case
1:a=b.Float64Array;break;case
2:a=b.Int8Array;break;case
3:a=b.Uint8Array;break;case
4:a=b.Int16Array;break;case
5:a=b.Uint16Array;break;case
6:a=b.Int32Array;break;case
7:a=b.Int32Array;break;case
8:a=b.Int32Array;break;case
9:a=b.Int32Array;break;case
10:a=b.Float32Array;break;case
11:a=b.Float64Array;break;case
12:a=b.Uint8Array;break}if(!a)bl("Bigarray.create: unsupported kind");var
d=new
a(e*SX(c));return d}function
Gw(c){var
a=new(ar.Int32Array)(1);a[0]=c;var
b=new(ar.Float32Array)(a.buffer);return b[0]}function
kM(a){return new
aj(a[7]<<0|a[6]<<8|a[5]<<16,a[4]<<0|a[3]<<8|a[2]<<16,a[1]<<0|a[0]<<8)}function
Gx(d){var
f=d.lo,g=d.mi,b=d.hi,c=(b&0x7fff)>>4;if(c==RF)return(f|g|b&Et)==0?b&cW?-Infinity:Infinity:NaN;var
e=Math.pow(2,-24),a=(f*e+g)*e+(b&Et);if(c>0){a+=16;a*=Math.pow(2,c-SR)}else
a*=Math.pow(2,-PS);if(b&cW)a=-a;return a}function
Gr(b){var
d=b.length,c=1;for(var
a=0;a<d;a++){if(b[a]<0)bl("Bigarray.create: negative dimension");c=c*b[a]}return c}function
bGW(b,a){return new
aj(b&fE,b>>>24&hi|(a&cT)<<8,a>>>16&cT)}function
Gy(a){return a.hi32()}function
Gz(a){return a.lo32()}var
bGI=qw;function
hR(c,d,b,a){this.kind=c;this.layout=d;this.dims=b;this.data=a}hR.prototype.caml_custom=bGI;hR.prototype.offset=function(b){var
c=0;if(typeof
b==="number")b=[b];if(!(b
instanceof
Array))bl("bigarray.js: invalid offset");if(this.dims.length!=b.length)bl("Bigarray.get/set: bad number of dimensions");if(this.layout==0)for(var
a=0;a<this.dims.length;a++){if(b[a]<0||b[a]>=this.dims[a])kJ();c=c*this.dims[a]+b[a]}else
for(var
a=this.dims.length-1;a>=0;a--){if(b[a]<1||b[a]>this.dims[a])kJ();c=c*this.dims[a]+(b[a]-1)}return c};hR.prototype.get=function(a){switch(this.kind){case
7:var
d=this.data[a*2+0],b=this.data[a*2+1];return bGW(d,b);case
10:case
11:var
e=this.data[a*2+0],c=this.data[a*2+1];return[ky,e,c];default:return this.data[a]}};hR.prototype.set=function(a,b){switch(this.kind){case
7:this.data[a*2+0]=Gz(b);this.data[a*2+1]=Gy(b);break;case
10:case
11:this.data[a*2+0]=b[1];this.data[a*2+1]=b[2];break;default:this.data[a]=b;break}return 0};hR.prototype.fill=function(b){switch(this.kind){case
7:var
c=Gz(b),e=Gy(b);if(c==e)this.data.fill(c);else
for(var
a=0;a<this.data.length;a++)this.data[a]=a%2==0?c:e;break;case
10:case
11:var
d=b[1],f=b[2];if(d==f)this.data.fill(d);else
for(var
a=0;a<this.data.length;a++)this.data[a]=a%2==0?d:f;break;default:this.data.fill(b);break}};hR.prototype.compare=function(b,g){if(this.layout!=b.layout||this.kind!=b.kind){var
e=this.kind|this.layout<<8,f=b.kind|b.layout<<8;return f-e}if(this.dims.length!=b.dims.length)return b.dims.length-this.dims.length;for(var
a=0;a<this.dims.length;a++)if(this.dims[a]!=b.dims[a])return this.dims[a]<b.dims[a]?-1:1;switch(this.kind){case
0:case
1:case
10:case
11:var
c,d;for(var
a=0;a<this.data.length;a++){c=this.data[a];d=b.data[a];if(c<d)return-1;if(c>d)return 1;if(c!=d){if(!g)return NaN;if(c==c)return 1;if(d==d)return-1}}break;case
7:for(var
a=0;a<this.data.length;a+=2){if(this.data[a+1]<b.data[a+1])return-1;if(this.data[a+1]>b.data[a+1])return 1;if(this.data[a]>>>0<b.data[a]>>>0)return-1;if(this.data[a]>>>0>b.data[a]>>>0)return 1}break;case
2:case
3:case
4:case
5:case
6:case
8:case
9:case
12:for(var
a=0;a<this.data.length;a++){if(this.data[a]<b.data[a])return-1;if(this.data[a]>b.data[a])return 1}break}return 0};function
ji(c,d,b,a){this.kind=c;this.layout=d;this.dims=b;this.data=a}ji.prototype=new
hR();ji.prototype.offset=function(a){if(typeof
a!=="number")if(a
instanceof
Array&&a.length==1)a=a[0];else
bl("Ml_Bigarray_c_1_1.offset");if(a<0||a>=this.dims[0])kJ();return a};ji.prototype.get=function(a){return this.data[a]};ji.prototype.set=function(a,b){this.data[a]=b;return 0};ji.prototype.fill=function(a){this.data.fill(a);return 0};function
SV(c,d,a,b){var
e=SX(c);if(Gr(a)*e!=b.length)bl("length doesn't match dims");if(d==0&&a.length==1&&e==1)return new
ji(c,d,a,b);return new
hR(c,d,a,b)}function
bY(b){if(!aX.Failure)aX.Failure=[aQ,a(Cm),-3];GF(aX.Failure,b)}function
SW(b,v,r){var
i=b.read32s();if(i<0||i>16)bY("input_value: wrong number of bigarray dimensions");var
p=b.read32s(),j=p&hi,o=p>>8&1,h=[];if(r==qw)for(var
a=0;a<i;a++){var
n=b.read16u();if(n==cT){var
t=b.read32u(),u=b.read32u();if(t!=0)bY("input_value: bigarray dimension overflow in 32bit");n=u}h.push(n)}else
for(var
a=0;a<i;a++)h.push(b.read32u());var
d=Gr(h),f=bGH(j,d),g=SV(j,o,h,f);switch(j){case
2:for(var
a=0;a<d;a++)f[a]=b.read8s();break;case
3:case
12:for(var
a=0;a<d;a++)f[a]=b.read8u();break;case
4:for(var
a=0;a<d;a++)f[a]=b.read16s();break;case
5:for(var
a=0;a<d;a++)f[a]=b.read16u();break;case
6:for(var
a=0;a<d;a++)f[a]=b.read32s();break;case
8:case
9:var
s=b.read8u();if(s)bY("input_value: cannot read bigarray with 64-bit OCaml ints");for(var
a=0;a<d;a++)f[a]=b.read32s();break;case
7:var
e=new
Array(8);for(var
a=0;a<d;a++){for(var
c=0;c<8;c++)e[c]=b.read8u();var
q=kM(e);g.set(a,q)}break;case
1:var
e=new
Array(8);for(var
a=0;a<d;a++){for(var
c=0;c<8;c++)e[c]=b.read8u();var
k=Gx(kM(e));g.set(a,k)}break;case
0:for(var
a=0;a<d;a++){var
k=Gw(b.read32s());g.set(a,k)}break;case
10:for(var
a=0;a<d;a++){var
m=Gw(b.read32s()),l=Gw(b.read32s());g.set(a,[ky,m,l])}break;case
11:var
e=new
Array(8);for(var
a=0;a<d;a++){for(var
c=0;c<8;c++)e[c]=b.read8u();var
m=Gx(kM(e));for(var
c=0;c<8;c++)e[c]=b.read8u();var
l=Gx(kM(e));g.set(a,[ky,m,l])}break}v[0]=(4+i)*4;return SV(j,o,h,f)}function
SU(a,b,c){return a.compare(b,c)}function
Te(a,b){return Math.imul(a,b)}function
hv(b,a){a=Te(a,0xcc9e2d51|0);a=a<<15|a>>>32-15;a=Te(a,0x1b873593);b^=a;b=b<<13|b>>>32-13;return(b+(b<<2)|0)+(0xe6546b64|0)|0}function
bGR(a,b){a=hv(a,Gz(b));a=hv(a,Gy(b));return a}function
S$(a,b){return bGR(a,q8(b))}function
SY(c){var
b=Gr(c.dims),d=0;switch(c.kind){case
2:case
3:case
12:if(b>om)b=om;var
e=0,a=0;for(a=0;a+4<=c.data.length;a+=4){e=c.data[a+0]|c.data[a+1]<<8|c.data[a+2]<<16|c.data[a+3]<<24;d=hv(d,e)}e=0;switch(b&3){case
3:e=c.data[a+2]<<16;case
2:e|=c.data[a+1]<<8;case
1:e|=c.data[a+0];d=hv(d,e)}break;case
4:case
5:if(b>a7)b=a7;var
e=0,a=0;for(a=0;a+2<=c.data.length;a+=2){e=c.data[a+0]|c.data[a+1]<<16;d=hv(d,e)}if((b&1)!=0)d=hv(d,c.data[a]);break;case
6:if(b>64)b=64;for(var
a=0;a<b;a++)d=hv(d,c.data[a]);break;case
8:case
9:if(b>64)b=64;for(var
a=0;a<b;a++)d=hv(d,c.data[a]);break;case
7:if(b>32)b=32;b*=2;for(var
a=0;a<b;a++)d=hv(d,c.data[a]);break;case
10:b*=2;case
0:if(b>64)b=64;for(var
a=0;a<b;a++)d=S$(d,c.data[a]);break;case
11:b*=2;case
1:if(b>32)b=32;for(var
a=0;a<b;a++)d=S$(d,c.data[a]);break}return d}function
bGT(a,b){b[0]=4;return a.read32s()}function
bHd(a,b){switch(a.read8u()){case
1:b[0]=4;return a.read32s();case
2:bY("input_value: native integer value too large");default:bY("input_value: ill-formed native integer")}}function
bG4(c,d){var
b=new
Array(8);for(var
a=0;a<8;a++)b[a]=c.read8u();d[0]=8;return kM(b)}function
bG1(e,d,b){var
c=kN(d);for(var
a=0;a<8;a++)e.write(8,c[a]);b[0]=8;b[1]=8}function
bGV(a,b,c){return a.compare(b)}function
bGY(a){return a.lo32()^a.hi32()}var
S6={"_j":{deserialize:bG4,serialize:bG1,fixed_length:8,compare:bGV,hash:bGY},"_i":{deserialize:bGT,fixed_length:4},"_n":{deserialize:bHd,fixed_length:4},"_bigarray":{deserialize:function(a,b){return SW(a,b,"_bigarray")},serialize:SZ,compare:SU,hash:SY},"_bigarr02":{deserialize:function(a,b){return SW(a,b,qw)},serialize:SZ,compare:SU,hash:SY}};function
Gs(a){return S6[a.caml_custom]&&S6[a.caml_custom].compare}function
S4(f,c,d,e){var
b=Gs(c);if(b){var
a=d>0?b(c,f,e):b(f,c,e);if(e&&a!=a)return d;if(+a!=+a)return+a;if((a|0)!=0)return a|0}return d}function
q$(a){return a
instanceof
g5}function
GB(a){return q$(a)}function
S5(a){if(typeof
a==="number")return kD;else
if(q$(a))return iX;else
if(GB(a))return 1252;else
if(a
instanceof
Array&&a[0]===a[0]>>>0&&a[0]<=Co){var
b=a[0]|0;return b==ky?0:b}else
if(a
instanceof
String)return Pm;else
if(typeof
a=="string")return Pm;else
if(a
instanceof
Number)return kD;else
if(a&&a.caml_custom)return yJ;else
if(a&&a.compare)return 1256;else
if(typeof
a=="function")return 1247;else
if(typeof
a=="symbol")return 1251;return 1001}function
g8(a,b){if(a<b)return-1;if(a==b)return 0;return 1}function
S1(a,b){a.t&6&&jj(a);b.t&6&&jj(b);return a.c<b.c?-1:a.c>b.c?1:0}function
Y(a,b){return S1(a,b)}function
q5(a,b,d){var
e=[];for(;;){if(!(d&&a===b)){var
f=S5(a);if(f==kc){a=a[1];continue}var
g=S5(b);if(g==kc){b=b[1];continue}if(f!==g){if(f==kD){if(g==yJ)return S4(a,b,-1,d);return-1}if(g==kD){if(f==yJ)return S4(b,a,1,d);return 1}return f<g?-1:1}switch(f){case
247:bl(CX);break;case
248:var
c=g8(a[2],b[2]);if(c!=0)return c|0;break;case
249:bl(CX);break;case
250:bl("equal: got Forward_tag, should not happen");break;case
251:bl("equal: abstract value");break;case
252:if(a!==b){var
c=S1(a,b);if(c!=0)return c|0}break;case
253:bl("equal: got Double_tag, should not happen");break;case
254:bl("equal: got Double_array_tag, should not happen");break;case
255:bl("equal: got Custom_tag, should not happen");break;case
1247:bl(CX);break;case
1255:var
i=Gs(a);if(i!=Gs(b))return a.caml_custom<b.caml_custom?-1:1;if(!i)bl("compare: abstract value");var
c=i(a,b,d);if(c!=c)return d?-1:c;if(c!==(c|0))return-1;if(c!=0)return c|0;break;case
1256:var
c=a.compare(b,d);if(c!=c)return d?-1:c;if(c!==(c|0))return-1;if(c!=0)return c|0;break;case
1000:a=+a;b=+b;if(a<b)return-1;if(a>b)return 1;if(a!=b){if(!d)return NaN;if(a==a)return 1;if(b==b)return-1}break;case
1001:if(a<b)return-1;if(a>b)return 1;if(a!=b){if(!d)return NaN;if(a==a)return 1;if(b==b)return-1}break;case
1251:if(a!==b){if(!d)return NaN;return 1}break;case
1252:var
a=hw(a),b=hw(b);if(a!==b){if(a<b)return-1;if(a>b)return 1}break;case
12520:var
a=a.toString(),b=b.toString();if(a!==b){if(a<b)return-1;if(a>b)return 1}break;case
246:case
254:default:if(a.length!=b.length)return a.length<b.length?-1:1;if(a.length>1)e.push(a,b,1);break}}if(e.length==0)return 0;var
h=e.pop();b=e.pop();a=e.pop();if(h+1<a.length)e.push(a,b,h+1);a=a[h];b=b[h]}}function
S3(a,b){return q5(a,b,true)}function
bGO(){return[0]}function
aW(a){if(a<0)bl("Bytes.create");return new
g5(a?2:9,i,a)}function
S7(a,b){return+(q5(a,b,false)==0)}function
bGP(a,c,b,d){if(b>0)if(c==0&&(b>=a.l||a.t==2&&b>=a.c.length))if(d==0){a.c=i;a.t=2}else{a.c=jn(b,String.fromCharCode(d));a.t=b==a.l?0:2}else{if(a.t!=4)q6(a);for(b+=c;c<b;c++)a.c[c]=d}return 0}function
kL(a){var
b;a=hw(a);b=+a;if(a.length>0&&b===b)return b;a=a.replace(/_/g,i);b=+a;if(a.length>0&&b===b||/^[+-]?nan$/i.test(a))return b;var
c=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(a);if(c){var
d=c[3].replace(/0+$/,i),f=parseInt(c[1]+c[2]+d,16),e=(c[5]|0)-4*d.length;b=f*Math.pow(2,e);return b}if(/^\+?inf(inity)?$/i.test(a))return Infinity;if(/^-inf(inity)?$/i.test(a))return-Infinity;bY("float_of_string")}function
GE(d){d=hw(d);var
e=d.length;if(e>31)bl("format_int: format too long");var
a={justify:ho,signstyle:gi,filler:cM,alternate:false,base:0,signedconv:false,width:0,uppercase:false,sign:1,prec:-1,conv:R9};for(var
c=0;c<e;c++){var
b=d.charAt(c);switch(b){case"-":a.justify=gi;break;case"+":case" ":a.signstyle=b;break;case"0":a.filler=bU;break;case"#":a.alternate=true;break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":a.width=0;while(b=d.charCodeAt(c)-48,b>=0&&b<=9){a.width=a.width*10+b;c++}c--;break;case".":a.prec=0;c++;while(b=d.charCodeAt(c)-48,b>=0&&b<=9){a.prec=a.prec*10+b;c++}c--;case"d":case"i":a.signedconv=true;case"u":a.base=10;break;case"x":a.base=16;break;case"X":a.base=16;a.uppercase=true;break;case"o":a.base=8;break;case"e":case"f":case"g":a.signedconv=true;a.conv=b;break;case"E":case"F":case"G":a.signedconv=true;a.uppercase=true;a.conv=b.toLowerCase();break}}return a}function
Gt(b,f){if(b.uppercase)f=f.toUpperCase();var
e=f.length;if(b.signedconv&&(b.sign<0||b.signstyle!=gi))e++;if(b.alternate){if(b.base==8)e+=1;if(b.base==16)e+=2}var
c=i;if(b.justify==ho&&b.filler==cM)for(var
d=e;d<b.width;d++)c+=cM;if(b.signedconv)if(b.sign<0)c+=gi;else
if(b.signstyle!=gi)c+=b.signstyle;if(b.alternate&&b.base==8)c+=bU;if(b.alternate&&b.base==16)c+=im;if(b.justify==ho&&b.filler==bU)for(var
d=e;d<b.width;d++)c+=bU;c+=f;if(b.justify==gi)for(var
d=e;d<b.width;d++)c+=cM;return a(c)}function
Gu(i,c){function
j(a,b){if(Math.abs(a)<1.0)return a.toFixed(b);else{var
c=parseInt(a.toString().split(ho)[1]);if(c>20){c-=20;a/=Math.pow(10,c);a+=new
Array(c+1).join(bU);if(b>0)a=a+fo+new
Array(b+1).join(bU);return a}else
return a.toFixed(b)}}var
a,e=GE(i),d=e.prec<0?6:e.prec;if(c<0||c==0&&1/c==-Infinity){e.sign=-1;c=-c}if(isNaN(c)){a=Cu;e.filler=cM}else
if(!isFinite(c)){a="inf";e.filler=cM}else
switch(e.conv){case"e":var
a=c.toExponential(d),b=a.length;if(a.charAt(b-3)==Ge)a=a.slice(0,b-1)+bU+a.slice(b-1);break;case"f":a=j(c,d);break;case"g":d=d?d:1;a=c.toExponential(d-1);var
h=a.indexOf(Ge),g=+a.slice(h+1);if(g<-4||c>=1e21||c.toFixed(0).length>d){var
b=h-1;while(a.charAt(b)==bU)b--;if(a.charAt(b)==fo)b--;a=a.slice(0,b+1)+a.slice(h);b=a.length;if(a.charAt(b-3)==Ge)a=a.slice(0,b-1)+bU+a.slice(b-1);break}else{var
f=d;if(g<0){f-=g+1;a=c.toFixed(f)}else
while(a=c.toFixed(f),a.length>d+1)f--;if(f){var
b=a.length-1;while(a.charAt(b)==bU)b--;if(a.charAt(b)==fo)b--;a=a.slice(0,b+1)}}break}return Gt(e,a)}function
q7(e,c){if(hw(e)==kr)return a(i+c);var
b=GE(e);if(c<0)if(b.signedconv){b.sign=-1;c=-c}else
c>>>=0;var
d=c.toString(b.base);if(b.prec>=0){b.filler=cM;var
f=b.prec-d.length;if(f>0)d=jn(f,bU)+d}return Gt(b,d)}var
Tg=0;function
hu(){return Tg++}function
S9(){return[0]}var
ra=[];function
ag(i,h,d){var
b=i[1],g=ra[d];if(g===undefined)for(var
f=ra.length;f<d;f++)ra[f]=0;else
if(b[g]===h)return b[g-1];var
a=3,e=b[1]*2+1,c;while(a<e){c=a+e>>1|1;if(h<b[c+1])e=c-2;else
a=c}ra[d]=a+1;return h==b[a+1]?b[a]:0}function
bHn(e){for(var
f=i,b=f,a,h,c=0,g=e.length;c<g;c++){a=e.charCodeAt(c);if(a<cU){for(var
d=c+1;d<g&&(a=e.charCodeAt(d))<cU;d++);if(d-c>yB){b.substr(0,1);f+=b;b=i;f+=e.slice(c,d)}else
b+=e.slice(c,d);if(d==g)break;c=d}if(a<Ru){b+=String.fromCharCode(0xc0|a>>6);b+=String.fromCharCode(cU|a&iW)}else
if(a<0xd800||a>=Sv)b+=String.fromCharCode(Rc|a>>12,cU|a>>6&iW,cU|a&iW);else
if(a>=0xdbff||c+1==g||(h=e.charCodeAt(c+1))<RL||h>Sv)b+="\xef\xbf\xbd";else{c++;a=(a<<10)+h-0x35fdc00;b+=String.fromCharCode(Qj|a>>18,cU|a>>12&iW,cU|a>>6&iW,cU|a&iW)}if(b.length>kB){b.substr(0,1);f+=b;b=i}}return f+b}function
bGM(a){var
b=9;if(!To(a))b=8,a=bHn(a);return new
g5(b,a,a.length)}function
ct(a){return bGM(a)}function
bGS(a,c,l){if(!isFinite(a)){if(isNaN(a))return ct(Cu);return ct(a>0?SO:"-infinity")}var
j=a==0&&1/a==-Infinity?1:a>=0?0:1;if(j)a=-a;var
d=0;if(a==0);else
if(a<1)while(a<1&&d>-Sd){a*=2;d--}else
while(a>=2){a/=2;d++}var
k=d<0?i:ho,e=i;if(j)e=gi;else
switch(l){case
43:e=ho;break;case
32:e=cM;break;default:break}if(c>=0&&c<13){var
g=Math.pow(2,c*4);a=Math.round(a*g)/g}var
b=a.toString(16);if(c>=0){var
h=b.indexOf(fo);if(h<0)b+=fo+jn(c,bU);else{var
f=h+1+c;if(b.length<f)b+=jn(f-b.length,bU);else
b=b.substr(0,f)}}return ct(e+im+b+"p"+k+d.toString(10))}function
bG0(a){return+a.isZero()}function
q_(a){return new
aj(a&fE,a>>24&fE,a>>31&cT)}function
bG3(a){return a.toInt()}function
bGZ(a){return+a.isNeg()}function
Ta(a){return a.neg()}function
bGX(g,c){var
a=GE(g);if(a.signedconv&&bGZ(c)){a.sign=-1;c=Ta(c)}var
b=i,h=q_(a.base),f="0123456789abcdef";do{var
e=c.udivmod(h);c=e.quotient;b=f.charAt(bG3(e.modulus))+b}while(!bG0(c));if(a.prec>=0){a.filler=cM;var
d=a.prec-b.length;if(d>0)b=jn(d,bU)+b}return Gt(a,b)}function
b9(a){return a.l}function
ah(a){return b9(a)}function
K(b,a){return bL(b,a)}function
bGU(a,b){return a.add(b)}function
bG2(a,b){return a.mul(b)}function
GA(a,b){return a.ucompare(b)<0}function
Th(c){var
a=0,e=ah(c),b=10,d=1;if(e>0)switch(K(c,a)){case
45:a++;d=-1;break;case
43:a++;d=1;break}if(a+1<e&&K(c,a)==48)switch(K(c,a+1)){case
120:case
88:b=16;a+=2;break;case
111:case
79:b=8;a+=2;break;case
98:case
66:b=2;a+=2;break;case
117:case
85:a+=2;break}return[a,d,b]}function
rb(a){if(a>=48&&a<=57)return a-48;if(a>=65&&a<=90)return a-55;if(a>=97&&a<=aP)return a-87;return-1}function
jk(f){var
g=Th(f),e=g[0],i=g[1],c=g[2],h=q_(c),j=new
aj(fE,0xfffffff,cT).udivmod(h).quotient,d=K(f,e),a=rb(d);if(a<0||a>=c)bY(hj);var
b=q_(a);for(;;){e++;d=K(f,e);if(d==95)continue;a=rb(d);if(a<0||a>=c)break;if(GA(j,b))bY(hj);a=q_(a);b=bGU(bG2(h,b),a);if(GA(b,a))bY(hj)}if(e!=ah(f))bY(hj);if(c==10&&GA(new
aj(0,0,cW),b))bY(hj);if(i<0)b=Ta(b);return b}function
jl(a){return a.toFloat()}function
c3(f){var
h=Th(f),c=h[0],i=h[1],d=h[2],g=ah(f),j=-1>>>0,e=c<g?K(f,c):0,b=rb(e);if(b<0||b>=d)bY(hj);var
a=b;for(c++;c<g;c++){e=K(f,c);if(e==95)continue;b=rb(e);if(b<0||b>=d)break;a=d*a+b;if(a>j)bY(hj)}if(c!=g)bY(hj);a=i*a;if(d==10&&(a|0)!=a)bY(hj);return a|0}function
bG6(a){return a.slice(1)}function
bG7(a){return!!a}function
am(a){return a.toUtf16()}function
bG8(b){var
c={};for(var
a=1;a<b.length;a++){var
d=b[a];c[am(d[1])]=d[2]}return c}function
bG9(a,b){return+(q5(a,b,false)<0)}function
jm(a,d){if(a<0)kJ();var
a=a+1|0,b=new
Array(a);b[0]=0;for(var
c=1;c<a;c++)b[c]=d;return b}function
bG$(){return 0}function
aK(a){GF(aX.Sys_error,a)}var
g9=new
Array();function
it(c){var
a=g9[c];if(!a.opened)aK("Cannot flush a closed channel");if(!a.buffer||a.buffer==i)return 0;if(a.fd&&aX.fds[a.fd]&&aX.fds[a.fd].output){var
b=aX.fds[a.fd].output;switch(b.length){case
2:b(c,a.buffer);break;default:b(a.buffer)}}a.buffer=i;return 0}function
kP(){return typeof
ar.process!=="undefined"&&typeof
ar.process.versions!=="undefined"&&typeof
ar.process.versions.node!=="undefined"}function
bHs(){function
a(a){if(a.charAt(0)===bS)return[i,a.substring(1)];return}function
b(c){var
g=/^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,a=g.exec(c),b=a[1]||i,e=Boolean(b&&b.charAt(1)!==ig);if(Boolean(a[2]||e)){var
d=a[1]||i,f=a[2]||i;return[d,c.substring(d.length+f.length)]}return}return kP()&&ar.process&&ar.process.platform?ar.process.platform===Q3?b:a:a}var
GK=bHs();function
Tn(a){return a.slice(-1)!==bS?a+bS:a}if(kP()&&ar.process&&ar.process.cwd)var
kK=ar.process.cwd().replace(/\\/g,bS);else
var
kK="/static";kK=Tn(kK);function
bG_(a){a=am(a);if(!GK(a))a=kK+a;var
e=GK(a),d=e[1].split(bS),b=[];for(var
c=0;c<d.length;c++)switch(d[c]){case"..":if(b.length>1)b.pop();break;case".":break;default:b.push(d[c]);break}b.unshift(e[0]);b.orig=a;return b}var
bHv=["E2BIG","EACCES","EAGAIN","EBADF","EBUSY","ECHILD","EDEADLK","EDOM",Q6,"EFAULT","EFBIG","EINTR","EINVAL","EIO","EISDIR","EMFILE","EMLINK","ENAMETOOLONG","ENFILE","ENODEV",F2,"ENOEXEC","ENOLCK","ENOMEM","ENOSPC","ENOSYS",Fn,SJ,"ENOTTY","ENXIO","EPERM","EPIPE","ERANGE","EROFS","ESPIPE","ESRCH","EXDEV","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","EOPNOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","EHOSTDOWN","EHOSTUNREACH","ELOOP","EOVERFLOW"];function
ix(d,f,e,a){var
b=bHv.indexOf(d);if(b<0){if(a==null)a=-9999;b=[0,a]}var
c=[b,ct(f||i),ct(e||i)];return c}var
Tf={};function
iu(a){return Tf[a]}function
iw(b,a){throw[0,b].concat(a)}function
bGL(a){return new
g5(4,a,a.length)}function
bHf(a){aK(a+qa)}function
bGK(b,a){if(a>>>0>=b.l)S0();return bL(b,a)}function
ST(){}function
bs(a){this.data=a}bs.prototype=new
ST();bs.prototype.truncate=function(a){var
b=this.data;this.data=aW(a|0);hS(b,0,this.data,0,a)};bs.prototype.length=function(){return b9(this.data)};bs.prototype.write=function(b,d,g,a){var
c=this.length();if(b+a>=c){var
e=aW(b+a),f=this.data;this.data=e;hS(f,0,this.data,0,c)}hT(d,g,this.data,b,a);return 0};bs.prototype.read=function(c,a,d,b){var
e=this.length();hS(this.data,c,a,d,b);return 0};bs.prototype.read_one=function(a){return bGK(this.data,a)};bs.prototype.close=function(){};bs.prototype.constructor=bs;function
bX(b,a){this.content={};this.root=b;this.lookupFun=a}bX.prototype.nm=function(a){return this.root+a};bX.prototype.create_dir_if_needed=function(d){var
c=d.split(bS),b=i;for(var
a=0;a<c.length-1;a++){b+=c[a]+bS;if(this.content[b])continue;this.content[b]=Symbol("directory")}};bX.prototype.slash=function(a){return/\/$/.test(a)?a:a+bS};bX.prototype.lookup=function(b){if(!this.content[b]&&this.lookupFun){var
c=this.lookupFun(a(this.root),a(b));if(c!==0){this.create_dir_if_needed(b);this.content[b]=new
bs(g7(c[1]))}}};bX.prototype.exists=function(a){if(a==i)return 1;var
b=this.slash(a);if(this.content[b])return 1;this.lookup(a);return this.content[a]?1:0};bX.prototype.mkdir=function(c,e,d){var
b=d&&iu(FW);if(this.exists(c))if(b)iw(b,ix(Q6,AS,this.nm(c)));else
aK(c+": File exists");var
a=/^(.*)\/[^/]+/.exec(c);a=a&&a[1]||i;if(!this.exists(a))if(b)iw(b,ix(F2,AS,this.nm(a)));else
aK(a+qa);if(!this.is_dir(a))if(b)iw(b,ix(Fn,AS,this.nm(a)));else
aK(a+zB);this.create_dir_if_needed(this.slash(c))};bX.prototype.rmdir=function(a,f){var
b=f&&iu(FW),c=a==i?i:this.slash(a),e=new
RegExp(oE+c+Pu);if(!this.exists(a))if(b)iw(b,ix(F2,xF,this.nm(a)));else
aK(a+qa);if(!this.is_dir(a))if(b)iw(b,ix(Fn,xF,this.nm(a)));else
aK(a+zB);for(var
d
in
this.content)if(d.match(e))if(b)iw(b,ix(SJ,xF,this.nm(a)));else
aK(this.nm(a)+": Directory not empty");delete
this.content[c]};bX.prototype.readdir=function(a){var
f=a==i?i:this.slash(a);if(!this.exists(a))aK(a+qa);if(!this.is_dir(a))aK(a+zB);var
g=new
RegExp(oE+f+Pu),d={},c=[];for(var
e
in
this.content){var
b=e.match(g);if(b&&!d[b[1]]){d[b[1]]=true;c.push(b[1])}}return c};bX.prototype.is_dir=function(a){if(a==i)return true;var
b=this.slash(a);return this.content[b]?1:0};bX.prototype.unlink=function(a){var
b=this.content[a]?true:false;delete
this.content[a];return b};bX.prototype.open=function(a,b){if(b.rdonly&&b.wronly)aK(this.nm(a)+Ri);if(b.text&&b.binary)aK(this.nm(a)+R$);this.lookup(a);if(this.content[a]){if(this.is_dir(a))aK(this.nm(a)+" : is a directory");if(b.create&&b.excl)aK(this.nm(a)+Rh);var
c=this.content[a];if(b.truncate)c.truncate();return c}else
if(b.create){this.create_dir_if_needed(a);this.content[a]=new
bs(aW(0));return this.content[a]}else
bHf(this.nm(a))};bX.prototype.register=function(c,a){var
b;if(this.content[c])aK(this.nm(c)+Rh);if(q$(a))b=new
bs(a);if(GB(a))b=new
bs(g7(a));else
if(a
instanceof
Array)b=new
bs(bGL(a));else
if(typeof
a==="string")b=new
bs(S2(a));else
if(a.toString){var
d=g7(ct(a.toString()));b=new
bs(d)}if(b){this.create_dir_if_needed(c);this.content[c]=b}else
aK(this.nm(c)+" : registering file with invalid content type")};bX.prototype.constructor=bX;function
bGF(d){var
c=ah(d),b=new
Array(c),a=0;for(;a<c;a++)b[a]=K(d,a);return b}function
bGE(a){if(a.t!=4)q6(a);return a.c}function
g6(a){this.fs=require("fs");this.fd=a}g6.prototype=new
ST();g6.prototype.truncate=function(a){try{this.fs.ftruncateSync(this.fd,a|0)}catch(a){aK(a.toString())}};g6.prototype.length=function(){try{return this.fs.fstatSync(this.fd).size}catch(a){aK(a.toString())}};g6.prototype.write=function(f,b,c,e){var
a=bGF(b);if(!(a
instanceof
ar.Uint8Array))a=new(ar.Uint8Array)(a);var
d=ar.Buffer.from(a);try{this.fs.writeSync(this.fd,d,c,e,f)}catch(a){aK(a.toString())}return 0};g6.prototype.read=function(g,d,c,f){var
a=bGE(d);if(!(a
instanceof
ar.Uint8Array))a=new(ar.Uint8Array)(a);var
e=ar.Buffer.from(a);try{this.fs.readSync(this.fd,e,c,f,g)}catch(a){aK(a.toString())}for(var
b=0;b<f;b++)is(d,c+b,e[c+b]);return 0};g6.prototype.read_one=function(c){var
b=new(ar.Uint8Array)(1),a=ar.Buffer.from(b);try{this.fs.readSync(this.fd,a,0,1,c)}catch(a){aK(a.toString())}return a[0]};g6.prototype.close=function(){try{this.fs.closeSync(this.fd)}catch(a){aK(a.toString())}};g6.prototype.constructor=g6;function
bt(a){this.fs=require("fs");this.root=a}bt.prototype.nm=function(a){return this.root+a};bt.prototype.exists=function(a){try{return this.fs.existsSync(this.nm(a))?1:0}catch(a){return 0}};bt.prototype.mkdir=function(b,a,c){try{this.fs.mkdirSync(this.nm(b),{mode:a});return 0}catch(a){this.raise_nodejs_error(a,c)}};bt.prototype.rmdir=function(a,b){try{this.fs.rmdirSync(this.nm(a));return 0}catch(a){this.raise_nodejs_error(a,b)}};bt.prototype.readdir=function(a,b){try{return this.fs.readdirSync(this.nm(a))}catch(a){this.raise_nodejs_error(a,b)}};bt.prototype.is_dir=function(a){try{return this.fs.statSync(this.nm(a)).isDirectory()?1:0}catch(a){aK(a.toString())}};bt.prototype.unlink=function(a,c){try{var
b=this.fs.existsSync(this.nm(a))?1:0;this.fs.unlinkSync(this.nm(a));return b}catch(a){this.raise_nodejs_error(a,c)}};bt.prototype.open=function(f,c,g){var
a=require("constants"),b=0;for(var
e
in
c)switch(e){case"rdonly":b|=a.O_RDONLY;break;case"wronly":b|=a.O_WRONLY;break;case"append":b|=a.O_WRONLY|a.O_APPEND;break;case"create":b|=a.O_CREAT;break;case"truncate":b|=a.O_TRUNC;break;case"excl":b|=a.O_EXCL;break;case"binary":b|=a.O_BINARY;break;case"text":b|=a.O_TEXT;break;case"nonblock":b|=a.O_NONBLOCK;break}try{var
d=this.fs.openSync(this.nm(f),b);return new
g6(d)}catch(a){this.raise_nodejs_error(a,g)}};bt.prototype.rename=function(b,a,c){try{this.fs.renameSync(this.nm(b),this.nm(a))}catch(a){this.raise_nodejs_error(a,c)}};bt.prototype.stat=function(b,c){try{var
a=this.fs.statSync(this.nm(b));return this.stats_from_js(a)}catch(a){this.raise_nodejs_error(a,c)}};bt.prototype.lstat=function(b,c){try{var
a=this.fs.lstatSync(this.nm(b));return this.stats_from_js(a)}catch(a){this.raise_nodejs_error(a,c)}};bt.prototype.symlink=function(d,c,a,b){try{this.fs.symlinkSync(this.nm(c),this.nm(a),d?"dir":"file");return 0}catch(a){this.raise_nodejs_error(a,b)}};bt.prototype.readlink=function(b,c){try{var
a=this.fs.readlinkSync(this.nm(b),Pg);return ct(a)}catch(a){this.raise_nodejs_error(a,c)}};bt.prototype.raise_nodejs_error=function(a,d){var
b=iu(FW);if(d&&b){var
c=ix(a.code,a.syscall,a.path,a.errno);iw(b,c)}else
aK(a.toString())};bt.prototype.stats_from_js=function(a){var
b;if(a.isFile())b=0;else
if(a.isDirectory())b=1;else
if(a.isCharacterDevice())b=2;else
if(a.isBlockDevice())b=3;else
if(a.isSymbolicLink())b=4;else
if(a.isFIFO())b=5;else
if(a.isSocket())b=6;return[0,a.dev,a.ino,b,a.mode,a.nlink,a.uid,a.gid,a.rdev,a.size,a.atimeMs,a.mtimeMs,a.ctimeMs]};bt.prototype.constructor=bt;function
S_(b){var
a=GK(b);if(!a)return;return a[0]+bS}var
rc=S_(kK)||bY("unable to compute caml_root"),jo=[];if(kP())jo.push({path:rc,device:new
bt(rc)});else
jo.push({path:rc,device:new
bX(rc)});jo.push({path:RS,device:new
bX(RS)});function
bHu(b){var
g=bG_(b),b=g.join(bS),f=Tn(b),c;for(var
e=0;e<jo.length;e++){var
a=jo[e];if(f.search(a.path)==0&&(!c||c.path.length<a.path.length))c={path:a.path,device:a.device,rest:b.substring(a.path.length,b.length)}}if(!c&&kP()){var
d=S_(b);if(d&&d.match(/^[a-zA-Z]:\/$/)){var
a={path:d,device:new
bt(d)};jo.push(a);c={path:a.path,device:a.device,rest:b.substring(a.path.length,b.length)}}}if(c)return c;aK("no device found for "+f)}function
Tl(e,f){var
b=g9[e],d=a(f),c=ah(d);b.file.write(b.offset,d,0,c);b.offset+=c;return 0}function
bHo(a){var
a=GJ(a),b=ar;if(b.process&&b.process.stdout&&b.process.stdout.write)b.process.stderr.write(a);else{if(a.charCodeAt(a.length-1)==10)a=a.substr(0,a.length-1);var
c=b.console;c&&c.error&&c.error(a)}}function
bHp(a){var
a=GJ(a),b=ar;if(b.process&&b.process.stdout&&b.process.stdout.write)b.process.stdout.write(a);else{if(a.charCodeAt(a.length-1)==10)a=a.substr(0,a.length-1);var
c=b.console;c&&c.log&&c.log(a)}}function
rd(c,e,d,a){if(aX.fds===undefined)aX.fds=new
Array();a=a?a:{};var
b={};b.file=d;b.offset=a.append?d.length():0;b.flags=a;b.output=e;aX.fds[c]=b;if(!aX.fd_last_idx||c>aX.fd_last_idx)aX.fd_last_idx=c;return c}function
bHw(c,b,g){var
a={};while(b){switch(b[1]){case
0:a.rdonly=1;break;case
1:a.wronly=1;break;case
2:a.append=1;break;case
3:a.create=1;break;case
4:a.truncate=1;break;case
5:a.excl=1;break;case
6:a.binary=1;break;case
7:a.text=1;break;case
8:a.nonblock=1;break}b=b[2]}if(a.rdonly&&a.wronly)aK(hw(c)+Ri);if(a.text&&a.binary)aK(hw(c)+R$);var
d=bHu(c),e=d.device.open(d.rest,a),f=aX.fd_last_idx?aX.fd_last_idx:0;return rd(f+1,Tl,e,a)}rd(0,Tl,new
bs(aW(0)));rd(1,bHp,new
bs(aW(0)));rd(2,bHo,new
bs(aW(0)));function
bHa(a){var
c=aX.fds[a];if(c.flags.wronly)aK(PE+a+" is writeonly");var
d=null;if(a==0&&kP()){var
e=require("fs");d=function(){return ct(e.readFileSync(0,Pg))}}var
b={file:c.file,offset:c.offset,fd:a,opened:true,out:false,refill:d};g9[b.fd]=b;return b.fd}function
Tc(c){var
b=aX.fds[c];if(b.flags.rdonly)aK(PE+c+" is readonly");var
a={file:b.file,offset:b.offset,fd:c,opened:true,out:true,buffer:i};g9[a.fd]=a;return a.fd}function
bHb(){var
b=0;for(var
a=0;a<g9.length;a++)if(g9[a]&&g9[a].opened&&g9[a].out)b=[0,g9[a].fd,b];return b}function
bE(a){return a}function
bHc(g,d,h,f){var
b=g9[g];if(!b.opened)aK("Cannot output to a closed channel");var
a;if(h==0&&b9(d)==f)a=d;else{a=aW(f);hS(d,h,a,0,f)}var
i=bE(a),c=hw(i),e=c.lastIndexOf(Q8);if(e<0)b.buffer+=c;else{b.buffer+=c.substr(0,e+1);it(g);b.buffer+=c.substr(e+1)}return 0}function
GC(b,a,d,c){return bHc(b,g7(a),d,c)}function
Td(c,b){var
d=a(String.fromCharCode(b));GC(c,d,0,1);return 0}function
kO(a,b){return+(q5(a,b,false)!=0)}function
GD(d,c){var
b=new
Array(c+1);b[0]=d;for(var
a=1;a<=c;a++)b[a]=0;return b}function
bHe(a,b){a[0]=kc;a[1]=b;return 0}function
iv(a){if(a
instanceof
Array&&a[0]==a[0]>>>0)return a[0];else
if(q$(a))return iX;else
if(GB(a))return iX;else
if(a
instanceof
Function||typeof
a=="function")return Fj;else
if(a&&a.caml_custom)return Co;else
return kD}function
cN(b,c,a){if(a&&ar.toplevelReloc)b=ar.toplevelReloc(a);aX[b+1]=c;if(a)aX[a]=c}function
GG(a,b){Tf[hw(a)]=b;return 0}function
bHi(a){a[2]=Tg++;return a}function
bGJ(a,b){if(a===b)return 1;a.t&6&&jj(a);b.t&6&&jj(b);return a.c==b.c?1:0}function
ay(a,b){return bGJ(a,b)}function
bHk(){bl(ET)}function
aU(b,a){if(a>>>0>=ah(b))bHk();return K(b,a)}function
p(a,b){return 1-ay(a,b)}function
bHl(){return 0x7FFFFFFF/4|0}var
bHt=ar.process&&ar.process.platform&&ar.process.platform==Q3?QO:"Unix";function
bHm(){return[0,a(bHt),32,0]}function
bHg(){Ti(aX.Not_found)}function
Tm(c){var
a=ar,b=am(c);if(a.process&&a.process.env&&a.process.env[b]!=undefined)return ct(a.process.env[b]);if(ar.jsoo_static_env&&ar.jsoo_static_env[b])return ct(ar.jsoo_static_env[b]);bHg()}function
GI(a){var
b=1;while(a&&a.joo_tramp){a=a.joo_tramp.apply(null,a.joo_args);b++}return a}function
bu(b,a){return{joo_tramp:b,joo_args:a}}function
h(c,a){if(typeof
a==="function"){c.fun=a;return 0}if(a.fun){c.fun=a.fun;return 0}var
b=a.length;while(b--)c[b]=a[b];return 0}function
Tk(a){return a}function
aS(a){if(a
instanceof
Array)return a;if(ar.RangeError&&a
instanceof
ar.RangeError&&a.message&&a.message.match(/maximum call stack/i))return Tk(aX.Stack_overflow);if(ar.InternalError&&a
instanceof
ar.InternalError&&a.message&&a.message.match(/too much recursion/i))return Tk(aX.Stack_overflow);if(a
instanceof
ar.Error&&iu(DW))return[0,iu(DW),a];return[0,aX.Failure,ct(String(a))]}function
bG5(a){switch(a[2]){case-8:case-11:case-12:return 1;default:return 0}}function
bGQ(b){var
a=i;if(b[0]==0){a+=b[1][1];if(b.length==3&&b[2][0]==0&&bG5(b[1]))var
e=b[2],f=1;else
var
f=2,e=b;a+=Py;for(var
d=f;d<e.length;d++){if(d>f)a+=RH;var
c=e[d];if(typeof
c=="number")a+=c.toString();else
if(c
instanceof
g5)a+=kf+c.toString()+kf;else
if(typeof
c=="string")a+=kf+c.toString()+kf;else
a+=jh}a+=x}else
if(b[0]==aQ)a+=b[1];return a}function
S8(a){if(a
instanceof
Array&&(a[0]==0||a[0]==aQ)){var
c=iu(Qy);if(c)c(a,false);else{var
d=bGQ(a),b=iu(Pf);if(b)b(0);ar.console.error(Ac+d+Q8)}}else
throw a}function
bHj(){var
a=ar;if(a.process&&a.process.on)a.process.on("uncaughtException",function(b,c){S8(b);a.process.exit(2)});else
if(a.addEventListener)a.addEventListener("error",function(a){if(a.error)S8(a.error)})}bHj();function
b(a,b){return a.length==1?a(b):ht(a,[b])}function
d(a,b,c){return a.length==2?a(b,c):ht(a,[b,c])}function
A(a,b,c,d){return a.length==3?a(b,c,d):ht(a,[b,c,d])}function
j(a,b,c,d,e){return a.length==4?a(b,c,d,e):ht(a,[b,c,d,e])}function
b4(a,b,c,d,e,f){return a.length==5?a(b,c,d,e,f):ht(a,[b,c,d,e,f])}function
bGB(a,b,c,d,e,f,g,h){return a.length==7?a(b,c,d,e,f,g,h):ht(a,[b,c,d,e,f,g,h])}var
rg=[aQ,a(Qp),-1],GN=[aQ,a(Su),-2],b_=[aQ,a(Cm),-3],rf=[aQ,a(PR),-4],a4=[aQ,a(QM),-7],GL=[aQ,a(Rf),-8],GM=[aQ,a(PU),-9],ap=[aQ,a(SM),-11],jp=[aQ,a(Qu),-12],bGA=[4,0,0,0,[12,45,[4,0,0,0,0]]],rv=[0,[11,a('File "'),[2,0,[11,a('", line '),[4,0,0,0,[11,a(PO),[4,0,0,0,[12,45,[4,0,0,0,[11,a(": "),[2,0,0]]]]]]]]]],a('File "%s", line %d, characters %d-%d: %s')],Nm=[0,0,[0,0,0],[0,0,0]],uK=a("\x01\x02"),uL=a("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01"),iN=[0,0,0,0,1,0],OC=[0,a(dD),a(gy),a(fb),a(ej),a(fk),a(fR),a(eH),a(g1),a(eX),a(dC),a(cY),a(e8),a(cg),a(eR),a(fI),a(ft),a(dJ),a(eZ),a(eS),a(ec),a(gn),a(dh),a(fZ),a(d8),a(gX),a(fa),a(f3),a(fX),a(ee),a(eO),a(fD),a(dK),a(gu),a(dV),a(dv),a(gS),a(gm),a(eo),a(cq),a(cj),a(fL),a(dm),a(di),a(fP),a(em),a(dw),a(gt),a(gK),a(ge),a(fs),a(b5),a(ff),a(dq),a(ei),a(gE),a(fl),a(eI),a(dQ),a(fU),a(ea),a(eK),a(gZ),a(eB),a(dn),a(f2),a(ga),a(fi),a(en),a(bD),a(fC),a(dx),a(dT),a(fS),a(gj),a(eJ),a(f4),a(eb),a(gf),a(fG),a(e5),a(g4),a(fq),a(eA),a(d0),a(gg),a(gL),a(gH),a(f5),a(gW),a(dX),a(gP),a(eh),a(gp),a(fF),a(ed),a(f1),a(fe),a(dH),a(ck),a(df),a(d5),a(dO),a(cJ),a(f0),a(fh),a(dg),a(bJ),a(e1),a(fu),a(dB),a(dk),a(gI),a(dl),a(bT),a(eW),a(gv),a(dz),a(e7),a(eP),a(d7),a(fd),a(eq),a(dM),a(g2),a(eY),a(fB),a(d4),a(ey),a(fn),a(gB),a(dG),a(gz),a(dF),a(dY),a(d$),a(er),a(e$),a(e2),a(ep),a(eN),a(d2),a(gG),a(eg),a(eL),a(fN),a(dA),a(e_),a(fA),a(eG),a(d3),a(dZ),a(dd),a(g0),a(fY),a(gM),a(ev),a(gF),a(fV),a(d9),a(gT),a(fc),a(dp),a(gQ),a(fQ),a(dW),a(eQ),a(fM),a(eC),a(dr),a(f$),a(f8),a(eu),a(gd),a(dU),a(ew),a(fj),a(cL),a(gR),a(dL),a(es),a(eU),a(gl),a(d6),a(dc),a(fO),a(gU),a(fm),a(gY),a(el),a(ek),a(f_),a(eF),a(ef),a(et),a(gb),a(bW),a(e0),a(gk),a(dI),a(bV),a(gN),a(dP),a(d1),a(eT),a(fy),a(gJ),a(dj),a(f7),a(cn),a(gw),a(go),a(dN),a(gD),a(du),a(dR),a(gs),a(cs),a(fv),a(fg),a(eD),a(fH),a(fw),a(fz),a(gc),a(gq),a(gV),a(gh),a(fJ),a(dS),a(dE),a(eE),a(e6),a(fW),a(ex),a(d_),a(gr),a(dt),a(fT),a(de),a(gO),a(f6),a(bk),a(ez),a(gC),a(fx),a(br)],OD=[0,a("first_leading"),a("last_trailing")];cN(11,jp,Qu);cN(10,ap,SM);cN(9,[aQ,a(Qe),PB],Qe);cN(8,GM,PU);cN(7,GL,Rf);cN(6,a4,QM);cN(5,[aQ,a(Rq),-6],Rq);cN(4,[aQ,a(RM),-5],RM);cN(3,rf,PR);cN(2,b_,Cm);cN(1,GN,Su);cN(0,rg,Qp);var
Tx=a("output_substring"),Tu=a("%.12g"),Tt=a(fo),Tr=a(cS),Ts=a(cV),Tz=a("CamlinternalLazy.Undefined"),TD=a(Pr),TE=a("\\'"),TF=a("\\b"),TG=a("\\t"),TH=a("\\n"),TI=a("\\r"),TL=a("List.iter2"),TK=a("tl"),TJ=a("hd"),TP=a("String.blit / Bytes.blit_string"),TO=a("Bytes.blit"),TN=a("String.sub / Bytes.sub"),TR=a("Array.blit"),TQ=a("Array.sub"),TW=a("Map.remove_min_elt"),TX=[0,0,0,0],TY=[0,a("map.ml"),400,10],TZ=[0,0,0],TS=a(nQ),TT=a(nQ),TU=a(nQ),TV=a(nQ),T0=a("Stdlib.Queue.Empty"),T6=a("Buffer.add_substring/add_subbytes"),T5=a("Buffer.add: cannot grow buffer"),T4=[0,a(RU),93,2],T3=[0,a(RU),94,2],T2=a("Buffer.sub"),Ud=a("%c"),Ue=a("%s"),Uf=a(RE),Ug=a(R1),Uh=a(PP),Ui=a(Sq),Uj=a("%f"),Uk=a(at),Ul=a("%{"),Um=a("%}"),Un=a("%("),Uo=a("%)"),Up=a(t),Uq=a("%t"),Ur=a("%?"),Us=a("%r"),Ut=a("%_r"),Uu=[0,a(bj),850,23],UF=[0,a(bj),814,21],Ux=[0,a(bj),815,21],UG=[0,a(bj),818,21],Uy=[0,a(bj),819,21],UH=[0,a(bj),822,19],Uz=[0,a(bj),823,19],UI=[0,a(bj),826,22],UA=[0,a(bj),827,22],UJ=[0,a(bj),831,30],UB=[0,a(bj),832,30],UD=[0,a(bj),836,26],Uv=[0,a(bj),837,26],UE=[0,a(bj),846,28],Uw=[0,a(bj),847,28],UC=[0,a(bj),851,23],VM=a(Pn),VK=[0,a(bj),1558,4],VL=a("Printf: bad conversion %["),VN=[0,a(bj),1626,39],VO=[0,a(bj),1649,31],VP=[0,a(bj),1650,31],VQ=a("Printf: bad conversion %_"),VR=a(Rk),VS=a(Pq),VT=a(Rk),VU=a(Pq),VY=[0,[11,a("invalid box description "),[3,0,0]],a("invalid box description %S")],VW=a(i),VX=[0,0,4],VZ=a(i),V0=a(PC),V1=a("h"),V2=a("hov"),V3=a("hv"),V4=a(Pc),VI=a(Cu),VG=a("neg_infinity"),VH=a(SO),VF=a(fo),VA=[0,b8],Vo=a("%+nd"),Vp=a("% nd"),Vr=a("%+ni"),Vs=a("% ni"),Vt=a("%nx"),Vu=a("%#nx"),Vv=a("%nX"),Vw=a("%#nX"),Vx=a("%no"),Vy=a("%#no"),Vn=a("%nd"),Vq=a(PP),Vz=a("%nu"),Vb=a("%+ld"),Vc=a("% ld"),Ve=a("%+li"),Vf=a("% li"),Vg=a("%lx"),Vh=a("%#lx"),Vi=a("%lX"),Vj=a("%#lX"),Vk=a("%lo"),Vl=a("%#lo"),Va=a("%ld"),Vd=a(R1),Vm=a("%lu"),U0=a("%+Ld"),U1=a("% Ld"),U3=a("%+Li"),U4=a("% Li"),U5=a("%Lx"),U6=a("%#Lx"),U7=a("%LX"),U8=a("%#LX"),U9=a("%Lo"),U_=a("%#Lo"),UZ=a("%Ld"),U2=a(Sq),U$=a("%Lu"),UN=a("%+d"),UO=a("% d"),UQ=a("%+i"),UR=a("% i"),US=a("%x"),UT=a("%#x"),UU=a("%X"),UV=a("%#X"),UW=a("%o"),UX=a("%#o"),UM=a(kr),UP=a(RE),UY=a(Pn),T7=a(m),T8=a("@}"),T9=a("@?"),T_=a("@\n"),T$=a("@."),Ua=a("@@"),Ub=a("@%"),Uc=a(Qo),UK=a("CamlinternalFormat.Type_mismatch"),V8=a(i),V9=[0,[11,a(RH),[2,0,[2,0,0]]],a(", %s%s")],Ww=[0,[11,a(Ac),[2,0,[12,10,0]]],a(QR)],Wx=[0,[11,a("Fatal error in uncaught exception handler: exception "),[2,0,[12,10,0]]],a("Fatal error in uncaught exception handler: exception %s\n")],Wv=a("Fatal error: out of memory in uncaught exception handler"),Wt=[0,[11,a(Ac),[2,0,[12,10,0]]],a(QR)],Wp=[0,[2,0,[12,10,0]],a("%s\n")],Wh=a("Raised at"),Wi=a("Re-raised at"),Wj=a("Raised by primitive operation at"),Wk=a("Called from"),Wl=a(" (inlined)"),Wn=a(i),Wm=[0,[2,0,[12,32,[2,0,[11,a(' in file "'),[2,0,[12,34,[2,0,[11,a(", line "),[4,0,0,0,[11,a(PO),bGA]]]]]]]]]],a('%s %s in file "%s"%s, line %d, characters %d-%d')],Wo=[0,[2,0,[11,a(" unknown location"),0]],a("%s unknown location")],Wc=a("Out of memory"),Wd=a("Stack overflow"),We=a("Pattern matching failed"),Wf=a("Assertion failed"),Wg=a("Undefined recursive module"),V_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],a("(%s%s)")],V$=a(i),Wa=a(i),Wb=[0,[12,40,[2,0,[12,41,0]]],a("(%s)")],V7=[0,[4,0,0,0,0],a(kr)],V5=[0,[3,0,0],a(a1)],V6=a(jh),Wq=[0,a(i),a("(Cannot print locations:\n bytecode executable program file not found)"),a("(Cannot print locations:\n bytecode executable program file appears to be corrupt)"),a("(Cannot print locations:\n bytecode executable program file has wrong magic number)"),a("(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)")],WW=[3,0,3],WX=a(fo),WR=a(i2),WS=a("<\/"),WT=a(i),WN=a(i2),WO=a(qu),WP=a(i),WL=a(AW),WH=a(i),WI=a(i),WJ=a(i),WK=a(i),WG=[0,a(i)],WC=a(i),WD=a(i),WE=a(i),WF=a(i),WA=[0,a(i),0,a(i)],Wz=a(i),Wy=a("Stdlib.Format.String_tag"),W$=[0,a("camlinternalOO.ml"),281,50],W9=a(i),Xb=[0,a(R7),72,5],Xc=[0,a(R7),81,2],Xd=a("CamlinternalMod.update_mod: not a module"),Xa=a("CamlinternalMod.init_mod: not a module"),bGz=a("TMPDIR"),bGy=a("TEMP"),Xe=a(QO),Xf=a("Win32"),Xg=[0,a("src/wtf8.ml"),65,9],Xh=a("Jsoo_runtime.Error.Exn"),Xi=a(DW),a6G=[0,[15,0],a(t)],a6B=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a6u=a(L),a6n=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a6j=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a6k=a("Flow_ast.Program.statements"),a6l=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a6m=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],a6o=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],a6p=[0,[17,0,0],a(m)],a6q=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a6r=a(J),a6s=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a6t=a(z),a6v=a(x),a6F=a(y),a6w=[0,[17,0,0],a(m)],a6x=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a6y=a(QH),a6z=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a6A=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],a6C=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],a6D=[0,[17,0,0],a(m)],a6E=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a6i=[0,[15,0],a(t)],a6f=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a6g=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a6h=[0,[17,0,[12,41,0]],a(r)],a6d=[0,[15,0],a(t)],a58=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Function.BodyBlock"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Function.BodyBlock@ ")],a59=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a5_=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a5$=[0,[17,0,[12,41,0]],a(r)],a6a=[0,[17,0,[12,41,0]],a(r)],a6b=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Function.BodyExpression"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Function.BodyExpression@ ")],a6c=[0,[17,0,[12,41,0]],a(r)],a57=[0,[15,0],a(t)],a5V=a(L),a5d=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a5e=a("Flow_ast.Function.id"),a5f=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a5g=a(z),a5h=a(x),a56=a(y),a5i=[0,[17,0,0],a(m)],a5j=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a5k=a(c1),a5l=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a5m=[0,[17,0,0],a(m)],a5n=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a5o=a(aF),a5p=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a5q=[0,[17,0,0],a(m)],a5r=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a5s=a(hN),a5t=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a5u=[0,[9,0,0],a(at)],a5v=[0,[17,0,0],a(m)],a5w=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a5x=a(ck),a5y=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a5z=[0,[9,0,0],a(at)],a5A=[0,[17,0,0],a(m)],a5B=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a5C=a(bW),a5D=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a5E=a(z),a5F=a(x),a55=a(y),a5G=[0,[17,0,0],a(m)],a5H=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a5I=a(bV),a5J=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a5K=[0,[17,0,0],a(m)],a5L=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a5M=a(i1),a5N=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a5O=a(z),a5P=a(x),a54=a(y),a5Q=[0,[17,0,0],a(m)],a5R=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a5S=a(J),a5T=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a5U=a(z),a5W=a(x),a53=a(y),a5X=[0,[17,0,0],a(m)],a5Y=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a5Z=a("sig_loc"),a50=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a51=[0,[17,0,0],a(m)],a52=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a5c=[0,[15,0],a(t)],a46=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a45=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],a47=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],a4S=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a4I=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a4J=a("Flow_ast.Function.Params.this_"),a4K=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a4L=a(z),a4M=a(x),a5b=a(y),a4N=[0,[17,0,0],a(m)],a4O=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a4P=a(c1),a4Q=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a4R=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],a4T=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],a4U=[0,[17,0,0],a(m)],a4V=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a4W=a(xG),a4X=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a4Y=a(z),a4Z=a(x),a5a=a(y),a40=[0,[17,0,0],a(m)],a41=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a42=a(J),a43=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a44=a(z),a48=a(x),a4$=a(y),a49=[0,[17,0,0],a(m)],a4_=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a4H=[0,[15,0],a(t)],a4E=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a4F=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a4G=[0,[17,0,[12,41,0]],a(r)],a4D=[0,[15,0],a(t)],a4y=a(L),a4q=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a4r=a("Flow_ast.Function.ThisParam.annot"),a4s=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a4t=[0,[17,0,0],a(m)],a4u=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a4v=a(J),a4w=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a4x=a(z),a4z=a(x),a4C=a(y),a4A=[0,[17,0,0],a(m)],a4B=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a4p=[0,[15,0],a(t)],a4m=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a4n=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a4o=[0,[17,0,[12,41,0]],a(r)],a4l=[0,[15,0],a(t)],a3$=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a4a=a("Flow_ast.Function.Param.argument"),a4b=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a4c=[0,[17,0,0],a(m)],a4d=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a4e=a(cI),a4f=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a4g=a(z),a4h=a(x),a4k=a(y),a4i=[0,[17,0,0],a(m)],a4j=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a3_=[0,[15,0],a(t)],a37=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a38=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a39=[0,[17,0,[12,41,0]],a(r)],a36=[0,[15,0],a(t)],a31=a(L),a3T=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a3U=a("Flow_ast.Function.RestParam.argument"),a3V=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a3W=[0,[17,0,0],a(m)],a3X=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a3Y=a(J),a3Z=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a30=a(z),a32=a(x),a35=a(y),a33=[0,[17,0,0],a(m)],a34=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a3S=[0,[15,0],a(t)],a3P=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a3Q=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a3R=[0,[17,0,[12,41,0]],a(r)],a3N=[0,[15,0],a(t)],a3E=a(L),a3x=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a23=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a24=a("Flow_ast.Class.id"),a25=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a26=a(z),a27=a(x),a3M=a(y),a28=[0,[17,0,0],a(m)],a29=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a2_=a(aF),a2$=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a3a=[0,[17,0,0],a(m)],a3b=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a3c=a(i1),a3d=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a3e=a(z),a3f=a(x),a3L=a(y),a3g=[0,[17,0,0],a(m)],a3h=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a3i=a(co),a3j=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a3k=a(z),a3l=a(x),a3K=a(y),a3m=[0,[17,0,0],a(m)],a3n=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a3o=a(hQ),a3p=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a3q=a(z),a3r=a(x),a3J=a(y),a3s=[0,[17,0,0],a(m)],a3t=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a3u=a("class_decorators"),a3v=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a3w=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],a3y=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],a3z=[0,[17,0,0],a(m)],a3A=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a3B=a(J),a3C=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a3D=a(z),a3F=a(x),a3I=a(y),a3G=[0,[17,0,0],a(m)],a3H=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a22=[0,[15,0],a(t)],a2X=a(L),a2P=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a2Q=a("Flow_ast.Class.Decorator.expression"),a2R=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a2S=[0,[17,0,0],a(m)],a2T=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a2U=a(J),a2V=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a2W=a(z),a2Y=a(x),a21=a(y),a2Z=[0,[17,0,0],a(m)],a20=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a2O=[0,[15,0],a(t)],a2L=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a2M=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a2N=[0,[17,0,[12,41,0]],a(r)],a2J=[0,[15,0],a(t)],a2D=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Class.Body.Method"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Class.Body.Method@ ")],a2E=[0,[17,0,[12,41,0]],a(r)],a2F=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Class.Body.Property"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Class.Body.Property@ ")],a2G=[0,[17,0,[12,41,0]],a(r)],a2H=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Class.Body.PrivateField"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Class.Body.PrivateField@ ")],a2I=[0,[17,0,[12,41,0]],a(r)],a2C=[0,[15,0],a(t)],a2x=a(L),a2q=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a2m=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a2n=a("Flow_ast.Class.Body.body"),a2o=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a2p=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],a2r=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],a2s=[0,[17,0,0],a(m)],a2t=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a2u=a(J),a2v=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a2w=a(z),a2y=a(x),a2B=a(y),a2z=[0,[17,0,0],a(m)],a2A=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a2l=[0,[15,0],a(t)],a2i=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a2j=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a2k=[0,[17,0,[12,41,0]],a(r)],a2h=[0,[15,0],a(t)],a2c=a(L),a17=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a13=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a14=a("Flow_ast.Class.Implements.interfaces"),a15=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a16=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],a18=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],a19=[0,[17,0,0],a(m)],a1_=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a1$=a(J),a2a=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a2b=a(z),a2d=a(x),a2g=a(y),a2e=[0,[17,0,0],a(m)],a2f=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a12=[0,[15,0],a(t)],a1Z=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a10=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a11=[0,[17,0,[12,41,0]],a(r)],a1Y=[0,[15,0],a(t)],a1M=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a1N=a("Flow_ast.Class.Implements.Interface.id"),a1O=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a1P=[0,[17,0,0],a(m)],a1Q=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a1R=a(kx),a1S=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a1T=a(z),a1U=a(x),a1X=a(y),a1V=[0,[17,0,0],a(m)],a1W=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a1L=[0,[15,0],a(t)],a1I=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a1J=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a1K=[0,[17,0,[12,41,0]],a(r)],a1H=[0,[15,0],a(t)],a1B=a(L),a1n=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a1o=a("Flow_ast.Class.Extends.expr"),a1p=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a1q=[0,[17,0,0],a(m)],a1r=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a1s=a(kx),a1t=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a1u=a(z),a1v=a(x),a1G=a(y),a1w=[0,[17,0,0],a(m)],a1x=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a1y=a(J),a1z=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a1A=a(z),a1C=a(x),a1F=a(y),a1D=[0,[17,0,0],a(m)],a1E=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a1m=[0,[15,0],a(t)],a1j=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a1k=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a1l=[0,[17,0,[12,41,0]],a(r)],a1i=[0,[15,0],a(t)],a1c=a(L),a0N=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a0O=a("Flow_ast.Class.PrivateField.key"),a0P=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a0Q=[0,[17,0,0],a(m)],a0R=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a0S=a(ax),a0T=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a0U=[0,[17,0,0],a(m)],a0V=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a0W=a(hq),a0X=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a0Y=[0,[17,0,0],a(m)],a0Z=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a00=a(ba),a01=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a02=[0,[9,0,0],a(at)],a03=[0,[17,0,0],a(m)],a04=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a05=a(bk),a06=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a07=a(z),a08=a(x),a1h=a(y),a09=[0,[17,0,0],a(m)],a0_=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a0$=a(J),a1a=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a1b=a(z),a1d=a(x),a1g=a(y),a1e=[0,[17,0,0],a(m)],a1f=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a0M=[0,[15,0],a(t)],a0J=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],a0K=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],a0L=[0,[17,0,[12,41,0]],a(r)],a0I=[0,[15,0],a(t)],a0E=a("Flow_ast.Class.Property.Uninitialized"),a0F=a("Flow_ast.Class.Property.Declared"),a0G=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Class.Property.Initialized"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Class.Property.Initialized@ ")],a0H=[0,[17,0,[12,41,0]],a(r)],a0D=[0,[15,0],a(t)],a0x=a(L),aZ8=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aZ9=a("Flow_ast.Class.Property.key"),aZ_=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aZ$=[0,[17,0,0],a(m)],a0a=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a0b=a(ax),a0c=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a0d=[0,[17,0,0],a(m)],a0e=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a0f=a(hq),a0g=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a0h=[0,[17,0,0],a(m)],a0i=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a0j=a(ba),a0k=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a0l=[0,[9,0,0],a(at)],a0m=[0,[17,0,0],a(m)],a0n=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a0o=a(bk),a0p=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a0q=a(z),a0r=a(x),a0C=a(y),a0s=[0,[17,0,0],a(m)],a0t=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a0u=a(J),a0v=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a0w=a(z),a0y=a(x),a0B=a(y),a0z=[0,[17,0,0],a(m)],a0A=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aZ7=[0,[15,0],a(t)],aZ4=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aZ5=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aZ6=[0,[17,0,[12,41,0]],a(r)],aZ3=[0,[15,0],a(t)],aZY=a(L),aZR=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aZt=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aZu=a("Flow_ast.Class.Method.kind"),aZv=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aZw=[0,[17,0,0],a(m)],aZx=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aZy=a(cy),aZz=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aZA=[0,[17,0,0],a(m)],aZB=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aZC=a(ax),aZD=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aZE=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aZF=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aZG=[0,[17,0,[12,41,0]],a(r)],aZH=[0,[17,0,0],a(m)],aZI=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aZJ=a(ba),aZK=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aZL=[0,[9,0,0],a(at)],aZM=[0,[17,0,0],a(m)],aZN=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aZO=a(ym),aZP=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aZQ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aZS=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aZT=[0,[17,0,0],a(m)],aZU=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aZV=a(J),aZW=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aZX=a(z),aZZ=a(x),aZ2=a(y),aZ0=[0,[17,0,0],a(m)],aZ1=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aZs=[0,[15,0],a(t)],aZo=a("Flow_ast.Class.Method.Constructor"),aZp=a("Flow_ast.Class.Method.Method"),aZq=a("Flow_ast.Class.Method.Get"),aZr=a("Flow_ast.Class.Method.Set"),aZn=[0,[15,0],a(t)],aZk=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aZl=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aZm=[0,[17,0,[12,41,0]],a(r)],aZi=[0,[15,0],a(t)],aY5=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aY6=a("Flow_ast.Comment.kind"),aY7=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aY8=[0,[17,0,0],a(m)],aY9=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aY_=a("text"),aY$=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aZa=[0,[3,0,0],a(a1)],aZb=[0,[17,0,0],a(m)],aZc=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aZd=a("on_newline"),aZe=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aZf=[0,[9,0,0],a(at)],aZg=[0,[17,0,0],a(m)],aZh=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aY4=[0,[15,0],a(t)],aY2=a("Flow_ast.Comment.Line"),aY3=a("Flow_ast.Comment.Block"),aY1=[0,[15,0],a(t)],aYY=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aYZ=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aY0=[0,[17,0,[12,41,0]],a(r)],aYW=[0,[15,0],a(t)],aYO=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Object"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Object@ ")],aYP=[0,[17,0,[12,41,0]],a(r)],aYQ=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Array"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Array@ ")],aYR=[0,[17,0,[12,41,0]],a(r)],aYS=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Identifier"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Identifier@ ")],aYT=[0,[17,0,[12,41,0]],a(r)],aYU=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Expression"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Expression@ ")],aYV=[0,[17,0,[12,41,0]],a(r)],aYN=[0,[15,0],a(t)],aYK=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aYL=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aYM=[0,[17,0,[12,41,0]],a(r)],aYJ=[0,[15,0],a(t)],aYv=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aYw=a("Flow_ast.Pattern.Identifier.name"),aYx=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aYy=[0,[17,0,0],a(m)],aYz=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aYA=a(hq),aYB=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aYC=[0,[17,0,0],a(m)],aYD=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aYE=a(bK),aYF=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aYG=[0,[9,0,0],a(at)],aYH=[0,[17,0,0],a(m)],aYI=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aYu=[0,[15,0],a(t)],aYo=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aYn=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aYp=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aYc=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aX_=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aX$=a("Flow_ast.Pattern.Array.elements"),aYa=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aYb=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aYd=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aYe=[0,[17,0,0],a(m)],aYf=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aYg=a(hq),aYh=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aYi=[0,[17,0,0],a(m)],aYj=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aYk=a(J),aYl=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aYm=a(z),aYq=a(x),aYt=a(y),aYr=[0,[17,0,0],a(m)],aYs=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aX9=[0,[15,0],a(t)],aX3=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Array.Element"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Array.Element@ ")],aX4=[0,[17,0,[12,41,0]],a(r)],aX5=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Array.RestElement"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Array.RestElement@ ")],aX6=[0,[17,0,[12,41,0]],a(r)],aX7=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Array.Hole"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Array.Hole@ ")],aX8=[0,[17,0,[12,41,0]],a(r)],aX2=[0,[15,0],a(t)],aXQ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aXR=a("Flow_ast.Pattern.Array.Element.argument"),aXS=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aXT=[0,[17,0,0],a(m)],aXU=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aXV=a(cI),aXW=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aXX=a(z),aXY=a(x),aX1=a(y),aXZ=[0,[17,0,0],a(m)],aX0=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aXP=[0,[15,0],a(t)],aXM=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aXN=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aXO=[0,[17,0,[12,41,0]],a(r)],aXL=[0,[15,0],a(t)],aXF=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aXE=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aXG=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aXt=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aXp=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aXq=a("Flow_ast.Pattern.Object.properties"),aXr=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aXs=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aXu=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aXv=[0,[17,0,0],a(m)],aXw=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aXx=a(hq),aXy=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aXz=[0,[17,0,0],a(m)],aXA=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aXB=a(J),aXC=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aXD=a(z),aXH=a(x),aXK=a(y),aXI=[0,[17,0,0],a(m)],aXJ=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aXo=[0,[15,0],a(t)],aXk=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Object.Property"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Object.Property@ ")],aXl=[0,[17,0,[12,41,0]],a(r)],aXm=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Object.RestElement"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Object.RestElement@ ")],aXn=[0,[17,0,[12,41,0]],a(r)],aXj=[0,[15,0],a(t)],aW0=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aW1=a("Flow_ast.Pattern.Object.Property.key"),aW2=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aW3=[0,[17,0,0],a(m)],aW4=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aW5=a(cL),aW6=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aW7=[0,[17,0,0],a(m)],aW8=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aW9=a(cI),aW_=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aW$=a(z),aXa=a(x),aXi=a(y),aXb=[0,[17,0,0],a(m)],aXc=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aXd=a(nM),aXe=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aXf=[0,[9,0,0],a(at)],aXg=[0,[17,0,0],a(m)],aXh=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aWZ=[0,[15,0],a(t)],aWW=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aWX=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aWY=[0,[17,0,[12,41,0]],a(r)],aWV=[0,[15,0],a(t)],aWM=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Object.Property.Literal"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Object.Property.Literal@ ")],aWN=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aWO=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aWP=[0,[17,0,[12,41,0]],a(r)],aWQ=[0,[17,0,[12,41,0]],a(r)],aWR=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Object.Property.Identifier"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Object.Property.Identifier@ ")],aWS=[0,[17,0,[12,41,0]],a(r)],aWT=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Pattern.Object.Property.Computed"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Pattern.Object.Property.Computed@ ")],aWU=[0,[17,0,[12,41,0]],a(r)],aWL=[0,[15,0],a(t)],aWG=a(L),aWy=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aWz=a("Flow_ast.Pattern.RestElement.argument"),aWA=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aWB=[0,[17,0,0],a(m)],aWC=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aWD=a(J),aWE=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aWF=a(z),aWH=a(x),aWK=a(y),aWI=[0,[17,0,0],a(m)],aWJ=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aWx=[0,[15,0],a(t)],aWu=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aWv=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aWw=[0,[17,0,[12,41,0]],a(r)],aWs=[0,[15,0],a(t)],aWn=a(L),aWf=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aV3=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aV4=a("Flow_ast.JSX.frag_opening_element"),aV5=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aV6=[0,[17,0,0],a(m)],aV7=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aV8=a("frag_closing_element"),aV9=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aV_=[0,[17,0,0],a(m)],aV$=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aWa=a("frag_children"),aWb=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aWc=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aWd=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aWe=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aWg=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aWh=[0,[17,0,[12,41,0]],a(r)],aWi=[0,[17,0,0],a(m)],aWj=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aWk=a("frag_comments"),aWl=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aWm=a(z),aWo=a(x),aWr=a(y),aWp=[0,[17,0,0],a(m)],aWq=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aV2=[0,[15,0],a(t)],aVW=a(L),aVO=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aVy=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aVz=a("Flow_ast.JSX.opening_element"),aVA=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aVB=[0,[17,0,0],a(m)],aVC=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aVD=a("closing_element"),aVE=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aVF=a(z),aVG=a(x),aV1=a(y),aVH=[0,[17,0,0],a(m)],aVI=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aVJ=a(AH),aVK=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aVL=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aVM=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aVN=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aVP=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aVQ=[0,[17,0,[12,41,0]],a(r)],aVR=[0,[17,0,0],a(m)],aVS=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aVT=a(J),aVU=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aVV=a(z),aVX=a(x),aV0=a(y),aVY=[0,[17,0,0],a(m)],aVZ=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aVx=[0,[15,0],a(t)],aVn=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.Element"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.Element@ ")],aVo=[0,[17,0,[12,41,0]],a(r)],aVp=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.Fragment"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.Fragment@ ")],aVq=[0,[17,0,[12,41,0]],a(r)],aVr=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.ExpressionContainer"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.ExpressionContainer@ ")],aVs=[0,[17,0,[12,41,0]],a(r)],aVt=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.SpreadChild"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.SpreadChild@ ")],aVu=[0,[17,0,[12,41,0]],a(r)],aVv=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.Text"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.Text@ ")],aVw=[0,[17,0,[12,41,0]],a(r)],aVm=[0,[15,0],a(t)],aVj=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aVk=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aVl=[0,[17,0,[12,41,0]],a(r)],aVi=[0,[15,0],a(t)],aVd=a(L),aU7=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aU8=a("Flow_ast.JSX.SpreadChild.expression"),aU9=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aU_=[0,[17,0,0],a(m)],aU$=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aVa=a(J),aVb=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aVc=a(z),aVe=a(x),aVh=a(y),aVf=[0,[17,0,0],a(m)],aVg=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aU6=[0,[15,0],a(t)],aU1=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aU2=a("Flow_ast.JSX.Closing.name"),aU3=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aU4=[0,[17,0,0],a(m)],aU5=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aU0=[0,[15,0],a(t)],aUX=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aUY=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aUZ=[0,[17,0,[12,41,0]],a(r)],aUW=[0,[15,0],a(t)],aUS=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aUF=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aUG=a("Flow_ast.JSX.Opening.name"),aUH=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aUI=[0,[17,0,0],a(m)],aUJ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aUK=a("self_closing"),aUL=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aUM=[0,[9,0,0],a(at)],aUN=[0,[17,0,0],a(m)],aUO=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aUP=a(Pp),aUQ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aUR=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aUT=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aUU=[0,[17,0,0],a(m)],aUV=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aUE=[0,[15,0],a(t)],aUA=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.Opening.Attribute"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.Opening.Attribute@ ")],aUB=[0,[17,0,[12,41,0]],a(r)],aUC=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.Opening.SpreadAttribute"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.Opening.SpreadAttribute@ ")],aUD=[0,[17,0,[12,41,0]],a(r)],aUz=[0,[15,0],a(t)],aUw=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aUx=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aUy=[0,[17,0,[12,41,0]],a(r)],aUv=[0,[15,0],a(t)],aUp=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.Identifier"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.Identifier@ ")],aUq=[0,[17,0,[12,41,0]],a(r)],aUr=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.NamespacedName"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.NamespacedName@ ")],aUs=[0,[17,0,[12,41,0]],a(r)],aUt=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.MemberExpression"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.MemberExpression@ ")],aUu=[0,[17,0,[12,41,0]],a(r)],aUo=[0,[15,0],a(t)],aUf=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aUg=a("Flow_ast.JSX.MemberExpression._object"),aUh=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aUi=[0,[17,0,0],a(m)],aUj=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aUk=a(i5),aUl=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aUm=[0,[17,0,0],a(m)],aUn=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aUe=[0,[15,0],a(t)],aUa=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.MemberExpression.Identifier"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.MemberExpression.Identifier@ ")],aUb=[0,[17,0,[12,41,0]],a(r)],aUc=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.MemberExpression.MemberExpression"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.MemberExpression.MemberExpression@ ")],aUd=[0,[17,0,[12,41,0]],a(r)],aT$=[0,[15,0],a(t)],aT8=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aT9=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aT_=[0,[17,0,[12,41,0]],a(r)],aT7=[0,[15,0],a(t)],aT2=a(L),aTU=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aTV=a("Flow_ast.JSX.SpreadAttribute.argument"),aTW=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aTX=[0,[17,0,0],a(m)],aTY=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aTZ=a(J),aT0=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aT1=a(z),aT3=a(x),aT6=a(y),aT4=[0,[17,0,0],a(m)],aT5=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aTT=[0,[15,0],a(t)],aTQ=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aTR=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aTS=[0,[17,0,[12,41,0]],a(r)],aTP=[0,[15,0],a(t)],aTD=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aTE=a("Flow_ast.JSX.Attribute.name"),aTF=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aTG=[0,[17,0,0],a(m)],aTH=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aTI=a(ax),aTJ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aTK=a(z),aTL=a(x),aTO=a(y),aTM=[0,[17,0,0],a(m)],aTN=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aTC=[0,[15,0],a(t)],aTw=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.Attribute.Literal ("),[17,[0,a($),0,0],0]]]],a("(@[<2>Flow_ast.JSX.Attribute.Literal (@,")],aTx=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aTy=[0,[17,[0,a($),0,0],[11,a(Rz),[17,0,0]]],a(SI)],aTz=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.Attribute.ExpressionContainer ("),[17,[0,a($),0,0],0]]]],a("(@[<2>Flow_ast.JSX.Attribute.ExpressionContainer (@,")],aTA=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aTB=[0,[17,[0,a($),0,0],[11,a(Rz),[17,0,0]]],a(SI)],aTv=[0,[15,0],a(t)],aTr=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.Attribute.Identifier"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.Attribute.Identifier@ ")],aTs=[0,[17,0,[12,41,0]],a(r)],aTt=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.Attribute.NamespacedName"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.Attribute.NamespacedName@ ")],aTu=[0,[17,0,[12,41,0]],a(r)],aTq=[0,[15,0],a(t)],aTn=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aTo=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aTp=[0,[17,0,[12,41,0]],a(r)],aTb=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aTc=a("Flow_ast.JSX.Text.value"),aTd=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aTe=[0,[3,0,0],a(a1)],aTf=[0,[17,0,0],a(m)],aTg=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aTh=a(b7),aTi=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aTj=[0,[3,0,0],a(a1)],aTk=[0,[17,0,0],a(m)],aTl=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aTm=[0,[15,0],a(t)],aTa=[0,[15,0],a(t)],aS9=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.JSX.ExpressionContainer.Expression"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.JSX.ExpressionContainer.Expression@ ")],aS_=[0,[17,0,[12,41,0]],a(r)],aS$=a("Flow_ast.JSX.ExpressionContainer.EmptyExpression"),aS8=[0,[15,0],a(t)],aS2=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aS1=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aS3=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aST=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aSU=a("Flow_ast.JSX.ExpressionContainer.expression"),aSV=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aSW=[0,[17,0,0],a(m)],aSX=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aSY=a(J),aSZ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aS0=a(z),aS4=a(x),aS7=a(y),aS5=[0,[17,0,0],a(m)],aS6=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aSS=[0,[15,0],a(t)],aSJ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aSK=a("Flow_ast.JSX.NamespacedName.namespace"),aSL=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aSM=[0,[17,0,0],a(m)],aSN=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aSO=a(cz),aSP=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aSQ=[0,[17,0,0],a(m)],aSR=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aSI=[0,[15,0],a(t)],aSF=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aSG=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aSH=[0,[17,0,[12,41,0]],a(r)],aSE=[0,[15,0],a(t)],aSz=a(L),aSq=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aSr=a("Flow_ast.JSX.Identifier.name"),aSs=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aSt=[0,[3,0,0],a(a1)],aSu=[0,[17,0,0],a(m)],aSv=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aSw=a(J),aSx=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aSy=a(z),aSA=a(x),aSD=a(y),aSB=[0,[17,0,0],a(m)],aSC=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aSp=[0,[15,0],a(t)],aSm=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aSn=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aSo=[0,[17,0,[12,41,0]],a(r)],aSk=[0,[15,0],a(t)],aRm=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Array"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Array@ ")],aRn=[0,[17,0,[12,41,0]],a(r)],aRo=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.ArrowFunction"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.ArrowFunction@ ")],aRp=[0,[17,0,[12,41,0]],a(r)],aRq=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Assignment"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Assignment@ ")],aRr=[0,[17,0,[12,41,0]],a(r)],aRs=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Binary"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Binary@ ")],aRt=[0,[17,0,[12,41,0]],a(r)],aRu=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Call"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Call@ ")],aRv=[0,[17,0,[12,41,0]],a(r)],aRw=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Class"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Class@ ")],aRx=[0,[17,0,[12,41,0]],a(r)],aRy=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Comprehension"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Comprehension@ ")],aRz=[0,[17,0,[12,41,0]],a(r)],aRA=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Conditional"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Conditional@ ")],aRB=[0,[17,0,[12,41,0]],a(r)],aRC=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Function"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Function@ ")],aRD=[0,[17,0,[12,41,0]],a(r)],aRE=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Generator"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Generator@ ")],aRF=[0,[17,0,[12,41,0]],a(r)],aRG=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Identifier"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Identifier@ ")],aRH=[0,[17,0,[12,41,0]],a(r)],aRI=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Import"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Import@ ")],aRJ=[0,[17,0,[12,41,0]],a(r)],aRK=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.JSXElement"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.JSXElement@ ")],aRL=[0,[17,0,[12,41,0]],a(r)],aRM=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.JSXFragment"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.JSXFragment@ ")],aRN=[0,[17,0,[12,41,0]],a(r)],aRO=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Literal"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Literal@ ")],aRP=[0,[17,0,[12,41,0]],a(r)],aRQ=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Logical"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Logical@ ")],aRR=[0,[17,0,[12,41,0]],a(r)],aRS=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Member"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Member@ ")],aRT=[0,[17,0,[12,41,0]],a(r)],aRU=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.MetaProperty"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.MetaProperty@ ")],aRV=[0,[17,0,[12,41,0]],a(r)],aRW=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.New"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.New@ ")],aRX=[0,[17,0,[12,41,0]],a(r)],aRY=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Object"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Object@ ")],aRZ=[0,[17,0,[12,41,0]],a(r)],aR0=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.OptionalCall"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.OptionalCall@ ")],aR1=[0,[17,0,[12,41,0]],a(r)],aR2=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.OptionalMember"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.OptionalMember@ ")],aR3=[0,[17,0,[12,41,0]],a(r)],aR4=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Sequence"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Sequence@ ")],aR5=[0,[17,0,[12,41,0]],a(r)],aR6=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Super"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Super@ ")],aR7=[0,[17,0,[12,41,0]],a(r)],aR8=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.TaggedTemplate"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.TaggedTemplate@ ")],aR9=[0,[17,0,[12,41,0]],a(r)],aR_=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.TemplateLiteral"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.TemplateLiteral@ ")],aR$=[0,[17,0,[12,41,0]],a(r)],aSa=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.This"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.This@ ")],aSb=[0,[17,0,[12,41,0]],a(r)],aSc=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.TypeCast"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.TypeCast@ ")],aSd=[0,[17,0,[12,41,0]],a(r)],aSe=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Unary"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Unary@ ")],aSf=[0,[17,0,[12,41,0]],a(r)],aSg=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Update"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Update@ ")],aSh=[0,[17,0,[12,41,0]],a(r)],aSi=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Yield"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Yield@ ")],aSj=[0,[17,0,[12,41,0]],a(r)],aRl=[0,[15,0],a(t)],aRi=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aRj=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aRk=[0,[17,0,[12,41,0]],a(r)],aRh=[0,[15,0],a(t)],aRc=a(L),aQ6=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aQ7=a("Flow_ast.Expression.Import.argument"),aQ8=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aQ9=[0,[17,0,0],a(m)],aQ_=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aQ$=a(J),aRa=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aRb=a(z),aRd=a(x),aRg=a(y),aRe=[0,[17,0,0],a(m)],aRf=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aQ5=[0,[15,0],a(t)],aQ0=a(L),aQW=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aQX=a("Flow_ast.Expression.Super.comments"),aQY=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aQZ=a(z),aQ1=a(x),aQ4=a(y),aQ2=[0,[17,0,0],a(m)],aQ3=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aQV=[0,[15,0],a(t)],aQQ=a(L),aQM=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aQN=a("Flow_ast.Expression.This.comments"),aQO=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aQP=a(z),aQR=a(x),aQU=a(y),aQS=[0,[17,0,0],a(m)],aQT=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aQL=[0,[15,0],a(t)],aQG=a(L),aQu=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aQv=a("Flow_ast.Expression.MetaProperty.meta"),aQw=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aQx=[0,[17,0,0],a(m)],aQy=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aQz=a(i5),aQA=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aQB=[0,[17,0,0],a(m)],aQC=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aQD=a(J),aQE=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aQF=a(z),aQH=a(x),aQK=a(y),aQI=[0,[17,0,0],a(m)],aQJ=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aQt=[0,[15,0],a(t)],aQo=a(L),aQc=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aQd=a("Flow_ast.Expression.TypeCast.expression"),aQe=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aQf=[0,[17,0,0],a(m)],aQg=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aQh=a(hq),aQi=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aQj=[0,[17,0,0],a(m)],aQk=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aQl=a(J),aQm=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aQn=a(z),aQp=a(x),aQs=a(y),aQq=[0,[17,0,0],a(m)],aQr=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aQb=[0,[15,0],a(t)],aP2=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aPY=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aPZ=a("Flow_ast.Expression.Generator.blocks"),aP0=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aP1=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aP3=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aP4=[0,[17,0,0],a(m)],aP5=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aP6=a(p5),aP7=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aP8=a(z),aP9=a(x),aQa=a(y),aP_=[0,[17,0,0],a(m)],aP$=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aPX=[0,[15,0],a(t)],aPM=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aPI=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aPJ=a("Flow_ast.Expression.Comprehension.blocks"),aPK=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aPL=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aPN=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aPO=[0,[17,0,0],a(m)],aPP=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aPQ=a(p5),aPR=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aPS=a(z),aPT=a(x),aPW=a(y),aPU=[0,[17,0,0],a(m)],aPV=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aPH=[0,[15,0],a(t)],aPt=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aPu=a("Flow_ast.Expression.Comprehension.Block.left"),aPv=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aPw=[0,[17,0,0],a(m)],aPx=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aPy=a(bB),aPz=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aPA=[0,[17,0,0],a(m)],aPB=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aPC=a(o5),aPD=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aPE=[0,[9,0,0],a(at)],aPF=[0,[17,0,0],a(m)],aPG=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aPs=[0,[15,0],a(t)],aPp=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aPq=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aPr=[0,[17,0,[12,41,0]],a(r)],aPo=[0,[15,0],a(t)],aO$=a(L),aO1=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aO2=a("Flow_ast.Expression.Yield.argument"),aO3=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aO4=a(z),aO5=a(x),aPn=a(y),aO6=[0,[17,0,0],a(m)],aO7=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aO8=a(J),aO9=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aO_=a(z),aPa=a(x),aPm=a(y),aPb=[0,[17,0,0],a(m)],aPc=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aPd=a(R8),aPe=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aPf=[0,[9,0,0],a(at)],aPg=[0,[17,0,0],a(m)],aPh=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aPi=a("result_out"),aPj=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aPk=[0,[17,0,0],a(m)],aPl=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aO0=[0,[15,0],a(t)],aOM=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aON=a("Flow_ast.Expression.OptionalMember.member"),aOO=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aOP=[0,[17,0,0],a(m)],aOQ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aOR=a(QV),aOS=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aOT=[0,[17,0,0],a(m)],aOU=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aOV=a(bK),aOW=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aOX=[0,[9,0,0],a(at)],aOY=[0,[17,0,0],a(m)],aOZ=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aOL=[0,[15,0],a(t)],aOG=a(L),aOu=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aOv=a("Flow_ast.Expression.Member._object"),aOw=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aOx=[0,[17,0,0],a(m)],aOy=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aOz=a(i5),aOA=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aOB=[0,[17,0,0],a(m)],aOC=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aOD=a(J),aOE=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aOF=a(z),aOH=a(x),aOK=a(y),aOI=[0,[17,0,0],a(m)],aOJ=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aOt=[0,[15,0],a(t)],aOn=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Member.PropertyIdentifier"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Member.PropertyIdentifier@ ")],aOo=[0,[17,0,[12,41,0]],a(r)],aOp=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Member.PropertyPrivateName"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Member.PropertyPrivateName@ ")],aOq=[0,[17,0,[12,41,0]],a(r)],aOr=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Member.PropertyExpression"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Member.PropertyExpression@ ")],aOs=[0,[17,0,[12,41,0]],a(r)],aOm=[0,[15,0],a(t)],aN_=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aN$=a("Flow_ast.Expression.OptionalCall.call"),aOa=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aOb=[0,[17,0,0],a(m)],aOc=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aOd=a(QV),aOe=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aOf=[0,[17,0,0],a(m)],aOg=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aOh=a(bK),aOi=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aOj=[0,[9,0,0],a(at)],aOk=[0,[17,0,0],a(m)],aOl=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aN9=[0,[15,0],a(t)],aN3=a(L),aNL=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aNM=a("Flow_ast.Expression.Call.callee"),aNN=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aNO=[0,[17,0,0],a(m)],aNP=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aNQ=a(kx),aNR=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aNS=a(z),aNT=a(x),aN8=a(y),aNU=[0,[17,0,0],a(m)],aNV=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aNW=a(kk),aNX=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aNY=[0,[17,0,0],a(m)],aNZ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aN0=a(J),aN1=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aN2=a(z),aN4=a(x),aN7=a(y),aN5=[0,[17,0,0],a(m)],aN6=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aNK=[0,[15,0],a(t)],aND=a(L),aNj=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aNk=a("Flow_ast.Expression.New.callee"),aNl=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aNm=[0,[17,0,0],a(m)],aNn=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aNo=a(kx),aNp=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aNq=a(z),aNr=a(x),aNJ=a(y),aNs=[0,[17,0,0],a(m)],aNt=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aNu=a(kk),aNv=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aNw=a(z),aNx=a(x),aNI=a(y),aNy=[0,[17,0,0],a(m)],aNz=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aNA=a(J),aNB=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aNC=a(z),aNE=a(x),aNH=a(y),aNF=[0,[17,0,0],a(m)],aNG=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aNi=[0,[15,0],a(t)],aNc=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aNb=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aNd=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aM6=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aM2=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aM3=a("Flow_ast.Expression.ArgList.arguments"),aM4=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aM5=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aM7=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aM8=[0,[17,0,0],a(m)],aM9=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aM_=a(J),aM$=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aNa=a(z),aNe=a(x),aNh=a(y),aNf=[0,[17,0,0],a(m)],aNg=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aM1=[0,[15,0],a(t)],aMY=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aMZ=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aM0=[0,[17,0,[12,41,0]],a(r)],aMX=[0,[15,0],a(t)],aMT=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Expression"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Expression@ ")],aMU=[0,[17,0,[12,41,0]],a(r)],aMV=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Spread"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Spread@ ")],aMW=[0,[17,0,[12,41,0]],a(r)],aMS=[0,[15,0],a(t)],aMN=a(L),aMx=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aMy=a("Flow_ast.Expression.Conditional.test"),aMz=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aMA=[0,[17,0,0],a(m)],aMB=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aMC=a(i$),aMD=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aME=[0,[17,0,0],a(m)],aMF=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aMG=a(pL),aMH=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aMI=[0,[17,0,0],a(m)],aMJ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aMK=a(J),aML=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aMM=a(z),aMO=a(x),aMR=a(y),aMP=[0,[17,0,0],a(m)],aMQ=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aMw=[0,[15,0],a(t)],aMr=a(L),aMb=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aMc=a("Flow_ast.Expression.Logical.operator"),aMd=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aMe=[0,[17,0,0],a(m)],aMf=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aMg=a(cK),aMh=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aMi=[0,[17,0,0],a(m)],aMj=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aMk=a(bB),aMl=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aMm=[0,[17,0,0],a(m)],aMn=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aMo=a(J),aMp=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aMq=a(z),aMs=a(x),aMv=a(y),aMt=[0,[17,0,0],a(m)],aMu=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aMa=[0,[15,0],a(t)],aL9=a("Flow_ast.Expression.Logical.Or"),aL_=a("Flow_ast.Expression.Logical.And"),aL$=a("Flow_ast.Expression.Logical.NullishCoalesce"),aL8=[0,[15,0],a(t)],aL3=a(L),aLM=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aLN=a("Flow_ast.Expression.Update.operator"),aLO=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aLP=[0,[17,0,0],a(m)],aLQ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aLR=a(b6),aLS=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aLT=[0,[17,0,0],a(m)],aLU=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aLV=a(B5),aLW=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aLX=[0,[9,0,0],a(at)],aLY=[0,[17,0,0],a(m)],aLZ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aL0=a(J),aL1=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aL2=a(z),aL4=a(x),aL7=a(y),aL5=[0,[17,0,0],a(m)],aL6=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aLL=[0,[15,0],a(t)],aLJ=a("Flow_ast.Expression.Update.Decrement"),aLK=a("Flow_ast.Expression.Update.Increment"),aLI=[0,[15,0],a(t)],aLC=a(L),aLk=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aLl=a("Flow_ast.Expression.Assignment.operator"),aLm=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aLn=a(z),aLo=a(x),aLH=a(y),aLp=[0,[17,0,0],a(m)],aLq=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aLr=a(cK),aLs=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aLt=[0,[17,0,0],a(m)],aLu=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aLv=a(bB),aLw=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aLx=[0,[17,0,0],a(m)],aLy=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aLz=a(J),aLA=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aLB=a(z),aLD=a(x),aLG=a(y),aLE=[0,[17,0,0],a(m)],aLF=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aLj=[0,[15,0],a(t)],aK6=a("Flow_ast.Expression.Assignment.PlusAssign"),aK7=a("Flow_ast.Expression.Assignment.MinusAssign"),aK8=a("Flow_ast.Expression.Assignment.MultAssign"),aK9=a("Flow_ast.Expression.Assignment.ExpAssign"),aK_=a("Flow_ast.Expression.Assignment.DivAssign"),aK$=a("Flow_ast.Expression.Assignment.ModAssign"),aLa=a("Flow_ast.Expression.Assignment.LShiftAssign"),aLb=a("Flow_ast.Expression.Assignment.RShiftAssign"),aLc=a("Flow_ast.Expression.Assignment.RShift3Assign"),aLd=a("Flow_ast.Expression.Assignment.BitOrAssign"),aLe=a("Flow_ast.Expression.Assignment.BitXorAssign"),aLf=a("Flow_ast.Expression.Assignment.BitAndAssign"),aLg=a("Flow_ast.Expression.Assignment.NullishAssign"),aLh=a("Flow_ast.Expression.Assignment.AndAssign"),aLi=a("Flow_ast.Expression.Assignment.OrAssign"),aK5=[0,[15,0],a(t)],aK0=a(L),aKK=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aKL=a("Flow_ast.Expression.Binary.operator"),aKM=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aKN=[0,[17,0,0],a(m)],aKO=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aKP=a(cK),aKQ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aKR=[0,[17,0,0],a(m)],aKS=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aKT=a(bB),aKU=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aKV=[0,[17,0,0],a(m)],aKW=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aKX=a(J),aKY=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aKZ=a(z),aK1=a(x),aK4=a(y),aK2=[0,[17,0,0],a(m)],aK3=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aKJ=[0,[15,0],a(t)],aKn=a("Flow_ast.Expression.Binary.Equal"),aKo=a("Flow_ast.Expression.Binary.NotEqual"),aKp=a("Flow_ast.Expression.Binary.StrictEqual"),aKq=a("Flow_ast.Expression.Binary.StrictNotEqual"),aKr=a("Flow_ast.Expression.Binary.LessThan"),aKs=a("Flow_ast.Expression.Binary.LessThanEqual"),aKt=a("Flow_ast.Expression.Binary.GreaterThan"),aKu=a("Flow_ast.Expression.Binary.GreaterThanEqual"),aKv=a("Flow_ast.Expression.Binary.LShift"),aKw=a("Flow_ast.Expression.Binary.RShift"),aKx=a("Flow_ast.Expression.Binary.RShift3"),aKy=a("Flow_ast.Expression.Binary.Plus"),aKz=a("Flow_ast.Expression.Binary.Minus"),aKA=a("Flow_ast.Expression.Binary.Mult"),aKB=a("Flow_ast.Expression.Binary.Exp"),aKC=a("Flow_ast.Expression.Binary.Div"),aKD=a("Flow_ast.Expression.Binary.Mod"),aKE=a("Flow_ast.Expression.Binary.BitOr"),aKF=a("Flow_ast.Expression.Binary.Xor"),aKG=a("Flow_ast.Expression.Binary.BitAnd"),aKH=a("Flow_ast.Expression.Binary.In"),aKI=a("Flow_ast.Expression.Binary.Instanceof"),aKm=[0,[15,0],a(t)],aKh=a(L),aJ7=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aJ8=a("Flow_ast.Expression.Unary.operator"),aJ9=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aJ_=[0,[17,0,0],a(m)],aJ$=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aKa=a(b6),aKb=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aKc=[0,[17,0,0],a(m)],aKd=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aKe=a(J),aKf=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aKg=a(z),aKi=a(x),aKl=a(y),aKj=[0,[17,0,0],a(m)],aKk=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aJ6=[0,[15,0],a(t)],aJY=a("Flow_ast.Expression.Unary.Minus"),aJZ=a("Flow_ast.Expression.Unary.Plus"),aJ0=a("Flow_ast.Expression.Unary.Not"),aJ1=a("Flow_ast.Expression.Unary.BitNot"),aJ2=a("Flow_ast.Expression.Unary.Typeof"),aJ3=a("Flow_ast.Expression.Unary.Void"),aJ4=a("Flow_ast.Expression.Unary.Delete"),aJ5=a("Flow_ast.Expression.Unary.Await"),aJX=[0,[15,0],a(t)],aJS=a(L),aJL=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aJH=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aJI=a("Flow_ast.Expression.Sequence.expressions"),aJJ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aJK=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aJM=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aJN=[0,[17,0,0],a(m)],aJO=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aJP=a(J),aJQ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aJR=a(z),aJT=a(x),aJW=a(y),aJU=[0,[17,0,0],a(m)],aJV=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aJG=[0,[15,0],a(t)],aJA=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aJz=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aJB=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aJs=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aJo=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aJp=a("Flow_ast.Expression.Object.properties"),aJq=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aJr=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aJt=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aJu=[0,[17,0,0],a(m)],aJv=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aJw=a(J),aJx=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aJy=a(z),aJC=a(x),aJF=a(y),aJD=[0,[17,0,0],a(m)],aJE=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aJn=[0,[15,0],a(t)],aJj=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Object.Property"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Object.Property@ ")],aJk=[0,[17,0,[12,41,0]],a(r)],aJl=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Object.SpreadProperty"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Object.SpreadProperty@ ")],aJm=[0,[17,0,[12,41,0]],a(r)],aJi=[0,[15,0],a(t)],aJd=a(L),aI7=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aI8=a("Flow_ast.Expression.Object.SpreadProperty.argument"),aI9=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aI_=[0,[17,0,0],a(m)],aI$=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aJa=a(J),aJb=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aJc=a(z),aJe=a(x),aJh=a(y),aJf=[0,[17,0,0],a(m)],aJg=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aI6=[0,[15,0],a(t)],aI3=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aI4=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aI5=[0,[17,0,[12,41,0]],a(r)],aI2=[0,[15,0],a(t)],aIX=a(L),aID=a(L),aH0=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Object.Property.Init {"),[17,[0,a($),0,0],0]]],a("@[<2>Flow_ast.Expression.Object.Property.Init {@,")],aH1=a(cy),aH2=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aH3=[0,[17,0,0],a(m)],aH4=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aH5=a(ax),aH6=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aH7=[0,[17,0,0],a(m)],aH8=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aH9=a(nM),aH_=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aH$=[0,[9,0,0],a(at)],aIa=[0,[17,0,0],a(m)],aIb=[0,[17,0,[12,D,0]],a(pp)],aIc=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Object.Property.Method {"),[17,[0,a($),0,0],0]]],a("@[<2>Flow_ast.Expression.Object.Property.Method {@,")],aId=a(cy),aIe=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aIf=[0,[17,0,0],a(m)],aIg=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aIh=a(ax),aIi=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aIj=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aIk=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aIl=[0,[17,0,[12,41,0]],a(r)],aIm=[0,[17,0,0],a(m)],aIn=[0,[17,0,[12,D,0]],a(pp)],aIo=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Object.Property.Get {"),[17,[0,a($),0,0],0]]],a("@[<2>Flow_ast.Expression.Object.Property.Get {@,")],aIp=a(cy),aIq=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aIr=[0,[17,0,0],a(m)],aIs=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aIt=a(ax),aIu=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aIv=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aIw=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aIx=[0,[17,0,[12,41,0]],a(r)],aIy=[0,[17,0,0],a(m)],aIz=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aIA=a(J),aIB=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aIC=a(z),aIE=a(x),aIH=a(y),aIF=[0,[17,0,0],a(m)],aIG=[0,[17,0,[12,D,0]],a(pp)],aII=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Object.Property.Set {"),[17,[0,a($),0,0],0]]],a("@[<2>Flow_ast.Expression.Object.Property.Set {@,")],aIJ=a(cy),aIK=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aIL=[0,[17,0,0],a(m)],aIM=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aIN=a(ax),aIO=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aIP=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aIQ=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aIR=[0,[17,0,[12,41,0]],a(r)],aIS=[0,[17,0,0],a(m)],aIT=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aIU=a(J),aIV=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aIW=a(z),aIY=a(x),aI1=a(y),aIZ=[0,[17,0,0],a(m)],aI0=[0,[17,0,[12,D,0]],a(pp)],aHZ=[0,[15,0],a(t)],aHW=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aHX=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aHY=[0,[17,0,[12,41,0]],a(r)],aHV=[0,[15,0],a(t)],aHK=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Object.Property.Literal"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Object.Property.Literal@ ")],aHL=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aHM=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aHN=[0,[17,0,[12,41,0]],a(r)],aHO=[0,[17,0,[12,41,0]],a(r)],aHP=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Object.Property.Identifier"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Object.Property.Identifier@ ")],aHQ=[0,[17,0,[12,41,0]],a(r)],aHR=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Object.Property.PrivateName"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Object.Property.PrivateName@ ")],aHS=[0,[17,0,[12,41,0]],a(r)],aHT=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Object.Property.Computed"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Object.Property.Computed@ ")],aHU=[0,[17,0,[12,41,0]],a(r)],aHJ=[0,[15,0],a(t)],aHE=a(L),aHp=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aHq=a("Flow_ast.Expression.TaggedTemplate.tag"),aHr=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aHs=[0,[17,0,0],a(m)],aHt=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aHu=a(R5),aHv=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aHw=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aHx=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aHy=[0,[17,0,[12,41,0]],a(r)],aHz=[0,[17,0,0],a(m)],aHA=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aHB=a(J),aHC=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aHD=a(z),aHF=a(x),aHI=a(y),aHG=[0,[17,0,0],a(m)],aHH=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aHo=[0,[15,0],a(t)],aHj=a(L),aHc=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aG7=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aG3=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aG4=a("Flow_ast.Expression.TemplateLiteral.quasis"),aG5=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aG6=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aG8=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aG9=[0,[17,0,0],a(m)],aG_=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aG$=a(BC),aHa=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aHb=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aHd=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aHe=[0,[17,0,0],a(m)],aHf=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aHg=a(J),aHh=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aHi=a(z),aHk=a(x),aHn=a(y),aHl=[0,[17,0,0],a(m)],aHm=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aG2=[0,[15,0],a(t)],aGS=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aGT=a("Flow_ast.Expression.TemplateLiteral.Element.value"),aGU=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aGV=[0,[17,0,0],a(m)],aGW=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aGX=a(QY),aGY=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aGZ=[0,[9,0,0],a(at)],aG0=[0,[17,0,0],a(m)],aG1=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aGR=[0,[15,0],a(t)],aGO=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aGP=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aGQ=[0,[17,0,[12,41,0]],a(r)],aGN=[0,[15,0],a(t)],aGC=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aGD=a("Flow_ast.Expression.TemplateLiteral.Element.raw"),aGE=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aGF=[0,[3,0,0],a(a1)],aGG=[0,[17,0,0],a(m)],aGH=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aGI=a(R4),aGJ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aGK=[0,[3,0,0],a(a1)],aGL=[0,[17,0,0],a(m)],aGM=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aGB=[0,[15,0],a(t)],aGv=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aGu=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aGw=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aGn=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aGj=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aGk=a("Flow_ast.Expression.Array.elements"),aGl=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aGm=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aGo=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aGp=[0,[17,0,0],a(m)],aGq=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aGr=a(J),aGs=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aGt=a(z),aGx=a(x),aGA=a(y),aGy=[0,[17,0,0],a(m)],aGz=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aGi=[0,[15,0],a(t)],aGc=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Array.Expression"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Array.Expression@ ")],aGd=[0,[17,0,[12,41,0]],a(r)],aGe=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Array.Spread"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Array.Spread@ ")],aGf=[0,[17,0,[12,41,0]],a(r)],aGg=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.Array.Hole"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.Array.Hole@ ")],aGh=[0,[17,0,[12,41,0]],a(r)],aGb=[0,[15,0],a(t)],aF8=a(L),aF0=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aF1=a("Flow_ast.Expression.SpreadElement.argument"),aF2=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aF3=[0,[17,0,0],a(m)],aF4=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aF5=a(J),aF6=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aF7=a(z),aF9=a(x),aGa=a(y),aF_=[0,[17,0,0],a(m)],aF$=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aFZ=[0,[15,0],a(t)],aFW=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aFX=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aFY=[0,[17,0,[12,41,0]],a(r)],aFU=[0,[15,0],a(t)],aFO=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aFN=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aFP=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aFG=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aFC=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aFD=a("Flow_ast.Expression.CallTypeArgs.arguments"),aFE=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aFF=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aFH=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aFI=[0,[17,0,0],a(m)],aFJ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aFK=a(J),aFL=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aFM=a(z),aFQ=a(x),aFT=a(y),aFR=[0,[17,0,0],a(m)],aFS=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aFB=[0,[15,0],a(t)],aFy=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aFz=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aFA=[0,[17,0,[12,41,0]],a(r)],aFx=[0,[15,0],a(t)],aFt=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.CallTypeArg.Explicit"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.CallTypeArg.Explicit@ ")],aFu=[0,[17,0,[12,41,0]],a(r)],aFv=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Expression.CallTypeArg.Implicit"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Expression.CallTypeArg.Implicit@ ")],aFw=[0,[17,0,[12,41,0]],a(r)],aFs=[0,[15,0],a(t)],aFn=a(L),aFj=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aFk=a("Flow_ast.Expression.CallTypeArg.Implicit.comments"),aFl=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aFm=a(z),aFo=a(x),aFr=a(y),aFp=[0,[17,0,0],a(m)],aFq=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aFi=[0,[15,0],a(t)],aFf=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aFg=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aFh=[0,[17,0,[12,41,0]],a(r)],aFd=[0,[15,0],a(t)],aD5=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.Block"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.Block@ ")],aD6=[0,[17,0,[12,41,0]],a(r)],aD7=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.Break"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.Break@ ")],aD8=[0,[17,0,[12,41,0]],a(r)],aD9=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ClassDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ClassDeclaration@ ")],aD_=[0,[17,0,[12,41,0]],a(r)],aD$=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.Continue"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.Continue@ ")],aEa=[0,[17,0,[12,41,0]],a(r)],aEb=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.Debugger"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.Debugger@ ")],aEc=[0,[17,0,[12,41,0]],a(r)],aEd=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareClass"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareClass@ ")],aEe=[0,[17,0,[12,41,0]],a(r)],aEf=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareExportDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareExportDeclaration@ ")],aEg=[0,[17,0,[12,41,0]],a(r)],aEh=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareFunction"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareFunction@ ")],aEi=[0,[17,0,[12,41,0]],a(r)],aEj=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareInterface"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareInterface@ ")],aEk=[0,[17,0,[12,41,0]],a(r)],aEl=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareModule"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareModule@ ")],aEm=[0,[17,0,[12,41,0]],a(r)],aEn=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareModuleExports"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareModuleExports@ ")],aEo=[0,[17,0,[12,41,0]],a(r)],aEp=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareTypeAlias"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareTypeAlias@ ")],aEq=[0,[17,0,[12,41,0]],a(r)],aEr=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareOpaqueType"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareOpaqueType@ ")],aEs=[0,[17,0,[12,41,0]],a(r)],aEt=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareVariable"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareVariable@ ")],aEu=[0,[17,0,[12,41,0]],a(r)],aEv=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DoWhile"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DoWhile@ ")],aEw=[0,[17,0,[12,41,0]],a(r)],aEx=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.Empty"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.Empty@ ")],aEy=[0,[17,0,[12,41,0]],a(r)],aEz=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.EnumDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.EnumDeclaration@ ")],aEA=[0,[17,0,[12,41,0]],a(r)],aEB=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ExportDefaultDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ExportDefaultDeclaration@ ")],aEC=[0,[17,0,[12,41,0]],a(r)],aED=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ExportNamedDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ExportNamedDeclaration@ ")],aEE=[0,[17,0,[12,41,0]],a(r)],aEF=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.Expression"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.Expression@ ")],aEG=[0,[17,0,[12,41,0]],a(r)],aEH=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.For"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.For@ ")],aEI=[0,[17,0,[12,41,0]],a(r)],aEJ=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ForIn"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ForIn@ ")],aEK=[0,[17,0,[12,41,0]],a(r)],aEL=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ForOf"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ForOf@ ")],aEM=[0,[17,0,[12,41,0]],a(r)],aEN=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.FunctionDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.FunctionDeclaration@ ")],aEO=[0,[17,0,[12,41,0]],a(r)],aEP=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.If"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.If@ ")],aEQ=[0,[17,0,[12,41,0]],a(r)],aER=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ImportDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ImportDeclaration@ ")],aES=[0,[17,0,[12,41,0]],a(r)],aET=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.InterfaceDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.InterfaceDeclaration@ ")],aEU=[0,[17,0,[12,41,0]],a(r)],aEV=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.Labeled"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.Labeled@ ")],aEW=[0,[17,0,[12,41,0]],a(r)],aEX=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.Return"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.Return@ ")],aEY=[0,[17,0,[12,41,0]],a(r)],aEZ=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.Switch"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.Switch@ ")],aE0=[0,[17,0,[12,41,0]],a(r)],aE1=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.Throw"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.Throw@ ")],aE2=[0,[17,0,[12,41,0]],a(r)],aE3=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.Try"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.Try@ ")],aE4=[0,[17,0,[12,41,0]],a(r)],aE5=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.TypeAlias"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.TypeAlias@ ")],aE6=[0,[17,0,[12,41,0]],a(r)],aE7=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.OpaqueType"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.OpaqueType@ ")],aE8=[0,[17,0,[12,41,0]],a(r)],aE9=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.VariableDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.VariableDeclaration@ ")],aE_=[0,[17,0,[12,41,0]],a(r)],aE$=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.While"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.While@ ")],aFa=[0,[17,0,[12,41,0]],a(r)],aFb=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.With"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.With@ ")],aFc=[0,[17,0,[12,41,0]],a(r)],aD4=[0,[15,0],a(t)],aD1=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aD2=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aD3=[0,[17,0,[12,41,0]],a(r)],aD0=[0,[15,0],a(t)],aDY=a("Flow_ast.Statement.ExportValue"),aDZ=a("Flow_ast.Statement.ExportType"),aDX=[0,[15,0],a(t)],aDS=a(L),aDO=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aDP=a("Flow_ast.Statement.Empty.comments"),aDQ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aDR=a(z),aDT=a(x),aDW=a(y),aDU=[0,[17,0,0],a(m)],aDV=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aDN=[0,[15,0],a(t)],aDH=a(L),aDs=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aDt=a("Flow_ast.Statement.Expression.expression"),aDu=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aDv=[0,[17,0,0],a(m)],aDw=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aDx=a(Q1),aDy=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aDz=a(z),aDA=[0,[3,0,0],a(a1)],aDB=a(x),aDM=a(y),aDC=[0,[17,0,0],a(m)],aDD=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aDE=a(J),aDF=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aDG=a(z),aDI=a(x),aDL=a(y),aDJ=[0,[17,0,0],a(m)],aDK=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aDr=[0,[15,0],a(t)],aDk=a(L),aCV=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aCW=a("Flow_ast.Statement.ImportDeclaration.import_kind"),aCX=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aCY=[0,[17,0,0],a(m)],aCZ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aC0=a(f9),aC1=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aC2=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aC3=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aC4=[0,[17,0,[12,41,0]],a(r)],aC5=[0,[17,0,0],a(m)],aC6=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aC7=a(cI),aC8=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aC9=a(z),aC_=a(x),aDq=a(y),aC$=[0,[17,0,0],a(m)],aDa=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aDb=a(i4),aDc=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aDd=a(z),aDe=a(x),aDp=a(y),aDf=[0,[17,0,0],a(m)],aDg=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aDh=a(J),aDi=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aDj=a(z),aDl=a(x),aDo=a(y),aDm=[0,[17,0,0],a(m)],aDn=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aCU=[0,[15,0],a(t)],aCB=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aCC=a("Flow_ast.Statement.ImportDeclaration.kind"),aCD=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aCE=a(z),aCF=a(x),aCT=a(y),aCG=[0,[17,0,0],a(m)],aCH=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aCI=a(ko),aCJ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aCK=a(z),aCL=a(x),aCS=a(y),aCM=[0,[17,0,0],a(m)],aCN=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aCO=a("remote"),aCP=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aCQ=[0,[17,0,0],a(m)],aCR=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aCA=[0,[15,0],a(t)],aCs=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aCq=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ImportDeclaration.ImportNamedSpecifiers"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ImportDeclaration.ImportNamedSpecifiers@ ")],aCr=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aCt=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aCu=[0,[17,0,[12,41,0]],a(r)],aCv=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ImportDeclaration.ImportNamespaceSpecifier"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ImportDeclaration.ImportNamespaceSpecifier@ ")],aCw=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aCx=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aCy=[0,[17,0,[12,41,0]],a(r)],aCz=[0,[17,0,[12,41,0]],a(r)],aCp=[0,[15,0],a(t)],aCm=a("Flow_ast.Statement.ImportDeclaration.ImportType"),aCn=a("Flow_ast.Statement.ImportDeclaration.ImportTypeof"),aCo=a("Flow_ast.Statement.ImportDeclaration.ImportValue"),aCl=[0,[15,0],a(t)],aCc=a(L),aBJ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aBK=a("Flow_ast.Statement.DeclareExportDeclaration.default"),aBL=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aBM=a(z),aBN=a(x),aCk=a(y),aBO=[0,[17,0,0],a(m)],aBP=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aBQ=a(kq),aBR=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aBS=a(z),aBT=a(x),aCj=a(y),aBU=[0,[17,0,0],a(m)],aBV=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aBW=a(i4),aBX=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aBY=a(z),aBZ=a(x),aCi=a(y),aB0=[0,[17,0,0],a(m)],aB1=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aB2=a(f9),aB3=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aB4=a(z),aB5=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aB6=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aB7=[0,[17,0,[12,41,0]],a(r)],aB8=a(x),aCh=a(y),aB9=[0,[17,0,0],a(m)],aB_=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aB$=a(J),aCa=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aCb=a(z),aCd=a(x),aCg=a(y),aCe=[0,[17,0,0],a(m)],aCf=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aBI=[0,[15,0],a(t)],aBc=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareExportDeclaration.Variable"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareExportDeclaration.Variable@ ")],aBd=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aBe=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aBf=[0,[17,0,[12,41,0]],a(r)],aBg=[0,[17,0,[12,41,0]],a(r)],aBh=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareExportDeclaration.Function"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareExportDeclaration.Function@ ")],aBi=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aBj=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aBk=[0,[17,0,[12,41,0]],a(r)],aBl=[0,[17,0,[12,41,0]],a(r)],aBm=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareExportDeclaration.Class"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareExportDeclaration.Class@ ")],aBn=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aBo=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aBp=[0,[17,0,[12,41,0]],a(r)],aBq=[0,[17,0,[12,41,0]],a(r)],aBr=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareExportDeclaration.DefaultType"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareExportDeclaration.DefaultType@ ")],aBs=[0,[17,0,[12,41,0]],a(r)],aBt=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareExportDeclaration.NamedType"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareExportDeclaration.NamedType@ ")],aBu=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aBv=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aBw=[0,[17,0,[12,41,0]],a(r)],aBx=[0,[17,0,[12,41,0]],a(r)],aBy=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareExportDeclaration.NamedOpaqueType"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareExportDeclaration.NamedOpaqueType@ ")],aBz=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aBA=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aBB=[0,[17,0,[12,41,0]],a(r)],aBC=[0,[17,0,[12,41,0]],a(r)],aBD=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareExportDeclaration.Interface"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareExportDeclaration.Interface@ ")],aBE=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aBF=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aBG=[0,[17,0,[12,41,0]],a(r)],aBH=[0,[17,0,[12,41,0]],a(r)],aBb=[0,[15,0],a(t)],aA9=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ExportDefaultDeclaration.Declaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ExportDefaultDeclaration.Declaration@ ")],aA_=[0,[17,0,[12,41,0]],a(r)],aA$=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ExportDefaultDeclaration.Expression"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ExportDefaultDeclaration.Expression@ ")],aBa=[0,[17,0,[12,41,0]],a(r)],aA8=[0,[15,0],a(t)],aA3=a(L),aAR=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aAS=a("Flow_ast.Statement.ExportDefaultDeclaration.default"),aAT=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aAU=[0,[17,0,0],a(m)],aAV=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aAW=a(kq),aAX=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aAY=[0,[17,0,0],a(m)],aAZ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aA0=a(J),aA1=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aA2=a(z),aA4=a(x),aA7=a(y),aA5=[0,[17,0,0],a(m)],aA6=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aAQ=[0,[15,0],a(t)],aAL=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aAJ=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ExportNamedDeclaration.ExportSpecifiers"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ExportNamedDeclaration.ExportSpecifiers@ ")],aAK=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aAM=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aAN=[0,[17,0,[12,41,0]],a(r)],aAO=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ExportNamedDeclaration.ExportBatchSpecifier"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ExportNamedDeclaration.ExportBatchSpecifier@ ")],aAP=[0,[17,0,[12,41,0]],a(r)],aAI=[0,[15,0],a(t)],aAA=a(L),az9=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],az_=a("Flow_ast.Statement.ExportNamedDeclaration.declaration"),az$=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aAa=a(z),aAb=a(x),aAH=a(y),aAc=[0,[17,0,0],a(m)],aAd=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aAe=a(i4),aAf=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aAg=a(z),aAh=a(x),aAG=a(y),aAi=[0,[17,0,0],a(m)],aAj=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aAk=a(f9),aAl=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aAm=a(z),aAn=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aAo=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aAp=[0,[17,0,[12,41,0]],a(r)],aAq=a(x),aAF=a(y),aAr=[0,[17,0,0],a(m)],aAs=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aAt=a("export_kind"),aAu=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aAv=[0,[17,0,0],a(m)],aAw=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aAx=a(J),aAy=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aAz=a(z),aAB=a(x),aAE=a(y),aAC=[0,[17,0,0],a(m)],aAD=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],az8=[0,[15,0],a(t)],az2=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],az3=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],az4=a(z),az5=a(x),az7=a(y),az6=[0,[17,0,[12,41,0]],a(r)],az1=[0,[15,0],a(t)],azP=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],azQ=a("Flow_ast.Statement.ExportNamedDeclaration.ExportSpecifier.local"),azR=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],azS=[0,[17,0,0],a(m)],azT=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],azU=a(p3),azV=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],azW=a(z),azX=a(x),az0=a(y),azY=[0,[17,0,0],a(m)],azZ=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],azO=[0,[15,0],a(t)],azL=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],azM=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],azN=[0,[17,0,[12,41,0]],a(r)],azK=[0,[15,0],a(t)],azF=a(L),azx=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],azy=a("Flow_ast.Statement.DeclareModuleExports.annot"),azz=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],azA=[0,[17,0,0],a(m)],azB=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],azC=a(J),azD=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],azE=a(z),azG=a(x),azJ=a(y),azH=[0,[17,0,0],a(m)],azI=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],azw=[0,[15,0],a(t)],azr=a(L),ay_=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ay$=a("Flow_ast.Statement.DeclareModule.id"),aza=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],azb=[0,[17,0,0],a(m)],azc=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],azd=a(aF),aze=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],azf=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],azg=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],azh=[0,[17,0,[12,41,0]],a(r)],azi=[0,[17,0,0],a(m)],azj=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],azk=a(hr),azl=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],azm=[0,[17,0,0],a(m)],azn=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],azo=a(J),azp=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],azq=a(z),azs=a(x),azv=a(y),azt=[0,[17,0,0],a(m)],azu=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],ay9=[0,[15,0],a(t)],ay7=a("Flow_ast.Statement.DeclareModule.ES"),ay8=a("Flow_ast.Statement.DeclareModule.CommonJS"),ay6=[0,[15,0],a(t)],ayZ=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareModule.Identifier"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareModule.Identifier@ ")],ay0=[0,[17,0,[12,41,0]],a(r)],ay1=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.DeclareModule.Literal"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.DeclareModule.Literal@ ")],ay2=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],ay3=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],ay4=[0,[17,0,[12,41,0]],a(r)],ay5=[0,[17,0,[12,41,0]],a(r)],ayY=[0,[15,0],a(t)],ayS=a(L),ayA=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ayB=a("Flow_ast.Statement.DeclareFunction.id"),ayC=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ayD=[0,[17,0,0],a(m)],ayE=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ayF=a(hq),ayG=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ayH=[0,[17,0,0],a(m)],ayI=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ayJ=a(bW),ayK=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ayL=a(z),ayM=a(x),ayX=a(y),ayN=[0,[17,0,0],a(m)],ayO=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ayP=a(J),ayQ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ayR=a(z),ayT=a(x),ayW=a(y),ayU=[0,[17,0,0],a(m)],ayV=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],ayz=[0,[15,0],a(t)],ayu=a(L),ayi=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ayj=a("Flow_ast.Statement.DeclareVariable.id"),ayk=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ayl=[0,[17,0,0],a(m)],aym=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ayn=a(hq),ayo=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ayp=[0,[17,0,0],a(m)],ayq=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ayr=a(J),ays=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ayt=a(z),ayv=a(x),ayy=a(y),ayw=[0,[17,0,0],a(m)],ayx=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],ayh=[0,[15,0],a(t)],ax$=a(L),axV=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],axW=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],axX=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],axY=[0,[17,0,[12,41,0]],a(r)],axr=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],axs=a("Flow_ast.Statement.DeclareClass.id"),axt=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],axu=[0,[17,0,0],a(m)],axv=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],axw=a(i1),axx=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],axy=a(z),axz=a(x),ayg=a(y),axA=[0,[17,0,0],a(m)],axB=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],axC=a(aF),axD=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],axE=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],axF=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],axG=[0,[17,0,[12,41,0]],a(r)],axH=[0,[17,0,0],a(m)],axI=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],axJ=a(co),axK=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],axL=a(z),axM=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],axN=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],axO=[0,[17,0,[12,41,0]],a(r)],axP=a(x),ayf=a(y),axQ=[0,[17,0,0],a(m)],axR=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],axS=a(x6),axT=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],axU=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],axZ=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],ax0=[0,[17,0,0],a(m)],ax1=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ax2=a(hQ),ax3=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ax4=a(z),ax5=a(x),aye=a(y),ax6=[0,[17,0,0],a(m)],ax7=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ax8=a(J),ax9=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ax_=a(z),aya=a(x),ayd=a(y),ayb=[0,[17,0,0],a(m)],ayc=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],axq=[0,[15,0],a(t)],axk=a(L),aw5=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aw6=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aw7=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aw8=[0,[17,0,[12,41,0]],a(r)],awR=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],awS=a("Flow_ast.Statement.Interface.id"),awT=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],awU=[0,[17,0,0],a(m)],awV=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],awW=a(i1),awX=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],awY=a(z),awZ=a(x),axp=a(y),aw0=[0,[17,0,0],a(m)],aw1=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aw2=a(co),aw3=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aw4=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aw9=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aw_=[0,[17,0,0],a(m)],aw$=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],axa=a(aF),axb=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],axc=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],axd=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],axe=[0,[17,0,[12,41,0]],a(r)],axf=[0,[17,0,0],a(m)],axg=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],axh=a(J),axi=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],axj=a(z),axl=a(x),axo=a(y),axm=[0,[17,0,0],a(m)],axn=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],awQ=[0,[15,0],a(t)],awI=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.EnumDeclaration.BooleanBody"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.EnumDeclaration.BooleanBody@ ")],awJ=[0,[17,0,[12,41,0]],a(r)],awK=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.EnumDeclaration.NumberBody"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.EnumDeclaration.NumberBody@ ")],awL=[0,[17,0,[12,41,0]],a(r)],awM=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.EnumDeclaration.StringBody"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.EnumDeclaration.StringBody@ ")],awN=[0,[17,0,[12,41,0]],a(r)],awO=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.EnumDeclaration.SymbolBody"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.EnumDeclaration.SymbolBody@ ")],awP=[0,[17,0,[12,41,0]],a(r)],awH=[0,[15,0],a(t)],awE=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],awF=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],awG=[0,[17,0,[12,41,0]],a(r)],awD=[0,[15,0],a(t)],awy=a(L),awm=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],awn=a("Flow_ast.Statement.EnumDeclaration.id"),awo=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],awp=[0,[17,0,0],a(m)],awq=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],awr=a(aF),aws=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],awt=[0,[17,0,0],a(m)],awu=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],awv=a(J),aww=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],awx=a(z),awz=a(x),awC=a(y),awA=[0,[17,0,0],a(m)],awB=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],awl=[0,[15,0],a(t)],awf=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],awe=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],awg=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],av4=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],av0=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],av1=a("Flow_ast.Statement.EnumDeclaration.SymbolBody.members"),av2=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],av3=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],av5=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],av6=[0,[17,0,0],a(m)],av7=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],av8=a(q1),av9=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],av_=[0,[9,0,0],a(at)],av$=[0,[17,0,0],a(m)],awa=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],awb=a(J),awc=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],awd=a(z),awh=a(x),awk=a(y),awi=[0,[17,0,0],a(m)],awj=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],avZ=[0,[15,0],a(t)],avW=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],avR=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],avP=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.EnumDeclaration.StringBody.Defaulted"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.EnumDeclaration.StringBody.Defaulted@ ")],avQ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],avS=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],avT=[0,[17,0,[12,41,0]],a(r)],avU=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.EnumDeclaration.StringBody.Initialized"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.EnumDeclaration.StringBody.Initialized@ ")],avV=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],avX=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],avY=[0,[17,0,[12,41,0]],a(r)],avO=[0,[15,0],a(t)],avI=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],avH=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],avJ=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],avp=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],avq=a("Flow_ast.Statement.EnumDeclaration.StringBody.members"),avr=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],avs=[0,[17,0,0],a(m)],avt=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],avu=a(xk),avv=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],avw=[0,[9,0,0],a(at)],avx=[0,[17,0,0],a(m)],avy=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],avz=a(q1),avA=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],avB=[0,[9,0,0],a(at)],avC=[0,[17,0,0],a(m)],avD=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],avE=a(J),avF=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],avG=a(z),avK=a(x),avN=a(y),avL=[0,[17,0,0],a(m)],avM=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],avo=[0,[15,0],a(t)],avi=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],avh=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],avj=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],au2=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],auY=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],auZ=a("Flow_ast.Statement.EnumDeclaration.NumberBody.members"),au0=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],au1=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],au3=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],au4=[0,[17,0,0],a(m)],au5=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],au6=a(xk),au7=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],au8=[0,[9,0,0],a(at)],au9=[0,[17,0,0],a(m)],au_=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],au$=a(q1),ava=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],avb=[0,[9,0,0],a(at)],avc=[0,[17,0,0],a(m)],avd=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ave=a(J),avf=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],avg=a(z),avk=a(x),avn=a(y),avl=[0,[17,0,0],a(m)],avm=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],auX=[0,[15,0],a(t)],auR=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],auQ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],auS=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],auz=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],auv=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],auw=a("Flow_ast.Statement.EnumDeclaration.BooleanBody.members"),aux=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],auy=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],auA=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],auB=[0,[17,0,0],a(m)],auC=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],auD=a(xk),auE=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],auF=[0,[9,0,0],a(at)],auG=[0,[17,0,0],a(m)],auH=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],auI=a(q1),auJ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],auK=[0,[9,0,0],a(at)],auL=[0,[17,0,0],a(m)],auM=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],auN=a(J),auO=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],auP=a(z),auT=a(x),auW=a(y),auU=[0,[17,0,0],a(m)],auV=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],auu=[0,[15,0],a(t)],aui=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],auj=a("Flow_ast.Statement.EnumDeclaration.InitializedMember.id"),auk=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aul=[0,[17,0,0],a(m)],aum=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aun=a(cZ),auo=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aup=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],auq=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aur=[0,[17,0,[12,41,0]],a(r)],aus=[0,[17,0,0],a(m)],aut=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],auh=[0,[15,0],a(t)],aue=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],auf=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aug=[0,[17,0,[12,41,0]],a(r)],aud=[0,[15,0],a(t)],at_=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],at$=a("Flow_ast.Statement.EnumDeclaration.DefaultedMember.id"),aua=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aub=[0,[17,0,0],a(m)],auc=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],at9=[0,[15,0],a(t)],at6=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],at7=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],at8=[0,[17,0,[12,41,0]],a(r)],at5=[0,[15,0],a(t)],atY=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ForOf.LeftDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ForOf.LeftDeclaration@ ")],atZ=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],at0=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],at1=[0,[17,0,[12,41,0]],a(r)],at2=[0,[17,0,[12,41,0]],a(r)],at3=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ForOf.LeftPattern"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ForOf.LeftPattern@ ")],at4=[0,[17,0,[12,41,0]],a(r)],atX=[0,[15,0],a(t)],atS=a(L),atx=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aty=a("Flow_ast.Statement.ForOf.left"),atz=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],atA=[0,[17,0,0],a(m)],atB=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],atC=a(bB),atD=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],atE=[0,[17,0,0],a(m)],atF=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],atG=a(aF),atH=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],atI=[0,[17,0,0],a(m)],atJ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],atK=a(eM),atL=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],atM=[0,[9,0,0],a(at)],atN=[0,[17,0,0],a(m)],atO=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],atP=a(J),atQ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],atR=a(z),atT=a(x),atW=a(y),atU=[0,[17,0,0],a(m)],atV=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],atw=[0,[15,0],a(t)],atp=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ForIn.LeftDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ForIn.LeftDeclaration@ ")],atq=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],atr=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],ats=[0,[17,0,[12,41,0]],a(r)],att=[0,[17,0,[12,41,0]],a(r)],atu=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.ForIn.LeftPattern"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.ForIn.LeftPattern@ ")],atv=[0,[17,0,[12,41,0]],a(r)],ato=[0,[15,0],a(t)],atj=a(L),as0=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],as1=a("Flow_ast.Statement.ForIn.left"),as2=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],as3=[0,[17,0,0],a(m)],as4=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],as5=a(bB),as6=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],as7=[0,[17,0,0],a(m)],as8=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],as9=a(aF),as_=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],as$=[0,[17,0,0],a(m)],ata=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],atb=a(o5),atc=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],atd=[0,[9,0,0],a(at)],ate=[0,[17,0,0],a(m)],atf=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],atg=a(J),ath=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ati=a(z),atk=a(x),atn=a(y),atl=[0,[17,0,0],a(m)],atm=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],asZ=[0,[15,0],a(t)],asS=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.For.InitDeclaration"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.For.InitDeclaration@ ")],asT=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],asU=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],asV=[0,[17,0,[12,41,0]],a(r)],asW=[0,[17,0,[12,41,0]],a(r)],asX=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Statement.For.InitExpression"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Statement.For.InitExpression@ ")],asY=[0,[17,0,[12,41,0]],a(r)],asR=[0,[15,0],a(t)],asJ=a(L),asj=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ask=a("Flow_ast.Statement.For.init"),asl=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],asm=a(z),asn=a(x),asQ=a(y),aso=[0,[17,0,0],a(m)],asp=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],asq=a(hO),asr=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ass=a(z),ast=a(x),asP=a(y),asu=[0,[17,0,0],a(m)],asv=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],asw=a(RY),asx=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],asy=a(z),asz=a(x),asO=a(y),asA=[0,[17,0,0],a(m)],asB=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],asC=a(aF),asD=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],asE=[0,[17,0,0],a(m)],asF=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],asG=a(J),asH=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],asI=a(z),asK=a(x),asN=a(y),asL=[0,[17,0,0],a(m)],asM=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],asi=[0,[15,0],a(t)],asd=a(L),ar3=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ar4=a("Flow_ast.Statement.DoWhile.body"),ar5=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ar6=[0,[17,0,0],a(m)],ar7=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ar8=a(hO),ar9=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ar_=[0,[17,0,0],a(m)],ar$=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],asa=a(J),asb=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],asc=a(z),ase=a(x),ash=a(y),asf=[0,[17,0,0],a(m)],asg=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],ar2=[0,[15,0],a(t)],arX=a(L),arL=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],arM=a("Flow_ast.Statement.While.test"),arN=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],arO=[0,[17,0,0],a(m)],arP=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],arQ=a(aF),arR=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],arS=[0,[17,0,0],a(m)],arT=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],arU=a(J),arV=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],arW=a(z),arY=a(x),ar1=a(y),arZ=[0,[17,0,0],a(m)],ar0=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],arK=[0,[15,0],a(t)],arH=a("Flow_ast.Statement.VariableDeclaration.Var"),arI=a("Flow_ast.Statement.VariableDeclaration.Let"),arJ=a("Flow_ast.Statement.VariableDeclaration.Const"),arG=[0,[15,0],a(t)],arB=a(L),arq=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],arm=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],arn=a("Flow_ast.Statement.VariableDeclaration.declarations"),aro=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],arp=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],arr=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],ars=[0,[17,0,0],a(m)],art=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aru=a(hr),arv=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],arw=[0,[17,0,0],a(m)],arx=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ary=a(J),arz=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],arA=a(z),arC=a(x),arF=a(y),arD=[0,[17,0,0],a(m)],arE=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],arl=[0,[15,0],a(t)],aq$=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ara=a("Flow_ast.Statement.VariableDeclaration.Declarator.id"),arb=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],arc=[0,[17,0,0],a(m)],ard=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],are=a(cZ),arf=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],arg=a(z),arh=a(x),ark=a(y),ari=[0,[17,0,0],a(m)],arj=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aq_=[0,[15,0],a(t)],aq7=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aq8=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aq9=[0,[17,0,[12,41,0]],a(r)],aq6=[0,[15,0],a(t)],aqZ=a(L),aqz=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aqA=a("Flow_ast.Statement.Try.block"),aqB=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aqC=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aqD=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aqE=[0,[17,0,[12,41,0]],a(r)],aqF=[0,[17,0,0],a(m)],aqG=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aqH=a(SH),aqI=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aqJ=a(z),aqK=a(x),aq5=a(y),aqL=[0,[17,0,0],a(m)],aqM=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aqN=a(RK),aqO=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aqP=a(z),aqQ=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aqR=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aqS=[0,[17,0,[12,41,0]],a(r)],aqT=a(x),aq4=a(y),aqU=[0,[17,0,0],a(m)],aqV=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aqW=a(J),aqX=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aqY=a(z),aq0=a(x),aq3=a(y),aq1=[0,[17,0,0],a(m)],aq2=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aqy=[0,[15,0],a(t)],aqs=a(L),aqb=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aqc=a("Flow_ast.Statement.Try.CatchClause.param"),aqd=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aqe=a(z),aqf=a(x),aqx=a(y),aqg=[0,[17,0,0],a(m)],aqh=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aqi=a(aF),aqj=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aqk=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aql=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aqm=[0,[17,0,[12,41,0]],a(r)],aqn=[0,[17,0,0],a(m)],aqo=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aqp=a(J),aqq=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aqr=a(z),aqt=a(x),aqw=a(y),aqu=[0,[17,0,0],a(m)],aqv=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aqa=[0,[15,0],a(t)],ap9=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],ap_=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],ap$=[0,[17,0,[12,41,0]],a(r)],ap8=[0,[15,0],a(t)],ap3=a(L),apV=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],apW=a("Flow_ast.Statement.Throw.argument"),apX=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],apY=[0,[17,0,0],a(m)],apZ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ap0=a(J),ap1=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ap2=a(z),ap4=a(x),ap7=a(y),ap5=[0,[17,0,0],a(m)],ap6=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],apU=[0,[15,0],a(t)],apK=a(L),apA=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],apB=a("Flow_ast.Statement.Return.argument"),apC=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],apD=a(z),apE=a(x),apT=a(y),apF=[0,[17,0,0],a(m)],apG=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],apH=a(J),apI=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],apJ=a(z),apL=a(x),apS=a(y),apM=[0,[17,0,0],a(m)],apN=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],apO=a("return_out"),apP=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],apQ=[0,[17,0,0],a(m)],apR=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],apz=[0,[15,0],a(t)],apq=a(L),apj=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],apb=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],apc=a("Flow_ast.Statement.Switch.discriminant"),apd=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ape=[0,[17,0,0],a(m)],apf=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],apg=a(Pt),aph=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],api=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],apk=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],apl=[0,[17,0,0],a(m)],apm=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],apn=a(J),apo=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],app=a(z),apr=a(x),apy=a(y),aps=[0,[17,0,0],a(m)],apt=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],apu=a("exhaustive_out"),apv=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],apw=[0,[17,0,0],a(m)],apx=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],apa=[0,[15,0],a(t)],ao6=a(L),aoZ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aoP=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aoQ=a("Flow_ast.Statement.Switch.Case.test"),aoR=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aoS=a(z),aoT=a(x),ao$=a(y),aoU=[0,[17,0,0],a(m)],aoV=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aoW=a(i$),aoX=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aoY=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],ao0=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],ao1=[0,[17,0,0],a(m)],ao2=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ao3=a(J),ao4=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ao5=a(z),ao7=a(x),ao_=a(y),ao8=[0,[17,0,0],a(m)],ao9=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aoO=[0,[15,0],a(t)],aoL=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aoM=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aoN=[0,[17,0,[12,41,0]],a(r)],aoK=[0,[15,0],a(t)],aoC=a(L),aoc=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aod=a("Flow_ast.Statement.OpaqueType.id"),aoe=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aof=[0,[17,0,0],a(m)],aog=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aoh=a(i1),aoi=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aoj=a(z),aok=a(x),aoJ=a(y),aol=[0,[17,0,0],a(m)],aom=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aon=a(Qs),aoo=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aop=a(z),aoq=a(x),aoI=a(y),aor=[0,[17,0,0],a(m)],aos=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aot=a(Sg),aou=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aov=a(z),aow=a(x),aoH=a(y),aox=[0,[17,0,0],a(m)],aoy=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aoz=a(J),aoA=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aoB=a(z),aoD=a(x),aoG=a(y),aoE=[0,[17,0,0],a(m)],aoF=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aob=[0,[15,0],a(t)],an7=a(L),anP=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],anQ=a("Flow_ast.Statement.TypeAlias.id"),anR=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],anS=[0,[17,0,0],a(m)],anT=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],anU=a(i1),anV=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],anW=a(z),anX=a(x),aoa=a(y),anY=[0,[17,0,0],a(m)],anZ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],an0=a(bB),an1=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],an2=[0,[17,0,0],a(m)],an3=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],an4=a(J),an5=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],an6=a(z),an8=a(x),an$=a(y),an9=[0,[17,0,0],a(m)],an_=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],anO=[0,[15,0],a(t)],anJ=a(L),anx=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],any=a("Flow_ast.Statement.With._object"),anz=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],anA=[0,[17,0,0],a(m)],anB=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],anC=a(aF),anD=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],anE=[0,[17,0,0],a(m)],anF=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],anG=a(J),anH=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],anI=a(z),anK=a(x),anN=a(y),anL=[0,[17,0,0],a(m)],anM=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],anw=[0,[15,0],a(t)],anr=a(L),ann=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ano=a("Flow_ast.Statement.Debugger.comments"),anp=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],anq=a(z),ans=a(x),anv=a(y),ant=[0,[17,0,0],a(m)],anu=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],anm=[0,[15,0],a(t)],ang=a(L),am8=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],am9=a("Flow_ast.Statement.Continue.label"),am_=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],am$=a(z),ana=a(x),anl=a(y),anb=[0,[17,0,0],a(m)],anc=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],and=a(J),ane=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],anf=a(z),anh=a(x),ank=a(y),ani=[0,[17,0,0],a(m)],anj=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],am7=[0,[15,0],a(t)],am1=a(L),amR=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],amS=a("Flow_ast.Statement.Break.label"),amT=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],amU=a(z),amV=a(x),am6=a(y),amW=[0,[17,0,0],a(m)],amX=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],amY=a(J),amZ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],am0=a(z),am2=a(x),am5=a(y),am3=[0,[17,0,0],a(m)],am4=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],amQ=[0,[15,0],a(t)],amL=a(L),amz=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],amA=a("Flow_ast.Statement.Labeled.label"),amB=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],amC=[0,[17,0,0],a(m)],amD=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],amE=a(aF),amF=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],amG=[0,[17,0,0],a(m)],amH=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],amI=a(J),amJ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],amK=a(z),amM=a(x),amP=a(y),amN=[0,[17,0,0],a(m)],amO=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],amy=[0,[15,0],a(t)],ams=a(L),ama=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],amb=a("Flow_ast.Statement.If.test"),amc=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],amd=[0,[17,0,0],a(m)],ame=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],amf=a(i$),amg=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],amh=[0,[17,0,0],a(m)],ami=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],amj=a(pL),amk=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aml=a(z),amm=a(x),amx=a(y),amn=[0,[17,0,0],a(m)],amo=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],amp=a(J),amq=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],amr=a(z),amt=a(x),amw=a(y),amu=[0,[17,0,0],a(m)],amv=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],al$=[0,[15,0],a(t)],al6=a(L),alY=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],alZ=a("Flow_ast.Statement.If.Alternate.body"),al0=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],al1=[0,[17,0,0],a(m)],al2=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],al3=a(J),al4=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],al5=a(z),al7=a(x),al_=a(y),al8=[0,[17,0,0],a(m)],al9=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],alX=[0,[15,0],a(t)],alU=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],alV=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],alW=[0,[17,0,[12,41,0]],a(r)],alT=[0,[15,0],a(t)],alN=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],alM=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],alO=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],alF=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],alB=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],alC=a("Flow_ast.Statement.Block.body"),alD=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],alE=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],alG=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],alH=[0,[17,0,0],a(m)],alI=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],alJ=a(J),alK=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],alL=a(z),alP=a(x),alS=a(y),alQ=[0,[17,0,0],a(m)],alR=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],alz=[0,[15,0],a(t)],alw=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Predicate.Declared"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Predicate.Declared@ ")],alx=[0,[17,0,[12,41,0]],a(r)],aly=a("Flow_ast.Type.Predicate.Inferred"),alv=[0,[15,0],a(t)],alq=a(L),ali=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],alj=a("Flow_ast.Type.Predicate.kind"),alk=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],all=[0,[17,0,0],a(m)],alm=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aln=a(J),alo=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],alp=a(z),alr=a(x),alu=a(y),als=[0,[17,0,0],a(m)],alt=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],alh=[0,[15,0],a(t)],ale=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],alf=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],alg=[0,[17,0,[12,41,0]],a(r)],alc=[0,[15,0],a(t)],ak8=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ak7=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],ak9=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],ak0=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],akW=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],akX=a("Flow_ast.Type.TypeArgs.arguments"),akY=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],akZ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],ak1=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],ak2=[0,[17,0,0],a(m)],ak3=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ak4=a(J),ak5=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ak6=a(z),ak_=a(x),alb=a(y),ak$=[0,[17,0,0],a(m)],ala=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],akV=[0,[15,0],a(t)],akS=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],akT=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],akU=[0,[17,0,[12,41,0]],a(r)],akQ=[0,[15,0],a(t)],akK=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],akJ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],akL=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],akC=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aky=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],akz=a("Flow_ast.Type.TypeParams.params"),akA=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],akB=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],akD=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],akE=[0,[17,0,0],a(m)],akF=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],akG=a(J),akH=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],akI=a(z),akM=a(x),akP=a(y),akN=[0,[17,0,0],a(m)],akO=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],akx=[0,[15,0],a(t)],aku=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],akv=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],akw=[0,[17,0,[12,41,0]],a(r)],akt=[0,[15,0],a(t)],aj8=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aj9=a("Flow_ast.Type.TypeParam.name"),aj_=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aj$=[0,[17,0,0],a(m)],aka=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],akb=a(QP),akc=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],akd=[0,[17,0,0],a(m)],ake=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],akf=a(bk),akg=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],akh=a(z),aki=a(x),aks=a(y),akj=[0,[17,0,0],a(m)],akk=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],akl=a(cI),akm=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],akn=a(z),ako=a(x),akr=a(y),akp=[0,[17,0,0],a(m)],akq=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aj7=[0,[15,0],a(t)],aj4=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aj5=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aj6=[0,[17,0,[12,41,0]],a(r)],aj3=[0,[15,0],a(t)],ajZ=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Missing"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Missing@ ")],aj0=[0,[17,0,[12,41,0]],a(r)],aj1=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Available"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Available@ ")],aj2=[0,[17,0,[12,41,0]],a(r)],ajY=[0,[15,0],a(t)],ajV=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],ajW=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],ajX=[0,[17,0,[12,41,0]],a(r)],ajU=[0,[15,0],a(t)],ajk=a(L),aje=a(L),ai_=a(L),ai4=a(L),aiY=a(L),aiS=a(L),aiM=a(L),aiG=a(L),aiA=a(L),aiu=a(L),aio=a(L),aim=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Any"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Any@ ")],ain=a(z),aip=a(x),air=a(y),aiq=[0,[17,0,[12,41,0]],a(r)],ais=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Mixed"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Mixed@ ")],ait=a(z),aiv=a(x),aix=a(y),aiw=[0,[17,0,[12,41,0]],a(r)],aiy=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Empty"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Empty@ ")],aiz=a(z),aiB=a(x),aiD=a(y),aiC=[0,[17,0,[12,41,0]],a(r)],aiE=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Void"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Void@ ")],aiF=a(z),aiH=a(x),aiJ=a(y),aiI=[0,[17,0,[12,41,0]],a(r)],aiK=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Null"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Null@ ")],aiL=a(z),aiN=a(x),aiP=a(y),aiO=[0,[17,0,[12,41,0]],a(r)],aiQ=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Number"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Number@ ")],aiR=a(z),aiT=a(x),aiV=a(y),aiU=[0,[17,0,[12,41,0]],a(r)],aiW=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.BigInt"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.BigInt@ ")],aiX=a(z),aiZ=a(x),ai1=a(y),ai0=[0,[17,0,[12,41,0]],a(r)],ai2=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.String"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.String@ ")],ai3=a(z),ai5=a(x),ai7=a(y),ai6=[0,[17,0,[12,41,0]],a(r)],ai8=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Boolean"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Boolean@ ")],ai9=a(z),ai$=a(x),ajb=a(y),aja=[0,[17,0,[12,41,0]],a(r)],ajc=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Symbol"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Symbol@ ")],ajd=a(z),ajf=a(x),ajh=a(y),ajg=[0,[17,0,[12,41,0]],a(r)],aji=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Exists"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Exists@ ")],ajj=a(z),ajl=a(x),ajn=a(y),ajm=[0,[17,0,[12,41,0]],a(r)],ajo=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Nullable"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Nullable@ ")],ajp=[0,[17,0,[12,41,0]],a(r)],ajq=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Function"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Function@ ")],ajr=[0,[17,0,[12,41,0]],a(r)],ajs=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Object"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Object@ ")],ajt=[0,[17,0,[12,41,0]],a(r)],aju=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Interface"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Interface@ ")],ajv=[0,[17,0,[12,41,0]],a(r)],ajw=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Array"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Array@ ")],ajx=[0,[17,0,[12,41,0]],a(r)],ajy=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Generic"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Generic@ ")],ajz=[0,[17,0,[12,41,0]],a(r)],ajA=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.IndexedAccess"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.IndexedAccess@ ")],ajB=[0,[17,0,[12,41,0]],a(r)],ajC=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.OptionalIndexedAccess"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.OptionalIndexedAccess@ ")],ajD=[0,[17,0,[12,41,0]],a(r)],ajE=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Union"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Union@ ")],ajF=[0,[17,0,[12,41,0]],a(r)],ajG=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Intersection"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Intersection@ ")],ajH=[0,[17,0,[12,41,0]],a(r)],ajI=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Typeof"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Typeof@ ")],ajJ=[0,[17,0,[12,41,0]],a(r)],ajK=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Tuple"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Tuple@ ")],ajL=[0,[17,0,[12,41,0]],a(r)],ajM=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.StringLiteral"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.StringLiteral@ ")],ajN=[0,[17,0,[12,41,0]],a(r)],ajO=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.NumberLiteral"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.NumberLiteral@ ")],ajP=[0,[17,0,[12,41,0]],a(r)],ajQ=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.BigIntLiteral"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.BigIntLiteral@ ")],ajR=[0,[17,0,[12,41,0]],a(r)],ajS=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.BooleanLiteral"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.BooleanLiteral@ ")],ajT=[0,[17,0,[12,41,0]],a(r)],ail=[0,[15,0],a(t)],aii=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aij=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aik=[0,[17,0,[12,41,0]],a(r)],aih=[0,[15,0],a(t)],aic=a(L),ah6=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ahZ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ah0=a("Flow_ast.Type.Intersection.types"),ah1=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ah2=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],ah3=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],ah4=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],ah5=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],ah7=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],ah8=[0,[17,0,[12,41,0]],a(r)],ah9=[0,[17,0,0],a(m)],ah_=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ah$=a(J),aia=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aib=a(z),aid=a(x),aig=a(y),aie=[0,[17,0,0],a(m)],aif=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],ahY=[0,[15,0],a(t)],ahT=a(L),ahL=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ahE=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ahF=a("Flow_ast.Type.Union.types"),ahG=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ahH=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],ahI=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],ahJ=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],ahK=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],ahM=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],ahN=[0,[17,0,[12,41,0]],a(r)],ahO=[0,[17,0,0],a(m)],ahP=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ahQ=a(J),ahR=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ahS=a(z),ahU=a(x),ahX=a(y),ahV=[0,[17,0,0],a(m)],ahW=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],ahD=[0,[15,0],a(t)],ahy=a(L),ahq=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ahr=a("Flow_ast.Type.Array.argument"),ahs=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aht=[0,[17,0,0],a(m)],ahu=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ahv=a(J),ahw=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ahx=a(z),ahz=a(x),ahC=a(y),ahA=[0,[17,0,0],a(m)],ahB=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],ahp=[0,[15,0],a(t)],ahk=a(L),ahd=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ag$=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aha=a("Flow_ast.Type.Tuple.types"),ahb=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ahc=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],ahe=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],ahf=[0,[17,0,0],a(m)],ahg=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ahh=a(J),ahi=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ahj=a(z),ahl=a(x),aho=a(y),ahm=[0,[17,0,0],a(m)],ahn=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],ag_=[0,[15,0],a(t)],ag5=a(L),agX=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],agY=a("Flow_ast.Type.Typeof.argument"),agZ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ag0=[0,[17,0,0],a(m)],ag1=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ag2=a(J),ag3=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ag4=a(z),ag6=a(x),ag9=a(y),ag7=[0,[17,0,0],a(m)],ag8=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],agW=[0,[15,0],a(t)],agT=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],agU=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],agV=[0,[17,0,[12,41,0]],a(r)],agS=[0,[15,0],a(t)],agJ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],agK=a("Flow_ast.Type.Typeof.Target.qualification"),agL=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],agM=[0,[17,0,0],a(m)],agN=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],agO=a(aO),agP=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],agQ=[0,[17,0,0],a(m)],agR=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],agI=[0,[15,0],a(t)],agE=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Typeof.Target.Unqualified"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Typeof.Target.Unqualified@ ")],agF=[0,[17,0,[12,41,0]],a(r)],agG=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Typeof.Target.Qualified"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Typeof.Target.Qualified@ ")],agH=[0,[17,0,[12,41,0]],a(r)],agD=[0,[15,0],a(t)],agy=a(L),agq=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],agr=a("Flow_ast.Type.Nullable.argument"),ags=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],agt=[0,[17,0,0],a(m)],agu=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],agv=a(J),agw=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],agx=a(z),agz=a(x),agC=a(y),agA=[0,[17,0,0],a(m)],agB=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],agp=[0,[15,0],a(t)],agk=a(L),aga=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],agb=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],agc=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],agd=[0,[17,0,[12,41,0]],a(r)],af1=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],af2=a("Flow_ast.Type.Interface.body"),af3=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],af4=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],af5=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],af6=[0,[17,0,[12,41,0]],a(r)],af7=[0,[17,0,0],a(m)],af8=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],af9=a(co),af_=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],af$=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],age=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],agf=[0,[17,0,0],a(m)],agg=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],agh=a(J),agi=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],agj=a(z),agl=a(x),ago=a(y),agm=[0,[17,0,0],a(m)],agn=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],af0=[0,[15,0],a(t)],afQ=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Object.Property"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Object.Property@ ")],afR=[0,[17,0,[12,41,0]],a(r)],afS=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Object.SpreadProperty"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Object.SpreadProperty@ ")],afT=[0,[17,0,[12,41,0]],a(r)],afU=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Object.Indexer"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Object.Indexer@ ")],afV=[0,[17,0,[12,41,0]],a(r)],afW=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Object.CallProperty"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Object.CallProperty@ ")],afX=[0,[17,0,[12,41,0]],a(r)],afY=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Object.InternalSlot"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Object.InternalSlot@ ")],afZ=[0,[17,0,[12,41,0]],a(r)],afP=[0,[15,0],a(t)],afJ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],afI=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],afK=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],afB=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],afn=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],afo=a("Flow_ast.Type.Object.exact"),afp=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],afq=[0,[9,0,0],a(at)],afr=[0,[17,0,0],a(m)],afs=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aft=a(Qc),afu=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],afv=[0,[9,0,0],a(at)],afw=[0,[17,0,0],a(m)],afx=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],afy=a(oh),afz=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],afA=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],afC=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],afD=[0,[17,0,0],a(m)],afE=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],afF=a(J),afG=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],afH=a(z),afL=a(x),afO=a(y),afM=[0,[17,0,0],a(m)],afN=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],afm=[0,[15,0],a(t)],afh=a(L),aeS=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aeT=a("Flow_ast.Type.Object.InternalSlot.id"),aeU=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aeV=[0,[17,0,0],a(m)],aeW=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aeX=a(ax),aeY=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aeZ=[0,[17,0,0],a(m)],ae0=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ae1=a(bK),ae2=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ae3=[0,[9,0,0],a(at)],ae4=[0,[17,0,0],a(m)],ae5=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ae6=a(ba),ae7=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ae8=[0,[9,0,0],a(at)],ae9=[0,[17,0,0],a(m)],ae_=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ae$=a(RZ),afa=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],afb=[0,[9,0,0],a(at)],afc=[0,[17,0,0],a(m)],afd=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],afe=a(J),aff=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],afg=a(z),afi=a(x),afl=a(y),afj=[0,[17,0,0],a(m)],afk=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aeR=[0,[15,0],a(t)],aeO=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aeP=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aeQ=[0,[17,0,[12,41,0]],a(r)],aeN=[0,[15,0],a(t)],aeI=a(L),aes=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aet=a("Flow_ast.Type.Object.CallProperty.value"),aeu=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aev=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aew=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aex=[0,[17,0,[12,41,0]],a(r)],aey=[0,[17,0,0],a(m)],aez=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aeA=a(ba),aeB=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aeC=[0,[9,0,0],a(at)],aeD=[0,[17,0,0],a(m)],aeE=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aeF=a(J),aeG=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aeH=a(z),aeJ=a(x),aeM=a(y),aeK=[0,[17,0,0],a(m)],aeL=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aer=[0,[15,0],a(t)],aeo=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aep=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aeq=[0,[17,0,[12,41,0]],a(r)],aen=[0,[15,0],a(t)],aek=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],ael=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aem=[0,[17,0,[12,41,0]],a(r)],aej=[0,[15,0],a(t)],aec=a(L),adL=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],adM=a("Flow_ast.Type.Object.Indexer.id"),adN=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],adO=a(z),adP=a(x),aei=a(y),adQ=[0,[17,0,0],a(m)],adR=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],adS=a(cy),adT=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],adU=[0,[17,0,0],a(m)],adV=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],adW=a(ax),adX=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],adY=[0,[17,0,0],a(m)],adZ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ad0=a(ba),ad1=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ad2=[0,[9,0,0],a(at)],ad3=[0,[17,0,0],a(m)],ad4=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ad5=a(bk),ad6=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ad7=a(z),ad8=a(x),aeh=a(y),ad9=[0,[17,0,0],a(m)],ad_=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ad$=a(J),aea=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aeb=a(z),aed=a(x),aeg=a(y),aee=[0,[17,0,0],a(m)],aef=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],adK=[0,[15,0],a(t)],adF=a(L),adx=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ady=a("Flow_ast.Type.Object.SpreadProperty.argument"),adz=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],adA=[0,[17,0,0],a(m)],adB=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],adC=a(J),adD=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],adE=a(z),adG=a(x),adJ=a(y),adH=[0,[17,0,0],a(m)],adI=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],adw=[0,[15,0],a(t)],adt=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],adu=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],adv=[0,[17,0,[12,41,0]],a(r)],ads=[0,[15,0],a(t)],adg=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Object.Property.Init"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Object.Property.Init@ ")],adh=[0,[17,0,[12,41,0]],a(r)],adi=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Object.Property.Get"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Object.Property.Get@ ")],adj=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],adk=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],adl=[0,[17,0,[12,41,0]],a(r)],adm=[0,[17,0,[12,41,0]],a(r)],adn=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Object.Property.Set"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Object.Property.Set@ ")],ado=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],adp=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],adq=[0,[17,0,[12,41,0]],a(r)],adr=[0,[17,0,[12,41,0]],a(r)],adf=[0,[15,0],a(t)],ac$=a(L),acz=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],acA=a("Flow_ast.Type.Object.Property.key"),acB=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],acC=[0,[17,0,0],a(m)],acD=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],acE=a(ax),acF=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],acG=[0,[17,0,0],a(m)],acH=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],acI=a(bK),acJ=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],acK=[0,[9,0,0],a(at)],acL=[0,[17,0,0],a(m)],acM=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],acN=a(ba),acO=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],acP=[0,[9,0,0],a(at)],acQ=[0,[17,0,0],a(m)],acR=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],acS=a(oP),acT=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],acU=[0,[9,0,0],a(at)],acV=[0,[17,0,0],a(m)],acW=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],acX=a(RZ),acY=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],acZ=[0,[9,0,0],a(at)],ac0=[0,[17,0,0],a(m)],ac1=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ac2=a(bk),ac3=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ac4=a(z),ac5=a(x),ade=a(y),ac6=[0,[17,0,0],a(m)],ac7=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ac8=a(J),ac9=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ac_=a(z),ada=a(x),add=a(y),adb=[0,[17,0,0],a(m)],adc=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],acy=[0,[15,0],a(t)],acv=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],acw=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],acx=[0,[17,0,[12,41,0]],a(r)],acu=[0,[15,0],a(t)],ack=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],acl=a("Flow_ast.Type.OptionalIndexedAccess.indexed_access"),acm=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],acn=[0,[17,0,0],a(m)],aco=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],acp=a(bK),acq=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],acr=[0,[9,0,0],a(at)],acs=[0,[17,0,0],a(m)],act=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],acj=[0,[15,0],a(t)],ace=a(L),ab4=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ab5=a("Flow_ast.Type.IndexedAccess._object"),ab6=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ab7=[0,[17,0,0],a(m)],ab8=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ab9=a("index"),ab_=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ab$=[0,[17,0,0],a(m)],aca=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],acb=a(J),acc=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],acd=a(z),acf=a(x),aci=a(y),acg=[0,[17,0,0],a(m)],ach=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],ab3=[0,[15,0],a(t)],abX=a(L),abJ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],abK=a("Flow_ast.Type.Generic.id"),abL=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],abM=[0,[17,0,0],a(m)],abN=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],abO=a(kx),abP=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],abQ=a(z),abR=a(x),ab2=a(y),abS=[0,[17,0,0],a(m)],abT=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],abU=a(J),abV=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],abW=a(z),abY=a(x),ab1=a(y),abZ=[0,[17,0,0],a(m)],ab0=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],abI=[0,[15,0],a(t)],abz=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],abA=a("Flow_ast.Type.Generic.Identifier.qualification"),abB=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],abC=[0,[17,0,0],a(m)],abD=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],abE=a(aO),abF=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],abG=[0,[17,0,0],a(m)],abH=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aby=[0,[15,0],a(t)],abv=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],abw=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],abx=[0,[17,0,[12,41,0]],a(r)],abu=[0,[15,0],a(t)],abq=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Generic.Identifier.Unqualified"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Generic.Identifier.Unqualified@ ")],abr=[0,[17,0,[12,41,0]],a(r)],abs=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Type.Generic.Identifier.Qualified"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Type.Generic.Identifier.Qualified@ ")],abt=[0,[17,0,[12,41,0]],a(r)],abp=[0,[15,0],a(t)],abj=a(L),aa3=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aa4=a("Flow_ast.Type.Function.tparams"),aa5=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aa6=a(z),aa7=a(x),abo=a(y),aa8=[0,[17,0,0],a(m)],aa9=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aa_=a(c1),aa$=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aba=[0,[17,0,0],a(m)],abb=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],abc=a(bV),abd=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],abe=[0,[17,0,0],a(m)],abf=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],abg=a(J),abh=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],abi=a(z),abk=a(x),abn=a(y),abl=[0,[17,0,0],a(m)],abm=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aa2=[0,[15,0],a(t)],aaU=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aaT=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aaV=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aaG=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aaw=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aax=a("Flow_ast.Type.Function.Params.this_"),aay=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aaz=a(z),aaA=a(x),aa1=a(y),aaB=[0,[17,0,0],a(m)],aaC=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aaD=a(c1),aaE=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aaF=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],aaH=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],aaI=[0,[17,0,0],a(m)],aaJ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aaK=a(xG),aaL=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aaM=a(z),aaN=a(x),aa0=a(y),aaO=[0,[17,0,0],a(m)],aaP=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aaQ=a(J),aaR=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aaS=a(z),aaW=a(x),aaZ=a(y),aaX=[0,[17,0,0],a(m)],aaY=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aav=[0,[15,0],a(t)],aas=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aat=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aau=[0,[17,0,[12,41,0]],a(r)],aar=[0,[15,0],a(t)],aam=a(L),aae=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],aaf=a("Flow_ast.Type.Function.ThisParam.annot"),aag=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aah=[0,[17,0,0],a(m)],aai=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],aaj=a(J),aak=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],aal=a(z),aan=a(x),aaq=a(y),aao=[0,[17,0,0],a(m)],aap=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],aad=[0,[15,0],a(t)],aaa=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],aab=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],aac=[0,[17,0,[12,41,0]],a(r)],$$=[0,[15,0],a(t)],$6=a(L),$Y=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],$Z=a("Flow_ast.Type.Function.RestParam.argument"),$0=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],$1=[0,[17,0,0],a(m)],$2=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],$3=a(J),$4=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],$5=a(z),$7=a(x),$_=a(y),$8=[0,[17,0,0],a(m)],$9=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],$X=[0,[15,0],a(t)],$U=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],$V=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],$W=[0,[17,0,[12,41,0]],a(r)],$T=[0,[15,0],a(t)],$C=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],$D=a("Flow_ast.Type.Function.Param.name"),$E=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],$F=a(z),$G=a(x),$S=a(y),$H=[0,[17,0,0],a(m)],$I=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],$J=a(hq),$K=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],$L=[0,[17,0,0],a(m)],$M=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],$N=a(bK),$O=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],$P=[0,[9,0,0],a(at)],$Q=[0,[17,0,0],a(m)],$R=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],$B=[0,[15,0],a(t)],$y=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],$z=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],$A=[0,[17,0,[12,41,0]],a(r)],$w=[0,[15,0],a(t)],$r=a(L),$j=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],$k=a("Flow_ast.ComputedKey.expression"),$l=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],$m=[0,[17,0,0],a(m)],$n=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],$o=a(J),$p=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],$q=a(z),$s=a(x),$v=a(y),$t=[0,[17,0,0],a(m)],$u=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],$i=[0,[15,0],a(t)],$f=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],$g=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],$h=[0,[17,0,[12,41,0]],a(r)],$d=[0,[15,0],a(t)],__=a(L),_2=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],_3=a("Flow_ast.Variance.kind"),_4=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],_5=[0,[17,0,0],a(m)],_6=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],_7=a(J),_8=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],_9=a(z),_$=a(x),$c=a(y),$a=[0,[17,0,0],a(m)],$b=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],_1=[0,[15,0],a(t)],_Z=a("Flow_ast.Variance.Minus"),_0=a("Flow_ast.Variance.Plus"),_Y=[0,[15,0],a(t)],_V=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],_W=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],_X=[0,[17,0,[12,41,0]],a(r)],_T=[0,[15,0],a(t)],_O=a(L),_F=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],_G=a("Flow_ast.BooleanLiteral.value"),_H=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],_I=[0,[9,0,0],a(at)],_J=[0,[17,0,0],a(m)],_K=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],_L=a(J),_M=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],_N=a(z),_P=a(x),_S=a(y),_Q=[0,[17,0,0],a(m)],_R=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],_D=[0,[15,0],a(t)],_y=a(L),_k=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],_l=a("Flow_ast.BigIntLiteral.approx_value"),_m=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],_n=[0,[8,[0,0,5],0,0,0],a(qR)],_o=[0,[17,0,0],a(m)],_p=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],_q=a(ih),_r=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],_s=[0,[3,0,0],a(a1)],_t=[0,[17,0,0],a(m)],_u=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],_v=a(J),_w=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],_x=a(z),_z=a(x),_C=a(y),_A=[0,[17,0,0],a(m)],_B=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],_i=[0,[15,0],a(t)],_d=a(L),Z1=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],Z2=a("Flow_ast.NumberLiteral.value"),Z3=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],Z4=[0,[8,[0,0,5],0,0,0],a(qR)],Z5=[0,[17,0,0],a(m)],Z6=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],Z7=a(b7),Z8=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],Z9=[0,[3,0,0],a(a1)],Z_=[0,[17,0,0],a(m)],Z$=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],_a=a(J),_b=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],_c=a(z),_e=a(x),_h=a(y),_f=[0,[17,0,0],a(m)],_g=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],ZZ=[0,[15,0],a(t)],ZU=a(L),ZG=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],ZH=a("Flow_ast.StringLiteral.value"),ZI=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ZJ=[0,[3,0,0],a(a1)],ZK=[0,[17,0,0],a(m)],ZL=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ZM=a(b7),ZN=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ZO=[0,[3,0,0],a(a1)],ZP=[0,[17,0,0],a(m)],ZQ=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],ZR=a(J),ZS=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],ZT=a(z),ZV=a(x),ZY=a(y),ZW=[0,[17,0,0],a(m)],ZX=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],ZE=[0,[15,0],a(t)],Zp=a("Flow_ast.Literal.Null"),Zq=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Literal.String"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Literal.String@ ")],Zr=[0,[3,0,0],a(a1)],Zs=[0,[17,0,[12,41,0]],a(r)],Zt=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Literal.Boolean"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Literal.Boolean@ ")],Zu=[0,[9,0,0],a(at)],Zv=[0,[17,0,[12,41,0]],a(r)],Zw=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Literal.Number"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Literal.Number@ ")],Zx=[0,[8,[0,0,5],0,0,0],a(qR)],Zy=[0,[17,0,[12,41,0]],a(r)],Zz=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Literal.BigInt"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Literal.BigInt@ ")],ZA=[0,[8,[0,0,5],0,0,0],a(qR)],ZB=[0,[17,0,[12,41,0]],a(r)],ZC=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("Flow_ast.Literal.RegExp"),[17,[0,a(e),1,0],0]]]],a("(@[<2>Flow_ast.Literal.RegExp@ ")],ZD=[0,[17,0,[12,41,0]],a(r)],Zo=[0,[15,0],a(t)],Zj=a(L),Y8=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],Y9=a("Flow_ast.Literal.value"),Y_=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],Y$=[0,[17,0,0],a(m)],Za=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],Zb=a(b7),Zc=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],Zd=[0,[3,0,0],a(a1)],Ze=[0,[17,0,0],a(m)],Zf=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],Zg=a(J),Zh=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],Zi=a(z),Zk=a(x),Zn=a(y),Zl=[0,[17,0,0],a(m)],Zm=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],YW=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],YX=a("Flow_ast.Literal.RegExp.pattern"),YY=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],YZ=[0,[3,0,0],a(a1)],Y0=[0,[17,0,0],a(m)],Y1=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],Y2=a(Rv),Y3=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],Y4=[0,[3,0,0],a(a1)],Y5=[0,[17,0,0],a(m)],Y6=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],Y7=[0,[15,0],a(t)],YU=[0,[15,0],a(t)],YP=a(L),YG=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],YH=a("Flow_ast.PrivateName.name"),YI=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],YJ=[0,[3,0,0],a(a1)],YK=[0,[17,0,0],a(m)],YL=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],YM=a(J),YN=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],YO=a(z),YQ=a(x),YT=a(y),YR=[0,[17,0,0],a(m)],YS=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],YF=[0,[15,0],a(t)],YC=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],YD=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],YE=[0,[17,0,[12,41,0]],a(r)],YA=[0,[15,0],a(t)],Yv=a(L),Ym=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],Yn=a("Flow_ast.Identifier.name"),Yo=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],Yp=[0,[3,0,0],a(a1)],Yq=[0,[17,0,0],a(m)],Yr=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],Ys=a(J),Yt=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],Yu=a(z),Yw=a(x),Yz=a(y),Yx=[0,[17,0,0],a(m)],Yy=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],Yl=[0,[15,0],a(t)],Yi=[0,[12,40,[18,[1,[0,0,a(i)]],0]],a(N)],Yj=[0,[12,44,[17,[0,a(e),1,0],0]],a(M)],Yk=[0,[17,0,[12,41,0]],a(r)],Yg=[0,[15,0],a(t)],X_=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],X3=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],XZ=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],X0=a("Flow_ast.Syntax.leading"),X1=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],X2=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],X4=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],X5=[0,[17,0,0],a(m)],X6=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],X7=a("trailing"),X8=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],X9=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,91,0]],a(ac)],X$=[0,[17,[0,a($),0,0],[12,93,[17,0,0]]],a(ad)],Ya=[0,[17,0,0],a(m)],Yb=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],Yc=a("internal"),Yd=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],Ye=[0,[17,0,0],a(m)],Yf=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],Xm=[0,[0,0,0]],Xn=[0,a(bp),21,2],Xo=[0,[0,0,0,0,0]],Xp=[0,a(bp),32,2],Xq=[0,[0,0,0,0,0]],Xr=[0,a(bp),43,2],Xs=[0,[0,[0,[0,0,0]],0,0,0,0]],Xt=[0,a(bp),70,2],Xu=[0,[0,0,0]],Xv=[0,a(bp),80,2],Xw=[0,[0,0,0]],Xx=[0,a(bp),90,2],Xy=[0,[0,0,0]],Xz=[0,a(bp),cm,2],XA=[0,[0,0,0]],XB=[0,a(bp),a3,2],XC=[0,[0,0,0,0,0,0,0]],XD=[0,a(bp),D,2],XE=[0,[0,0,0,0,0]],XF=[0,a(bp),Qv,2],XG=[0,[0,[0,[0,[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],0,0,0,0,0,0,0,0,[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0,0,0]]]],XH=[0,a(bp),485,2],XI=[0,[0,[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0]],[0,[0,[0,[0,0,0,0,0]],0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],0,0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0]],[0,[0,0,0]],0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],0,0,0,0,0,0]],XJ=[0,a(bp),Sd,2],XK=[0,[0,[0,[0,[0,[0,0,0,0,0]],0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],0,0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],0,0,[0,[0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],0,0,0,0]],XL=[0,a(bp),1460,2],XM=[0,[0,[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0,0,0]],0,0,[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],0,0,0,0,0,0,0,0]],XN=[0,a(bp),1604,2],XO=[0,[0,[0,[0,0,0,0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],0,0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0,0,0]],[0,[0,0,0]],0,0,0,0]],XP=[0,a(bp),1689,2],XQ=[0,[0,0,0,0,0,0,0]],XR=[0,a(bp),1705,2],XS=[0,[0,[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0,0,0]],[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],0,0]],XT=[0,a(bp),1828,2],XU=[0,[0,[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],0,0,0,0]],XV=[0,a(bp),1895,2],XW=[0,[0,0,0,0,0]],XX=[0,a(bp),1907,2],Yh=[0,[0,0,0]],YB=[0,[0,0,0,0,0]],YV=[0,[0,0,0,0,0]],ZF=[0,[0,[0,[0,0,0]],0,0,0,0]],Z0=[0,[0,0,0]],_j=[0,[0,0,0]],_E=[0,[0,0,0]],_U=[0,[0,0,0]],$e=[0,[0,0,0,0,0,0,0]],$x=[0,[0,0,0,0,0]],alA=[0,[0,[0,[0,[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],0,0,0,0,0,0,0,0,[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0,0,0]]]],aFe=[0,[0,[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0]],[0,[0,[0,[0,0,0,0,0]],0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],0,0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0]],[0,[0,0,0]],0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],0,0,0,0,0,0]],aSl=[0,[0,[0,[0,[0,[0,0,0,0,0]],0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],0,0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],0,0,[0,[0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],0,0,0,0]],aWt=[0,[0,[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],[0,[0,0,0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0,0,0]],0,0,[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0]],0,0,0,0,0,0,0,0]],aYX=[0,[0,[0,[0,0,0,0,0]],[0,[0,[0,[0,0,0,0,0,0,0]],0,0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0,0,0]],[0,[0,0,0]],0,0,0,0]],aZj=[0,[0,0,0,0,0,0,0]],a3O=[0,[0,[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,[0,[0,0,0,0,0]],0,0,0,0]],[0,[0,0,0,0,0,0,0]],[0,[0,0,0,0,0]],0,0]],a6e=[0,[0,[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],[0,[0,0,0,0,0]],0,0,0,0]],a6H=[0,[0,0,0,0,0]],a6T=[0,1],a6S=[0,0],a6R=[0,2],a6Q=[0,0],a6P=[0,1],a6O=[0,1],a6N=[0,1],a6M=[0,1],a6L=[0,1],a6K=[0,0,0],a6J=[0,0,0],a6I=[0,a(br),a(fx),a(gC),a(ez),a(bk),a(f6),a(gO),a(de),a(fT),a(dt),a(gr),a(d_),a(ex),a(fW),a(e6),a(eE),a(dE),a(dS),a(fJ),a(gh),a(gV),a(gq),a(gc),a(fz),a(fw),a(fH),a(eD),a(fg),a(fv),a(cs),a(gs),a(dR),a(du),a(gD),a(dN),a(go),a(gw),a(cn),a(f7),a(dj),a(gJ),a(fy),a(eT),a(d1),a(dP),a(gN),a(bV),a(dI),a(gk),a(e0),a(bW),a(gb),a(et),a(ef),a(eF),a(f_),a(ek),a(el),a(gY),a(fm),a(gU),a(fO),a(dc),a(d6),a(gl),a(eU),a(es),a(dL),a(gR),a(cL),a(fj),a(ew),a(dU),a(gd),a(eu),a(f8),a(f$),a(dr),a(eC),a(fM),a(eQ),a(dW),a(fQ),a(gQ),a(dp),a(fc),a(gT),a(d9),a(fV),a(gF),a(ev),a(gM),a(fY),a(g0),a(dd),a(dZ),a(d3),a(eG),a(fA),a(e_),a(dA),a(fN),a(eL),a(eg),a(gG),a(d2),a(eN),a(ep),a(e2),a(e$),a(er),a(d$),a(dY),a(dF),a(gz),a(dG),a(gB),a(fn),a(ey),a(d4),a(fB),a(eY),a(g2),a(dM),a(eq),a(fd),a(d7),a(eP),a(e7),a(dz),a(gv),a(eW),a(bT),a(dl),a(gI),a(dk),a(dB),a(fu),a(e1),a(bJ),a(dg),a(fh),a(f0),a(cJ),a(dO),a(d5),a(df),a(ck),a(dH),a(fe),a(f1),a(ed),a(fF),a(gp),a(eh),a(gP),a(dX),a(gW),a(f5),a(gH),a(gL),a(gg),a(d0),a(eA),a(fq),a(g4),a(e5),a(fG),a(gf),a(eb),a(f4),a(eJ),a(gj),a(fS),a(dT),a(dx),a(fC),a(bD),a(en),a(fi),a(ga),a(f2),a(dn),a(eB),a(gZ),a(eK),a(ea),a(fU),a(dQ),a(eI),a(fl),a(gE),a(ei),a(dq),a(ff),a(b5),a(fs),a(ge),a(gK),a(gt),a(dw),a(em),a(fP),a(di),a(dm),a(fL),a(cj),a(cq),a(eo),a(gm),a(gS),a(dv),a(dV),a(gu),a(dK),a(fD),a(eO),a(ee),a(fX),a(f3),a(fa),a(gX),a(d8),a(fZ),a(dh),a(gn),a(ec),a(eS),a(eZ),a(dJ),a(ft),a(fI),a(eR),a(cg),a(e8),a(cY),a(dC),a(eX),a(g1),a(eH),a(fR),a(fk),a(ej),a(fb),a(gy),a(dD)],a6U=[0,a(eT),a(dM),a(eh),a(dO),a(eR),a(gU),a(ev),a(gQ),a(dF),a(gv),a(gc),a(cn),a(eu),a(en),a(d8),a(d4),a(gM),a(eY),a(dq),a(eI),a(fx),a(g4),a(d2),a(gF),a(df),a(ei),a(g0),a(cJ),a(ez),a(eJ),a(el),a(fP),a(dJ),a(gP),a(eZ),a(fn),a(gZ),a(fe),a(d6),a(e5),a(gw),a(eH),a(dp),a(fh),a(gJ),a(ff),a(gG),a(fY),a(f3),a(gu),a(fj),a(ef),a(fQ),a(et),a(er),a(eO),a(f$),a(bW),a(eQ),a(ed),a(dd),a(gz),a(ey),a(d5),a(fN),a(eo),a(fw),a(fU),a(dW),a(d$),a(gS),a(eL),a(gp),a(ek),a(fb),a(dw),a(dn),a(eG),a(gR),a(gy),a(ft),a(gN),a(bk),a(gb),a(eE),a(dg),a(g1),a(fq),a(fv),a(d7),a(gX),a(d9),a(go),a(b5),a(eb),a(fz),a(br),a(fg),a(dm),a(d_),a(es),a(dI),a(gr),a(dV),a(di),a(de),a(fB),a(eF),a(dz),a(fl),a(dT),a(f8),a(fi),a(eg),a(eU),a(gj),a(dS),a(eD),a(f6),a(d1),a(dE),a(dt),a(ee),a(fG),a(dK),a(e_),a(fF),a(fT),a(dv),a(fV),a(ep),a(fR),a(fA),a(gn),a(fa),a(dl),a(gl),a(ew),a(e2),a(d3),a(bJ),a(bV),a(e8),a(e6),a(fJ),a(f7),a(dc),a(cs),a(cj),a(f0),a(gd),a(fC),a(g2),a(cL),a(gH),a(gE),a(gI),a(fD),a(dX),a(dA),a(eq),a(ck),a(f1),a(fW),a(dQ),a(e0),a(d0),a(fu),a(ea),a(f2),a(gT),a(dP),a(dk),a(eC),a(gY),a(fH),a(fM),a(gh),a(fI),a(gt),a(ec),a(em),a(dC),a(eP),a(dN),a(dH),a(gk),a(e1),a(dh),a(fc),a(gB),a(fX),a(eW),a(fs),a(gq),a(dD),a(gO),a(eS),a(gV),a(ge),a(dG),a(fd),a(gm),a(eN),a(fm),a(e7),a(fS),a(e$),a(du),a(fk),a(fO),a(eX),a(bD),a(dL),a(dx),a(gL),a(gg),a(fy),a(cq),a(gW),a(f_),a(eB),a(gK),a(dR),a(gD),a(dj),a(eA),a(ga),a(ex),a(gf),a(dU),a(cY),a(dB),a(fZ),a(dY),a(dr),a(f5),a(fL),a(eK),a(cg),a(ej),a(bT),a(gC),a(f4),a(gs),a(dZ)],a6V=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("File_key.LibFile"),[17,[0,a(e),1,0],0]]]],a("(@[<2>File_key.LibFile@ ")],a6W=[0,[3,0,0],a(a1)],a6X=[0,[17,0,[12,41,0]],a(r)],a6Y=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("File_key.SourceFile"),[17,[0,a(e),1,0],0]]]],a("(@[<2>File_key.SourceFile@ ")],a6Z=[0,[3,0,0],a(a1)],a60=[0,[17,0,[12,41,0]],a(r)],a61=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("File_key.JsonFile"),[17,[0,a(e),1,0],0]]]],a("(@[<2>File_key.JsonFile@ ")],a62=[0,[3,0,0],a(a1)],a63=[0,[17,0,[12,41,0]],a(r)],a64=[0,[12,40,[18,[1,[0,[11,a(f),0],a(f)]],[11,a("File_key.ResourceFile"),[17,[0,a(e),1,0],0]]]],a("(@[<2>File_key.ResourceFile@ ")],a65=[0,[3,0,0],a(a1)],a66=[0,[17,0,[12,41,0]],a(r)],a67=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a68=a("Loc.line"),a69=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a6_=[0,[4,0,0,0,0],a(kr)],a6$=[0,[17,0,0],a(m)],a7a=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a7b=a(kI),a7c=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a7d=[0,[4,0,0,0,0],a(kr)],a7e=[0,[17,0,0],a(m)],a7f=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a7x=[0,[15,0],a(t)],a7h=[0,[18,[1,[0,[11,a(f),0],a(f)]],[11,a(G),0]],a(H)],a7i=a("Loc.source"),a7j=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a7k=a(z),a7l=a(x),a7w=a(y),a7m=[0,[17,0,0],a(m)],a7n=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a7o=a(AD),a7p=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a7q=[0,[17,0,0],a(m)],a7r=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a7s=a("_end"),a7t=[0,[18,[1,[0,0,a(i)]],[2,0,[11,a(n),[17,[0,a(e),1,0],0]]]],a(o)],a7u=[0,[17,0,0],a(m)],a7v=[0,[17,[0,a(e),1,0],[12,D,[17,0,0]]],a(F)],a7y=[0,a(dD),a(gy),a(fb),a(ej),a(fk),a(fR),a(eH),a(g1),a(eX),a(dC),a(cY),a(e8),a(cg),a(eR),a(fI),a(ft),a(dJ),a(eZ),a(eS),a(ec),a(gn),a(dh),a(fZ),a(d8),a(gX),a(fa),a(f3),a(fX),a(ee),a(eO),a(fD),a(dK),a(gu),a(dV),a(dv),a(gS),a(gm),a(eo),a(cq),a(cj),a(fL),a(dm),a(di),a(fP),a(em),a(dw),a(gt),a(gK),a(ge),a(fs),a(b5),a(ff),a(dq),a(ei),a(gE),a(fl),a(eI),a(dQ),a(fU),a(ea),a(eK),a(gZ),a(eB),a(dn),a(f2),a(ga),a(fi),a(en),a(bD),a(fC),a(dx),a(dT),a(fS),a(gj),a(eJ),a(f4),a(eb),a(gf),a(fG),a(e5),a(g4),a(fq),a(eA),a(d0),a(gg),a(gL),a(gH),a(f5),a(gW),a(dX),a(gP),a(eh),a(gp),a(fF),a(ed),a(f1),a(fe),a(dH),a(ck),a(df),a(d5),a(dO),a(cJ),a(f0),a(fh),a(dg),a(bJ),a(e1),a(fu),a(dB),a(dk),a(gI),a(dl),a(bT),a(eW),a(gv),a(dz),a(e7),a(eP),a(d7),a(fd),a(eq),a(dM),a(g2),a(eY),a(fB),a(d4),a(ey),a(fn),a(gB),a(dG),a(gz),a(dF),a(dY),a(d$),a(er),a(e$),a(e2),a(ep),a(eN),a(d2),a(gG),a(eg),a(eL),a(fN),a(dA),a(e_),a(fA),a(eG),a(d3),a(dZ),a(dd),a(g0),a(fY),a(gM),a(ev),a(gF),a(fV),a(d9),a(gT),a(fc),a(dp),a(gQ),a(fQ),a(dW),a(eQ),a(fM),a(eC),a(dr),a(f$),a(f8),a(eu),a(gd),a(dU),a(ew),a(fj),a(cL),a(gR),a(dL),a(es),a(eU),a(gl),a(d6),a(dc),a(fO),a(gU),a(fm),a(gY),a(el),a(ek),a(f_),a(eF),a(ef),a(et),a(gb),a(bW),a(e0),a(gk),a(dI),a(bV),a(gN),a(dP),a(d1),a(eT),a(fy),a(gJ),a(dj),a(f7),a(cn),a(gw),a(go),a(dN),a(gD),a(du),a(dR),a(gs),a(cs),a(fv),a(fg),a(eD),a(fH),a(fw),a(fz),a(gc),a(gq),a(gV),a(gh),a(fJ),a(dS),a(dE),a(eE),a(e6),a(fW),a(ex),a(d_),a(gr),a(dt),a(fT),a(de),a(gO),a(f6),a(bk),a(ez),a(gC),a(fx),a(br)],a7z=[0,a(br),a(fx),a(gC),a(ez),a(bk),a(f6),a(gO),a(de),a(fT),a(dt),a(gr),a(d_),a(ex),a(fW),a(e6),a(eE),a(dE),a(dS),a(fJ),a(gh),a(gV),a(gq),a(gc),a(fz),a(fw),a(fH),a(eD),a(fg),a(fv),a(cs),a(gs),a(dR),a(du),a(gD),a(dN),a(go),a(gw),a(cn),a(f7),a(dj),a(gJ),a(fy),a(eT),a(d1),a(dP),a(gN),a(bV),a(dI),a(gk),a(e0),a(bW),a(gb),a(et),a(ef),a(eF),a(f_),a(ek),a(el),a(gY),a(fm),a(gU),a(fO),a(dc),a(d6),a(gl),a(eU),a(es),a(dL),a(gR),a(cL),a(fj),a(ew),a(dU),a(gd),a(eu),a(f8),a(f$),a(dr),a(eC),a(fM),a(eQ),a(dW),a(fQ),a(gQ),a(dp),a(fc),a(gT),a(d9),a(fV),a(gF),a(ev),a(gM),a(fY),a(g0),a(dd),a(dZ),a(d3),a(eG),a(fA),a(e_),a(dA),a(fN),a(eL),a(eg),a(gG),a(d2),a(eN),a(ep),a(e2),a(e$),a(er),a(d$),a(dY),a(dF),a(gz),a(dG),a(gB),a(fn),a(ey),a(d4),a(fB),a(eY),a(g2),a(dM),a(eq),a(fd),a(d7),a(eP),a(e7),a(dz),a(gv),a(eW),a(bT),a(dl),a(gI),a(dk),a(dB),a(fu),a(e1),a(bJ),a(dg),a(fh),a(f0),a(cJ),a(dO),a(d5),a(df),a(ck),a(dH),a(fe),a(f1),a(ed),a(fF),a(gp),a(eh),a(gP),a(dX),a(gW),a(f5),a(gH),a(gL),a(gg),a(d0),a(eA),a(fq),a(g4),a(e5),a(fG),a(gf),a(eb),a(f4),a(eJ),a(gj),a(fS),a(dT),a(dx),a(fC),a(bD),a(en),a(fi),a(ga),a(f2),a(dn),a(eB),a(gZ),a(eK),a(ea),a(fU),a(dQ),a(eI),a(fl),a(gE),a(ei),a(dq),a(ff),a(b5),a(fs),a(ge),a(gK),a(gt),a(dw),a(em),a(fP),a(di),a(dm),a(fL),a(cj),a(cq),a(eo),a(gm),a(gS),a(dv),a(dV),a(gu),a(dK),a(fD),a(eO),a(ee),a(fX),a(f3),a(fa),a(gX),a(d8),a(fZ),a(dh),a(gn),a(ec),a(eS),a(eZ),a(dJ),a(ft),a(fI),a(eR),a(cg),a(e8),a(cY),a(dC),a(eX),a(g1),a(eH),a(fR),a(fk),a(ej),a(fb),a(gy),a(dD)],a7A=[0,a(eT),a(dM),a(eh),a(dO),a(eR),a(gU),a(ev),a(gQ),a(dF),a(gv),a(gc),a(cn),a(eu),a(en),a(d8),a(d4),a(gM),a(eY),a(dq),a(eI),a(fx),a(g4),a(d2),a(gF),a(df),a(ei),a(g0),a(cJ),a(ez),a(eJ),a(el),a(fP),a(dJ),a(gP),a(eZ),a(fn),a(gZ),a(fe),a(d6),a(e5),a(gw),a(eH),a(dp),a(fh),a(gJ),a(ff),a(gG),a(fY),a(f3),a(gu),a(fj),a(ef),a(fQ),a(et),a(er),a(eO),a(f$),a(bW),a(eQ),a(ed),a(dd),a(gz),a(ey),a(d5),a(fN),a(eo),a(fw),a(fU),a(dW),a(d$),a(gS),a(eL),a(gp),a(ek),a(fb),a(dw),a(dn),a(eG),a(gR),a(gy),a(ft),a(gN),a(bk),a(gb),a(eE),a(dg),a(g1),a(fq),a(fv),a(d7),a(gX),a(d9),a(go),a(b5),a(eb),a(fz),a(br),a(fg),a(dm),a(d_),a(es),a(dI),a(gr),a(dV),a(di),a(de),a(fB),a(eF),a(dz),a(fl),a(dT),a(f8),a(fi),a(eg),a(eU),a(gj),a(dS),a(eD),a(f6),a(d1),a(dE),a(dt),a(ee),a(fG),a(dK),a(e_),a(fF),a(fT),a(dv),a(fV),a(ep),a(fR),a(fA),a(gn),a(fa),a(dl),a(gl),a(ew),a(e2),a(d3),a(bJ),a(bV),a(e8),a(e6),a(fJ),a(f7),a(dc),a(cs),a(cj),a(f0),a(gd),a(fC),a(g2),a(cL),a(gH),a(gE),a(gI),a(fD),a(dX),a(dA),a(eq),a(ck),a(f1),a(fW),a(dQ),a(e0),a(d0),a(fu),a(ea),a(f2),a(gT),a(dP),a(dk),a(eC),a(gY),a(fH),a(fM),a(gh),a(fI),a(gt),a(ec),a(em),a(dC),a(eP),a(dN),a(dH),a(gk),a(e1),a(dh),a(fc),a(gB),a(fX),a(eW),a(fs),a(gq),a(dD),a(gO),a(eS),a(gV),a(ge),a(dG),a(fd),a(gm),a(eN),a(fm),a(e7),a(fS),a(e$),a(du),a(fk),a(fO),a(eX),a(bD),a(dL),a(dx),a(gL),a(gg),a(fy),a(cq),a(gW),a(f_),a(eB),a(gK),a(dR),a(gD),a(dj),a(eA),a(ga),a(ex),a(gf),a(dU),a(cY),a(dB),a(fZ),a(dY),a(dr),a(f5),a(fL),a(eK),a(cg),a(ej),a(bT),a(gC),a(f4),a(gs),a(dZ)],a7R=a(Pe),a7S=a(Pk),a7T=a(Qk),a7U=a(Q$),a7V=a(qu),a7W=a(Sm),a7X=a(i2),a7Y=a(SL),a7Z=a(Rm),a70=a(PD),a71=a(PF),a72=a(ho),a73=a(gi),a74=a(QN),a75=a(So),a76=a(bS),a77=a(Rb),a78=a(Qz),a79=a(oE),a7_=a(z9),a7$=a(kp),a8a=a(kA),a7C=a(SE),a7D=a(SG),a7E=a(Ps),a7F=a(Sj),a7G=a(Sy),a7H=a(RA),a7I=a(SQ),a7J=a(Sb),a7K=a(RD),a7L=a(QE),a7M=a(RN),a7N=a(Sr),a7O=a(P$),a7P=a(QQ),a7Q=a(PG),a8e=a("Set.remove_min_elt"),a8i=[0,[12,59,[17,[0,a(e),1,0],0]],a(q)],a8g=[0,[18,[1,[0,[11,a(f),0],a(f)]],[12,hm,0]],a("@[<2>{")],a8h=[0,[12,32,0],a(cM)],a8j=[0,[12,32,0],a(cM)],a8k=[0,[17,[0,a($),0,0],[12,D,[17,0,0]]],a("@,}@]")],a8f=[0,a("src/hack_forked/utils/collections/flow_set.ml"),365,14],a8l=[0,[0,36,37],[0,48,58],[0,65,91],[0,95,96],[0,97,hm],[0,zo,BH],[0,AE,ws],[0,zG,FD],[0,xB,xc],[0,i3,Eh],[0,nJ,Fj],[0,aQ,706],[0,Sl,722],[0,736,741],[0,748,749],[0,750,751],[0,768,885],[0,886,888],[0,890,894],[0,895,896],[0,902,907],[0,908,Rr],[0,910,930],[0,Px,1014],[0,1015,1154],[0,1155,1160],[0,1162,SK],[0,1329,1367],[0,1369,1370],[0,1376,1417],[0,1425,1470],[0,1471,1472],[0,1473,1475],[0,1476,1478],[0,1479,1480],[0,1488,1515],[0,1519,1523],[0,1552,1563],[0,1568,1642],[0,1646,1748],[0,1749,1757],[0,1759,1769],[0,1770,1789],[0,1791,1792],[0,1808,1867],[0,1869,1970],[0,1984,2038],[0,2042,2043],[0,2045,2046],[0,xN,2094],[0,2112,2140],[0,2144,2155],[0,2208,2229],[0,2230,2238],[0,2259,2274],[0,2275,2404],[0,2406,2416],[0,2417,2436],[0,2437,2445],[0,2447,2449],[0,2451,2473],[0,2474,2481],[0,2482,2483],[0,2486,2490],[0,2492,2501],[0,2503,2505],[0,2507,2511],[0,2519,2520],[0,2524,2526],[0,2527,2532],[0,2534,2546],[0,2556,2557],[0,2558,2559],[0,2561,2564],[0,2565,2571],[0,2575,2577],[0,2579,2601],[0,2602,2609],[0,2610,2612],[0,2613,2615],[0,2616,2618],[0,2620,2621],[0,2622,2627],[0,2631,2633],[0,2635,2638],[0,2641,2642],[0,2649,2653],[0,2654,2655],[0,2662,2678],[0,2689,2692],[0,2693,2702],[0,2703,2706],[0,2707,2729],[0,2730,2737],[0,2738,2740],[0,2741,2746],[0,2748,2758],[0,2759,2762],[0,2763,2766],[0,2768,2769],[0,2784,2788],[0,2790,2800],[0,2809,2816],[0,2817,2820],[0,2821,2829],[0,2831,2833],[0,2835,2857],[0,2858,2865],[0,2866,2868],[0,2869,2874],[0,2876,2885],[0,2887,2889],[0,2891,2894],[0,2902,2904],[0,2908,2910],[0,2911,2916],[0,2918,2928],[0,2929,2930],[0,2946,2948],[0,2949,2955],[0,2958,2961],[0,2962,2966],[0,2969,2971],[0,2972,2973],[0,2974,2976],[0,2979,2981],[0,2984,2987],[0,2990,3002],[0,3006,3011],[0,3014,3017],[0,3018,3022],[0,3024,3025],[0,3031,3032],[0,3046,3056],[0,3072,3085],[0,3086,3089],[0,3090,3113],[0,3114,3130],[0,3133,3141],[0,3142,3145],[0,3146,3150],[0,3157,3159],[0,3160,3163],[0,3168,3172],[0,3174,3184],[0,3200,3204],[0,3205,3213],[0,3214,3217],[0,3218,3241],[0,3242,3252],[0,3253,3258],[0,3260,3269],[0,3270,3273],[0,3274,3278],[0,3285,3287],[0,3294,3295],[0,3296,3300],[0,3302,3312],[0,3313,3315],[0,3328,3332],[0,3333,3341],[0,3342,3345],[0,3346,3397],[0,3398,3401],[0,3402,3407],[0,3412,3416],[0,3423,3428],[0,3430,3440],[0,3450,3456],[0,3458,3460],[0,3461,3479],[0,3482,3506],[0,3507,3516],[0,3517,3518],[0,3520,3527],[0,3530,3531],[0,3535,3541],[0,3542,3543],[0,3544,3552],[0,3558,3568],[0,3570,3572],[0,3585,3643],[0,3648,3663],[0,3664,3674],[0,3713,3715],[0,3716,3717],[0,3718,3723],[0,3724,3748],[0,3749,3750],[0,3751,3774],[0,3776,3781],[0,3782,3783],[0,3784,3790],[0,3792,3802],[0,3804,3808],[0,3840,3841],[0,3864,3866],[0,3872,3882],[0,3893,3894],[0,3895,3896],[0,3897,3898],[0,3902,3912],[0,3913,3949],[0,3953,3973],[0,3974,3992],[0,3993,4029],[0,4038,4039],[0,RC,4170],[0,4176,4254],[0,4256,4294],[0,4295,4296],[0,4301,4302],[0,4304,4347],[0,4348,4681],[0,4682,4686],[0,4688,4695],[0,4696,4697],[0,4698,4702],[0,4704,4745],[0,4746,4750],[0,4752,4785],[0,4786,4790],[0,4792,4799],[0,4800,4801],[0,4802,4806],[0,4808,4823],[0,4824,4881],[0,4882,4886],[0,4888,4955],[0,4957,4960],[0,4969,4978],[0,4992,5008],[0,5024,5110],[0,5112,5118],[0,5121,5741],[0,5743,iY],[0,5761,5787],[0,5792,5867],[0,5870,5881],[0,5888,5901],[0,5902,5909],[0,5920,5941],[0,5952,5972],[0,5984,5997],[0,5998,6001],[0,6002,6004],[0,6016,6100],[0,6103,6104],[0,6108,6110],[0,6112,6122],[0,6155,6158],[0,6160,6170],[0,6176,6265],[0,6272,6315],[0,6320,6390],[0,6400,6431],[0,6432,6444],[0,6448,6460],[0,6470,6510],[0,6512,6517],[0,6528,6572],[0,6576,6602],[0,6608,6619],[0,6656,6684],[0,6688,6751],[0,6752,6781],[0,6783,6794],[0,6800,6810],[0,6823,6824],[0,6832,6846],[0,6912,6988],[0,6992,7002],[0,7019,7028],[0,7040,7156],[0,7168,7224],[0,7232,7242],[0,7245,7294],[0,7296,7305],[0,7312,7355],[0,7357,7360],[0,7376,7379],[0,7380,7419],[0,7424,7674],[0,7675,7958],[0,7960,7966],[0,7968,8006],[0,8008,8014],[0,8016,8024],[0,8025,8026],[0,8027,8028],[0,8029,8030],[0,8031,8062],[0,8064,8117],[0,8118,8125],[0,8126,8127],[0,8130,8133],[0,8134,8141],[0,8144,8148],[0,8150,8156],[0,8160,8173],[0,8178,8181],[0,8182,8189],[0,R6,QW],[0,8255,8257],[0,8276,8277],[0,pn,8306],[0,oT,8320],[0,8336,8349],[0,8400,8413],[0,8417,8418],[0,8421,8433],[0,qx,8451],[0,oR,8456],[0,8458,on],[0,qk,8470],[0,RX,8478],[0,pa,qn],[0,n3,p_],[0,o6,o7],[0,8490,8506],[0,8508,8512],[0,8517,8522],[0,o$,8527],[0,8544,8585],[0,11264,11311],[0,11312,11359],[0,11360,11493],[0,11499,11508],[0,11520,qV],[0,qD,11560],[0,qr,11566],[0,11568,11624],[0,q2,11632],[0,qf,11671],[0,11680,qW],[0,11688,o2],[0,11696,qN],[0,11704,pQ],[0,11712,po],[0,11720,pU],[0,11728,oG],[0,11736,11743],[0,11744,11776],[0,12293,12296],[0,12321,nX],[0,12337,12342],[0,12344,12349],[0,12353,12439],[0,12441,pJ],[0,12449,oi],[0,12540,12544],[0,12549,n8],[0,12593,12687],[0,12704,12731],[0,12784,12800],[0,13312,19894],[0,19968,40944],[0,40960,42125],[0,42192,42238],[0,42240,42509],[0,42512,42540],[0,42560,42608],[0,42612,nS],[0,42623,42738],[0,42775,42784],[0,42786,42889],[0,42891,42944],[0,42946,42951],[0,pY,43048],[0,43072,43124],[0,43136,43206],[0,43216,43226],[0,43232,43256],[0,n2,o_],[0,43261,43310],[0,43312,43348],[0,43360,43389],[0,43392,43457],[0,n9,43482],[0,43488,nK],[0,43520,43575],[0,43584,43598],[0,43600,43610],[0,43616,43639],[0,ou,43715],[0,43739,43742],[0,43744,43760],[0,43762,43767],[0,43777,43783],[0,43785,43791],[0,43793,43799],[0,43808,qi],[0,43816,qp],[0,43824,pk],[0,43868,pN],[0,43888,44011],[0,44012,44014],[0,44016,44026],[0,44032,55204],[0,55216,55239],[0,55243,55292],[0,63744,64110],[0,64112,64218],[0,64256,64263],[0,64275,64280],[0,qA,p$],[0,64298,ot],[0,64312,qo],[0,pu,pg],[0,64320,nT],[0,64323,qG],[0,64326,64434],[0,64467,64830],[0,64848,64912],[0,64914,64968],[0,65008,65020],[0,65024,65040],[0,65056,65072],[0,65075,65077],[0,65101,65104],[0,65136,qz],[0,65142,65277],[0,65296,65306],[0,65313,65339],[0,65343,od],[0,65345,65371],[0,65382,65471],[0,65474,65480],[0,65482,65488],[0,65490,65496],[0,65498,65501],[0,Cv,qb],[0,65549,pP],[0,65576,qS],[0,65596,pv],[0,65599,65614],[0,65616,65630],[0,65664,65787],[0,65856,65909],[0,66045,66046],[0,66176,66205],[0,66208,66257],[0,66272,66273],[0,66304,66336],[0,66349,66379],[0,66384,66427],[0,66432,66462],[0,66464,66500],[0,66504,qm],[0,66513,66518],[0,66560,66718],[0,66720,66730],[0,66736,66772],[0,66776,66812],[0,66816,66856],[0,66864,66916],[0,67072,67383],[0,67392,67414],[0,67424,67432],[0,67584,67590],[0,nC,pe],[0,67594,oa],[0,67639,67641],[0,pt,67645],[0,67647,67670],[0,67680,67703],[0,67712,67743],[0,67808,pS],[0,67828,67830],[0,67840,67862],[0,67872,67898],[0,67968,68024],[0,68030,68032],[0,p8,68100],[0,68101,68103],[0,68108,or],[0,68117,n4],[0,68121,68150],[0,68152,68155],[0,68159,68160],[0,68192,68221],[0,68224,68253],[0,68288,qc],[0,68297,68327],[0,68352,68406],[0,68416,68438],[0,68448,68467],[0,68480,68498],[0,68608,68681],[0,68736,68787],[0,68800,68851],[0,68864,68904],[0,68912,68922],[0,69376,69405],[0,qB,69416],[0,69424,69457],[0,69600,69623],[0,69632,69703],[0,69734,qq],[0,69759,69819],[0,69840,69865],[0,69872,69882],[0,69888,69941],[0,69942,69952],[0,oq,oU],[0,69968,70004],[0,pq,70007],[0,70016,70085],[0,70089,70093],[0,70096,pZ],[0,qy,70109],[0,70144,pW],[0,70163,70200],[0,70206,70207],[0,70272,oV],[0,o8,nD],[0,70282,pX],[0,70287,qL],[0,70303,70313],[0,70320,70379],[0,70384,70394],[0,70400,nO],[0,70405,70413],[0,70415,70417],[0,70419,o0],[0,70442,qM],[0,70450,qY],[0,70453,70458],[0,70459,70469],[0,70471,70473],[0,70475,70478],[0,oB,70481],[0,70487,70488],[0,70493,70500],[0,70502,70509],[0,70512,70517],[0,70656,70731],[0,70736,70746],[0,ox,70752],[0,70784,oM],[0,ow,70856],[0,70864,70874],[0,71040,71094],[0,71096,71105],[0,71128,71134],[0,71168,71233],[0,qP,71237],[0,71248,71258],[0,71296,71353],[0,71360,71370],[0,71424,71451],[0,71453,71468],[0,71472,71482],[0,71680,71739],[0,71840,71914],[0,71935,71936],[0,72096,72104],[0,72106,72152],[0,72154,pm],[0,n1,72165],[0,n6,72255],[0,72263,72264],[0,pO,72346],[0,qX,72350],[0,72384,72441],[0,72704,oO],[0,72714,72759],[0,72760,72769],[0,72784,72794],[0,72818,72848],[0,72850,72872],[0,72873,72887],[0,72960,pH],[0,72968,oo],[0,72971,73015],[0,73018,73019],[0,73020,73022],[0,73023,73032],[0,73040,73050],[0,73056,oC],[0,73063,qv],[0,73066,73103],[0,73104,73106],[0,73107,73113],[0,73120,73130],[0,73440,73463],[0,73728,74650],[0,74752,74863],[0,74880,75076],[0,77824,78895],[0,82944,83527],[0,92160,92729],[0,92736,92767],[0,92768,92778],[0,92880,92910],[0,92912,92917],[0,92928,92983],[0,92992,92996],[0,93008,93018],[0,93027,93048],[0,93053,93072],[0,93760,93824],[0,93952,94027],[0,pc,94088],[0,94095,94112],[0,94176,pz],[0,oJ,94180],[0,94208,100344],[0,100352,101107],[0,110592,110879],[0,110928,110931],[0,110948,110952],[0,110960,111356],[0,113664,113771],[0,113776,113789],[0,113792,113801],[0,113808,113818],[0,113821,113823],[0,119141,119146],[0,119149,119155],[0,119163,119171],[0,119173,119180],[0,119210,119214],[0,119362,119365],[0,119808,qh],[0,119894,nU],[0,119966,119968],[0,n0,119971],[0,119973,119975],[0,119977,ov],[0,119982,qK],[0,q3,qe],[0,119997,oS],[0,120005,oj],[0,120071,120075],[0,120077,nI],[0,120086,p9],[0,120094,nW],[0,120123,nP],[0,120128,pf],[0,oQ,120135],[0,120138,nH],[0,120146,120486],[0,120488,ok],[0,120514,pF],[0,120540,pB],[0,120572,qT],[0,120598,oY],[0,120630,of],[0,120656,oI],[0,120688,p7],[0,120714,ql],[0,120746,nZ],[0,120772,120780],[0,120782,120832],[0,121344,121399],[0,121403,121453],[0,121461,121462],[0,121476,121477],[0,121499,121504],[0,121505,121520],[0,122880,122887],[0,122888,122905],[0,122907,122914],[0,122915,122917],[0,122918,122923],[0,123136,123181],[0,123184,123198],[0,123200,123210],[0,nB,123215],[0,123584,123642],[0,124928,125125],[0,125136,125143],[0,125184,125260],[0,125264,125274],[0,126464,oD],[0,126469,nR],[0,126497,oZ],[0,o9,126501],[0,pb,n$],[0,126505,pA],[0,126516,p1],[0,px,oc],[0,nY,126524],[0,oN,126531],[0,qF,ps],[0,n7,qQ],[0,pM,p2],[0,126541,qZ],[0,126545,oH],[0,qJ,126549],[0,qO,q0],[0,q4,nG],[0,ph,qE],[0,oA,os],[0,pD,p4],[0,126561,pl],[0,qd,126565],[0,126567,oX],[0,126572,pC],[0,126580,qC],[0,126585,nV],[0,pd,qI],[0,126592,pR],[0,126603,126620],[0,126625,pG],[0,126629,o1],[0,126635,126652],[0,131072,173783],[0,173824,177973],[0,177984,178206],[0,178208,183970],[0,183984,191457],[0,194560,195102],[0,917760,918000]],a8m=a(ks),a8n=a(ja),a8o=a(i6),a8p=a(oe),a8t=a("Cannot export an enum with `export type`, try `export enum E {}` or `module.exports = E;` instead."),a8u=a("Enum members are separated with `,`. Replace `;` with `,`."),a8v=a("Unexpected reserved word"),a8w=a("Unexpected reserved type"),a8x=a("Unexpected `super` outside of a class method"),a8y=a("`super()` is only valid in a class constructor"),a8z=a("Unexpected end of input"),a8A=a("Unexpected variance sigil"),a8B=a("Unexpected static modifier"),a8C=a("Unexpected proto modifier"),a8D=a("Type aliases are not allowed in untyped mode"),a8E=a("Opaque type aliases are not allowed in untyped mode"),a8F=a("Type annotations are not allowed in untyped mode"),a8G=a("Type declarations are not allowed in untyped mode"),a8H=a("Type imports are not allowed in untyped mode"),a8I=a("Type exports are not allowed in untyped mode"),a8J=a("Interfaces are not allowed in untyped mode"),a8K=a("Spreading a type is only allowed inside an object type"),a8L=a("Explicit inexact syntax must come at the end of an object type"),a8M=a("Explicit inexact syntax cannot appear inside an explicit exact object type"),a8N=a("Explicit inexact syntax can only appear inside an object type"),a8O=a("Illegal newline after throw"),a8P=a("A bigint literal must be an integer"),a8Q=a("A bigint literal cannot use exponential notation"),a8R=a("Invalid regular expression"),a8S=a("Invalid regular expression: missing /"),a8T=a("Invalid left-hand side in assignment"),a8U=a("Invalid left-hand side in exponentiation expression"),a8V=a("Invalid left-hand side in for-in"),a8W=a("Invalid left-hand side in for-of"),a8X=a("Invalid optional indexed access. Indexed access uses bracket notation. Use the format `T?.[K]`."),a8Y=a("found an expression instead"),a8Z=a("Expected an object pattern, array pattern, or an identifier but "),a80=a("More than one default clause in switch statement"),a81=a("Missing catch or finally after try"),a82=a("Illegal continue statement"),a83=a("Illegal break statement"),a84=a("Illegal return statement"),a85=a("Illegal Unicode escape"),a86=a("Strict mode code may not include a with statement"),a87=a("Catch variable may not be eval or arguments in strict mode"),a88=a("Variable name may not be eval or arguments in strict mode"),a89=a("Parameter name eval or arguments is not allowed in strict mode"),a8_=a("Strict mode function may not have duplicate parameter names"),a8$=a('Illegal "use strict" directive in function with non-simple parameter list'),a9a=a("Function name may not be eval or arguments in strict mode"),a9b=a("Octal literals are not allowed in strict mode."),a9c=a("Number literals with leading zeros are not allowed in strict mode."),a9d=a("Delete of an unqualified identifier in strict mode."),a9e=a("Duplicate data property in object literal not allowed in strict mode"),a9f=a("Object literal may not have data and accessor property with the same name"),a9g=a("Object literal may not have multiple get/set accessors with the same name"),a9h=a("`typeof` can only be used to get the type of variables."),a9i=a("Assignment to eval or arguments is not allowed in strict mode"),a9j=a("Postfix increment/decrement may not have eval or arguments operand in strict mode"),a9k=a("Prefix increment/decrement may not have eval or arguments operand in strict mode"),a9l=a("Use of future reserved word in strict mode"),a9m=a("JSX attributes must only be assigned a non-empty expression"),a9n=a("JSX value should be either an expression or a quoted JSX text"),a9o=a("Const must be initialized"),a9p=a("Destructuring assignment must be initialized"),a9q=a("Illegal newline before arrow"),a9r=a(Es),a9s=a("Async functions can only be declared at top level or "),a9t=a(Es),a9u=a("Generators can only be declared at top level or "),a9v=a("elements must be wrapped in an enclosing parent tag"),a9w=a("Unexpected token <. Remember, adjacent JSX "),a9x=a("Rest parameter must be final parameter of an argument list"),a9y=a("Rest element must be final element of an array pattern"),a9z=a("Rest property must be final property of an object pattern"),a9A=a("async is an implementation detail and isn't necessary for your declare function statement. It is sufficient for your declare function to just have a Promise return type."),a9B=a("`declare` modifier can only appear on class fields."),a9C=a("Unexpected token `=`. Initializers are not allowed in a `declare`."),a9D=a("Unexpected token `=`. Initializers are not allowed in a `declare opaque type`."),a9E=a("`declare export let` is not supported. Use `declare export var` instead."),a9F=a("`declare export const` is not supported. Use `declare export var` instead."),a9G=a("`declare export type` is not supported. Use `export type` instead."),a9H=a("`declare export interface` is not supported. Use `export interface` instead."),a9I=a("`export * as` is an early-stage proposal and is not enabled by default. To enable support in the parser, use the `esproposal_export_star_as` option"),a9J=a("Found a decorator in an unsupported position."),a9K=a("Type parameter declaration needs a default, since a preceding type parameter declaration has a default."),a9L=a("Duplicate `declare module.exports` statement!"),a9M=a("Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module xor they are a CommonJS module."),a9N=a("Getter should have zero parameters"),a9O=a("Setter should have exactly one parameter"),a9P=a("`import type` or `import typeof`!"),a9Q=a("Imports within a `declare module` body must always be "),a9R=a("The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements"),a9S=a("Missing comma between import specifiers"),a9T=a("Missing comma between export specifiers"),a9U=a("Malformed unicode"),a9V=a("Classes may only have one constructor"),a9W=a("Private fields may not be deleted."),a9X=a("Private fields can only be referenced from within a class."),a9Y=a("You may not access a private field through the `super` keyword."),a9Z=a("Yield expression not allowed in formal parameter"),a90=a("`await` is an invalid identifier in async functions"),a91=a("`yield` is an invalid identifier in generators"),a92=a("either a `let` binding pattern, or a member expression."),a93=a("`let [` is ambiguous in this position because it is "),a94=a("Literals cannot be used as shorthand properties."),a95=a("Computed properties must have a value."),a96=a("Object pattern can't contain methods"),a97=a("A trailing comma is not permitted after the rest element"),a98=a("An optional chain may not be used in a `new` expression."),a99=a("Template literals may not be used in an optional chain."),a9_=a("Unexpected whitespace between `#` and identifier"),a9$=a("A type annotation is required for the `this` parameter."),a_a=a("The `this` parameter must be the first function parameter."),a_b=a("The `this` parameter cannot be optional."),a_c=a("A getter cannot have a `this` parameter."),a_d=a("A setter cannot have a `this` parameter."),a_e=a("Arrow functions cannot have a `this` parameter; arrow functions automatically bind `this` when declared."),a_f=a("Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions."),a_g=[0,[11,a("Boolean enum members need to be initialized. Use either `"),[2,0,[11,a(" = true,` or `"),[2,0,[11,a(" = false,` in enum `"),[2,0,[11,a(hM),0]]]]]]],a("Boolean enum members need to be initialized. Use either `%s = true,` or `%s = false,` in enum `%s`.")],a_h=[0,[11,a("Enum member names need to be unique, but the name `"),[2,0,[11,a("` has already been used before in enum `"),[2,0,[11,a(hM),0]]]]],a("Enum member names need to be unique, but the name `%s` has already been used before in enum `%s`.")],a_i=[0,[11,a(PZ),[2,0,[11,a("` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers."),0]]],a("Enum `%s` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.")],a_j=[0,[11,a("Use one of `boolean`, `number`, `string`, or `symbol` in enum `"),[2,0,[11,a(hM),0]]],a("Use one of `boolean`, `number`, `string`, or `symbol` in enum `%s`.")],a_k=[0,[11,a("Enum type `"),[2,0,[11,a("` is not valid. "),[2,0,0]]]],a("Enum type `%s` is not valid. %s")],a_l=[0,[11,a("Supplied enum type is not valid. "),[2,0,0]],a("Supplied enum type is not valid. %s")],a_m=[0,[11,a("Enum member names and initializers are separated with `=`. Replace `"),[2,0,[11,a(":` with `"),[2,0,[11,a(" =`."),0]]]]],a("Enum member names and initializers are separated with `=`. Replace `%s:` with `%s =`.")],a_n=[0,[11,a("Symbol enum members cannot be initialized. Use `"),[2,0,[11,a(",` in enum `"),[2,0,[11,a(hM),0]]]]],a("Symbol enum members cannot be initialized. Use `%s,` in enum `%s`.")],a_o=[0,[11,a(PZ),[2,0,[11,a("` has type `"),[2,0,[11,a("`, so the initializer of `"),[2,0,[11,a("` needs to be a "),[2,0,[11,a(" literal."),0]]]]]]]]],a("Enum `%s` has type `%s`, so the initializer of `%s` needs to be a %s literal.")],a_p=[0,[11,a("The enum member initializer for `"),[2,0,[11,a("` needs to be a literal (either a boolean, number, or string) in enum `"),[2,0,[11,a(hM),0]]]]],a("The enum member initializer for `%s` needs to be a literal (either a boolean, number, or string) in enum `%s`.")],a_q=[0,[11,a("Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `"),[2,0,[11,a("`, consider using `"),[2,0,[11,a("`, in enum `"),[2,0,[11,a(hM),0]]]]]]],a("Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%s`, consider using `%s`, in enum `%s`.")],a_r=a("The `...` must come at the end of the enum body. Remove the trailing comma."),a_s=a("The `...` must come after all enum members. Move it to the end of the enum body."),a_t=[0,[11,a("Number enum members need to be initialized, e.g. `"),[2,0,[11,a(" = 1,` in enum `"),[2,0,[11,a(hM),0]]]]],a("Number enum members need to be initialized, e.g. `%s = 1,` in enum `%s`.")],a_u=[0,[11,a("String enum members need to consistently either all use initializers, or use no initializers, in enum "),[2,0,[12,46,0]]],a("String enum members need to consistently either all use initializers, or use no initializers, in enum %s.")],a_v=[0,[11,a(Qw),[2,0,0]],a("Unexpected %s")],a_w=[0,[11,a(Qw),[2,0,[11,a(", expected "),[2,0,0]]]],a("Unexpected %s, expected %s")],a_x=[0,[11,a(Pd),[2,0,[11,a("`. Did you mean `"),[2,0,[11,a("`?"),0]]]]],a("Unexpected token `%s`. Did you mean `%s`?")],a_y=a(pI),a_z=a("Invalid flags supplied to RegExp constructor '"),a_A=a("Remove the period."),a_C=a("Indexed access uses bracket notation."),a_B=[0,[11,a("Invalid indexed access. "),[2,0,[11,a(" Use the format `T[K]`."),0]]],a("Invalid indexed access. %s Use the format `T[K]`.")],a_D=a(pI),a_E=a("Undefined label '"),a_F=a("' has already been declared"),a_G=a(" '"),a_H=a("Expected corresponding JSX closing tag for "),a_I=a(Es),a_J=a("In strict mode code, functions can only be declared at top level or "),a_K=a("inside a block, or as the body of an if statement."),a_L=a("In non-strict mode code, functions can only be declared at top level, "),a_M=[0,[11,a("Duplicate export for `"),[2,0,[12,96,0]]],a("Duplicate export for `%s`")],a_N=a("` is declared more than once."),a_O=a("Private fields may only be declared once. `#"),a_P=a("static "),a_W=a(i),a_Q=a(Pi),a_R=a("methods"),a_V=a("fields"),a_S=a(hM),a_T=a(" named `"),a_U=a("Classes may not have "),a_X=a("` has not been declared."),a_Y=a("Private fields must be declared before they can be referenced. `#"),a_Z=[0,[11,a(Pd),[2,0,[11,a("`. Parentheses are required to combine `??` with `&&` or `||` expressions."),0]]],a("Unexpected token `%s`. Parentheses are required to combine `??` with `&&` or `||` expressions.")],a8q=a("Parse_error.Error"),a_1=[0,a("src/third-party/sedlex/flow_sedlexing.ml"),PQ,4],a_0=a("Flow_sedlexing.MalFormed"),a_4=[0,1,0],a_2=[0,0,[0,1,0],[0,1,0]],bda=a(SF),bdb=a("end of input"),bdi=a(kw),bdj=a("template literal part"),bdm=a(kw),bdn=a(RJ),bc_=a(SF),bdc=a(kw),bdd=a(ja),bde=a(kw),bdf=a(ih),bdg=a(kw),bdh=a(i6),bdk=a("an"),bdl=a(cJ),bc$=a(cM),bc9=[0,[11,a("token `"),[2,0,[12,96,0]]],a("token `%s`")],ba$=a(QC),bba=a(oW),bbb=a("{|"),bbc=a("|}"),bbd=a(Py),bbe=a(x),bbf=a("["),bbg=a("]"),bbh=a(Ra),bbi=a(","),bbj=a(fo),bbk=a("=>"),bbl=a("..."),bbm=a(Qo),bbn=a(Pi),bbo=a(ki),bbp=a(qs),bbq=a(kp),bbr=a(kA),bbs=a(bV),bbt=a(cn),bbu=a(iq),bbv=a(cs),bbw=a(pi),bbx=a(kh),bby=a(oz),bbz=a(pV),bbA=a(kj),bbB=a(kz),bbC=a(hh),bbD=a(cV),bbE=a(cS),bbF=a(cg),bbG=a(qj),bbH=a(oK),bbI=a(cq),bbJ=a(cI),bbK=a(op),bbL=a(pT),bbM=a(nE),bbN=a(kH),bbO=a(co),bbP=a(ba),bbQ=a(qU),bbR=a(ii),bbS=a(kE),bbT=a(hp),bbU=a(hk),bbV=a(ob),bbW=a(pK),bbX=a(bJ),bbY=a(jb),bbZ=a(hQ),bb0=a(bT),bb1=a(pj),bb2=a(p6),bb3=a(nL),bb4=a(pw),bb5=a(br),bb6=a(cj),bb7=a(kt),bb8=a(hs),bb9=a(xZ),bb_=a(BS),bb$=a(hN),bca=a(eM),bcb=a("%checks"),bcc=a(RD),bcd=a(Sb),bce=a(SQ),bcf=a(RN),bcg=a(QE),bch=a(Sr),bci=a(RA),bcj=a(Sy),bck=a(Ps),bcl=a(Sj),bcm=a(SG),bcn=a(SE),bco=a(P$),bcp=a(QQ),bcq=a(PG),bcr=a(A4),bcs=a("?."),bct=a(DA),bcu=a("?"),bcv=a(ig),bcw=a(Sp),bcx=a(PA),bcy=a(Qz),bcz=a(oE),bcA=a(z9),bcB=a(Pe),bcC=a(Pk),bcD=a(Qk),bcE=a(Q$),bcF=a(Sm),bcG=a(SL),bcH=a(qu),bcI=a(i2),bcJ=a(Rm),bcK=a(PD),bcL=a(PF),bcM=a(ho),bcN=a(gi),bcO=a(bS),bcP=a(QN),bcQ=a(So),bcR=a(Rb),bcS=a(Q0),bcT=a(Q7),bcU=a(Sz),bcV=a(P7),bcW=a(i),bcX=a(oL),bcY=a(n5),bcZ=a(b5),bc0=a(ja),bc1=a(ih),bc2=a(i6),bc3=a(hk),bc4=a(oe),bc5=a(bS),bc6=a(bS),bc7=a(ks),bc8=a(oF),a_5=a("T_LCURLY"),a_6=a("T_RCURLY"),a_7=a("T_LCURLYBAR"),a_8=a("T_RCURLYBAR"),a_9=a("T_LPAREN"),a__=a("T_RPAREN"),a_$=a("T_LBRACKET"),a$a=a("T_RBRACKET"),a$b=a("T_SEMICOLON"),a$c=a("T_COMMA"),a$d=a("T_PERIOD"),a$e=a("T_ARROW"),a$f=a("T_ELLIPSIS"),a$g=a("T_AT"),a$h=a("T_POUND"),a$i=a("T_FUNCTION"),a$j=a("T_IF"),a$k=a("T_IN"),a$l=a("T_INSTANCEOF"),a$m=a("T_RETURN"),a$n=a("T_SWITCH"),a$o=a("T_THIS"),a$p=a("T_THROW"),a$q=a("T_TRY"),a$r=a("T_VAR"),a$s=a("T_WHILE"),a$t=a("T_WITH"),a$u=a("T_CONST"),a$v=a("T_LET"),a$w=a("T_NULL"),a$x=a("T_FALSE"),a$y=a("T_TRUE"),a$z=a("T_BREAK"),a$A=a("T_CASE"),a$B=a("T_CATCH"),a$C=a("T_CONTINUE"),a$D=a("T_DEFAULT"),a$E=a("T_DO"),a$F=a("T_FINALLY"),a$G=a("T_FOR"),a$H=a("T_CLASS"),a$I=a("T_EXTENDS"),a$J=a("T_STATIC"),a$K=a("T_ELSE"),a$L=a("T_NEW"),a$M=a("T_DELETE"),a$N=a("T_TYPEOF"),a$O=a("T_VOID"),a$P=a("T_ENUM"),a$Q=a("T_EXPORT"),a$R=a("T_IMPORT"),a$S=a("T_SUPER"),a$T=a("T_IMPLEMENTS"),a$U=a("T_INTERFACE"),a$V=a("T_PACKAGE"),a$W=a("T_PRIVATE"),a$X=a("T_PROTECTED"),a$Y=a("T_PUBLIC"),a$Z=a("T_YIELD"),a$0=a("T_DEBUGGER"),a$1=a("T_DECLARE"),a$2=a("T_TYPE"),a$3=a("T_OPAQUE"),a$4=a("T_OF"),a$5=a("T_ASYNC"),a$6=a("T_AWAIT"),a$7=a("T_CHECKS"),a$8=a("T_RSHIFT3_ASSIGN"),a$9=a("T_RSHIFT_ASSIGN"),a$_=a("T_LSHIFT_ASSIGN"),a$$=a("T_BIT_XOR_ASSIGN"),baa=a("T_BIT_OR_ASSIGN"),bab=a("T_BIT_AND_ASSIGN"),bac=a("T_MOD_ASSIGN"),bad=a("T_DIV_ASSIGN"),bae=a("T_MULT_ASSIGN"),baf=a("T_EXP_ASSIGN"),bag=a("T_MINUS_ASSIGN"),bah=a("T_PLUS_ASSIGN"),bai=a("T_NULLISH_ASSIGN"),baj=a("T_AND_ASSIGN"),bak=a("T_OR_ASSIGN"),bal=a("T_ASSIGN"),bam=a("T_PLING_PERIOD"),ban=a("T_PLING_PLING"),bao=a("T_PLING"),bap=a("T_COLON"),baq=a("T_OR"),bar=a("T_AND"),bas=a("T_BIT_OR"),bat=a("T_BIT_XOR"),bau=a("T_BIT_AND"),bav=a("T_EQUAL"),baw=a("T_NOT_EQUAL"),bax=a("T_STRICT_EQUAL"),bay=a("T_STRICT_NOT_EQUAL"),baz=a("T_LESS_THAN_EQUAL"),baA=a("T_GREATER_THAN_EQUAL"),baB=a("T_LESS_THAN"),baC=a("T_GREATER_THAN"),baD=a("T_LSHIFT"),baE=a("T_RSHIFT"),baF=a("T_RSHIFT3"),baG=a("T_PLUS"),baH=a("T_MINUS"),baI=a("T_DIV"),baJ=a("T_MULT"),baK=a("T_EXP"),baL=a("T_MOD"),baM=a("T_NOT"),baN=a("T_BIT_NOT"),baO=a("T_INCR"),baP=a("T_DECR"),baQ=a("T_EOF"),baR=a("T_ANY_TYPE"),baS=a("T_MIXED_TYPE"),baT=a("T_EMPTY_TYPE"),baU=a("T_NUMBER_TYPE"),baV=a("T_BIGINT_TYPE"),baW=a("T_STRING_TYPE"),baX=a("T_VOID_TYPE"),baY=a("T_SYMBOL_TYPE"),baZ=a("T_NUMBER"),ba0=a("T_BIGINT"),ba1=a("T_STRING"),ba2=a("T_TEMPLATE_PART"),ba3=a("T_IDENTIFIER"),ba4=a("T_REGEXP"),ba5=a("T_ERROR"),ba6=a("T_JSX_IDENTIFIER"),ba7=a("T_JSX_TEXT"),ba8=a("T_BOOLEAN_TYPE"),ba9=a("T_NUMBER_SINGLETON_TYPE"),ba_=a("T_BIGINT_SINGLETON_TYPE"),beM=[0,a(Qq),Bd,9],beN=[0,a(Qq),qg,9],beY=a(Ss),beZ=a("*/"),be0=a(Ss),be1=a("unreachable line_comment"),bfe=a("unreachable string_quote"),bff=a("\\"),bfg=a("unreachable template_part"),bfh=a("${"),bfi=a(Pj),bfj=a(Pj),bfk=a(AW),bgs=a("unreachable regexp_class"),bgt=a(Pr),bgv=a("unreachable regexp_body"),bgw=a(i),bgx=a(i),bgy=a(i),bgz=a(i),bgC=a("unreachable jsxtext"),bgD=a(pI),bgE=a(kf),bgF=a(qu),bgG=a(i2),bgH=a(QC),bgI=a(oW),bgJ=a("{'}'}"),bgK=a(oW),bgL=a("{'>'}"),bgM=a(i2),bgN=a(im),bgO=a("iexcl"),bkO=a("aelig"),bmM=a("Nu"),bnM=a("Eacute"),bog=a("Atilde"),bow=a("'int'"),box=a("AElig"),boy=a("Aacute"),boz=a("Acirc"),boA=a("Agrave"),boB=a("Alpha"),boC=a("Aring"),boD=[0,Rl],boE=[0,913],boF=[0,i3],boG=[0,vH],boH=[0,Bd],boI=[0,QF],boJ=[0,8747],boh=a("Auml"),boi=a("Beta"),boj=a("Ccedil"),bok=a("Chi"),bol=a("Dagger"),bom=a("Delta"),bon=a("ETH"),boo=[0,Sx],bop=[0,916],boq=[0,8225],bor=[0,935],bos=[0,PH],bot=[0,914],bou=[0,Rt],bov=[0,Qh],bnN=a("Icirc"),bn3=a("Ecirc"),bn4=a("Egrave"),bn5=a("Epsilon"),bn6=a("Eta"),bn7=a("Euml"),bn8=a("Gamma"),bn9=a("Iacute"),bn_=[0,PI],bn$=[0,915],boa=[0,P_],bob=[0,919],boc=[0,917],bod=[0,PY],boe=[0,QJ],bnO=a("Igrave"),bnP=a("Iota"),bnQ=a("Iuml"),bnR=a("Kappa"),bnS=a("Lambda"),bnT=a("Mu"),bnU=a("Ntilde"),bnV=[0,Ew],bnW=[0,924],bnX=[0,923],bnY=[0,922],bnZ=[0,Sf],bn0=[0,921],bn1=[0,Pw],bn2=[0,PM],bof=[0,Rn],bmN=a("Sigma"),bnh=a("Otilde"),bnx=a("OElig"),bny=a("Oacute"),bnz=a("Ocirc"),bnA=a("Ograve"),bnB=a("Omega"),bnC=a("Omicron"),bnD=a("Oslash"),bnE=[0,nJ],bnF=[0,927],bnG=[0,937],bnH=[0,qg],bnI=[0,Po],bnJ=[0,RW],bnK=[0,338],bni=a("Ouml"),bnj=a("Phi"),bnk=a("Pi"),bnl=a("Prime"),bnm=a("Psi"),bnn=a("Rho"),bno=a("Scaron"),bnp=[0,352],bnq=[0,929],bnr=[0,936],bns=[0,8243],bnt=[0,928],bnu=[0,934],bnv=[0,y8],bnw=[0,Rw],bmO=a("Uuml"),bm4=a("THORN"),bm5=a("Tau"),bm6=a("Theta"),bm7=a("Uacute"),bm8=a("Ucirc"),bm9=a("Ugrave"),bm_=a("Upsilon"),bm$=[0,933],bna=[0,nA],bnb=[0,QS],bnc=[0,w7],bnd=[0,920],bne=[0,932],bnf=[0,Ry],bmP=a("Xi"),bmQ=a("Yacute"),bmR=a("Yuml"),bmS=a("Zeta"),bmT=a("aacute"),bmU=a("acirc"),bmV=a("acute"),bmW=[0,P4],bmX=[0,CN],bmY=[0,vJ],bmZ=[0,918],bm0=[0,376],bm1=[0,Qi],bm2=[0,926],bm3=[0,ys],bng=[0,Px],bnL=[0,925],bkP=a("delta"),blN=a("cap"),bmh=a("aring"),bmx=a("agrave"),bmy=a("alefsym"),bmz=a("alpha"),bmA=a("amp"),bmB=a("and"),bmC=a("ang"),bmD=a("apos"),bmE=[0,39],bmF=[0,8736],bmG=[0,8743],bmH=[0,38],bmI=[0,945],bmJ=[0,8501],bmK=[0,jg],bmi=a("asymp"),bmj=a("atilde"),bmk=a("auml"),bml=a("bdquo"),bmm=a("beta"),bmn=a("brvbar"),bmo=a("bull"),bmp=[0,8226],bmq=[0,R3],bmr=[0,946],bms=[0,8222],bmt=[0,Q4],bmu=[0,Sn],bmv=[0,8776],bmw=[0,QU],blO=a("copy"),bl4=a("ccedil"),bl5=a("cedil"),bl6=a("cent"),bl7=a("chi"),bl8=a("circ"),bl9=a("clubs"),bl_=a("cong"),bl$=[0,8773],bma=[0,9827],bmb=[0,Sl],bmc=[0,967],bmd=[0,Db],bme=[0,FD],bmf=[0,Pz],blP=a("crarr"),blQ=a("cup"),blR=a("curren"),blS=a("dArr"),blT=a("dagger"),blU=a("darr"),blV=a("deg"),blW=[0,R0],blX=[0,8595],blY=[0,8224],blZ=[0,8659],bl0=[0,zf],bl1=[0,8746],bl2=[0,8629],bl3=[0,Rx],bmg=[0,8745],bkQ=a("fnof"),bli=a("ensp"),bly=a("diams"),blz=a("divide"),blA=a("eacute"),blB=a("ecirc"),blC=a("egrave"),blD=a(b5),blE=a("emsp"),blF=[0,8195],blG=[0,8709],blH=[0,y$],blI=[0,QI],blJ=[0,y5],blK=[0,Fj],blL=[0,9830],blj=a("epsilon"),blk=a("equiv"),bll=a("eta"),blm=a("eth"),bln=a("euml"),blo=a("euro"),blp=a("exist"),blq=[0,8707],blr=[0,8364],bls=[0,PT],blt=[0,i_],blu=[0,951],blv=[0,8801],blw=[0,949],blx=[0,8194],bkR=a("gt"),bk5=a("forall"),bk6=a("frac12"),bk7=a("frac14"),bk8=a("frac34"),bk9=a("frasl"),bk_=a("gamma"),bk$=a("ge"),bla=[0,8805],blb=[0,947],blc=[0,8260],bld=[0,Qd],ble=[0,Rp],blf=[0,Si],blg=[0,8704],bkS=a("hArr"),bkT=a("harr"),bkU=a("hearts"),bkV=a("hellip"),bkW=a("iacute"),bkX=a("icirc"),bkY=[0,QG],bkZ=[0,Re],bk0=[0,8230],bk1=[0,9829],bk2=[0,8596],bk3=[0,8660],bk4=[0,62],blh=[0,402],blM=[0,948],bmL=[0,xR],bgP=a("prime"),biP=a("ndash"),bjP=a("le"),bkj=a("kappa"),bkz=a("igrave"),bkA=a("image"),bkB=a("infin"),bkC=a("iota"),bkD=a("iquest"),bkE=a("isin"),bkF=a("iuml"),bkG=[0,nN],bkH=[0,8712],bkI=[0,RB],bkJ=[0,953],bkK=[0,8734],bkL=[0,8465],bkM=[0,yT],bkk=a("lArr"),bkl=a("lambda"),bkm=a("lang"),bkn=a("laquo"),bko=a("larr"),bkp=a("lceil"),bkq=a("ldquo"),bkr=[0,8220],bks=[0,8968],bkt=[0,8592],bku=[0,BH],bkv=[0,10216],bkw=[0,955],bkx=[0,8656],bky=[0,954],bjQ=a("macr"),bj6=a("lfloor"),bj7=a("lowast"),bj8=a("loz"),bj9=a("lrm"),bj_=a("lsaquo"),bj$=a("lsquo"),bka=a("lt"),bkb=[0,60],bkc=[0,8216],bkd=[0,8249],bke=[0,QW],bkf=[0,9674],bkg=[0,8727],bkh=[0,8970],bjR=a("mdash"),bjS=a("micro"),bjT=a("middot"),bjU=a(Qg),bjV=a("mu"),bjW=a("nabla"),bjX=a("nbsp"),bjY=[0,R_],bjZ=[0,8711],bj0=[0,956],bj1=[0,8722],bj2=[0,zG],bj3=[0,AE],bj4=[0,8212],bj5=[0,Qt],bki=[0,8804],biQ=a("or"),bjk=a("oacute"),bjA=a("ne"),bjB=a("ni"),bjC=a("not"),bjD=a("notin"),bjE=a("nsub"),bjF=a("ntilde"),bjG=a("nu"),bjH=[0,957],bjI=[0,x4],bjJ=[0,8836],bjK=[0,8713],bjL=[0,PX],bjM=[0,8715],bjN=[0,8800],bjl=a("ocirc"),bjm=a("oelig"),bjn=a("ograve"),bjo=a("oline"),bjp=a("omega"),bjq=a("omicron"),bjr=a("oplus"),bjs=[0,8853],bjt=[0,959],bju=[0,969],bjv=[0,8254],bjw=[0,Ed],bjx=[0,339],bjy=[0,p0],bjz=[0,SC],biR=a("part"),bi7=a("ordf"),bi8=a("ordm"),bi9=a("oslash"),bi_=a("otilde"),bi$=a("otimes"),bja=a("ouml"),bjb=a("para"),bjc=[0,ws],bjd=[0,kd],bje=[0,8855],bjf=[0,Q_],bjg=[0,aQ],bjh=[0,xB],bji=[0,zo],biS=a("permil"),biT=a("perp"),biU=a("phi"),biV=a("pi"),biW=a("piv"),biX=a("plusmn"),biY=a("pound"),biZ=[0,SS],bi0=[0,P9],bi1=[0,982],bi2=[0,960],bi3=[0,966],bi4=[0,8869],bi5=[0,8240],bi6=[0,8706],bjj=[0,8744],bjO=[0,8211],bgQ=a("sup1"),bhQ=a("rlm"),bik=a("raquo"),biA=a("prod"),biB=a("prop"),biC=a("psi"),biD=a("quot"),biE=a("rArr"),biF=a("radic"),biG=a("rang"),biH=[0,10217],biI=[0,8730],biJ=[0,8658],biK=[0,34],biL=[0,968],biM=[0,8733],biN=[0,8719],bil=a("rarr"),bim=a("rceil"),bin=a("rdquo"),bio=a("real"),bip=a("reg"),biq=a("rfloor"),bir=a("rho"),bis=[0,961],bit=[0,8971],biu=[0,SD],biv=[0,8476],biw=[0,8221],bix=[0,8969],biy=[0,8594],biz=[0,xc],bhR=a("sigma"),bh7=a("rsaquo"),bh8=a("rsquo"),bh9=a("sbquo"),bh_=a("scaron"),bh$=a("sdot"),bia=a("sect"),bib=a("shy"),bic=[0,Qf],bid=[0,y4],bie=[0,8901],bif=[0,353],big=[0,8218],bih=[0,8217],bii=[0,8250],bhS=a("sigmaf"),bhT=a("sim"),bhU=a("spades"),bhV=a("sub"),bhW=a("sube"),bhX=a("sum"),bhY=a("sup"),bhZ=[0,8835],bh0=[0,8721],bh1=[0,8838],bh2=[0,8834],bh3=[0,9824],bh4=[0,8764],bh5=[0,962],bh6=[0,963],bij=[0,8207],bgR=a("uarr"),bhl=a("thetasym"),bhB=a("sup2"),bhC=a("sup3"),bhD=a("supe"),bhE=a("szlig"),bhF=a("tau"),bhG=a("there4"),bhH=a("theta"),bhI=[0,952],bhJ=[0,8756],bhK=[0,964],bhL=[0,n_],bhM=[0,8839],bhN=[0,R2],bhO=[0,A8],bhm=a("thinsp"),bhn=a("thorn"),bho=a("tilde"),bhp=a("times"),bhq=a("trade"),bhr=a("uArr"),bhs=a("uacute"),bht=[0,kc],bhu=[0,8657],bhv=[0,8482],bhw=[0,Eh],bhx=[0,732],bhy=[0,ky],bhz=[0,8201],bhA=[0,977],bgS=a("xi"),bg8=a("ucirc"),bg9=a("ugrave"),bg_=a("uml"),bg$=a("upsih"),bha=a("upsilon"),bhb=a("uuml"),bhc=a("weierp"),bhd=[0,RX],bhe=[0,iX],bhf=[0,965],bhg=[0,978],bhh=[0,Rg],bhi=[0,PQ],bhj=[0,251],bgT=a("yacute"),bgU=a("yen"),bgV=a("yuml"),bgW=a("zeta"),bgX=a("zwj"),bgY=a("zwnj"),bg1=[0,R6],bg2=[0,8205],bg3=[0,950],bg4=[0,Co],bg5=[0,Rs],bg6=[0,C3],bg7=[0,958],bhk=[0,8593],bhP=[0,P0],biO=[0,8242],bkN=[0,RT],bgZ=a(Ra),bg0=a(z9),bpp=a("unreachable jsx_child"),bo7=a("unreachable type_token wholenumber"),bo6=a("unreachable type_token wholebigint"),bo5=a("unreachable type_token floatbigint"),bo4=a("unreachable type_token scinumber"),bo3=a("unreachable type_token scibigint"),bo2=a("unreachable type_token hexnumber"),bo1=a("unreachable type_token hexbigint"),bo0=a("unreachable type_token legacyoctnumber"),boZ=a("unreachable type_token octnumber"),boY=a("unreachable type_token octbigint"),boX=a("unreachable type_token binnumber"),boW=a("unreachable type_token bigbigint"),boS=a("unreachable type_token"),boT=a(ig),boU=a(ig),boV=a(SN),bo8=a(n5),bpf=a(oL),bpg=a(ih),bph=a(oF),bpi=a(ks),bpj=a(b5),bpk=a(co),bpl=a(cV),bpm=a(bT),bpn=[9,1],bpo=[9,0],bo9=a(hh),bo_=a(ja),bo$=a(ba),bpa=a(i6),bpb=a(oe),bpc=a(cS),bpd=a(hp),bpe=a(hk),boO=a("unreachable template_tail"),boP=a(oW),boQ=[0,a(i),a(i),a(i)],boL=a("unreachable jsx_tag"),boM=a(pI),bgB=a("unreachable regexp"),bfD=a("unreachable token wholenumber"),bfC=a("unreachable token wholebigint"),bfB=a("unreachable token floatbigint"),bfA=a("unreachable token scinumber"),bfz=a("unreachable token scibigint"),bfy=a("unreachable token hexnumber"),bfx=a("unreachable token hexbigint"),bfw=a("unreachable token legacyoctnumber"),bfv=a("unreachable token legacynonoctnumber"),bfu=a("unreachable token octnumber"),bft=a("unreachable token octbigint"),bfs=a("unreachable token bignumber"),bfr=a("unreachable token bigint"),bfm=a("unreachable token"),bfn=a(ig),bfo=a(ig),bfp=a(SN),bfq=[6,a("#!")],bfE=a("expected ?"),bfF=a(kA),bf5=a(op),bgg=a(kj),bgm=a(hN),bgn=a(eM),bgo=a(cg),bgp=a(qj),bgq=a(oK),bgr=a(kH),bgh=a(cq),bgi=a(cj),bgj=a(kt),bgk=a(cI),bgl=a(kE),bf6=a(nE),bga=a(qU),bgb=a(ob),bgc=a(pK),bgd=a(co),bge=a(cV),bgf=a(pT),bf7=a(ki),bf8=a(qs),bf9=a(hQ),bf_=a(bJ),bf$=a(kp),bfG=a(jb),bfT=a(pj),bfZ=a(bT),bf0=a(kz),bf1=a(ii),bf2=a(hh),bf3=a(BS),bf4=a(xZ),bfU=a(p6),bfV=a(nL),bfW=a(pw),bfX=a(bV),bfY=a(ba),bfH=a(hp),bfN=a(cn),bfO=a(iq),bfP=a(cs),bfQ=a(cS),bfR=a(pi),bfS=a(hs),bfI=a(kh),bfJ=a(hk),bfK=a(oz),bfL=a(pV),bfM=a(br),be2=a("unreachable string_escape"),be3=a(bU),be4=a(kg),be5=a(kg),be6=a(bU),be7=a(PC),be8=a(R9),be9=a("n"),be_=a("r"),be$=a("t"),bfa=a(Pc),bfb=a(kg),bfc=a(im),bfd=a(im),beV=a("unreachable id_char"),beW=a(im),beX=a(im),beT=a("Invalid (lexer) bigint "),beU=a("Invalid (lexer) bigint binary/octal "),beR=a(kg),beQ=a(RP),beP=a(QZ),beS=a(C_),beO=[10,a("token ILLEGAL")],bdo=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01"),bdp=a("\x01\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xx01"),bdq=a("\x01\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xx01"),bdr=a("\x01\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xx01"),bds=a("\x01\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x03\x04\x04\x04\x04\x04\x04\x04\x04\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xx01"),bdt=a("\x01\0\0\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03"),bdu=a("\x01\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xx01"),bdv=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x04"),bdw=a("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),bdx=a("\x01\x02\0\x03\x04\x04\x04\x04\x04\x04\x04\x04\x04"),bdy=a("\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),bdz=a("\x01\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03"),bdA=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01"),bdB=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdC=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdD=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x02\x02\x02\x06\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x02\x07"),bdE=a("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),bdF=a("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),bdG=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x06\x06\x06\x06\x06\x06\x06\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\b\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\n\x02\x02\x02\x0b\x02\f\r\x0e\x02\x0f"),bdH=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x03\x02\x02\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x05\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x06\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdI=a("\x01\0\x01\0\0\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03"),bdJ=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x02"),bdK=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdL=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x01\x01\x03"),bdM=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x06"),bdN=a("\x01\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03"),bdO=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x02\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdP=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdQ=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdR=a("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdS=a("\x01\0\0\0\0\0\0\0\0\0\x02\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdT=a("\x01\0\0\0\0\0\0\0\0\0\x02\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\0\0\0\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x05\0\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x06\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdU=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdV=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x01\x01\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdW=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x01\x01\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x04\0\x01\x01\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x01\x05\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdX=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bdY=a("\x01\0\0\0\0\0\0\0\0\0\x02\0\x03\x03\x03\x03\x03\x03\x03\x03\x04\x04\0\0\0\0\0\0\0\x01\x05\x01\x01\x06\x01\x01\x01\x01\x01\x01\x01\x01\x01\x07\x01\x01\x01\x01\x01\x01\x01\x01\b\x01\x01\0\0\0\0\0\0\x01\x05\x01\x01\x06\x01\x01\x01\x01\x01\x01\x01\x01\t\x07\x01\x01\x01\x01\x01\x01\x01\x01\b\x01\x01"),bdZ=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bd0=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x03\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bd1=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x03\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bd2=a("\x01\0\0\0\0\0\0\0\0\0\x02\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x04\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x05\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bd3=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x03\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bd4=a("\x01\0\0\0\0\0\0\0\0\0\x02\0\x03\x03\x03\x03\x03\x03\x03\x03\x04\x04\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x05\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bd5=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\x03\0\x02\x02\x02\x02\x02\x02\x01\x01\x01\x01\x01\x01\x01\x04\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bd6=a("\x01\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bd7=a('\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x04\x03\x03\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x06\x07\b\t\n\x0b\x07\f\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x15\x15\x15\x15\x15\x15\x15\x15\x16\x17\x18\x19\x1a\x1b\x1c\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x1d\x1e\x1f \t!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"#$%\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\t\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\x02\t\t\x02\x02\t\t\t\t\x02\t\x02\x02\x02\x02\x02\x02\t\x02\t\t\t\x02\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\x02\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\x02\t\x02\x02\x02\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\x02\x02\x02\x02\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\x02\t\t\x02\t\t\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\x02\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\x02\t\t\x02\t\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\x02\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\x02\t\t\x02\t\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\t\t\t\t\t\t\x02\x02\x02\t\t\t\x02\t\t\t\t\x02\x02\x02\t\t\x02\t\x02\t\t\x02\x02\x02\t\t\x02\x02\x02\t\t\t\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\t\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\x02\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\x02\t\x02\x02\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\t\x02\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\x02\t\t\t\t\t\t\t\t\t\t\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\t\t\t\t\t\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\x02\x02\x02\t\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\x02\x02\x02\x02\x02\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\x02\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\x02\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x03\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\x02\t\t\t\t\t\t\x02\t\t\x02\x02\x02\t\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\x02\t\x02\t\x02\t\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\t\t\t\t\t\t\t\x02\t\x02\x02\x02\t\t\t\x02\t\t\t\t\t\t\t\x02\x02\x02\t\t\t\t\x02\x02\t\t\t\t\t\t\x02\x02\x02\x02\t\t\t\t\t\t\t\t\t\t\t\t\t\x02\x02\x02\x02\x02\t\t\t\x02\t\t\t\t\t\t\t\x02\x02\x02'),bd8=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x04\x03\x03\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x06\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02"),bd9=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04"),bd_=a("\x01\0\0\0\0\x02"),bd$=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x04\x03\x03\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x06\x02\x07\b\t\x06\n\x0b\f\r\x0e\x0f\x10\x11\x12\x13\x13\x13\x13\x13\x13\x13\x13\x13\x14\x15\x16\x17\x18\x19\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x1a\x1b\x1c\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x1d\x1e\x1f\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x02\x07\x07\x02\x07\x02\x07\x07\x02\x02\x02\x07\x07\x02\x02\x02\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x07\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x03\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02"),bea=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x04\x03\x03\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x06\x02\x07\x02\x02\x06\x02\x02\x02\x02\x02\x02\b\t\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\n\x02\x0b\f\r\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x0e\x02\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x0f\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x02\x07\x07\x02\x07\x02\x07\x07\x02\x02\x02\x07\x07\x02\x02\x02\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x07\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x02\x02\x02\x07\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x03\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x02\x07\x07\x02\x02\x02\x07\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x07\x02\x07\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x07\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x07\x07\x07\x07\x02\x02\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02\x02\x02\x07\x07\x07\x02\x07\x07\x07\x07\x07\x07\x07\x02\x02\x02"),beb=a("\x01\0\0\x02"),bec=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x04\x02\x02\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05"),bed=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03"),bee=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x06\x07"),bef=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),beg=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),beh=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\x02"),bei=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03"),bej=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x03"),bek=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),bel=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),bem=a("\x01\0\0\0\0\0\0\0\x02"),ben=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x06\x02\x02\x02\x07"),beo=a("\x01\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\x03"),bep=a("\x01\x02\0\0\0\0\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\0\0\0\0\0\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02"),beq=a("\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03"),ber=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01"),bes=a("\x01\0\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03"),bet=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x01\x01\x01\x01\x01\x01"),beu=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x02\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01"),bev=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bew=a("\x01\0\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02"),bex=a("\x01\0\0\0\0\0\0\x02\0\x02\0\0\x03\x04\x04\x04\x04\x04\x04\x04\x04\x04\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),bey=a("\x01\x01\x01\x01\x01\x01\x01\x01\x02\x02"),bez=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),beA=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x04\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x06"),beB=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x04\x02\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03"),beC=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x02\x02\x02\x02\x02\x02\x03\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x04\x02\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03"),beD=a("\x01\0\x02"),beE=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"),beF=a("\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),beG=a("\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02"),beH=a("\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03"),beI=a("\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),beJ=a("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),beK=a("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),beL=a("\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02"),bqP=[0,[11,a("the identifier `"),[2,0,[12,96,0]]],a("the identifier `%s`")],bqO=[0,1],bqN=[0,1],bqM=a("@flow"),bqL=a(Qr),bqK=a(Qr),bqI=[0,[11,a("an identifier. When exporting a "),[2,0,[11,a(" as a named export, you must specify a "),[2,0,[11,a(" name. Did you mean `export default "),[2,0,[11,a(" ...`?"),0]]]]]]],a("an identifier. When exporting a %s as a named export, you must specify a %s name. Did you mean `export default %s ...`?")],bqJ=a(qt),bqH=a("Peeking current location when not available"),bqq=a(bT),bqz=a(jh),bqA=a(oL),bqB=a(ih),bqC=a(oF),bqD=a(ks),bqE=a(b5),bqF=a(co),bqG=a(cV),bqr=a(n5),bqs=a(hh),bqt=a(ja),bqu=a(ba),bqv=a(i6),bqw=a(cS),bqx=a(hp),bqy=a(hk),bqn=a(cV),bqo=a(hh),bqp=a(cS),bqj=a(cV),bqk=a(hh),bql=a(cS),bqh=a(kk),bqi=a("eval"),bp$=a(hQ),bqa=a(bT),bqb=a(pj),bqc=a(p6),bqd=a(nL),bqe=a(pw),bqf=a(ba),bqg=a(br),bp_=a(ob),bpC=a(qs),bpT=a(cI),bp2=a(eM),bp3=a(cg),bp4=a(qj),bp5=a(oK),bp6=a(kH),bp7=a(kj),bp8=a(cq),bp9=a(cj),bpU=a(kE),bpV=a(op),bpW=a(qU),bpX=a(pK),bpY=a(co),bpZ=a(pT),bp0=a(nE),bp1=a(ki),bpD=a(cs),bpL=a(bJ),bpM=a(kp),bpN=a(kA),bpO=a(ii),bpP=a(bV),bpQ=a(jb),bpR=a(cn),bpS=a(iq),bpE=a(pi),bpF=a(hp),bpG=a(kh),bpH=a(hk),bpI=a(oz),bpJ=a(pV),bpK=a(br),bpB=[0,a("src/parser/parser_env.ml"),343,9],bpA=a("Internal Error: Tried to add_declared_private with outside of class scope."),bpz=a("Internal Error: `exit_class` called before a matching `enter_class`"),bpw=a(i),bpx=[0,0,0],bpy=[0,0,0],bqQ=a("Parser_env.Try.Rollback"),bqZ=a(i),bqW=a(i),bqU=[0,a(br),a(fx),a(gC),a(RV),a(Rj),a(ez),a(bk),a(f6),a(gO),a(de),a(fT),a(dt),a(gr),a(d_),a(ex),a(fW),a(e6),a(eE),a(dE),a(dS),a(fJ),a(gh),a(gV),a(gq),a(gc),a(fz),a(fw),a(fH),a(eD),a(fg),a(fv),a(cs),a(gs),a(dR),a(du),a(gD),a(dN),a(go),a(gw),a(cn),a(f7),a(dj),a(gJ),a(fy),a(eT),a(d1),a(dP),a(gN),a(bV),a(dI),a(gk),a(e0),a(bW),a(gb),a(et),a(ef),a(eF),a(f_),a(ek),a(el),a(gY),a(fm),a(gU),a(fO),a(dc),a(d6),a(gl),a(eU),a(es),a(dL),a(gR),a(cL),a(fj),a(ew),a(dU),a(gd),a(eu),a(f8),a(f$),a(dr),a(eC),a(fM),a(eQ),a(dW),a(fQ),a(gQ),a(dp),a(fc),a(gT),a(d9),a(fV),a(gF),a(ev),a(gM),a(fY),a(g0),a(dd),a(dZ),a(d3),a(eG),a(fA),a(e_),a(dA),a(fN),a(eL),a(eg),a(gG),a(d2),a(eN),a(ep),a(e2),a(e$),a(er),a(d$),a(dY),a(dF),a(gz),a(dG),a(gB),a(fn),a(ey),a(d4),a(fB),a(eY),a(g2),a(dM),a(eq),a(fd),a(d7),a(eP),a(e7),a(dz),a(gv),a(eW),a(bT),a(dl),a(gI),a(dk),a(dB),a(fu),a(e1),a(bJ),a(dg),a(fh),a(f0),a(cJ),a(dO),a(d5),a(df),a(ck),a(dH),a(fe),a(f1),a(ed),a(fF),a(gp),a(eh),a(gP),a(dX),a(gW),a(f5),a(gH),a(gL),a(gg),a(d0),a(eA),a(fq),a(g4),a(e5),a(fG),a(gf),a(eb),a(f4),a(eJ),a(gj),a(fS),a(dT),a(dx),a(fC),a(bD),a(en),a(fi),a(ga),a(f2),a(dn),a(eB),a(gZ),a(eK),a(ea),a(fU),a(dQ),a(eI),a(fl),a(gE),a(ei),a(dq),a(ff),a(b5),a(fs),a(ge),a(gK),a(gt),a(dw),a(em),a(fP),a(di),a(dm),a(fL),a(cj),a(cq),a(eo),a(gm),a(gS),a(RQ),a(dv),a(RR),a(PW),a(dV),a(gu),a(dK),a(fD),a(eO),a(ee),a(fX),a(f3),a(fa),a(gX),a(d8),a(fZ),a(dh),a(gn),a(ec),a(eS),a(eZ),a(dJ),a(ft),a(fI),a(eR),a(cg),a(e8),a(cY),a(dC),a(eX),a(g1),a(eH),a(fR),a(fk),a(ej),a(fb),a(gy),a(dD)],bqV=[0,a(br),a(fx),a(gC),a(ez),a(bk),a(f6),a(gO),a(de),a(fT),a(dt),a(gr),a(d_),a(ex),a(fW),a(e6),a(eE),a(dE),a(dS),a(fJ),a(gh),a(gV),a(gq),a(gc),a(fz),a(fw),a(fH),a(eD),a(fg),a(fv),a(cs),a(gs),a(dR),a(du),a(gD),a(dN),a(go),a(gw),a(cn),a(f7),a(dj),a(gJ),a(fy),a(eT),a(d1),a(dP),a(gN),a(bV),a(dI),a(gk),a(e0),a(bW),a(gb),a(et),a(ef),a(eF),a(f_),a(ek),a(el),a(gY),a(fm),a(gU),a(fO),a(dc),a(d6),a(gl),a(eU),a(es),a(dL),a(gR),a(cL),a(fj),a(ew),a(dU),a(gd),a(eu),a(f8),a(f$),a(dr),a(eC),a(fM),a(eQ),a(dW),a(fQ),a(gQ),a(dp),a(fc),a(gT),a(d9),a(fV),a(gF),a(ev),a(gM),a(fY),a(g0),a(dd),a(dZ),a(d3),a(eG),a(fA),a(e_),a(dA),a(fN),a(eL),a(eg),a(gG),a(d2),a(eN),a(ep),a(e2),a(e$),a(er),a(d$),a(dY),a(dF),a(gz),a(dG),a(gB),a(fn),a(ey),a(d4),a(fB),a(eY),a(g2),a(dM),a(eq),a(fd),a(d7),a(eP),a(e7),a(dz),a(gv),a(eW),a(bT),a(dl),a(gI),a(dk),a(dB),a(fu),a(e1),a(bJ),a(dg),a(fh),a(f0),a(cJ),a(dO),a(d5),a(df),a(ck),a(dH),a(fe),a(f1),a(ed),a(fF),a(gp),a(eh),a(gP),a(dX),a(gW),a(f5),a(gH),a(gL),a(gg),a(d0),a(eA),a(fq),a(g4),a(e5),a(fG),a(gf),a(eb),a(f4),a(eJ),a(gj),a(fS),a(dT),a(dx),a(fC),a(bD),a(en),a(fi),a(ga),a(f2),a(dn),a(eB),a(gZ),a(eK),a(ea),a(fU),a(dQ),a(eI),a(fl),a(gE),a(ei),a(dq),a(ff),a(b5),a(fs),a(ge),a(gK),a(gt),a(dw),a(em),a(fP),a(di),a(dm),a(fL),a(cj),a(cq),a(eo),a(gm),a(gS),a(dv),a(dV),a(gu),a(dK),a(fD),a(eO),a(ee),a(fX),a(f3),a(fa),a(gX),a(d8),a(fZ),a(dh),a(gn),a(ec),a(eS),a(eZ),a(dJ),a(ft),a(fI),a(eR),a(cg),a(e8),a(cY),a(dC),a(eX),a(g1),a(eH),a(fR),a(fk),a(ej),a(fb),a(gy),a(dD)],bqX=[0,a(eT),a(dM),a(eh),a(dO),a(eR),a(gU),a(ev),a(gQ),a(dF),a(gv),a(gc),a(cn),a(eu),a(en),a(d8),a(d4),a(gM),a(eY),a(dq),a(eI),a(fx),a(g4),a(d2),a(gF),a(df),a(ei),a(g0),a(cJ),a(ez),a(eJ),a(el),a(fP),a(dJ),a(gP),a(eZ),a(fn),a(gZ),a(fe),a(d6),a(e5),a(gw),a(eH),a(dp),a(fh),a(gJ),a(ff),a(gG),a(fY),a(f3),a(gu),a(fj),a(ef),a(fQ),a(et),a(er),a(eO),a(f$),a(bW),a(eQ),a(ed),a(dd),a(gz),a(ey),a(d5),a(fN),a(eo),a(fw),a(fU),a(dW),a(d$),a(gS),a(eL),a(gp),a(ek),a(fb),a(dw),a(dn),a(eG),a(gR),a(gy),a(ft),a(gN),a(bk),a(gb),a(eE),a(dg),a(g1),a(fq),a(fv),a(d7),a(gX),a(d9),a(go),a(b5),a(eb),a(fz),a(br),a(fg),a(dm),a(d_),a(es),a(dI),a(gr),a(dV),a(di),a(de),a(fB),a(eF),a(dz),a(fl),a(dT),a(f8),a(fi),a(eg),a(eU),a(gj),a(dS),a(eD),a(f6),a(d1),a(dE),a(dt),a(ee),a(fG),a(dK),a(e_),a(fF),a(fT),a(dv),a(fV),a(ep),a(fR),a(fA),a(gn),a(fa),a(dl),a(gl),a(ew),a(e2),a(d3),a(bJ),a(bV),a(e8),a(e6),a(fJ),a(f7),a(dc),a(cs),a(cj),a(f0),a(gd),a(fC),a(g2),a(cL),a(gH),a(gE),a(gI),a(fD),a(dX),a(dA),a(eq),a(ck),a(f1),a(fW),a(dQ),a(e0),a(d0),a(fu),a(ea),a(f2),a(gT),a(dP),a(dk),a(eC),a(gY),a(fH),a(fM),a(gh),a(fI),a(gt),a(ec),a(em),a(dC),a(eP),a(dN),a(dH),a(gk),a(e1),a(dh),a(fc),a(gB),a(fX),a(eW),a(fs),a(gq),a(dD),a(gO),a(eS),a(gV),a(ge),a(dG),a(fd),a(gm),a(eN),a(fm),a(e7),a(fS),a(e$),a(du),a(fk),a(fO),a(eX),a(bD),a(dL),a(dx),a(gL),a(gg),a(fy),a(cq),a(gW),a(f_),a(eB),a(gK),a(dR),a(gD),a(dj),a(eA),a(ga),a(ex),a(gf),a(dU),a(cY),a(dB),a(fZ),a(dY),a(dr),a(f5),a(fL),a(eK),a(cg),a(ej),a(bT),a(gC),a(f4),a(gs),a(dZ)],bq0=[0,a(eT),a(dM),a(eh),a(dO),a(eR),a(gU),a(ev),a(gQ),a(dF),a(gv),a(gc),a(cn),a(eu),a(en),a(d8),a(d4),a(gM),a(eY),a(dq),a(eI),a(fx),a(g4),a(d2),a(gF),a(df),a(ei),a(g0),a(cJ),a(ez),a(Rj),a(eJ),a(el),a(fP),a(dJ),a(gP),a(eZ),a(fn),a(gZ),a(fe),a(d6),a(e5),a(gw),a(eH),a(dp),a(fh),a(gJ),a(ff),a(gG),a(fY),a(f3),a(gu),a(fj),a(ef),a(RR),a(fQ),a(et),a(er),a(eO),a(f$),a(bW),a(eQ),a(ed),a(dd),a(gz),a(ey),a(d5),a(fN),a(eo),a(fw),a(fU),a(dW),a(d$),a(gS),a(eL),a(gp),a(ek),a(fb),a(dw),a(dn),a(eG),a(gR),a(gy),a(ft),a(gN),a(bk),a(gb),a(eE),a(dg),a(g1),a(fq),a(fv),a(d7),a(gX),a(d9),a(go),a(b5),a(eb),a(fz),a(br),a(fg),a(dm),a(d_),a(es),a(dI),a(gr),a(dV),a(di),a(de),a(fB),a(eF),a(dz),a(fl),a(dT),a(f8),a(fi),a(eg),a(eU),a(gj),a(dS),a(eD),a(f6),a(d1),a(dE),a(dt),a(ee),a(fG),a(dK),a(e_),a(fF),a(fT),a(dv),a(fV),a(ep),a(fR),a(fA),a(gn),a(fa),a(dl),a(gl),a(ew),a(e2),a(d3),a(bJ),a(bV),a(e8),a(e6),a(fJ),a(f7),a(dc),a(cs),a(cj),a(f0),a(gd),a(fC),a(g2),a(cL),a(gH),a(gE),a(gI),a(fD),a(dX),a(dA),a(eq),a(ck),a(f1),a(fW),a(dQ),a(e0),a(d0),a(fu),a(ea),a(f2),a(gT),a(dP),a(dk),a(eC),a(gY),a(fH),a(fM),a(gh),a(fI),a(gt),a(ec),a(em),a(dC),a(eP),a(PW),a(dN),a(dH),a(gk),a(e1),a(dh),a(fc),a(gB),a(fX),a(eW),a(fs),a(gq),a(RQ),a(dD),a(gO),a(eS),a(gV),a(RV),a(ge),a(dG),a(fd),a(gm),a(eN),a(fm),a(e7),a(fS),a(e$),a(du),a(fk),a(fO),a(eX),a(bD),a(dL),a(dx),a(gL),a(gg),a(fy),a(cq),a(gW),a(f_),a(eB),a(gK),a(dR),a(gD),a(dj),a(eA),a(ga),a(ex),a(gf),a(dU),a(cY),a(dB),a(fZ),a(dY),a(dr),a(f5),a(fL),a(eK),a(cg),a(ej),a(bT),a(gC),a(f4),a(gs),a(dZ)],bq5=a(og),bq6=a(kI),bq4=[0,[11,a("Failure while looking up "),[2,0,[11,a(". Index: "),[4,0,0,0,[11,a(". Length: "),[4,0,0,0,[12,46,0]]]]]]],a("Failure while looking up %s. Index: %d. Length: %d.")],bq1=[0,0,0,0],bq2=a("Offset_utils.Offset_lookup_failed"),brc=a(Q9),brd=a(Cb),bre=a(Pl),brf=a(Sc),brh=a(Sc),bri=a(Pl),brg=a(hs),brj=a(J),brk=a(aF),brl=a("Program"),brm=a(FL),brn=a("BreakStatement"),bro=a(FL),brp=a("ContinueStatement"),brq=a("DebuggerStatement"),brw=a(f9),brx=a("DeclareExportAllDeclaration"),brr=a(f9),brs=a(i4),brt=a(kq),bru=a(cI),brv=a("DeclareExportDeclaration"),bry=a(hr),brz=a(aF),brA=a(aO),brB=a("DeclareModule"),brC=a(cp),brD=a("DeclareModuleExports"),brE=a(hO),brF=a(aF),brG=a("DoWhileStatement"),brH=a("EmptyStatement"),brI=a(vP),brJ=a(kq),brK=a("ExportDefaultDeclaration"),brQ=a(vP),brR=a(p3),brS=a(f9),brT=a("ExportAllDeclaration"),brL=a(vP),brM=a(f9),brN=a(i4),brO=a(kq),brP=a("ExportNamedDeclaration"),brU=a(Q1),brV=a(bD),brW=a("ExpressionStatement"),brX=a(aF),brY=a(RY),brZ=a(hO),br0=a(cZ),br1=a("ForStatement"),br2=a(o5),br3=a(aF),br4=a(bB),br5=a(cK),br6=a("ForInStatement"),br7=a(eM),br8=a(aF),br9=a(bB),br_=a(cK),br$=a("ForOfStatement"),bsa=a(pL),bsb=a(i$),bsc=a(hO),bsd=a("IfStatement"),bse=a(hs),bsj=a(hp),bsk=a(ax),bsf=a(Sh),bsg=a(f9),bsh=a(i4),bsi=a("ImportDeclaration"),bsl=a(aF),bsm=a(FL),bsn=a("LabeledStatement"),bso=a(b6),bsp=a("ReturnStatement"),bsq=a(Pt),bsr=a("discriminant"),bss=a("SwitchStatement"),bst=a(b6),bsu=a("ThrowStatement"),bsv=a(RK),bsw=a(SH),bsx=a(cY),bsy=a("TryStatement"),bsz=a(aF),bsA=a(hO),bsB=a("WhileStatement"),bsC=a(aF),bsD=a(z4),bsE=a("WithStatement"),bsF=a(PL),bsG=a("ArrayExpression"),bsH=a(ch),bsI=a(py),bsJ=a(bD),bsK=a(bW),bsL=a(ck),bsM=a(hN),bsN=a(aF),bsO=a(c1),bsP=a(aO),bsQ=a("ArrowFunctionExpression"),bsV=a(A4),bsR=a(bB),bsS=a(cK),bsT=a(ku),bsU=a("AssignmentExpression"),bsW=a(bB),bsX=a(cK),bsY=a(ku),bsZ=a("BinaryExpression"),bs0=a("CallExpression"),bs1=a(p5),bs2=a(Ro),bs3=a("ComprehensionExpression"),bs4=a(pL),bs5=a(i$),bs6=a(hO),bs7=a("ConditionalExpression"),bs8=a(p5),bs9=a(Ro),bs_=a("GeneratorExpression"),bs$=a(f9),bta=a("ImportExpression"),btb=a(Sp),btg=a(PA),bth=a(DA),btc=a(bB),btd=a(cK),bte=a(ku),btf=a("LogicalExpression"),bti=a("MemberExpression"),btj=a(i5),btk=a(km),btl=a("MetaProperty"),btm=a(kk),btn=a(Qn),bto=a(PK),btp=a("NewExpression"),btq=a(oh),btr=a("ObjectExpression"),bts=a(bK),btt=a("OptionalCallExpression"),btu=a(bK),btv=a("OptionalMemberExpression"),btw=a(BC),btx=a("SequenceExpression"),bty=a("Super"),btz=a("ThisExpression"),btA=a(cp),btB=a(bD),btC=a("TypeCastExpression"),btD=a(b6),btE=a("AwaitExpression"),btF=a(gi),btK=a(ho),btL=a(Q0),btM=a(Q7),btN=a(hp),btO=a(hk),btP=a(kE),btQ=a("matched above"),btG=a(b6),btH=a(B5),btI=a(ku),btJ=a("UnaryExpression"),btR=a(P7),btW=a(Sz),btS=a(B5),btT=a(b6),btU=a(ku),btV=a("UpdateExpression"),btX=a(R8),btY=a(b6),btZ=a("YieldExpression"),bt_=a("Unexpected FunctionDeclaration with BodyExpression"),bt0=a(ch),bt1=a(py),bt2=a(bD),bt3=a(bW),bt4=a(ck),bt5=a(hN),bt6=a(aF),bt7=a(c1),bt8=a(aO),bt9=a("FunctionDeclaration"),buj=a("Unexpected FunctionExpression with BodyExpression"),bt$=a(ch),bua=a(py),bub=a(bD),buc=a(bW),bud=a(ck),bue=a(hN),buf=a(aF),bug=a(c1),buh=a(aO),bui=a("FunctionExpression"),buk=a(bK),bul=a(cp),bum=a(cz),bun=a(Dz),buo=a(bK),bup=a(cp),buq=a(cz),bur=a("PrivateIdentifier"),bus=a(bK),but=a(cp),buu=a(cz),buv=a(Dz),buw=a(i$),bux=a(hO),buy=a("SwitchCase"),buz=a(aF),buA=a("param"),buB=a("CatchClause"),buC=a(aF),buD=a("BlockStatement"),buE=a(aO),buF=a("DeclareVariable"),buG=a(bW),buH=a(aO),buI=a("DeclareFunction"),buJ=a(x6),buK=a(hQ),buL=a(co),buM=a(aF),buN=a(ch),buO=a(aO),buP=a("DeclareClass"),buQ=a(co),buR=a(aF),buS=a(ch),buT=a(aO),buU=a("DeclareInterface"),buV=a(ax),buW=a(hs),buX=a(p3),buY=a("ExportNamespaceSpecifier"),buZ=a(bB),bu0=a(ch),bu1=a(aO),bu2=a("DeclareTypeAlias"),bu3=a(bB),bu4=a(ch),bu5=a(aO),bu6=a("TypeAlias"),bu7=a("DeclareOpaqueType"),bva=a("OpaqueType"),bu8=a(Sg),bu9=a(Qs),bu_=a(ch),bu$=a(aO),bvb=a("ClassDeclaration"),bvc=a("ClassExpression"),bvd=a(ym),bve=a(hQ),bvf=a("superTypeParameters"),bvg=a("superClass"),bvh=a(ch),bvi=a(aF),bvj=a(aO),bvk=a(bD),bvl=a("Decorator"),bvm=a(ch),bvn=a(aO),bvo=a("ClassImplements"),bvp=a(aF),bvq=a("ClassBody"),bvr=a(i7),bvz=a(kC),bvA=a(ij),bvB=a(i0),bvs=a(ym),bvt=a(jc),bvu=a(ba),bvv=a(hr),bvw=a(ax),bvx=a(cy),bvy=a("MethodDefinition"),bvC=a(kt),bvD=a(bk),bvE=a(ba),bvF=a(jc),bvG=a(cp),bvH=a(ax),bvI=a(cy),bvJ=a(P6),bvS=a("Internal Error: Private name found in class prop"),bvK=a(kt),bvL=a(bk),bvM=a(ba),bvN=a(jc),bvO=a(cp),bvP=a(ax),bvQ=a(cy),bvR=a(P6),bwi=a(aO),bwj=a(Qm),bwe=a(cZ),bwf=a(aO),bwg=a("EnumStringMember"),bv_=a(aO),bv$=a(Qm),bv5=a(cZ),bv6=a(aO),bv7=a("EnumNumberMember"),bvV=a(cZ),bvW=a(aO),bvX=a("EnumBooleanMember"),bvT=a(qH),bvU=a(Ea),bvY=a(ol),bvZ=a("EnumBooleanBody"),bv3=a(qH),bv4=a(Ea),bv8=a(ol),bv9=a("EnumNumberBody"),bwa=a(qH),bwb=a(Ea),bwc=a(ol),bwd=a("EnumStringBody"),bwh=a(qH),bwk=a(ol),bwl=a("EnumSymbolBody"),bv0=a(aF),bv1=a(aO),bv2=a("EnumDeclaration"),bwm=a(co),bwn=a(aF),bwo=a(ch),bwp=a(aO),bwq=a("InterfaceDeclaration"),bwr=a(ch),bws=a(aO),bwt=a("InterfaceExtends"),bwu=a(cp),bwv=a(oh),bww=a("ObjectPattern"),bwx=a(cp),bwy=a(PL),bwz=a("ArrayPattern"),bwA=a(bB),bwB=a(cK),bwC=a(wj),bwD=a(cp),bwE=a(cz),bwF=a(Dz),bwG=a(b6),bwH=a(Sk),bwI=a(b6),bwJ=a(Sk),bwK=a(bB),bwL=a(cK),bwM=a(wj),bwN=a(cZ),bwW=a(cZ),bwX=a(ij),bwY=a(i0),bwV=a(SA),bwO=a(jc),bwP=a(nM),bwQ=a(kC),bwR=a(hr),bwS=a(ax),bwT=a(cy),bwU=a(P3),bwZ=a(b6),bw0=a("SpreadProperty"),bw1=a(bB),bw2=a(cK),bw3=a(wj),bw4=a(jc),bw5=a(nM),bw6=a(kC),bw7=a(hr),bw8=a(ax),bw9=a(cy),bw_=a(P3),bw$=a(b6),bxa=a("SpreadElement"),bxb=a(o5),bxc=a(bB),bxd=a(cK),bxe=a("ComprehensionBlock"),bxn=a("We should not create Literal nodes for bigints"),bxi=a(Rv),bxj=a(cL),bxk=a("regex"),bxl=a(b7),bxm=a(ax),bxf=a(b7),bxg=a(ax),bxh=a(pr),bxo=a(b7),bxp=a(ax),bxq=a(pr),bxr=a(ih),bxs=a(ax),bxt=a("BigIntLiteral"),bxu=a(b7),bxv=a(ax),bxw=a(pr),bxx=a(cS),bxB=a(cV),bxy=a(b7),bxz=a(ax),bxA=a(pr),bxC=a(BC),bxD=a("quasis"),bxE=a("TemplateLiteral"),bxF=a(R4),bxG=a(b7),bxH=a(QY),bxI=a(ax),bxJ=a("TemplateElement"),bxK=a(R5),bxL=a("tag"),bxM=a("TaggedTemplateExpression"),bxN=a(kh),bxR=a(kz),bxS=a(kj),bxO=a(hr),bxP=a("declarations"),bxQ=a("VariableDeclaration"),bxT=a(cZ),bxU=a(aO),bxV=a("VariableDeclarator"),bxW=a(hr),bxX=a("Variance"),bxY=a("AnyTypeAnnotation"),bxZ=a("MixedTypeAnnotation"),bx0=a("EmptyTypeAnnotation"),bx1=a("VoidTypeAnnotation"),bx2=a("NullLiteralTypeAnnotation"),bx3=a("SymbolTypeAnnotation"),bx4=a("NumberTypeAnnotation"),bx5=a("BigIntTypeAnnotation"),bx6=a("StringTypeAnnotation"),bx7=a("BooleanTypeAnnotation"),bx8=a(cp),bx9=a("NullableTypeAnnotation"),bx_=a(ch),bx$=a(xG),bya=a(py),byb=a(iq),byc=a(c1),byd=a("FunctionTypeAnnotation"),bye=a(bK),byf=a(cp),byg=a(cz),byh=a(St),byi=a(bK),byj=a(cp),byk=a(cz),byl=a(St),bym=[0,0,0,0,0],byn=a("internalSlots"),byo=a("callProperties"),byp=a("indexers"),byq=a(oh),byr=a("exact"),bys=a(Qc),byt=a("ObjectTypeAnnotation"),byG=a(SA),byH=a("There should not be computed object type property keys"),byu=a(cZ),byE=a(ij),byF=a(i0),byv=a(hr),byw=a(bk),byx=a(oP),byy=a(ba),byz=a(bK),byA=a(kC),byB=a(ax),byC=a(cy),byD=a("ObjectTypeProperty"),byI=a(b6),byJ=a("ObjectTypeSpreadProperty"),byK=a(bk),byL=a(ba),byM=a(ax),byN=a(cy),byO=a(aO),byP=a("ObjectTypeIndexer"),byQ=a(ba),byR=a(ax),byS=a("ObjectTypeCallProperty"),byT=a(ax),byU=a(kC),byV=a(ba),byW=a(bK),byX=a(aO),byY=a("ObjectTypeInternalSlot"),byZ=a(aF),by0=a(co),by1=a("InterfaceTypeAnnotation"),by2=a("elementType"),by3=a("ArrayTypeAnnotation"),by4=a(aO),by5=a(Sa),by6=a("QualifiedTypeIdentifier"),by7=a(ch),by8=a(aO),by9=a("GenericTypeAnnotation"),by_=a("indexType"),by$=a("objectType"),bza=a("IndexedAccessType"),bzb=a(bK),bzc=a("OptionalIndexedAccessType"),bzd=a(nF),bze=a("UnionTypeAnnotation"),bzf=a(nF),bzg=a("IntersectionTypeAnnotation"),bzh=a(b6),bzi=a("TypeofTypeAnnotation"),bzj=a(aO),bzk=a(Sa),bzl=a("QualifiedTypeofIdentifier"),bzm=a(nF),bzn=a("TupleTypeAnnotation"),bzo=a(b7),bzp=a(ax),bzq=a("StringLiteralTypeAnnotation"),bzr=a(b7),bzs=a(ax),bzt=a("NumberLiteralTypeAnnotation"),bzu=a(b7),bzv=a(ax),bzw=a("BigIntLiteralTypeAnnotation"),bzx=a(cS),bzB=a(cV),bzy=a(b7),bzz=a(ax),bzA=a("BooleanLiteralTypeAnnotation"),bzC=a("ExistsTypeAnnotation"),bzD=a(cp),bzE=a("TypeAnnotation"),bzF=a(c1),bzG=a("TypeParameterDeclaration"),bzH=a(cI),bzI=a(bk),bzJ=a(QP),bzK=a(cz),bzL=a("TypeParameter"),bzM=a(c1),bzN=a(PN),bzO=a(c1),bzP=a(PN),bzQ=a(jh),bzR=a(AH),bzS=a("closingElement"),bzT=a("openingElement"),bzU=a("JSXElement"),bzV=a("closingFragment"),bzW=a(AH),bzX=a("openingFragment"),bzY=a("JSXFragment"),bzZ=a("selfClosing"),bz0=a(Pp),bz1=a(cz),bz2=a("JSXOpeningElement"),bz3=a("JSXOpeningFragment"),bz4=a(cz),bz5=a("JSXClosingElement"),bz6=a("JSXClosingFragment"),bz7=a(ax),bz8=a(cz),bz9=a("JSXAttribute"),bz_=a(b6),bz$=a("JSXSpreadAttribute"),bAc=a("JSXEmptyExpression"),bAa=a(bD),bAb=a("JSXExpressionContainer"),bAd=a(bD),bAe=a("JSXSpreadChild"),bAf=a(b7),bAg=a(ax),bAh=a("JSXText"),bAi=a(i5),bAj=a(z4),bAk=a("JSXMemberExpression"),bAl=a(cz),bAm=a("namespace"),bAn=a("JSXNamespacedName"),bAo=a(cz),bAp=a("JSXIdentifier"),bAq=a(p3),bAr=a(ko),bAs=a("ExportSpecifier"),bAt=a(ko),bAu=a("ImportDefaultSpecifier"),bAv=a(ko),bAw=a("ImportNamespaceSpecifier"),bAx=a(Sh),bAy=a(ko),bAz=a("imported"),bAA=a("ImportSpecifier"),bAB=a("Line"),bAD=a("Block"),bAC=a(ax),bAE=a(ax),bAF=a("DeclaredPredicate"),bAG=a("InferredPredicate"),bAH=a(kk),bAI=a(Qn),bAJ=a(PK),bAK=a(jc),bAL=a(i5),bAM=a(z4),bra=a("message"),brb=a(Cb),bq9=a(RI),bq_=a(AD),bq$=a(f9),bq7=a(kI),bq8=a(og),bAP=[0,[3,0,0],a(a1)],bAS=a(ki),bAT=a(qs),bAU=a(kp),bAV=a(kA),bAW=a(bV),bAX=a(cn),bAY=a(iq),bAZ=a(cs),bA0=a(pi),bA1=a(kh),bA2=a(oz),bA3=a(pV),bA4=a(kj),bA5=a(kz),bA6=a(hh),bA7=a(cV),bA8=a(cS),bA9=a(cg),bA_=a(qj),bA$=a(oK),bBa=a(cq),bBb=a(cI),bBc=a(op),bBd=a(pT),bBe=a(nE),bBf=a(kH),bBg=a(co),bBh=a(ba),bBi=a(qU),bBj=a(ii),bBk=a(kE),bBl=a(hp),bBm=a(hk),bBn=a(ob),bBo=a(pK),bBp=a(bJ),bBq=a(jb),bBr=a(hQ),bBs=a(bT),bBt=a(pj),bBu=a(p6),bBv=a(nL),bBw=a(pw),bBx=a(br),bBy=a(cj),bBz=a(kt),bBA=a(hs),bBB=a(xZ),bBC=a(BS),bBD=a(hN),bBE=a(eM),bBF=a(oL),bBG=a(n5),bBH=a(b5),bBI=a(ja),bBJ=a(ih),bBK=a(i6),bBL=a(hk),bBM=a(oe),bBN=a(ks),bBO=a(oF),bAQ=[0,a(qt)],bAR=a(i),bBR=[7,0],bBQ=a(i),bBT=[0,1],bBU=[0,2],bBV=[0,3],bBW=[0,0],bBS=[0,0],bBP=[0,0,0,0,0],bB7=[0,a(jd),906,6],bB8=[0,a(jd),Rr,6],bCa=[0,0],bCg=[0,a(jd),1012,8],bCh=a(oP),bCi=[0,a(jd),1029,8],bB9=a("Can not have both `static` and `proto`"),bCe=a(ba),bCf=a(oP),bCb=a(ij),bCc=a(i0),bCd=a(ij),bB_=a(i7),bB$=a(SB),bCj=[0,0,0,0],bB6=[0,[0,0,0,0,0]],bB5=a(iq),bB3=[0,a("a type")],bB4=[0,0],bB2=[0,0],bB0=[14,1],bB1=[14,0],bBZ=[0,a(jd),Sw,15],bBY=[0,a(jd),ci,15],bCm=[0,44],bCn=[0,44],bCo=a(ki),bCp=[0,a(i),0],bCl=[0,0,0],bCk=[0,0,0],bCr=[0,0,0],bD2=[0,41],bD0=a(bS),bD1=a(bS),bDW=[0,a("a regular expression")],bDX=a(i),bDY=a(i),bDZ=a(i),bDT=[0,a("src/parser/expression_parser.ml"),SK,17],bDU=[0,a("a template literal part")],bDV=[0,[0,a(i),a(i)],1],bDQ=a(hh),bDP=a(hh),bDR=a(cS),bDS=a(cV),bDN=a("Invalid bigint "),bDO=a("Invalid bigint binary/octal "),bDK=a(kg),bDJ=a(RP),bDL=a(C_),bDM=a(C_),bDI=a(QZ),bDH=[0,44],bDE=[0,1],bDF=[0,1],bDC=[0,1],bDD=[0,1],bDG=[0,0],bDA=a(jh),bDB=a(jh),bDw=a(ii),bDy=a(BU),bDx=[0,a("the identifier `target`")],bDz=[0,0],bDt=a(bJ),bDu=a(km),bDv=a(km),bDq=a(jb),bDp=[0,0],bDo=[0,a("either a call or access of `super`")],bDs=a(jb),bDr=[0,0],bDn=[0,1],bDm=[0,0],bDl=[0,1],bDk=[0,0],bDc=[0,1],bDd=[0,0],bDe=[0,2],bDf=[0,3],bDg=[0,7],bDh=[0,6],bDi=[0,4],bDj=[0,5],bCS=[0,[0,17,[0,2]]],bCT=[0,[0,18,[0,3]]],bCU=[0,[0,19,[0,4]]],bCV=[0,[0,0,[0,5]]],bCW=[0,[0,1,[0,5]]],bCX=[0,[0,2,[0,5]]],bCY=[0,[0,3,[0,5]]],bCZ=[0,[0,5,[0,6]]],bC0=[0,[0,7,[0,6]]],bC1=[0,[0,4,[0,6]]],bC2=[0,[0,6,[0,6]]],bC3=[0,[0,8,[0,7]]],bC4=[0,[0,9,[0,7]]],bC5=[0,[0,10,[0,7]]],bC6=[0,[0,11,[0,8]]],bC7=[0,[0,12,[0,8]]],bC8=[0,[0,15,[0,9]]],bC9=[0,[0,13,[0,9]]],bC_=[0,[0,14,[1,10]]],bC$=[0,[0,16,[0,9]]],bDa=[0,[0,21,[0,6]]],bDb=[0,[0,20,[0,6]]],bCR=[23,a(DA)],bCB=[0,[0,8]],bCC=[0,[0,7]],bCD=[0,[0,6]],bCE=[0,[0,10]],bCF=[0,[0,9]],bCG=[0,[0,11]],bCH=[0,[0,5]],bCI=[0,[0,4]],bCJ=[0,[0,2]],bCK=[0,[0,3]],bCL=[0,[0,1]],bCM=[0,[0,0]],bCN=[0,[0,12]],bCO=[0,[0,13]],bCP=[0,[0,14]],bCQ=[0,0],bCx=a(bJ),bCy=a(ii),bCz=a(BU),bCA=a(km),bCw=a(hN),bCs=a(bJ),bCt=a(ii),bCu=a(BU),bCv=a(km),bD_=a(ig),bD$=a(fo),bEa=[17,a("JSX fragment")],bD9=[0,c0],bD8=[1,c0],bD6=a(i),bD7=[0,a(i)],bD4=[0,a(qt)],bD5=a(i),bEg=[0,0,0,0],bEh=[0,a("src/hack_forked/utils/collections/flow_map.ml"),717,36],bEi=[0,0,0],bEB=a(kH),bEC=[0,a(i),0],bEz=a("unexpected PrivateName in Property, expected a PrivateField"),bEx=a(i7),bEy=a(SB),bEA=[0,0,0],bEq=a(i7),bEr=a(i7),bEt=a(ij),bEu=a(i0),bEv=[0,1],bEw=[0,1],bEs=[0,1],bEp=a(i7),bEn=a(ij),bEo=a(i0),bEm=a(A4),bEj=a(br),bEk=a(eM),bEl=a("Internal Error: private name found in object props"),bEH=a(Q2),bEI=[0,a(qt)],bEJ=a(br),bEK=a(eM),bEF=a(br),bEG=a(eM),bED=a(Q2),bEE=[10,a(cJ)],bFv=[0,1],bFt=a(il),bFu=a(kF),bFw=[0,a(zC),1763,21],bFq=a(kF),bFs=a(il),bFr=[0,a("a declaration, statement or export specifiers")],bFp=[0,40],bFo=a(il),bFl=a(kF),bFm=[0,a(i),a(i),0],bFn=[0,a(P1)],bFk=a(SP),bFj=a("exports"),bFf=[0,1],bFg=[0,1],bFh=[0,0],bFi=a(SP),bFe=[0,40],bFd=a(x6),bFc=[0,0],bFb=[0,1],bE5=[0,83],bE9=[0,0],bE6=[0,1],bE7=a(il),bE8=a(il),bFa=a(kF),bE$=a(il),bE_=[0,a("the keyword `as`")],bE4=a(il),bE2=a(kF),bE3=[0,a(P1)],bE0=[0,a("the keyword `from`")],bE1=[0,a(i),a(i),0],bEZ=[0,a(P5)],bEY=a("Label"),bEX=[0,a(P5)],bEW=[0,0,0],bEU=[0,29],bEV=[0,a(zC),431,22],bES=[0,28],bET=[0,a(zC),450,22],bER=[0,0],bEQ=a("the token `;`"),bEP=[0,0],bEO=[0,0],bEL=a(eM),bEM=a(kz),bEN=a(br),bFV=[0,a(PV)],bFW=[15,[0,0]],bFU=[0,a(PV)],bFS=a("use strict"),bFT=[0,0,0,0],bFP=a(AW),bFQ=a("Nooo: "),bFz=a(cI),bFy=a("Parser error: No such thing as an expression pattern!"),bFx=a(i),bFA=[0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],bFB=[0,a("src/parser/parser_flow.ml"),y4,28],bFX=[0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],bFZ=a(ax),bF0=a(Q9),bF1=a(kI),bF2=a(og),bF3=a(RI),bF4=a(kI),bF5=a(og),bF6=a(AD),bF7=a(Cb),bF8=a("normal"),bF$=a(hs),bGa=a("jsxTag"),bGb=a("jsxChild"),bGc=a("template"),bGd=a(RJ),bF9=a("context"),bF_=a(hs),bGp=a(P8),bGq=a(J),bGr=a(QH),bGs=[0,0],bGt=a("errors"),bGu=a(P8),bGj=a("use_strict"),bGk=a(nF),bGl=a("esproposal_export_star_as"),bGm=a("esproposal_decorators"),bGn=a("enums"),bGv=a("Internal error: "),bGx=a("flow"),bGw=a("parse");function
aY(a){if(typeof
a==="number")return 0;else
switch(a[0]){case
0:return[0,aY(a[1])];case
1:return[1,aY(a[1])];case
2:return[2,aY(a[1])];case
3:return[3,aY(a[1])];case
4:return[4,aY(a[1])];case
5:return[5,aY(a[1])];case
6:return[6,aY(a[1])];case
7:return[7,aY(a[1])];case
8:var
c=a[1];return[8,c,aY(a[2])];case
9:var
b=a[1];return[9,b,b,aY(a[3])];case
10:return[10,aY(a[1])];case
11:return[11,aY(a[1])];case
12:return[12,aY(a[1])];case
13:return[13,aY(a[1])];default:return[14,aY(a[1])]}}function
bM(a,b){if(typeof
a==="number")return b;else
switch(a[0]){case
0:return[0,bM(a[1],b)];case
1:return[1,bM(a[1],b)];case
2:return[2,bM(a[1],b)];case
3:return[3,bM(a[1],b)];case
4:return[4,bM(a[1],b)];case
5:return[5,bM(a[1],b)];case
6:return[6,bM(a[1],b)];case
7:return[7,bM(a[1],b)];case
8:var
c=a[1];return[8,c,bM(a[2],b)];case
9:var
d=a[2],e=a[1];return[9,e,d,bM(a[3],b)];case
10:return[10,bM(a[1],b)];case
11:return[11,bM(a[1],b)];case
12:return[12,bM(a[1],b)];case
13:return[13,bM(a[1],b)];default:return[14,bM(a[1],b)]}}function
aT(a,b){if(typeof
a==="number")return b;else
switch(a[0]){case
0:return[0,aT(a[1],b)];case
1:return[1,aT(a[1],b)];case
2:var
c=a[1];return[2,c,aT(a[2],b)];case
3:var
d=a[1];return[3,d,aT(a[2],b)];case
4:var
e=a[3],f=a[2],g=a[1];return[4,g,f,e,aT(a[4],b)];case
5:var
h=a[3],i=a[2],j=a[1];return[5,j,i,h,aT(a[4],b)];case
6:var
k=a[3],l=a[2],m=a[1];return[6,m,l,k,aT(a[4],b)];case
7:var
n=a[3],o=a[2],p=a[1];return[7,p,o,n,aT(a[4],b)];case
8:var
q=a[3],r=a[2],s=a[1];return[8,s,r,q,aT(a[4],b)];case
9:var
t=a[1];return[9,t,aT(a[2],b)];case
10:return[10,aT(a[1],b)];case
11:var
u=a[1];return[11,u,aT(a[2],b)];case
12:var
v=a[1];return[12,v,aT(a[2],b)];case
13:var
w=a[2],x=a[1];return[13,x,w,aT(a[3],b)];case
14:var
y=a[2],z=a[1];return[14,z,y,aT(a[3],b)];case
15:return[15,aT(a[1],b)];case
16:return[16,aT(a[1],b)];case
17:var
A=a[1];return[17,A,aT(a[2],b)];case
18:var
B=a[1];return[18,B,aT(a[2],b)];case
19:return[19,aT(a[1],b)];case
20:var
C=a[2],D=a[1];return[20,D,C,aT(a[3],b)];case
21:var
E=a[1];return[21,E,aT(a[2],b)];case
22:return[22,aT(a[1],b)];case
23:var
F=a[1];return[23,F,aT(a[2],b)];default:var
G=a[2],H=a[1];return[24,H,G,aT(a[3],b)]}}function
re(a,c,b){return a[1]===c?(a[1]=b,1):0}function
V(a){throw[0,b_,a]}function
bv(a){throw[0,rf,a]}function
kQ(a){return 0<=a?a:-a|0}var
Tp=QD;function
Z(d,c){var
a=ah(d),e=ah(c),b=aW(a+e|0);hT(d,0,b,0,a);hT(c,0,b,a,e);return bE(b)}function
Tq(a){return a?Tr:Ts}function
ai(a,b){if(a){var
c=a[1];return[0,c,ai(a[2],b)]}return b}bHa(0);var
Tv=Tc(1),c4=Tc(2);function
Tw(b){function
a(b){var
a=b;for(;;){if(a){var
c=a[2],d=a[1];try{it(d)}catch(a){a=aS(a);if(a[1]!==GN)throw a;var
e=a}var
a=c;continue}return 0}}return a(bHb(0))}function
jq(b,a){return GC(b,a,0,ah(a))}function
GO(a){jq(c4,a);Td(c4,10);return it(c4)}var
rh=[0,Tw];function
Ty(d){for(;;){var
a=rh[1],e=[0,1],c=1-re(rh,a,function(a,c){return function(e){if(re(a,1,0))b(d,0);return b(c,0)}}(e,a));if(c)continue;return c}}function
ri(a){return b(rh[1],0)}GG(a(Pf),ri);var
GP=bHm(0)[1],jr=(4*bHl(0)|0)-1|0,TA=[aQ,Tz,hu(0)];function
TB(a){throw TA}function
TC(a){var
d=a[1];a[1]=TB;try{var
c=b(d,0);bHe(a,c);return c}catch(b){b=aS(b);a[1]=function(a){throw b};throw b}}function
GQ(a){return 25<a+pE>>>0?a:a+P2|0}function
c5(c){var
b=0,a=c;for(;;){if(a){var
b=b+1|0,a=a[2];continue}return b}}function
js(a){return a?a[1]:V(TJ)}function
GR(a){return a?a[2]:V(TK)}function
c6(d,c){var
a=d,b=c;for(;;){if(a){var
e=[0,a[1],b],a=a[2],b=e;continue}return b}}function
U(a){return c6(a,0)}function
jt(a){if(a){var
b=a[1];return ai(b,jt(a[2]))}return 0}function
hU(c,a){if(a){var
d=a[2],e=b(c,a[1]);return[0,e,hU(c,d)]}return 0}function
kR(e,d){var
c=0,a=d;for(;;){if(a){var
f=a[2],c=[0,b(e,a[1]),c],a=f;continue}return c}}function
bw(d,c){var
a=c;for(;;){if(a){var
e=a[2];b(d,a[1]);var
a=e;continue}return 0}}function
T(f,e,c){var
b=e,a=c;for(;;){if(a){var
g=a[2],b=d(f,b,a[1]),a=g;continue}return b}}function
rj(c,a,b){if(a){var
e=a[1];return d(c,e,rj(c,a[2],b))}return b}function
GS(f,e,c){var
b=e,a=c;for(;;){if(b){if(a){var
g=a[2],h=b[2];d(f,b[1],a[1]);var
b=h,a=g;continue}}else
if(!a)return 0;return bv(TL)}}function
rk(d,c){var
a=c;for(;;){if(a){var
e=a[2],b=0===S3(a[1],d)?1:0;if(b)return b;var
a=e;continue}return 0}}function
TM(d,c){var
a=c;for(;;){if(a){var
b=a[1],e=a[2],f=b[2];if(0===S3(b[1],d))return f;var
a=e;continue}throw a4}}function
ju(f){var
g=0;return function(h){var
c=g,a=h;for(;;){if(a){var
d=a[2],e=a[1];if(b(f,e)){var
c=[0,e,c],a=d;continue}var
a=d;continue}return U(c)}}}function
hV(a,c){var
b=aW(a);bGP(b,0,a,c);return b}function
GT(a){var
b=b9(a),c=aW(b);hS(a,0,c,0,b);return c}function
GU(c,b,a){if(0<=b&&0<=a&&!((b9(c)-a|0)<b)){var
d=aW(a);hS(c,b,d,0,a);return d}return bv(TN)}function
iy(c,b,a){return bE(GU(c,b,a))}function
GV(e,c,d,b,a){if(0<=a&&0<=c&&!((b9(e)-a|0)<c)&&0<=b&&!((b9(d)-a|0)<b))return hS(e,c,d,b,a);return bv(TO)}function
g_(e,c,d,b,a){if(0<=a&&0<=c&&!((ah(e)-a|0)<c)&&0<=b&&!((b9(d)-a|0)<b))return hT(e,c,d,b,a);return bv(TP)}function
kS(b,a){return bE(hV(b,a))}function
bZ(c,b,a){return bE(GU(g7(c),b,a))}var
GW=Y;function
GX(e,c){var
d=c.length-1-1|0,f=0;if(!(d<0)){var
a=f;for(;;){b(e,c[1+a]);var
g=a+1|0;if(d!==a){var
a=g;continue}break}}return 0}function
kT(e,c){var
d=c.length-1;if(0===d)return[0];var
f=jm(d,b(e,c[1])),g=d-1|0,h=1;if(!(g<1)){var
a=h;for(;;){f[1+a]=b(e,c[1+a]);var
i=a+1|0;if(g!==a){var
a=i;continue}break}}return f}function
jv(a){if(a){var
d=0,c=a,g=a[2],h=a[1];for(;;){if(c){var
d=d+1|0,c=c[2];continue}var
f=jm(d,h),e=1,b=g;for(;;){if(b){var
i=b[2];f[1+e]=b[1];var
e=e+1|0,b=i;continue}return f}}}return[0]}function
rl(g){function
h(a){return a?a[5]:0}function
e(b,f,e,a){var
c=h(b),d=h(a),g=d<=c?c+1|0:d+1|0;return[0,b,f,e,a,g]}function
p(b,a){return[0,0,b,a,0,1]}function
a(b,g,f,a){var
i=b?b[5]:0,j=a?a[5]:0;if((j+2|0)<i){if(b){var
c=b[4],m=b[3],n=b[2],k=b[1],q=h(c);if(q<=h(k))return e(k,n,m,e(c,g,f,a));if(c){var
r=c[3],s=c[2],t=c[1],u=e(c[4],g,f,a);return e(e(k,n,m,t),s,r,u)}return bv(TS)}return bv(TT)}if((i+2|0)<j){if(a){var
l=a[4],o=a[3],p=a[2],d=a[1],v=h(d);if(v<=h(l))return e(e(b,g,f,d),p,o,l);if(d){var
w=d[3],x=d[2],y=d[1],z=e(d[4],p,o,l);return e(e(b,g,f,y),x,w,z)}return bv(TU)}return bv(TV)}var
A=j<=i?i+1|0:j+1|0;return[0,b,g,f,a,A]}var
B=0;function
O(a){return a?0:1}function
m(e,c,b){if(b){var
f=b[4],i=b[3],j=b[2],h=b[1],o=b[5],k=d(g[1],e,j);if(0===k)return i===c?b:[0,h,e,c,f,o];if(0<=k){var
l=m(e,c,f);return f===l?b:a(h,j,i,l)}var
n=m(e,c,h);return h===n?b:a(n,j,i,f)}return[0,0,e,c,0,1]}function
P(e,c){var
a=c;for(;;){if(a){var
f=a[4],h=a[3],i=a[1],b=d(g[1],e,a[2]);if(0===b)return h;var
j=0<=b?f:i,a=j;continue}throw a4}}function
Q(g,l){var
c=l;for(;;){if(c){var
h=c[2],m=c[4],n=c[3],o=c[1];if(b(g,h)){var
e=h,d=n,a=o;for(;;){if(a){var
f=a[2],i=a[4],j=a[3],k=a[1];if(b(g,f)){var
e=f,d=j,a=k;continue}var
a=i;continue}return[0,e,d]}}var
c=m;continue}throw a4}}function
R(g,l){var
c=l;for(;;){if(c){var
h=c[2],m=c[4],n=c[3],o=c[1];if(b(g,h)){var
e=h,d=n,a=o;for(;;){if(a){var
f=a[2],i=a[4],j=a[3],k=a[1];if(b(g,f)){var
e=f,d=j,a=k;continue}var
a=i;continue}return[0,[0,e,d]]}}var
c=m;continue}return 0}}function
S(g,l){var
c=l;for(;;){if(c){var
h=c[2],m=c[4],n=c[3],o=c[1];if(b(g,h)){var
e=h,d=n,a=m;for(;;){if(a){var
f=a[2],i=a[4],j=a[3],k=a[1];if(b(g,f)){var
e=f,d=j,a=i;continue}var
a=k;continue}return[0,e,d]}}var
c=o;continue}throw a4}}function
T(g,l){var
c=l;for(;;){if(c){var
h=c[2],m=c[4],n=c[3],o=c[1];if(b(g,h)){var
e=h,d=n,a=m;for(;;){if(a){var
f=a[2],i=a[4],j=a[3],k=a[1];if(b(g,f)){var
e=f,d=j,a=i;continue}var
a=k;continue}return[0,[0,e,d]]}}var
c=o;continue}return 0}}function
U(e,c){var
a=c;for(;;){if(a){var
f=a[4],h=a[3],i=a[1],b=d(g[1],e,a[2]);if(0===b)return[0,h];var
j=0<=b?f:i,a=j;continue}return 0}}function
V(f,e){var
a=e;for(;;){if(a){var
h=a[4],i=a[1],b=d(g[1],f,a[2]),c=0===b?1:0;if(c)return c;var
j=0<=b?h:i,a=j;continue}return 0}}function
n(c){var
a=c;for(;;){if(a){var
b=a[1];if(b){var
a=b;continue}return[0,a[2],a[3]]}throw a4}}function
C(c){var
a=c;for(;;){if(a){var
b=a[1];if(b){var
a=b;continue}return[0,[0,a[2],a[3]]]}return 0}}function
W(b){var
a=b;for(;;){if(a){if(a[4]){var
a=a[4];continue}return[0,a[2],a[3]]}throw a4}}function
X(b){var
a=b;for(;;){if(a){if(a[4]){var
a=a[4];continue}return[0,[0,a[2],a[3]]]}return 0}}function
q(b){if(b){var
c=b[1];if(c){var
d=b[4],e=b[3],f=b[2];return a(q(c),f,e,d)}return b[4]}return bv(TW)}function
D(c,b){if(c){if(b){var
d=n(b),e=d[2],f=d[1];return a(c,f,e,q(b))}return c}return b}function
r(f,b){if(b){var
c=b[4],i=b[3],h=b[2],e=b[1],j=d(g[1],f,h);if(0===j)return D(e,c);if(0<=j){var
k=r(f,c);return c===k?b:a(e,h,i,k)}var
l=r(f,e);return e===l?b:a(l,h,i,c)}return 0}function
s(e,i,c){if(c){var
f=c[4],j=c[3],k=c[2],h=c[1],r=c[5],l=d(g[1],e,k);if(0===l){var
m=b(i,[0,j]);if(m){var
n=m[1];return j===n?c:[0,h,e,n,f,r]}return D(h,f)}if(0<=l){var
o=s(e,i,f);return f===o?c:a(h,k,j,o)}var
p=s(e,i,h);return h===p?c:a(p,k,j,f)}var
q=b(i,0);return q?[0,0,e,q[1],0,1]:0}function
E(b,c){var
a=c;for(;;){if(a){var
e=a[4],f=a[3],g=a[2];E(b,a[1]);d(b,g,f);var
a=e;continue}return 0}}function
t(c,a){if(a){var
d=a[5],e=a[4],f=a[3],g=a[2],h=t(c,a[1]),i=b(c,f);return[0,h,g,i,t(c,e),d]}return 0}function
u(b,a){if(a){var
c=a[2],e=a[5],f=a[4],g=a[3],h=u(b,a[1]),i=d(b,c,g);return[0,h,c,i,u(b,f),e]}return 0}function
F(c,e,d){var
a=e,b=d;for(;;){if(a){var
f=a[4],g=a[3],h=a[2],i=A(c,h,g,F(c,a[1],b)),a=f,b=i;continue}return b}}function
G(b,g){var
a=g;for(;;){if(a){var
h=a[4],i=a[1],c=d(b,a[2],a[3]);if(c){var
e=G(b,i);if(e){var
a=h;continue}var
f=e}else
var
f=c;return f}return 1}}function
H(b,g){var
a=g;for(;;){if(a){var
h=a[4],i=a[1],c=d(b,a[2],a[3]);if(c)var
e=c;else{var
f=H(b,i);if(!f){var
a=h;continue}var
e=f}return e}return 0}}function
I(d,c,b){if(b){var
e=b[4],f=b[3],g=b[2];return a(I(d,c,b[1]),g,f,e)}return p(d,c)}function
J(d,c,b){if(b){var
e=b[3],f=b[2],g=b[1];return a(g,f,e,J(d,c,b[4]))}return p(d,c)}function
c(d,g,f,b){if(d){if(b){var
h=b[5],i=d[5],j=b[4],k=b[3],l=b[2],m=b[1],n=d[4],o=d[3],p=d[2],q=d[1];return(h+2|0)<i?a(q,p,o,c(n,g,f,b)):(i+2|0)<h?a(c(d,g,f,m),l,k,j):e(d,g,f,b)}return J(g,f,d)}return I(g,f,b)}function
j(b,a){if(b){if(a){var
d=n(a),e=d[2],f=d[1];return c(b,f,e,q(a))}return b}return a}function
o(d,e,b,a){return b?c(d,e,b[1],a):j(d,a)}function
i(b,a){if(a){var
e=a[4],f=a[3],h=a[2],j=a[1],m=d(g[1],b,h);if(0===m)return[0,j,[0,f],e];if(0<=m){var
k=i(b,e),n=k[3],o=k[2];return[0,c(j,h,f,k[1]),o,n]}var
l=i(b,j),p=l[2],q=l[1];return[0,q,p,c(l[3],h,f,e)]}return TX}function
k(c,b,a){if(b){var
d=b[2],j=b[5],l=b[4],m=b[3],n=b[1];if(h(a)<=j){var
e=i(d,a),p=e[2],q=e[1],r=k(c,l,e[3]),s=A(c,d,[0,m],p);return o(k(c,n,q),d,s,r)}}else
if(!a)return 0;if(a){var
f=a[2],t=a[4],u=a[3],v=a[1],g=i(f,b),w=g[2],x=g[1],y=k(c,g[3],t),z=A(c,f,w,[0,u]);return o(k(c,x,v),f,z,y)}throw[0,ap,TY]}function
l(d,b,a){if(b){if(a){var
j=a[3],e=a[2],k=b[3],f=b[2],u=a[4],v=a[1],w=b[4],x=b[1];if(a[5]<=b[5]){var
g=i(f,a),m=g[2],y=g[3],n=l(d,x,g[1]),p=l(d,w,y);return m?o(n,f,A(d,f,k,m[1]),p):c(n,f,k,p)}var
h=i(e,b),q=h[2],z=h[3],r=l(d,h[1],v),s=l(d,z,u);return q?o(r,e,A(d,e,q[1],j),s):c(r,e,j,s)}var
t=b}else
var
t=a;return t}function
v(b,a){if(a){var
g=a[4],h=a[3],i=a[2],k=a[1],e=v(b,k),l=d(b,i,h),f=v(b,g);if(l){if(k===e&&g===f)return a;return c(e,i,h,f)}return j(e,f)}return 0}function
w(b,a){if(a){var
e=a[2],i=a[4],k=a[3],f=w(b,a[1]),g=d(b,e,k),h=w(b,i);return g?c(f,e,g[1],h):j(f,h)}return 0}function
x(b,a){if(a){var
e=a[3],f=a[2],n=a[4],g=x(b,a[1]),h=g[2],i=g[1],o=d(b,f,e),k=x(b,n),l=k[2],m=k[1];if(o){var
p=j(h,l);return[0,c(i,f,e,m),p]}var
q=c(h,f,e,l);return[0,j(i,m),q]}return TZ}function
f(d,c){var
a=d,b=c;for(;;){if(a){var
e=[0,a[2],a[3],a[4],b],a=a[1],b=e;continue}return b}}function
Y(j,i,h){var
r=f(h,0),b=f(i,0),a=r;for(;;){if(b){if(a){var
k=a[4],l=a[3],m=a[2],n=b[4],o=b[3],p=b[2],c=d(g[1],b[1],a[1]);if(0===c){var
e=d(j,p,m);if(0===e){var
q=f(l,k),b=f(o,n),a=q;continue}return e}return c}return 1}return a?-1:0}}function
Z(k,j,i){var
s=f(i,0),b=f(j,0),a=s;for(;;){if(b){if(a){var
l=a[4],m=a[3],n=a[2],o=b[4],p=b[3],q=b[2],c=0===d(g[1],b[1],a[1])?1:0;if(c){var
e=d(k,q,n);if(e){var
r=f(m,l),b=f(p,o),a=r;continue}var
h=e}else
var
h=c;return h}return 0}return a?0:1}}function
y(a){if(a){var
b=a[1],c=y(a[4]);return(y(b)+1|0)+c|0}return 0}function
K(d,c){var
b=d,a=c;for(;;){if(a){var
e=a[3],f=a[2],g=a[1],b=[0,[0,f,e],K(b,a[4])],a=g;continue}return b}}function
_(a){return K(0,a)}function
L(h,g){var
a=g,d=h;for(;;){var
c=b(d,0);if(c){var
e=c[1],f=c[2],a=m(e[1],e[2],a),d=f;continue}return a}}function
$(a){return L(a,B)}function
z(a,e){if(a){var
b=a[2],c=a[1],d=f(a[3],a[4]);return[0,[0,c,b],function(a){return z(d,a)}]}return 0}function
aa(a){var
b=f(a,0);return function(a){return z(b,a)}}function
M(d,c){var
a=d,b=c;for(;;){if(a){var
e=[0,a[2],a[3],a[1],b],a=a[4],b=e;continue}return b}}function
N(a,e){if(a){var
b=a[2],c=a[1],d=M(a[3],a[4]);return[0,[0,c,b],function(a){return N(d,a)}]}return 0}function
ab(a){var
b=M(a,0);return function(a){return N(b,a)}}return[0,B,O,V,m,s,p,r,k,l,Y,Z,E,F,G,H,v,w,x,y,_,n,C,W,X,n,C,i,P,U,Q,R,S,T,t,u,aa,ab,function(k,j){var
a=j,b=0;for(;;){if(a){var
c=a[4],f=a[3],e=a[2],l=a[1],h=d(g[1],e,k);if(0!==h){if(0<=h){var
a=l,b=[0,e,f,c,b];continue}var
a=c;continue}var
i=[0,e,f,c,b]}else
var
i=b;return function(a){return z(i,a)}}},L,$]}function
jw(a){return[0,0,0]}function
jx(a){a[1]=0;a[2]=0;return 0}function
hW(b,a){a[1]=[0,b,a[1]];a[2]=a[2]+1|0;return 0}function
iz(a){var
b=a[1];if(b){var
c=b[1];a[1]=b[2];a[2]=a[2]-1|0;return[0,c]}return 0}function
iA(b){var
a=b[1];return a?[0,a[1]]:0}var
T1=[aQ,T0,hu(0)];function
GY(a){return[0,0,0,0]}function
rm(a){a[1]=0;a[2]=0;a[3]=0;return 0}function
rn(d,a){var
b=[0,d,0],c=a[3];return c?(a[1]=a[1]+1|0,c[2]=b,a[3]=b,0):(a[1]=1,a[2]=b,a[3]=b,0)}function
aD(a){var
b=1<=a?a:1,c=jr<b?jr:b,d=aW(c);return[0,d,0,c,d]}function
aZ(a){return iy(a[1],0,a[2])}function
ro(a,c){var
d=a[2],b=[0,a[3]];for(;;){if(b[1]<(d+c|0)){b[1]=2*b[1]|0;continue}if(jr<b[1])if((d+c|0)<=jr)b[1]=jr;else
V(T5);var
e=aW(b[1]);GV(a[1],0,e,0,a[2]);a[1]=e;a[3]=b[1];if((a[2]+c|0)<=a[3]){if((d+c|0)<=a[3])return 0;throw[0,ap,T3]}throw[0,ap,T4]}}function
cO(a,c){var
b=a[2];if(a[3]<=b)ro(a,1);aG(a[1],b,c);a[2]=b+1|0;return 0}function
GZ(a,d,c,b){var
e=c<0?1:0;if(e)var
f=e;else
var
h=b<0?1:0,f=h||((ah(d)-b|0)<c?1:0);if(f)bv(T6);var
g=a[2]+b|0;if(a[3]<g)ro(a,b);hT(d,c,a[1],a[2],b);a[2]=g;return 0}function
rp(d,c,b,a){return GZ(d,bE(c),b,a)}function
an(a,c){var
b=ah(c),d=a[2]+b|0;if(a[3]<d)ro(a,b);hT(c,0,a[1],a[2],b);a[2]=d;return 0}function
rq(a){return 5===a[2]?12:-6}function
G0(a){return[0,0,aW(a)]}function
G1(a,h){var
b=b9(a[2]),c=a[1]+h|0,d=b<c?1:0;if(d){var
e=b*2|0,i=c<=e?e:c,f=aW(i);GV(a[2],0,f,0,b);a[2]=f;var
g=0}else
var
g=d;return g}function
iB(a,b){G1(a,1);is(a[2],a[1],b);a[1]=a[1]+1|0;return 0}function
bx(a,c){var
b=ah(c);G1(a,b);g_(c,0,a[2],a[1],b);a[1]=a[1]+b|0;return 0}function
G2(a){return iy(a[2],0,a[1])}function
G3(a){if(typeof
a==="number")switch(a){case
0:return T7;case
1:return T8;case
2:return T9;case
3:return T_;case
4:return T$;case
5:return Ua;default:return Ub}else
switch(a[0]){case
0:return a[1];case
1:return a[1];default:return Z(Uc,kS(1,a[1]))}}function
rr(b,c){var
a=c;for(;;)if(typeof
a==="number")return 0;else
switch(a[0]){case
0:var
d=a[1];bx(b,Ud);var
a=d;continue;case
1:var
e=a[1];bx(b,Ue);var
a=e;continue;case
2:var
f=a[1];bx(b,Uf);var
a=f;continue;case
3:var
g=a[1];bx(b,Ug);var
a=g;continue;case
4:var
h=a[1];bx(b,Uh);var
a=h;continue;case
5:var
i=a[1];bx(b,Ui);var
a=i;continue;case
6:var
j=a[1];bx(b,Uj);var
a=j;continue;case
7:var
k=a[1];bx(b,Uk);var
a=k;continue;case
8:var
l=a[2],m=a[1];bx(b,Ul);rr(b,m);bx(b,Um);var
a=l;continue;case
9:var
n=a[3],o=a[1];bx(b,Un);rr(b,o);bx(b,Uo);var
a=n;continue;case
10:var
p=a[1];bx(b,Up);var
a=p;continue;case
11:var
q=a[1];bx(b,Uq);var
a=q;continue;case
12:var
r=a[1];bx(b,Ur);var
a=r;continue;case
13:var
s=a[1];bx(b,Us);var
a=s;continue;default:var
t=a[1];bx(b,Ut);var
a=t;continue}}function
a8(a){if(typeof
a==="number")return 0;else
switch(a[0]){case
0:return[0,a8(a[1])];case
1:return[1,a8(a[1])];case
2:return[2,a8(a[1])];case
3:return[3,a8(a[1])];case
4:return[4,a8(a[1])];case
5:return[5,a8(a[1])];case
6:return[6,a8(a[1])];case
7:return[7,a8(a[1])];case
8:var
b=a[1];return[8,b,a8(a[2])];case
9:var
c=a[2],d=a[1];return[9,c,d,a8(a[3])];case
10:return[10,a8(a[1])];case
11:return[11,a8(a[1])];case
12:return[12,a8(a[1])];case
13:return[13,a8(a[1])];default:return[14,a8(a[1])]}}function
by(a){if(typeof
a==="number"){var
s=function(a){return 0},t=function(a){return 0},u=function(a){return 0};return[0,function(a){return 0},u,t,s]}else
switch(a[0]){case
0:var
c=by(a[1]),v=c[4],w=c[3],x=c[2],y=c[1],z=function(a){b(x,0);return 0};return[0,function(a){b(y,0);return 0},z,w,v];case
1:var
d=by(a[1]),A=d[4],B=d[3],C=d[2],D=d[1],E=function(a){b(C,0);return 0};return[0,function(a){b(D,0);return 0},E,B,A];case
2:var
e=by(a[1]),F=e[4],G=e[3],H=e[2],I=e[1],J=function(a){b(H,0);return 0};return[0,function(a){b(I,0);return 0},J,G,F];case
3:var
f=by(a[1]),K=f[4],L=f[3],M=f[2],N=f[1],O=function(a){b(M,0);return 0};return[0,function(a){b(N,0);return 0},O,L,K];case
4:var
g=by(a[1]),P=g[4],Q=g[3],R=g[2],S=g[1],T=function(a){b(R,0);return 0};return[0,function(a){b(S,0);return 0},T,Q,P];case
5:var
h=by(a[1]),U=h[4],V=h[3],W=h[2],X=h[1],Y=function(a){b(W,0);return 0};return[0,function(a){b(X,0);return 0},Y,V,U];case
6:var
i=by(a[1]),Z=i[4],_=i[3],$=i[2],aa=i[1],ab=function(a){b($,0);return 0};return[0,function(a){b(aa,0);return 0},ab,_,Z];case
7:var
j=by(a[1]),ac=j[4],ad=j[3],ae=j[2],af=j[1],ag=function(a){b(ae,0);return 0};return[0,function(a){b(af,0);return 0},ag,ad,ac];case
8:var
k=by(a[2]),ah=k[4],ai=k[3],aj=k[2],ak=k[1],al=function(a){b(aj,0);return 0};return[0,function(a){b(ak,0);return 0},al,ai,ah];case
9:var
am=a[2],an=a[1],l=by(a[3]),ao=l[4],ap=l[3],aq=l[2],ar=l[1],m=by(bc(a8(an),am)),as=m[4],at=m[3],au=m[2],av=m[1],aw=function(a){b(as,0);b(ao,0);return 0},ax=function(a){b(ap,0);b(at,0);return 0},ay=function(a){b(au,0);b(aq,0);return 0};return[0,function(a){b(ar,0);b(av,0);return 0},ay,ax,aw];case
10:var
n=by(a[1]),az=n[4],aA=n[3],aB=n[2],aC=n[1],aD=function(a){b(aB,0);return 0};return[0,function(a){b(aC,0);return 0},aD,aA,az];case
11:var
o=by(a[1]),aE=o[4],aF=o[3],aG=o[2],aH=o[1],aI=function(a){b(aG,0);return 0};return[0,function(a){b(aH,0);return 0},aI,aF,aE];case
12:var
p=by(a[1]),aJ=p[4],aK=p[3],aL=p[2],aM=p[1],aN=function(a){b(aL,0);return 0};return[0,function(a){b(aM,0);return 0},aN,aK,aJ];case
13:var
q=by(a[1]),aO=q[4],aP=q[3],aQ=q[2],aR=q[1],aS=function(a){b(aO,0);return 0},aT=function(a){b(aP,0);return 0},aU=function(a){b(aQ,0);return 0};return[0,function(a){b(aR,0);return 0},aU,aT,aS];default:var
r=by(a[1]),aV=r[4],aW=r[3],aX=r[2],aY=r[1],aZ=function(a){b(aV,0);return 0},a0=function(a){b(aW,0);return 0},a1=function(a){b(aX,0);return 0};return[0,function(a){b(aY,0);return 0},a1,a0,aZ]}}function
bc(d,c){var
a=0;if(typeof
d==="number")if(typeof
c==="number")return 0;else
switch(c[0]){case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;case
8:a=5;break;case
9:a=6;break;default:throw[0,ap,Uu]}else
switch(d[0]){case
0:var
e=0,t=d[1];if(typeof
c!=="number")switch(c[0]){case
0:return[0,bc(t,c[1])];case
8:a=5;e=1;break;case
9:a=6;e=1;break;case
10:e=1;break;case
11:a=1;e=1;break;case
12:a=2;e=1;break;case
13:a=3;e=1;break;case
14:a=4;e=1;break}if(!e)a=7;break;case
1:var
f=0,u=d[1];if(typeof
c!=="number")switch(c[0]){case
1:return[1,bc(u,c[1])];case
8:a=5;f=1;break;case
9:a=6;f=1;break;case
10:f=1;break;case
11:a=1;f=1;break;case
12:a=2;f=1;break;case
13:a=3;f=1;break;case
14:a=4;f=1;break}if(!f)a=7;break;case
2:var
g=0,v=d[1];if(typeof
c==="number")g=1;else
switch(c[0]){case
2:return[2,bc(v,c[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:g=1}if(g)a=7;break;case
3:var
h=0,w=d[1];if(typeof
c==="number")h=1;else
switch(c[0]){case
3:return[3,bc(w,c[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:h=1}if(h)a=7;break;case
4:var
i=0,x=d[1];if(typeof
c==="number")i=1;else
switch(c[0]){case
4:return[4,bc(x,c[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:i=1}if(i)a=7;break;case
5:var
j=0,y=d[1];if(typeof
c==="number")j=1;else
switch(c[0]){case
5:return[5,bc(y,c[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:j=1}if(j)a=7;break;case
6:var
k=0,z=d[1];if(typeof
c==="number")k=1;else
switch(c[0]){case
6:return[6,bc(z,c[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:k=1}if(k)a=7;break;case
7:var
l=0,A=d[1];if(typeof
c==="number")l=1;else
switch(c[0]){case
7:return[7,bc(A,c[1])];case
8:a=5;break;case
9:a=6;break;case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:l=1}if(l)a=7;break;case
8:var
m=0,B=d[2],C=d[1];if(typeof
c==="number")m=1;else
switch(c[0]){case
8:var
D=c[1],E=bc(B,c[2]);return[8,bc(C,D),E];case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:m=1}if(m)throw[0,ap,UD];break;case
9:var
n=0,F=d[3],G=d[2],H=d[1];if(typeof
c==="number")n=1;else
switch(c[0]){case
8:a=5;break;case
9:var
I=c[3],J=c[2],K=c[1],s=by(bc(a8(G),K)),L=s[4];b(s[2],0);b(L,0);return[9,H,J,bc(F,I)];case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:a=4;break;default:n=1}if(n)throw[0,ap,UE];break;case
10:var
M=d[1];if(typeof
c!=="number"&&10===c[0])return[10,bc(M,c[1])];throw[0,ap,UF];case
11:var
o=0,N=d[1];if(typeof
c==="number")o=1;else
switch(c[0]){case
10:break;case
11:return[11,bc(N,c[1])];default:o=1}if(o)throw[0,ap,UG];break;case
12:var
p=0,O=d[1];if(typeof
c==="number")p=1;else
switch(c[0]){case
10:break;case
11:a=1;break;case
12:return[12,bc(O,c[1])];default:p=1}if(p)throw[0,ap,UH];break;case
13:var
q=0,P=d[1];if(typeof
c==="number")q=1;else
switch(c[0]){case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:return[13,bc(P,c[1])];default:q=1}if(q)throw[0,ap,UI];break;default:var
r=0,Q=d[1];if(typeof
c==="number")r=1;else
switch(c[0]){case
10:break;case
11:a=1;break;case
12:a=2;break;case
13:a=3;break;case
14:return[14,bc(Q,c[1])];default:r=1}if(r)throw[0,ap,UJ]}switch(a){case
0:throw[0,ap,Ux];case
1:throw[0,ap,Uy];case
2:throw[0,ap,Uz];case
3:throw[0,ap,UA];case
4:throw[0,ap,UB];case
5:throw[0,ap,Uv];case
6:throw[0,ap,Uw];default:throw[0,ap,UC]}}var
bm=[aQ,UK,hu(0)];function
kU(b,a){if(typeof
b==="number")return[0,0,a];else{if(0===b[0])return[0,[0,b[1],b[2]],a];if(typeof
a!=="number"&&2===a[0])return[0,[1,b[1]],a[1]];throw bm}}function
jy(e,b,d){var
a=kU(e,d);if(typeof
b==="number"){if(b){var
c=a[2];if(typeof
c!=="number"&&2===c[0])return[0,a[1],1,c[1]];throw bm}return[0,a[1],0,a[2]]}return[0,a[1],[0,b[1]],a[2]]}function
b0(c,d,a){if(typeof
c==="number")return[0,0,aL(d,a)];else
switch(c[0]){case
0:if(typeof
a!=="number"&&0===a[0]){var
g=b0(c[1],d,a[1]);return[0,[0,g[1]],g[2]]}break;case
1:if(typeof
a!=="number"&&1===a[0]){var
h=b0(c[1],d,a[1]);return[0,[1,h[1]],h[2]]}break;case
2:if(typeof
a!=="number"&&2===a[0]){var
i=b0(c[1],d,a[1]);return[0,[2,i[1]],i[2]]}break;case
3:if(typeof
a!=="number"&&3===a[0]){var
j=b0(c[1],d,a[1]);return[0,[3,j[1]],j[2]]}break;case
4:if(typeof
a!=="number"&&4===a[0]){var
k=b0(c[1],d,a[1]);return[0,[4,k[1]],k[2]]}break;case
5:if(typeof
a!=="number"&&5===a[0]){var
l=b0(c[1],d,a[1]);return[0,[5,l[1]],l[2]]}break;case
6:if(typeof
a!=="number"&&6===a[0]){var
m=b0(c[1],d,a[1]);return[0,[6,m[1]],m[2]]}break;case
7:if(typeof
a!=="number"&&7===a[0]){var
n=b0(c[1],d,a[1]);return[0,[7,n[1]],n[2]]}break;case
8:if(typeof
a!=="number"&&8===a[0]){var
o=a[1],w=a[2],x=c[2];if(kO([0,c[1]],[0,o]))throw bm;var
p=b0(x,d,w);return[0,[8,o,p[1]],p[2]]}break;case
9:if(typeof
a!=="number"&&9===a[0]){var
e=a[2],f=a[1],y=a[3],z=c[3],A=c[2],B=c[1],C=[0,aY(f)];if(kO([0,aY(B)],C))throw bm;var
D=[0,aY(e)];if(kO([0,aY(A)],D))throw bm;var
q=by(bc(a8(f),e)),E=q[4];b(q[2],0);b(E,0);var
r=b0(aY(z),d,y),F=r[2];return[0,[9,f,e,a8(r[1])],F]}break;case
10:if(typeof
a!=="number"&&10===a[0]){var
s=b0(c[1],d,a[1]);return[0,[10,s[1]],s[2]]}break;case
11:if(typeof
a!=="number"&&11===a[0]){var
t=b0(c[1],d,a[1]);return[0,[11,t[1]],t[2]]}break;case
13:if(typeof
a!=="number"&&13===a[0]){var
u=b0(c[1],d,a[1]);return[0,[13,u[1]],u[2]]}break;case
14:if(typeof
a!=="number"&&14===a[0]){var
v=b0(c[1],d,a[1]);return[0,[14,v[1]],v[2]]}break}throw bm}function
aL(b,a){if(typeof
b==="number")return[0,0,a];else
switch(b[0]){case
0:if(typeof
a!=="number"&&0===a[0]){var
s=aL(b[1],a[1]);return[0,[0,s[1]],s[2]]}break;case
1:if(typeof
a!=="number"&&0===a[0]){var
t=aL(b[1],a[1]);return[0,[1,t[1]],t[2]]}break;case
2:var
aa=b[2],u=kU(b[1],a),e=u[2],ab=u[1];if(typeof
e!=="number"&&1===e[0]){var
v=aL(aa,e[1]);return[0,[2,ab,v[1]],v[2]]}throw bm;case
3:var
ac=b[2],w=kU(b[1],a),f=w[2],ad=w[1];if(typeof
f!=="number"&&1===f[0]){var
x=aL(ac,f[1]);return[0,[3,ad,x[1]],x[2]]}throw bm;case
4:var
ae=b[4],af=b[1],g=jy(b[2],b[3],a),h=g[3],ag=g[1];if(typeof
h!=="number"&&2===h[0]){var
ah=g[2],y=aL(ae,h[1]);return[0,[4,af,ag,ah,y[1]],y[2]]}throw bm;case
5:var
ai=b[4],aj=b[1],i=jy(b[2],b[3],a),j=i[3],ak=i[1];if(typeof
j!=="number"&&3===j[0]){var
al=i[2],z=aL(ai,j[1]);return[0,[5,aj,ak,al,z[1]],z[2]]}throw bm;case
6:var
am=b[4],an=b[1],k=jy(b[2],b[3],a),l=k[3],ao=k[1];if(typeof
l!=="number"&&4===l[0]){var
ap=k[2],A=aL(am,l[1]);return[0,[6,an,ao,ap,A[1]],A[2]]}throw bm;case
7:var
aq=b[4],ar=b[1],m=jy(b[2],b[3],a),n=m[3],as=m[1];if(typeof
n!=="number"&&5===n[0]){var
at=m[2],B=aL(aq,n[1]);return[0,[7,ar,as,at,B[1]],B[2]]}throw bm;case
8:var
au=b[4],av=b[1],o=jy(b[2],b[3],a),p=o[3],aw=o[1];if(typeof
p!=="number"&&6===p[0]){var
ax=o[2],C=aL(au,p[1]);return[0,[8,av,aw,ax,C[1]],C[2]]}throw bm;case
9:var
ay=b[2],D=kU(b[1],a),q=D[2],az=D[1];if(typeof
q!=="number"&&7===q[0]){var
E=aL(ay,q[1]);return[0,[9,az,E[1]],E[2]]}throw bm;case
10:var
F=aL(b[1],a);return[0,[10,F[1]],F[2]];case
11:var
aA=b[1],G=aL(b[2],a);return[0,[11,aA,G[1]],G[2]];case
12:var
aB=b[1],H=aL(b[2],a);return[0,[12,aB,H[1]],H[2]];case
13:if(typeof
a!=="number"&&8===a[0]){var
I=a[1],aC=a[2],aD=b[3],aE=b[1];if(kO([0,b[2]],[0,I]))throw bm;var
J=aL(aD,aC);return[0,[13,aE,I,J[1]],J[2]]}break;case
14:if(typeof
a!=="number"&&9===a[0]){var
K=a[1],aF=a[3],aG=b[3],aH=b[2],aI=b[1],aJ=[0,aY(K)];if(kO([0,aY(aH)],aJ))throw bm;var
L=aL(aG,aY(aF));return[0,[14,aI,K,L[1]],L[2]]}break;case
15:if(typeof
a!=="number"&&10===a[0]){var
M=aL(b[1],a[1]);return[0,[15,M[1]],M[2]]}break;case
16:if(typeof
a!=="number"&&11===a[0]){var
N=aL(b[1],a[1]);return[0,[16,N[1]],N[2]]}break;case
17:var
aK=b[1],O=aL(b[2],a);return[0,[17,aK,O[1]],O[2]];case
18:var
P=b[2],r=b[1];if(0===r[0]){var
T=r[1],aP=T[2],U=aL(T[1],a),aQ=U[1],V=aL(P,U[2]);return[0,[18,[0,[0,aQ,aP]],V[1]],V[2]]}var
W=r[1],aR=W[2],X=aL(W[1],a),aS=X[1],Y=aL(P,X[2]);return[0,[18,[1,[0,aS,aR]],Y[1]],Y[2]];case
19:if(typeof
a!=="number"&&13===a[0]){var
Q=aL(b[1],a[1]);return[0,[19,Q[1]],Q[2]]}break;case
20:if(typeof
a!=="number"&&1===a[0]){var
aM=b[2],aN=b[1],R=aL(b[3],a[1]);return[0,[20,aN,aM,R[1]],R[2]]}break;case
21:if(typeof
a!=="number"&&2===a[0]){var
aO=b[1],S=aL(b[2],a[1]);return[0,[21,aO,S[1]],S[2]]}break;case
23:var
d=b[2],c=b[1];if(typeof
c==="number")switch(c){case
0:return b$(c,d,a);case
1:return b$(c,d,a);case
2:if(typeof
a!=="number"&&14===a[0]){var
Z=aL(d,a[1]);return[0,[23,2,Z[1]],Z[2]]}throw bm;default:return b$(c,d,a)}else
switch(c[0]){case
0:return b$(c,d,a);case
1:return b$(c,d,a);case
2:return b$(c,d,a);case
3:return b$(c,d,a);case
4:return b$(c,d,a);case
5:return b$(c,d,a);case
6:return b$(c,d,a);case
7:return b$(c,d,a);case
8:return b$([8,c[1],c[2]],d,a);case
9:var
aT=c[1],_=b0(c[2],d,a),$=_[2];return[0,[23,[9,aT,_[1]],$[1]],$[2]];case
10:return b$(c,d,a);default:return b$(c,d,a)}}throw bm}function
b$(d,c,b){var
a=aL(c,b);return[0,[23,d,a[1]],a[2]]}function
ca(k,g,a){var
b=ah(a),h=0<=g?k:0,d=kQ(g);if(d<=b)return a;var
l=2===h?48:32,c=hV(d,l);switch(h){case
0:g_(a,0,c,0,b);break;case
1:g_(a,0,c,d-b|0,b);break;default:var
e=0;if(0<b){var
i=0;if(43!==aU(a,0)&&45!==aU(a,0)&&32!==aU(a,0)){e=1;i=1}if(!i){is(c,0,aU(a,0));g_(a,1,c,(d-b|0)+1|0,b-1|0)}}else
e=1;if(e){var
f=0;if(1<b&&48===aU(a,0)){var
j=0;if(e4!==aU(a,1)&&88!==aU(a,1)){f=1;j=1}if(!j){is(c,1,aU(a,1));g_(a,2,c,(d-b|0)+2|0,b-2|0)}}else
f=1;if(f)g_(a,0,c,d-b|0,b)}}return bE(c)}function
iC(k,b){var
c=kQ(k),a=ah(b),d=aU(b,0),e=0;if(58<=d){if(71<=d){if(!(5<d+pE>>>0))e=1}else
if(65<=d)e=1}else{var
f=0;if(32!==d)if(43<=d)switch(d+yf|0){case
5:if(a<(c+2|0)&&1<a){var
j=0;if(e4===aU(b,1)||88===aU(b,1))j=1;if(j){var
h=hV(c+2|0,48);is(h,1,aU(b,1));g_(b,2,h,(c-a|0)+4|0,a-2|0);return bE(h)}}e=1;f=1;break;case
0:case
2:break;case
1:case
3:case
4:f=1;break;default:e=1;f=1}else
f=1;if(!f&&a<(c+1|0)){var
g=hV(c+1|0,48);is(g,0,d);g_(b,1,g,(c-a|0)+2|0,a-1|0);return bE(g)}}if(e&&a<c){var
i=hV(c,48);g_(b,0,i,c-a|0,a);return bE(i)}return b}function
UL(k){var
j=0,A=ah(k);for(;;){if(A<=j)var
o=k;else{var
n=K(k,j)+P2|0,p=0;if(59<n>>>0){if(33<n+wE>>>0)p=1}else
if(2===n)p=1;if(!p){var
j=j+1|0;continue}var
e=g7(k),a=[0,0],r=b9(e)-1|0,w=0;if(!(r<0)){var
i=w;for(;;){var
f=bL(e,i),g=0;if(32<=f){var
l=f-34|0,q=0;if(58<l>>>0){if(93<=l)q=1}else
if(56<l-1>>>0){g=1;q=1}if(!q){var
m=1;g=2}}else
if(11<=f){if(13===f)g=1}else
if(8<=f)g=1;switch(g){case
0:var
m=4;break;case
1:var
m=2;break}a[1]=a[1]+m|0;var
z=i+1|0;if(r!==i){var
i=z;continue}break}}if(a[1]===b9(e))var
t=GT(e);else{var
b=aW(a[1]);a[1]=0;var
s=b9(e)-1|0,x=0;if(!(s<0)){var
h=x;for(;;){var
c=bL(e,h),d=0;if(35<=c)if(92===c)d=2;else
if(aC<=c)d=1;else
d=3;else
if(32<=c)if(34<=c)d=2;else
d=3;else
if(14<=c)d=1;else
switch(c){case
8:aG(b,a[1],92);a[1]++;aG(b,a[1],98);break;case
9:aG(b,a[1],92);a[1]++;aG(b,a[1],ip);break;case
10:aG(b,a[1],92);a[1]++;aG(b,a[1],a3);break;case
13:aG(b,a[1],92);a[1]++;aG(b,a[1],hP);break;default:d=1}switch(d){case
1:aG(b,a[1],92);a[1]++;aG(b,a[1],48+(c/cA|0)|0);a[1]++;aG(b,a[1],48+((c/10|0)%10|0)|0);a[1]++;aG(b,a[1],48+(c%10|0)|0);break;case
2:aG(b,a[1],92);a[1]++;aG(b,a[1],c);break;case
3:aG(b,a[1],c);break}a[1]++;var
y=h+1|0;if(s!==h){var
h=y;continue}break}}var
t=b}var
o=bE(t)}var
u=ah(o),v=hV(u+2|0,34);hT(o,0,v,1,u);return bE(v)}}function
G4(d,f){var
g=kQ(f),e=VA[1];switch(d[2]){case
0:var
b=cX;break;case
1:var
b=cm;break;case
2:var
b=69;break;case
3:var
b=b8;break;case
4:var
b=71;break;case
5:var
b=e;break;case
6:var
b=ci;break;case
7:var
b=72;break;default:var
b=70}var
c=G0(16);iB(c,37);switch(d[1]){case
0:break;case
1:iB(c,43);break;default:iB(c,32)}if(8<=d[2])iB(c,35);iB(c,46);bx(c,a(i+g));iB(c,b);return G2(c)}function
kV(m,a){if(13<=m){var
g=[0,0],h=ah(a)-1|0,n=0;if(!(h<0)){var
c=n;for(;;){if(!(9<K(a,c)+a6>>>0))g[1]++;var
q=c+1|0;if(h!==c){var
c=q;continue}break}}var
i=g[1],j=aW(ah(a)+((i-1|0)/3|0)|0),k=[0,0],d=function(a){is(j,k[1],a);k[1]++;return 0},e=[0,((i-1|0)%3|0)+1|0],l=ah(a)-1|0,o=0;if(!(l<0)){var
b=o;for(;;){var
f=K(a,b);if(9<f+a6>>>0)d(f);else{if(0===e[1]){d(95);e[1]=3}e[1]+=-1;d(f)}var
p=b+1|0;if(l!==b){var
b=p;continue}break}}return bE(j)}return a}function
VB(b,c){switch(b){case
1:var
a=UN;break;case
2:var
a=UO;break;case
4:var
a=UQ;break;case
5:var
a=UR;break;case
6:var
a=US;break;case
7:var
a=UT;break;case
8:var
a=UU;break;case
9:var
a=UV;break;case
10:var
a=UW;break;case
11:var
a=UX;break;case
0:case
13:var
a=UM;break;case
3:case
14:var
a=UP;break;default:var
a=UY}return kV(b,q7(a,c))}function
VC(b,c){switch(b){case
1:var
a=Vb;break;case
2:var
a=Vc;break;case
4:var
a=Ve;break;case
5:var
a=Vf;break;case
6:var
a=Vg;break;case
7:var
a=Vh;break;case
8:var
a=Vi;break;case
9:var
a=Vj;break;case
10:var
a=Vk;break;case
11:var
a=Vl;break;case
0:case
13:var
a=Va;break;case
3:case
14:var
a=Vd;break;default:var
a=Vm}return kV(b,q7(a,c))}function
VD(b,c){switch(b){case
1:var
a=Vo;break;case
2:var
a=Vp;break;case
4:var
a=Vr;break;case
5:var
a=Vs;break;case
6:var
a=Vt;break;case
7:var
a=Vu;break;case
8:var
a=Vv;break;case
9:var
a=Vw;break;case
10:var
a=Vx;break;case
11:var
a=Vy;break;case
0:case
13:var
a=Vn;break;case
3:case
14:var
a=Vq;break;default:var
a=Vz}return kV(b,q7(a,c))}function
VE(b,c){switch(b){case
1:var
a=U0;break;case
2:var
a=U1;break;case
4:var
a=U3;break;case
5:var
a=U4;break;case
6:var
a=U5;break;case
7:var
a=U6;break;case
8:var
a=U7;break;case
9:var
a=U8;break;case
10:var
a=U9;break;case
11:var
a=U_;break;case
0:case
13:var
a=UZ;break;case
3:case
14:var
a=U2;break;default:var
a=U$}return kV(b,bGX(a,c))}function
g$(c,h,b){function
i(d){switch(c[1]){case
0:var
a=45;break;case
1:var
a=43;break;default:var
a=32}return bGS(b,h,a)}function
p(c){var
a=bGN(b);return 3===a?b<0.?VG:VH:4<=a?VI:c}switch(c[2]){case
5:var
e=Gu(G4(c,h),b),d=0,s=ah(e);for(;;){if(d===s)var
o=0;else{var
j=aU(e,d)+ir|0,k=0;if(23<j>>>0){if(55===j)k=1}else
if(21<j-1>>>0)k=1;if(!k){var
d=d+1|0;continue}var
o=1}var
t=o?e:Z(e,VF);return p(t)}case
6:return i(0);case
7:var
g=g7(i(0)),f=b9(g);if(0===f)var
n=g;else{var
l=aW(f),m=f-1|0,q=0;if(!(m<0)){var
a=q;for(;;){aG(l,a,GQ(bL(g,a)));var
r=a+1|0;if(m!==a){var
a=r;continue}break}}var
n=l}return bE(n);case
8:return p(i(0));default:return Gu(G4(c,h),b)}}function
kb(f,y,x,w){var
c=y,a=x,e=w;for(;;)if(typeof
e==="number")return b(c,a);else
switch(e[0]){case
0:var
z=e[1];return function(b){return az(c,[5,a,b],z)};case
1:var
A=e[1];return function(b){var
e=0;if(40<=b)if(92===b)var
d=TD;else
if(aC<=b)e=1;else
e=2;else
if(32<=b)if(39<=b)var
d=TE;else
e=2;else
if(14<=b)e=1;else
switch(b){case
8:var
d=TF;break;case
9:var
d=TG;break;case
10:var
d=TH;break;case
13:var
d=TI;break;default:e=1}switch(e){case
1:var
f=aW(4);aG(f,0,92);aG(f,1,48+(b/cA|0)|0);aG(f,2,48+((b/10|0)%10|0)|0);aG(f,3,48+(b%10|0)|0);var
d=bE(f);break;case
2:var
g=aW(1);aG(g,0,b);var
d=bE(g);break}var
h=ah(d),i=hV(h+2|0,39);hT(d,0,i,1,h);return az(c,[4,a,bE(i)],A)};case
2:var
B=e[2],C=e[1];return rs(c,a,B,C,function(a){return a});case
3:return rs(c,a,e[2],e[1],UL);case
4:return kW(c,a,e[4],e[2],e[3],VB,e[1]);case
5:return kW(c,a,e[4],e[2],e[3],VC,e[1]);case
6:return kW(c,a,e[4],e[2],e[3],VD,e[1]);case
7:return kW(c,a,e[4],e[2],e[3],VE,e[1]);case
8:var
i=e[4],j=e[3],k=e[2],h=e[1];if(typeof
k==="number"){if(typeof
j==="number")return j?function(d,b){return az(c,[4,a,g$(h,d,b)],i)}:function(b){return az(c,[4,a,g$(h,rq(h),b)],i)};var
T=j[1];return function(b){return az(c,[4,a,g$(h,T,b)],i)}}else{if(0===k[0]){var
n=k[2],o=k[1];if(typeof
j==="number")return j?function(d,b){return az(c,[4,a,ca(o,n,g$(h,d,b))],i)}:function(b){return az(c,[4,a,ca(o,n,g$(h,rq(h),b))],i)};var
U=j[1];return function(b){return az(c,[4,a,ca(o,n,g$(h,U,b))],i)}}var
p=k[1];if(typeof
j==="number")return j?function(e,d,b){return az(c,[4,a,ca(p,e,g$(h,d,b))],i)}:function(d,b){return az(c,[4,a,ca(p,d,g$(h,rq(h),b))],i)};var
V=j[1];return function(d,b){return az(c,[4,a,ca(p,d,g$(h,V,b))],i)}}case
9:return rs(c,a,e[2],e[1],Tq);case
10:var
a=[7,a],e=e[1];continue;case
11:var
a=[2,a,e[1]],e=e[2];continue;case
12:var
a=[3,a,e[1]],e=e[2];continue;case
13:var
D=e[3],E=e[2],q=G0(16);rr(q,E);var
v=G2(q);return function(b){return az(c,[4,a,v],D)};case
14:var
F=e[3],G=e[2];return function(d){var
e=d[1],b=aL(e,aY(a8(G)));if(typeof
b[2]==="number")return az(c,a,aT(b[1],F));throw bm};case
15:var
H=e[1];return function(e,b){return az(c,[6,a,function(a){return d(e,a,b)}],H)};case
16:var
I=e[1];return function(b){return az(c,[6,a,b],I)};case
17:var
a=[0,a,e[1]],e=e[2];continue;case
18:var
m=e[1];if(0===m[0]){var
J=e[2],K=m[1][1],L=0,c=function(b,c,d){return function(a){return az(c,[1,b,[0,a]],d)}}(a,c,J),a=L,e=K;continue}var
M=e[2],N=m[1][1],O=0,c=function(b,c,d){return function(a){return az(c,[1,b,[1,a]],d)}}(a,c,M),a=O,e=N;continue;case
19:throw[0,ap,VK];case
20:var
P=e[3],Q=[8,a,VL];return function(a){return az(c,Q,P)};case
21:var
R=e[2];return function(b){return az(c,[4,a,q7(VM,b)],R)};case
22:var
S=e[1];return function(b){return az(c,[5,a,b],S)};case
23:var
g=e[2],l=e[1];if(typeof
l==="number")switch(l){case
0:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);case
1:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);case
2:throw[0,ap,VN];default:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g])}else
switch(l[0]){case
0:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);case
1:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);case
2:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);case
3:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);case
4:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);case
5:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);case
6:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);case
7:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);case
8:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);case
9:var
u=l[2];return f<50?vg(f+1|0,c,a,u,g):bu(vg,[0,c,a,u,g]);case
10:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g]);default:return f<50?aJ(f+1|0,c,a,g):bu(aJ,[0,c,a,g])}default:var
r=e[3],s=e[1],t=b(e[2],0);return f<50?vf(f+1|0,c,a,r,s,t):bu(vf,[0,c,a,r,s,t])}}function
vg(e,d,c,a,b){if(typeof
a==="number")return e<50?aJ(e+1|0,d,c,b):bu(aJ,[0,d,c,b]);else
switch(a[0]){case
0:var
f=a[1];return function(a){return cu(d,c,f,b)};case
1:var
g=a[1];return function(a){return cu(d,c,g,b)};case
2:var
h=a[1];return function(a){return cu(d,c,h,b)};case
3:var
i=a[1];return function(a){return cu(d,c,i,b)};case
4:var
j=a[1];return function(a){return cu(d,c,j,b)};case
5:var
k=a[1];return function(a){return cu(d,c,k,b)};case
6:var
l=a[1];return function(a){return cu(d,c,l,b)};case
7:var
m=a[1];return function(a){return cu(d,c,m,b)};case
8:var
n=a[2];return function(a){return cu(d,c,n,b)};case
9:var
o=a[3],p=a[2],q=bc(a8(a[1]),p);return function(a){return cu(d,c,bM(q,o),b)};case
10:var
r=a[1];return function(e,a){return cu(d,c,r,b)};case
11:var
s=a[1];return function(a){return cu(d,c,s,b)};case
12:var
t=a[1];return function(a){return cu(d,c,t,b)};case
13:throw[0,ap,VO];default:throw[0,ap,VP]}}function
aJ(d,b,e,a){var
c=[8,e,VQ];return d<50?kb(d+1|0,b,c,a):bu(kb,[0,b,c,a])}function
vf(h,c,f,a,e,d){if(e){var
i=e[1];return function(e){return VJ(c,f,a,i,b(d,e))}}var
g=[4,f,d];return h<50?kb(h+1|0,c,g,a):bu(kb,[0,c,g,a])}function
az(a,b,c){return GI(kb(0,a,b,c))}function
cu(a,b,c,d){return GI(vg(0,a,b,c,d))}function
VJ(a,b,c,d,e){return GI(vf(0,a,b,c,d,e))}function
rs(f,e,d,a,c){if(typeof
a==="number")return function(a){return az(f,[4,e,b(c,a)],d)};else{if(0===a[0]){var
g=a[2],h=a[1];return function(a){return az(f,[4,e,ca(h,g,b(c,a))],d)}}var
i=a[1];return function(g,a){return az(f,[4,e,ca(i,g,b(c,a))],d)}}}function
kW(g,f,e,h,c,b,a){if(typeof
h==="number"){if(typeof
c==="number")return c?function(h,c){return az(g,[4,f,iC(h,d(b,a,c))],e)}:function(c){return az(g,[4,f,d(b,a,c)],e)};var
l=c[1];return function(c){return az(g,[4,f,iC(l,d(b,a,c))],e)}}else{if(0===h[0]){var
i=h[2],j=h[1];if(typeof
c==="number")return c?function(h,c){return az(g,[4,f,ca(j,i,iC(h,d(b,a,c)))],e)}:function(c){return az(g,[4,f,ca(j,i,d(b,a,c))],e)};var
m=c[1];return function(c){return az(g,[4,f,ca(j,i,iC(m,d(b,a,c)))],e)}}var
k=h[1];if(typeof
c==="number")return c?function(i,h,c){return az(g,[4,f,ca(k,i,iC(h,d(b,a,c)))],e)}:function(h,c){return az(g,[4,f,ca(k,h,d(b,a,c))],e)};var
n=c[1];return function(h,c){return az(g,[4,f,ca(k,h,iC(n,d(b,a,c)))],e)}}}function
ha(c,f){var
a=f;for(;;)if(typeof
a==="number")return 0;else
switch(a[0]){case
0:var
g=a[1],h=G3(a[2]);ha(c,g);return jq(c,h);case
1:var
d=a[2],e=a[1];if(0===d[0]){var
i=d[1];ha(c,e);jq(c,VR);var
a=i;continue}var
j=d[1];ha(c,e);jq(c,VS);var
a=j;continue;case
6:var
m=a[2];ha(c,a[1]);return b(m,c);case
7:ha(c,a[1]);return it(c);case
8:var
n=a[2];ha(c,a[1]);return bv(n);case
2:case
4:var
k=a[2];ha(c,a[1]);return jq(c,k);default:var
l=a[2];ha(c,a[1]);return Td(c,l)}}function
hb(c,f){var
a=f;for(;;)if(typeof
a==="number")return 0;else
switch(a[0]){case
0:var
g=a[1],h=G3(a[2]);hb(c,g);return an(c,h);case
1:var
d=a[2],e=a[1];if(0===d[0]){var
i=d[1];hb(c,e);an(c,VT);var
a=i;continue}var
j=d[1];hb(c,e);an(c,VU);var
a=j;continue;case
6:var
m=a[2];hb(c,a[1]);return an(c,b(m,0));case
7:var
a=a[1];continue;case
8:var
n=a[2];hb(c,a[1]);return bv(n);case
2:case
4:var
k=a[2];hb(c,a[1]);return an(c,k);default:var
l=a[2];hb(c,a[1]);return cO(c,l)}}function
VV(a){if(ay(a,VW))return VX;var
e=ah(a);function
g(e){var
d=VY[1],c=aD(om);return b(az(function(a){hb(c,a);return V(aZ(c))},0,d),a)}function
h(d){var
b=d;for(;;){if(b===e)return b;var
c=aU(a,b);if(9!==c&&32!==c)return b;var
b=b+1|0;continue}}function
n(d,c){var
b=c;for(;;){if(b===e)return b;if(25<aU(a,b)+pE>>>0)return b;var
b=b+1|0;continue}}function
o(g,f){var
b=f;for(;;){if(b===e)return b;var
c=aU(a,b),d=0;if(48<=c){if(!(58<=c))d=1}else
if(45===c)d=1;if(d){var
b=b+1|0;continue}return b}}var
f=h(0),k=n(f,f),c=bZ(a,f,k-f|0),d=h(k),i=o(d,d);if(d===i)var
j=0;else
try{var
q=c3(bZ(a,d,i-d|0)),j=q}catch(a){a=aS(a);if(a[1]!==b_)throw a;var
j=g(0)}if(h(i)!==e)g(0);var
m=0;if(p(c,VZ)&&p(c,V0))var
l=p(c,V1)?p(c,V2)?p(c,V3)?p(c,V4)?g(0):1:2:3:0;else
m=1;if(m)var
l=4;return[0,j,l]}function
G5(d,c){var
a=c[1],b=0;return az(function(a){ha(d,a);return 0},b,a)}function
rt(a){return G5(c4,a)}function
aH(b){var
a=b[1];return az(function(b){var
a=aD(64);hb(a,b);return aZ(a)},0,a)}var
ru=[0,0];function
rw(i,h){var
a=i[1+h];if(1-(typeof
a==="number"?1:0)){if(iv(a)===iX)return b(aH(V5),a);if(iv(a)===C3){var
d=Gu(Tu,a),c=0,g=ah(d);for(;;){if(g<=c)return Z(d,Tt);var
e=aU(d,c),f=0;if(48<=e){if(!(58<=e))f=1}else
if(45===e)f=1;if(f){var
c=c+1|0;continue}return d}}return V6}return b(aH(V7),a)}function
G6(b,a){if(b.length-1<=a)return V8;var
c=G6(b,a+1|0),e=rw(b,a);return d(aH(V9),e,c)}function
kX(a){function
p(f){var
c=f;for(;;){if(c){var
g=c[2],h=c[1];try{var
e=0,d=b(h,a);e=1}catch(a){}if(e&&d)return[0,d[1]];var
c=g;continue}return 0}}var
i=p(ru[1]);if(i)return i[1];if(a===rg)return Wc;if(a===GM)return Wd;if(a[1]===GL){var
e=a[2],j=e[3],q=e[2],r=e[1];return b4(aH(rv),r,q,j,j+5|0,We)}if(a[1]===ap){var
f=a[2],k=f[3],s=f[2],t=f[1];return b4(aH(rv),t,s,k,k+6|0,Wf)}if(a[1]===jp){var
g=a[2],l=g[3],u=g[2],v=g[1];return b4(aH(rv),v,u,l,l+6|0,Wg)}if(0===iv(a)){var
h=a.length-1,w=a[1][1];if(2<h>>>0)var
m=G6(a,2),n=rw(a,1),c=d(aH(V_),n,m);else
switch(h){case
0:var
c=V$;break;case
1:var
c=Wa;break;default:var
o=rw(a,1),c=b(aH(Wb),o)}return Z(w,c)}return a[1]}function
rx(t,s){var
e=bGO(s),g=e.length-1-1|0,p=0;if(!(g<0)){var
c=p;for(;;){var
a=bb(e,c)[1+c],f=function(a){return function(b){return b?0===a?Wh:Wi:0===a?Wj:Wk}}(c);if(0===a[0])var
h=a[5],i=a[4],j=a[3],k=a[6]?Wl:Wn,l=a[2],m=a[7],n=f(a[1]),d=[0,bGB(aH(Wm),n,m,l,k,j,i,h)];else
if(a[1])var
d=0;else
var
o=f(0),d=[0,b(aH(Wo),o)];if(d){var
q=d[1];b(G5(t,Wp),q)}var
r=c+1|0;if(g!==c){var
c=r;continue}break}}return 0}function
G7(c){for(;;){var
a=ru[1],b=1-re(ru,a,[0,c,a]);if(b)continue;return b}}var
Wr=Wq.slice();function
Ws(e,d){var
f=kX(e);b(rt(Wt),f);rx(c4,d);var
a=bG$(0);if(a<0){var
c=kQ(a);GO(bb(Wr,c)[1+c])}return it(c4)}var
Wu=[0];GG(a(Qy),function(e,i){try{try{var
c=i?Wu:S9(0);try{ri(0)}catch(a){}try{var
a=Ws(e,c),d=a}catch(a){a=aS(a);var
g=kX(e);b(rt(Ww),g);rx(c4,c);var
h=kX(a);b(rt(Wx),h);rx(c4,S9(0));var
d=it(c4)}var
f=d}catch(a){a=aS(a);if(a!==rg)throw a;var
f=GO(Wv)}return f}catch(a){return 0}});var
ry=[aQ,Wy,hu(0)],kY=0,G8=-1;function
jz(a,b){a[13]=a[13]+b[3]|0;return rn(b,a[28])}var
G9=1000000010;function
rz(b,a){return A(b[17],a,0,ah(a))}function
kZ(a){return b(a[19],0)}function
G_(a,c,b){a[9]=a[9]-c|0;rz(a,b);a[11]=0;return 0}function
k0(c,a){var
b=p(a,Wz);return b?G_(c,ah(a),a):b}function
hX(a,c,f){var
g=c[3],h=c[2];k0(a,c[1]);kZ(a);a[11]=1;var
d=(a[6]-f|0)+h|0,e=a[8],i=e<=d?e:d;a[10]=i;a[9]=a[6]-a[10]|0;b(a[21],a[10]);return k0(a,g)}function
G$(b,a){return hX(b,WA,a)}function
iD(a,c){var
d=c[2],e=c[3];k0(a,c[1]);a[9]=a[9]-d|0;b(a[20],d);return k0(a,e)}function
WB(a,j,c){if(typeof
c==="number")switch(c){case
0:var
s=iA(a[3]);if(s){var
t=s[1][1],u=function(b,a){if(a){var
c=a[1],d=a[2];return bG9(b,c)?[0,b,a]:[0,c,u(b,d)]}return[0,b,0]};t[1]=u(a[6]-a[9]|0,t[1]);return 0}return 0;case
1:iz(a[2]);return 0;case
2:iz(a[3]);return 0;case
3:var
v=iA(a[2]);return v?G$(a,v[1][2]):kZ(a);case
4:var
w=a[10]!==(a[6]-a[9]|0)?1:0;if(w){var
f=a[28],h=f[2];if(h){var
n=h[1];if(h[2]){var
J=h[2];f[1]=f[1]-1|0;f[2]=J;var
i=[0,n]}else{rm(f);var
i=[0,n]}}else
var
i=0;if(i){var
r=i[1],L=r[1];a[12]=a[12]-r[3]|0;a[9]=a[9]+L|0;return 0}return 0}return w;default:var
x=iz(a[5]);return x?rz(a,b(a[25],x[1])):0}else
switch(c[0]){case
0:return G_(a,j,c[1]);case
1:var
d=c[2],g=c[1],y=d[1],M=d[2],z=iA(a[2]);if(z){var
A=z[1],e=A[2];switch(A[1]){case
0:return iD(a,g);case
1:return hX(a,d,e);case
2:return hX(a,d,e);case
3:return a[9]<(j+ah(y)|0)?hX(a,d,e):iD(a,g);case
4:return a[11]?iD(a,g):a[9]<(j+ah(y)|0)?hX(a,d,e):((a[6]-e|0)+M|0)<a[10]?hX(a,d,e):iD(a,g);default:return iD(a,g)}}return 0;case
2:var
l=a[6]-a[9]|0,N=c[2],O=c[1],B=iA(a[3]);if(B){var
C=B[1][1],D=C[1];if(D){var
k=C[1],P=D[1];for(;;){if(k){var
E=k[1],Q=k[2];if(!(l<=E)){var
k=Q;continue}var
F=E}else
var
F=P;var
m=F;break}}else
var
m=l;var
G=m-l|0;return 0<=G?iD(a,[0,WD,G+O|0,WC]):hX(a,[0,WF,m+N|0,WE],a[6])}return 0;case
3:var
H=c[2],R=c[1];if(a[8]<(a[6]-a[9]|0)){var
o=iA(a[2]);if(o){var
p=o[1],q=p[2],K=p[1];if(a[9]<q&&!(3<K-1>>>0))G$(a,q)}else
kZ(a)}var
S=a[9]-R|0,T=1===H?1:a[9]<j?H:5;return hW([0,T,S],a[2]);case
4:return hW(c[1],a[3]);default:var
I=c[1];rz(a,b(a[24],I));return hW(I,a[5])}}function
Ha(a){for(;;){var
f=a[28][2],g=f?[0,f[1]]:0;if(g){var
d=g[1],e=d[1],m=0<=e?1:0,j=d[3],k=d[2],l=a[13]-a[12]|0,h=m||(a[9]<=l?1:0);if(h){var
b=a[28],c=b[2];if(c){if(c[2]){var
i=c[2];b[1]=b[1]-1|0;b[2]=i}else
rm(b);var
n=0<=e?e:G9;WB(a,n,k);a[12]=j+a[12]|0;continue}throw T1}return h}return 0}}function
Hb(a,b){jz(a,b);return Ha(a)}function
Hc(c,a,b){return Hb(c,[0,a,[0,b],a])}function
rA(a){jx(a);return hW([0,-1,[0,G8,WG,0]],a)}function
rB(a,c){var
d=iA(a[1]);if(d){var
e=d[1],b=e[2],f=b[1];if(e[1]<a[12])return rA(a[1]);var
g=b[2];if(typeof
g!=="number")switch(g[0]){case
3:var
h=1-c,j=h?(b[1]=a[13]+f|0,iz(a[1]),0):h;return j;case
1:case
2:var
i=c?(b[1]=a[13]+f|0,iz(a[1]),0):c;return i}return 0}return 0}function
Hd(a,c,b){jz(a,b);if(c)rB(a,1);return hW([0,a[13],b],a[1])}function
He(a,e,d){a[14]=a[14]+1|0;if(a[14]<a[15])return Hd(a,0,[0,-a[13]|0,[3,e,d],0]);var
b=a[14]===a[15]?1:0;if(b){var
c=a[16];return Hc(a,ah(c),c)}return b}function
Hf(a,d){var
b=1<a[14]?1:0;if(b){if(a[14]<a[15]){jz(a,[0,kY,1,0]);rB(a,1);rB(a,0)}a[14]=a[14]-1|0;var
c=0}else
var
c=b;return c}function
Hg(a,f){if(a[23])jz(a,[0,kY,5,0]);var
c=a[22];if(c){var
d=iz(a[4]);if(d)return b(a[27],d[1]);var
e=0}else
var
e=c;return e}function
rC(a,d){var
b=a[4];function
c(b){return Hg(a,0)}bw(c,b[1]);for(;;){if(1<a[14]){Hf(a,0);continue}a[13]=G9;Ha(a);if(d)kZ(a);a[12]=1;a[13]=1;rm(a[28]);rA(a[1]);jx(a[2]);jx(a[3]);jx(a[4]);jx(a[5]);a[10]=0;a[14]=0;a[9]=a[6];return He(a,0,3)}}function
rD(a,d,c){var
b=a[14]<a[15]?1:0;return b?Hc(a,d,c):b}function
Hh(c,b,a){return rD(c,b,a)}function
g(b,a){return Hh(b,ah(a),a)}function
jA(b,a){return Hh(b,1,kS(1,a))}function
jB(a,c){rC(a,0);return b(a[18],0)}var
Hi=kS(80,32);function
Hj(b,d){var
a=d;for(;;){var
c=0<a?1:0;if(c){if(80<a){A(b[17],Hi,0,80);var
a=a+RG|0;continue}return A(b[17],Hi,0,a)}return c}}function
WM(a){return a[1]===ry?Z(WO,Z(a[2],WN)):WP}function
WQ(a){return a[1]===ry?Z(WS,Z(a[2],WR)):WT}function
WU(a){return 0}function
WV(a){return 0}function
Hk(i,h){function
j(a){return 0}function
k(a){return 0}function
l(a){return 0}var
c=GY(0),d=[0,G8,WW,0];rn(d,c);var
b=jw(0);rA(b);hW([0,1,d],b);var
e=jw(0),f=jw(0),g=jw(0),a=[0,b,jw(0),g,f,e,78,10,68,78,0,1,1,1,1,Tp,WX,i,h,l,k,j,0,0,WM,WQ,WU,WV,c];a[19]=function(b){return A(a[17],WL,0,1)};a[20]=function(b){return Hj(a,b)};a[21]=function(b){return Hj(a,b)};return a}function
Hl(c){function
a(a){return it(c)}return Hk(function(d,a,b){if(0<=a&&0<=b&&!((ah(d)-b|0)<a))return GC(c,d,a,b);return bv(Tx)},a)}function
rE(a){function
b(a){return 0}return Hk(function(b,c,d){return GZ(a,b,c,d)},b)}var
WY=yB;function
Hm(a){return aD(WY)}var
WZ=Hm(0),W0=Hl(Tv),W1=Hl(c4);rE(WZ);function
Hn(g,f){var
a=aD(16),c=rE(a);d(g,c,f);jB(c,0);var
e=a[2];if(2<=e){var
b=e-2|0,h=1;if(0<=b&&!((a[2]-b|0)<1))return iy(a[1],h,b);return bv(T2)}return aZ(a)}function
cb(a,c){var
d=0;if(typeof
c==="number")return 0;else
switch(c[0]){case
0:var
e=c[2];cb(a,c[1]);if(typeof
e==="number")switch(e){case
0:return Hf(a,0);case
1:return Hg(a,0);case
2:return jB(a,0);case
3:var
t=a[14]<a[15]?1:0;return t?Hb(a,[0,kY,3,0]):t;case
4:rC(a,1);return b(a[18],0);case
5:return jA(a,64);default:return jA(a,37)}else
switch(e[0]){case
0:var
k=[0,WK,e[2],WJ],u=a[14]<a[15]?1:0,O=[0,WI,e[3],WH],L=k[3],M=k[2],N=k[1];return u?Hd(a,1,[0,-a[13]|0,[1,k,O],(ah(N)+M|0)+ah(L)|0]):u;case
1:return 0;default:var
P=e[1];jA(a,64);return jA(a,P)}case
1:var
l=c[2],v=c[1];if(0===l[0]){var
Q=l[1];cb(a,v);var
m=[0,ry,Hn(cb,Q)];if(a[22]){hW(m,a[4]);b(a[26],m)}var
s=a[23];return s?jz(a,[0,kY,[5,m],0]):s}var
R=l[1];cb(a,v);var
w=VV(Hn(cb,R));return He(a,w[1],w[2]);case
2:var
f=c[1],H=0;if(typeof
f!=="number"&&0===f[0]){var
n=f[2],U=0;if(typeof
n!=="number"&&1===n[0]){var
B=c[2],A=n[2],z=f[1];H=1;U=1}}if(!H){var
y=c[2],x=f;d=2}break;case
3:var
h=c[1],I=0;if(typeof
h!=="number"&&0===h[0]){var
o=h[2],V=0;if(typeof
o!=="number"&&1===o[0]){var
G=c[2],F=o[2],E=h[1];d=1;I=1;V=1}}if(!I){var
D=c[2],C=h;d=3}break;case
4:var
i=c[1],J=0;if(typeof
i!=="number"&&0===i[0]){var
p=i[2],W=0;if(typeof
p!=="number"&&1===p[0]){var
B=c[2],A=p[2],z=i[1];J=1;W=1}}if(!J){var
y=c[2],x=i;d=2}break;case
5:var
j=c[1],r=0;if(typeof
j==="number"||!(0===j[0]))r=1;else{var
q=j[2],K=0;if(typeof
q!=="number"&&1===q[0]){var
G=c[2],F=q[2],E=j[1];d=1;K=1}if(!K)r=1}if(r){var
D=c[2],C=j;d=3}break;case
6:var
S=c[2];cb(a,c[1]);return b(S,a);case
7:cb(a,c[1]);return jB(a,0);default:var
T=c[2];cb(a,c[1]);return bv(T)}switch(d){case
0:cb(a,z);return rD(a,A,B);case
1:cb(a,E);return rD(a,F,kS(1,G));case
2:cb(a,x);return g(a,y);default:cb(a,C);return jA(a,D)}}function
c(c){return function(d){var
a=d[1],b=0;return az(function(a){cb(c,a);return 0},b,a)}}function
u(d){var
c=d[1],a=Hm(0),b=rE(a);return az(function(d){cb(b,d);rC(b,0);var
c=aZ(a);a[2]=0;a[1]=a[4];a[3]=b9(a[1]);return c},0,c)}Ty(function(a){jB(W0,0);return jB(W1,0)});function
W2(b,a){var
c=iv(a)===aQ?a:a[1];return GG(b,c)}var
W3=2;function
W4(c){var
a=[0,0],d=ah(c)-1|0,e=0;if(!(d<0)){var
b=e;for(;;){var
g=aU(c,b);a[1]=(n_*a[1]|0)+g|0;var
h=b+1|0;if(d!==b){var
b=h;continue}break}}a[1]=a[1]&QD;var
f=1073741823<a[1]?a[1]+2147483648|0:a[1];return f}var
hc=rl([0,Y]),hY=rl([0,Y]),hx=rl([0,g8]),Ho=GD(0,0),W5=[0,0];function
Hp(a){return 2<a?Hp((a+1|0)/2|0)*2|0:a}function
Hq(d){W5[1]++;var
b=d.length-1,c=jm((b*2|0)+2|0,Ho);bb(c,0)[1]=b;var
g=((Hp(b)*32|0)/8|0)-1|0;bb(c,1)[2]=g;var
e=b-1|0,h=0;if(!(e<0)){var
a=h;for(;;){var
f=(a*2|0)+3|0,i=bb(d,a)[1+a];bb(c,f)[1+f]=i;var
j=a+1|0;if(e!==a){var
a=j;continue}break}}return[0,W3,c,hY[1],hx[1],0,0,hc[1],0]}function
rF(b,d){var
a=b[2].length-1,e=a<d?1:0;if(e){var
c=jm(d,Ho),f=b[2],h=0;if(0<=a&&!((f.length-1-a|0)<0)&&!((c.length-1-a|0)<0)){bGC(f,0,c,0,a);h=1}if(!h)bv(TR);b[2]=c;var
g=0}else
var
g=e;return g}var
Hr=[0,0],W6=[0,0];function
rG(a){var
b=a[2].length-1;rF(a,b+1|0);return b}function
jC(a,e){try{var
b=d(hY[28],e,a[3]);return b}catch(b){b=aS(b);if(b===a4){var
c=rG(a);a[3]=A(hY[4],e,c,a[3]);a[4]=A(hx[4],c,1,a[4]);return c}throw b}}function
rH(b,a){return kT(function(a){return jC(b,a)},a)}function
Hs(b,a,c){W6[1]++;return d(hx[28],a,b[4])?(rF(b,a+1|0),bb(b[2],a)[1+a]=c,0):(b[6]=[0,[0,a,c],b[6]],0)}function
W7(c,b){try{var
a=TM(b,c[6]);return a}catch(a){a=aS(a);if(a===a4)return bb(c[2],b)[1+b];throw a}}function
rI(c){if(0===c)return 0;var
a=c.length-1-1|0,b=0;for(;;){if(0<=a){var
d=[0,c[1+a],b],a=a-1|0,b=d;continue}return b}}function
W8(a){var
b=a[1];a[1]=b+1|0;return b}function
rJ(a,c){try{var
b=d(hc[28],c,a[7]);return b}catch(b){b=aS(b);if(b===a4){var
e=W8(a);if(p(c,W9))a[7]=A(hc[4],c,e,a[7]);return e}throw b}}function
rK(a){return S7(a,0)?[0]:a}function
W_(b,a){try{var
c=d(hc[28],a,b[7]);return c}catch(a){a=aS(a);if(a===a4)throw[0,ap,W$];throw a}}function
rL(a,m,D,l,k,C){var
n=k[2],E=k[4],h=rI(m),i=rI(D),j=rI(l),g=hU(function(b){return jC(a,b)},i),o=hU(function(b){return jC(a,b)},j);a[5]=[0,[0,a[3],a[4],a[6],a[7],g,h],a[5]];var
p=hc[1],q=a[7];function
r(b,c,a){return rk(b,h)?A(hc[4],b,c,a):a}a[7]=A(hc[13],r,q,p);var
e=[0,hY[1]],f=[0,hx[1]];GS(function(g,b){e[1]=A(hY[4],g,b,e[1]);var
h=f[1];try{var
i=d(hx[28],b,a[4]),c=i}catch(a){a=aS(a);if(a!==a4)throw a;var
c=1}f[1]=A(hx[4],b,c,h);return 0},j,o);GS(function(b,a){e[1]=A(hY[4],b,a,e[1]);f[1]=A(hx[4],a,0,f[1]);return 0},i,g);a[3]=e[1];a[4]=f[1];var
s=0,t=a[6];a[6]=rj(function(b,a){return rk(b[1],g)?a:[0,b,a]},t,s);var
F=C?d(n,a,E):b(n,a),c=js(a[5]),u=c[6],v=c[5],w=c[4],x=c[3],y=c[2],z=c[1];a[5]=GR(a[5]);a[7]=T(function(c,b){var
e=d(hc[28],b,a[7]);return A(hc[4],b,e,c)},w,u);a[3]=z;a[4]=y;var
B=a[6];a[6]=rj(function(b,a){return rk(b[1],v)?a:[0,b,a]},B,x);var
G=0,H=rK(l),I=[0,kT(function(b){return W7(a,jC(a,b))},H),G],J=rK(m);return bGD([0,[0,F],[0,kT(function(b){return W_(a,b)},J),I]])}function
k1(e,h){if(0===e)var
a=Hq([0]);else{var
d=Hq(kT(W4,e)),f=e.length-1-1|0,j=0;if(!(f<0)){var
c=j;for(;;){var
g=(c*2|0)+2|0;d[3]=A(hY[4],e[1+c],g,d[3]);d[4]=A(hx[4],g,1,d[4]);var
k=c+1|0;if(f!==c){var
c=k;continue}break}}var
a=d}var
i=b(h,a);Hr[1]=(Hr[1]+a[1]|0)-1|0;a[8]=U(a[8]);rF(a,3+((bb(a[2],1)[2]*16|0)/32|0)|0);return[0,b(i,0),h,i,0]}function
k2(b,a){if(b)return b;var
c=GD(aQ,a[1]);c[1]=a[2];return bHi(c)}function
rM(g,c,f){if(g)return c;var
d=f[8];if(0!==d){var
a=d;for(;;){if(a){var
e=a[2];b(a[1],c);var
a=e;continue}break}}return c}function
k3(a){var
c=rG(a),d=0;if(0!==(c%2|0)&&!((2+((bb(a[2],1)[2]*16|0)/32|0)|0)<c)){var
b=rG(a);d=1}if(!d)var
b=c;bb(a[2],b)[1+b]=0;return b}function
rN(e,h){var
f=[0,0],am=h.length-1;for(;;){if(f[1]<am){var
i=f[1],an=bb(h,i)[1+i],a=function(b){f[1]++;var
a=f[1];return bb(h,a)[1+a]},g=a(0);if(typeof
g==="number")switch(g){case
0:var
j=a(0),c=function(a){return function(b){return a}}(j);break;case
1:var
k=a(0),c=function(b){return function(a){return a[1+b]}}(k);break;case
2:var
l=a(0),m=a(0),c=function(b,c){return function(a){return a[1+b][1+c]}}(l,m);break;case
3:var
n=a(0),c=function(c){return function(a){return b(a[1][1+c],a)}}(n);break;case
4:var
o=a(0),c=function(c){return function(b,a){b[1+c]=a;return 0}}(o);break;case
5:var
p=a(0),q=a(0),c=function(a,c){return function(d){return b(a,c)}}(p,q);break;case
6:var
r=a(0),s=a(0),c=function(c,d){return function(a){return b(c,a[1+d])}}(r,s);break;case
7:var
t=a(0),u=a(0),v=a(0),c=function(c,d,e){return function(a){return b(c,a[1+d][1+e])}}(t,u,v);break;case
8:var
w=a(0),x=a(0),c=function(c,d){return function(a){return b(c,b(a[1][1+d],a))}}(w,x);break;case
9:var
y=a(0),z=a(0),A=a(0),c=function(a,b,c){return function(e){return d(a,b,c)}}(y,z,A);break;case
10:var
B=a(0),C=a(0),D=a(0),c=function(b,c,e){return function(a){return d(b,c,a[1+e])}}(B,C,D);break;case
11:var
E=a(0),F=a(0),G=a(0),H=a(0),c=function(b,c,e,f){return function(a){return d(b,c,a[1+e][1+f])}}(E,F,G,H);break;case
12:var
I=a(0),J=a(0),K=a(0),c=function(c,e,f){return function(a){return d(c,e,b(a[1][1+f],a))}}(I,J,K);break;case
13:var
L=a(0),M=a(0),N=a(0),c=function(b,c,e){return function(a){return d(b,a[1+c],e)}}(L,M,N);break;case
14:var
O=a(0),P=a(0),Q=a(0),R=a(0),c=function(b,c,e,f){return function(a){return d(b,a[1+c][1+e],f)}}(O,P,Q,R);break;case
15:var
S=a(0),T=a(0),U=a(0),c=function(c,e,f){return function(a){return d(c,b(a[1][1+e],a),f)}}(S,T,U);break;case
16:var
V=a(0),W=a(0),c=function(b,c){return function(a){return d(a[1][1+b],a,c)}}(V,W);break;case
17:var
X=a(0),Y=a(0),c=function(b,c){return function(a){return d(a[1][1+b],a,a[1+c])}}(X,Y);break;case
18:var
Z=a(0),_=a(0),$=a(0),c=function(b,c,e){return function(a){return d(a[1][1+b],a,a[1+c][1+e])}}(Z,_,$);break;case
19:var
aa=a(0),ab=a(0),c=function(e,f){return function(a){var
c=b(a[1][1+f],a);return d(a[1][1+e],a,c)}}(aa,ab);break;case
20:var
ac=a(0),ad=a(0);k3(e);var
c=function(c,a){return function(d){return b(ag(a,c,0),a)}}(ac,ad);break;case
21:var
ae=a(0),af=a(0);k3(e);var
c=function(d,e){return function(c){var
a=c[1+e];return b(ag(a,d,0),a)}}(ae,af);break;case
22:var
ah=a(0),ai=a(0),aj=a(0);k3(e);var
c=function(d,e,f){return function(c){var
a=c[1+e][1+f];return b(ag(a,d,0),a)}}(ah,ai,aj);break;default:var
ak=a(0),al=a(0);k3(e);var
c=function(d,e){return function(a){var
c=b(a[1][1+e],a);return b(ag(c,d,0),c)}}(ak,al)}else
var
c=g;Hs(e,an,c);f[1]++;continue}return 0}}function
Ht(e,j){var
k=j.length-1,f=GD(0,k),l=k-1|0,m=0;if(!(l<0)){var
a=m;for(;;){var
c=bb(j,a)[1+a];if(typeof
c==="number")switch(c){case
0:var
d=function(g){function
c(d){var
a=f[1+g];if(c===a)throw[0,jp,e];return b(a,d)}return c}(a);break;case
1:var
i=[];h(i,[kd,function(c,d){return function(g){var
a=f[1+d];if(c===a)throw[0,jp,e];var
b=iv(a);return kc===b?a[1]:kd===b?TC(a):a}}(i,a)]);var
d=i;break;default:var
g=function(a){throw[0,jp,e]},d=[0,g,g,g,0]}else
var
d=0===c[0]?Ht(e,c[1]):c[1];f[1+a]=d;var
n=a+1|0;if(l!==a){var
a=n;continue}break}}return f}function
bd(b,a){if(typeof
a!=="number"&&0===a[0])return Ht(b,a[1]);return V(Xa)}function
Hu(g,f,e){if(0===iv(e)&&g.length-1<=e.length-1){var
h=g.length-1-1|0,l=0;if(!(h<0)){var
a=l;for(;;){var
c=e[1+a],d=bb(g,a)[1+a];if(typeof
d==="number")if(2===d){var
i=0;if(0===iv(c)&&4===c.length-1){var
b=0,j=f[1+a];for(;;){j[1+b]=c[1+b];var
k=b+1|0;if(3!==b){var
b=k;continue}break}}else
i=1;if(i)throw[0,ap,Xb]}else
f[1+a]=c;else
if(0===d[0])Hu(d[1],f[1+a],c);var
m=a+1|0;if(h!==a){var
a=m;continue}break}}return 0}throw[0,ap,Xc]}function
be(a,c,b){if(typeof
a!=="number"&&0===a[0])return Hu(a[1],c,b);return V(Xd)}try{Tm(bGz)}catch(a){a=aS(a);if(a!==a4)throw a}try{Tm(bGy)}catch(a){a=aS(a);if(a!==a4)throw a}if(p(GP,Xe))p(GP,Xf);function
hZ(c,a){function
b(a){return cO(c,a)}return Cv<=a?(b(i_|a>>>18|0),b(a7|(a>>>12|0)&63),b(a7|(a>>>6|0)&63),b(a7|a&63)):xN<=a?(b(jg|a>>>12|0),b(a7|(a>>>6|0)&63),b(a7|a&63)):a7<=a?(b(i3|a>>>6|0),b(a7|a&63)):b(a)}var
rO=[aQ,Xh,hu(0)];W2(Xi,[0,rO,[0]]);var
rP=ar,bN=null,Hv=undefined;function
Xj(a){throw a}function
k4(a){return a!==Hv?1:0}var
Xk=rP.Array,Xl=rP.Error;function
Hw(a){return b(Xj,a)}G7(function(a){return a[1]===rO?[0,ct(a[2].toString())]:0});G7(function(a){return a
instanceof
Xk?0:[0,ct(a.toString())]});var
I=bd(Xn,Xm),av=bd(Xp,Xo),k5=bd(Xr,Xq),jD=bd(Xt,Xs),h0=bd(Xv,Xu),rQ=bd(Xx,Xw),Hx=bd(Xz,Xy),rR=bd(XB,XA),iE=bd(XD,XC),k6=bd(XF,XE),af=bd(XH,XG),bF=bd(XJ,XI),ab=bd(XL,XK),rS=bd(XN,XM),cB=bd(XP,XO),a9=bd(XR,XQ),h1=bd(XT,XS),hy=bd(XV,XU),rT=function
e(a,b,c,d){return e.fun(a,b,c,d)},Hy=function
d(a,b,c){return d.fun(a,b,c)},XY=bd(XX,XW);h(rT,function(f,g,a,e){b(c(a),XZ);d(c(a),X1,X0);var
h=e[1];b(c(a),X2);var
i=0;T(function(e,d){if(e)b(c(a),X3);function
g(a){return b(f,a)}A(a9[1],g,a,d);return 1},i,h);b(c(a),X4);b(c(a),X5);b(c(a),X6);d(c(a),X8,X7);var
j=e[2];b(c(a),X9);var
k=0;T(function(e,d){if(e)b(c(a),X_);function
g(a){return b(f,a)}A(a9[1],g,a,d);return 1},k,j);b(c(a),X$);b(c(a),Ya);b(c(a),Yb);d(c(a),Yd,Yc);d(g,a,e[3]);b(c(a),Ye);return b(c(a),Yf)});h(Hy,function(c,b,a){var
e=d(rT,c,b);return d(u(Yg),e,a)});be(Yh,I,[0,rT,Hy]);var
rU=function
e(a,b,c,d){return e.fun(a,b,c,d)},Hz=function
d(a,b,c){return d.fun(a,b,c)},k7=function
d(a,b,c){return d.fun(a,b,c)},HA=function
c(a,b){return c.fun(a,b)};h(rU,function(g,f,a,e){b(c(a),Yi);d(f,a,e[1]);b(c(a),Yj);var
h=e[2];A(k7,function(a){return b(g,a)},a,h);return b(c(a),Yk)});h(Hz,function(c,b,a){var
e=d(rU,c,b);return d(u(Yl),e,a)});h(k7,function(h,a,e){b(c(a),Ym);d(c(a),Yo,Yn);var
i=e[1];d(c(a),Yp,i);b(c(a),Yq);b(c(a),Yr);d(c(a),Yt,Ys);var
f=e[2];if(f){g(a,Yu);var
k=f[1],l=function(a,b){return g(a,Yv)},m=function(a){return b(h,a)};j(I[1],m,l,a,k);g(a,Yw)}else
g(a,Yz);b(c(a),Yx);return b(c(a),Yy)});h(HA,function(c,a){var
e=b(k7,c);return d(u(YA),e,a)});be(YB,av,[0,rU,Hz,k7,HA]);var
rV=function
d(a,b,c){return d.fun(a,b,c)},HB=function
c(a,b){return c.fun(a,b)},k8=function
d(a,b,c){return d.fun(a,b,c)},HC=function
c(a,b){return c.fun(a,b)};h(rV,function(f,a,e){b(c(a),YC);d(f,a,e[1]);b(c(a),YD);var
g=e[2];A(k8,function(a){return b(f,a)},a,g);return b(c(a),YE)});h(HB,function(c,a){var
e=b(rV,c);return d(u(YF),e,a)});h(k8,function(h,a,e){b(c(a),YG);d(c(a),YI,YH);var
i=e[1];d(c(a),YJ,i);b(c(a),YK);b(c(a),YL);d(c(a),YN,YM);var
f=e[2];if(f){g(a,YO);var
k=f[1],l=function(a,b){return g(a,YP)},m=function(a){return b(h,a)};j(I[1],m,l,a,k);g(a,YQ)}else
g(a,YT);b(c(a),YR);return b(c(a),YS)});h(HC,function(c,a){var
e=b(k8,c);return d(u(YU),e,a)});be(YV,k5,[0,rV,HB,k8,HC]);function
HD(a,e){b(c(a),YW);d(c(a),YY,YX);var
f=e[1];d(c(a),YZ,f);b(c(a),Y0);b(c(a),Y1);d(c(a),Y3,Y2);var
g=e[2];d(c(a),Y4,g);b(c(a),Y5);return b(c(a),Y6)}var
HE=[0,HD,function(a){return d(u(Y7),HD,a)}],rW=function
d(a,b,c){return d.fun(a,b,c)},HF=function
c(a,b){return c.fun(a,b)},k9=function
c(a,b){return c.fun(a,b)},HG=function
b(a){return b.fun(a)};h(rW,function(h,a,e){b(c(a),Y8);d(c(a),Y_,Y9);d(k9,a,e[1]);b(c(a),Y$);b(c(a),Za);d(c(a),Zc,Zb);var
i=e[2];d(c(a),Zd,i);b(c(a),Ze);b(c(a),Zf);d(c(a),Zh,Zg);var
f=e[3];if(f){g(a,Zi);var
k=f[1],l=function(a,b){return g(a,Zj)},m=function(a){return b(h,a)};j(I[1],m,l,a,k);g(a,Zk)}else
g(a,Zn);b(c(a),Zl);return b(c(a),Zm)});h(HF,function(c,a){var
e=b(rW,c);return d(u(Zo),e,a)});h(k9,function(a,e){if(typeof
e==="number")return g(a,Zp);else
switch(e[0]){case
0:b(c(a),Zq);var
f=e[1];d(c(a),Zr,f);return b(c(a),Zs);case
1:b(c(a),Zt);var
h=e[1];d(c(a),Zu,h);return b(c(a),Zv);case
2:b(c(a),Zw);var
i=e[1];d(c(a),Zx,i);return b(c(a),Zy);case
3:b(c(a),Zz);var
j=e[1];d(c(a),ZA,j);return b(c(a),ZB);default:b(c(a),ZC);d(HE[1],a,e[1]);return b(c(a),ZD)}});h(HG,function(a){return d(u(ZE),k9,a)});be(ZF,jD,[0,HE,rW,HF,k9,HG]);var
rX=function
d(a,b,c){return d.fun(a,b,c)},HH=function
c(a,b){return c.fun(a,b)};h(rX,function(h,a,e){b(c(a),ZG);d(c(a),ZI,ZH);var
i=e[1];d(c(a),ZJ,i);b(c(a),ZK);b(c(a),ZL);d(c(a),ZN,ZM);var
k=e[2];d(c(a),ZO,k);b(c(a),ZP);b(c(a),ZQ);d(c(a),ZS,ZR);var
f=e[3];if(f){g(a,ZT);var
l=f[1],m=function(a,b){return g(a,ZU)},n=function(a){return b(h,a)};j(I[1],n,m,a,l);g(a,ZV)}else
g(a,ZY);b(c(a),ZW);return b(c(a),ZX)});h(HH,function(c,a){var
e=b(rX,c);return d(u(ZZ),e,a)});be(Z0,h0,[0,rX,HH]);var
rY=function
d(a,b,c){return d.fun(a,b,c)},HI=function
c(a,b){return c.fun(a,b)};h(rY,function(h,a,e){b(c(a),Z1);d(c(a),Z3,Z2);var
i=e[1];d(c(a),Z4,i);b(c(a),Z5);b(c(a),Z6);d(c(a),Z8,Z7);var
k=e[2];d(c(a),Z9,k);b(c(a),Z_);b(c(a),Z$);d(c(a),_b,_a);var
f=e[3];if(f){g(a,_c);var
l=f[1],m=function(a,b){return g(a,_d)},n=function(a){return b(h,a)};j(I[1],n,m,a,l);g(a,_e)}else
g(a,_h);b(c(a),_f);return b(c(a),_g)});h(HI,function(c,a){var
e=b(rY,c);return d(u(_i),e,a)});be(_j,rQ,[0,rY,HI]);var
rZ=function
d(a,b,c){return d.fun(a,b,c)},HJ=function
c(a,b){return c.fun(a,b)};h(rZ,function(h,a,e){b(c(a),_k);d(c(a),_m,_l);var
i=e[1];d(c(a),_n,i);b(c(a),_o);b(c(a),_p);d(c(a),_r,_q);var
k=e[2];d(c(a),_s,k);b(c(a),_t);b(c(a),_u);d(c(a),_w,_v);var
f=e[3];if(f){g(a,_x);var
l=f[1],m=function(a,b){return g(a,_y)},n=function(a){return b(h,a)};j(I[1],n,m,a,l);g(a,_z)}else
g(a,_C);b(c(a),_A);return b(c(a),_B)});h(HJ,function(c,a){var
e=b(rZ,c);return d(u(_D),e,a)});be(_E,Hx,[0,rZ,HJ]);var
r0=function
d(a,b,c){return d.fun(a,b,c)},HK=function
c(a,b){return c.fun(a,b)};h(r0,function(h,a,e){b(c(a),_F);d(c(a),_H,_G);var
i=e[1];d(c(a),_I,i);b(c(a),_J);b(c(a),_K);d(c(a),_M,_L);var
f=e[2];if(f){g(a,_N);var
k=f[1],l=function(a,b){return g(a,_O)},m=function(a){return b(h,a)};j(I[1],m,l,a,k);g(a,_P)}else
g(a,_S);b(c(a),_Q);return b(c(a),_R)});h(HK,function(c,a){var
e=b(r0,c);return d(u(_T),e,a)});be(_U,rR,[0,r0,HK]);var
r1=function
d(a,b,c){return d.fun(a,b,c)},HL=function
c(a,b){return c.fun(a,b)},k_=function
c(a,b){return c.fun(a,b)},HM=function
b(a){return b.fun(a)},k$=function
d(a,b,c){return d.fun(a,b,c)},HN=function
c(a,b){return c.fun(a,b)};h(r1,function(f,a,e){b(c(a),_V);d(f,a,e[1]);b(c(a),_W);var
g=e[2];A(k$,function(a){return b(f,a)},a,g);return b(c(a),_X)});h(HL,function(c,a){var
e=b(r1,c);return d(u(_Y),e,a)});h(k_,function(a,b){return b?g(a,_Z):g(a,_0)});h(HM,function(a){return d(u(_1),k_,a)});h(k$,function(h,a,e){b(c(a),_2);d(c(a),_4,_3);d(k_,a,e[1]);b(c(a),_5);b(c(a),_6);d(c(a),_8,_7);var
f=e[2];if(f){g(a,_9);var
i=f[1],k=function(a,b){return g(a,__)},l=function(a){return b(h,a)};j(I[1],l,k,a,i);g(a,_$)}else
g(a,$c);b(c(a),$a);return b(c(a),$b)});h(HN,function(c,a){var
e=b(k$,c);return d(u($d),e,a)});be($e,iE,[0,r1,HL,k_,HM,k$,HN]);var
r2=function
e(a,b,c,d){return e.fun(a,b,c,d)},HO=function
d(a,b,c){return d.fun(a,b,c)},r3=function
e(a,b,c,d){return e.fun(a,b,c,d)},HP=function
d(a,b,c){return d.fun(a,b,c)};h(r2,function(f,g,a,e){b(c(a),$f);d(f,a,e[1]);b(c(a),$g);var
h=e[2];function
i(a){return b(g,a)}function
k(a){return b(f,a)}j(k6[3],k,i,a,h);return b(c(a),$h)});h(HO,function(c,b,a){var
e=d(r2,c,b);return d(u($i),e,a)});h(r3,function(f,i,a,e){b(c(a),$j);d(c(a),$l,$k);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),$m);b(c(a),$n);d(c(a),$p,$o);var
h=e[2];if(h){g(a,$q);var
n=h[1],o=function(a,b){return g(a,$r)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,$s)}else
g(a,$v);b(c(a),$t);return b(c(a),$u)});h(HP,function(c,b,a){var
e=d(r3,c,b);return d(u($w),e,a)});be($x,k6,[0,r2,HO,r3,HP]);var
r4=function
e(a,b,c,d){return e.fun(a,b,c,d)},HQ=function
d(a,b,c){return d.fun(a,b,c)},la=function
e(a,b,c,d){return e.fun(a,b,c,d)},HR=function
d(a,b,c){return d.fun(a,b,c)};h(r4,function(f,g,a,e){b(c(a),$y);d(f,a,e[1]);b(c(a),$z);var
h=e[2];function
i(a){return b(g,a)}j(la,function(a){return b(f,a)},i,a,h);return b(c(a),$A)});h(HQ,function(c,b,a){var
e=d(r4,c,b);return d(u($B),e,a)});h(la,function(h,f,a,e){b(c(a),$C);d(c(a),$E,$D);var
i=e[1];if(i){g(a,$F);var
k=i[1],l=function(a){return b(f,a)},m=function(a){return b(h,a)};j(av[1],m,l,a,k);g(a,$G)}else
g(a,$S);b(c(a),$H);b(c(a),$I);d(c(a),$K,$J);var
n=e[2];function
o(a){return b(f,a)}function
p(a){return b(h,a)}j(af[13],p,o,a,n);b(c(a),$L);b(c(a),$M);d(c(a),$O,$N);var
q=e[3];d(c(a),$P,q);b(c(a),$Q);return b(c(a),$R)});h(HR,function(c,b,a){var
e=d(la,c,b);return d(u($T),e,a)});var
r5=[0,r4,HQ,la,HR],r6=function
e(a,b,c,d){return e.fun(a,b,c,d)},HS=function
d(a,b,c){return d.fun(a,b,c)},lb=function
e(a,b,c,d){return e.fun(a,b,c,d)},HT=function
d(a,b,c){return d.fun(a,b,c)};h(r6,function(f,g,a,e){b(c(a),$U);d(f,a,e[1]);b(c(a),$V);var
h=e[2];function
i(a){return b(g,a)}j(lb,function(a){return b(f,a)},i,a,h);return b(c(a),$W)});h(HS,function(c,b,a){var
e=d(r6,c,b);return d(u($X),e,a)});h(lb,function(f,i,a,e){b(c(a),$Y);d(c(a),$0,$Z);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(r5[1],m,l,a,k);b(c(a),$1);b(c(a),$2);d(c(a),$4,$3);var
h=e[2];if(h){g(a,$5);var
n=h[1],o=function(a,b){return g(a,$6)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,$7)}else
g(a,$_);b(c(a),$8);return b(c(a),$9)});h(HT,function(c,b,a){var
e=d(lb,c,b);return d(u($$),e,a)});var
HU=[0,r6,HS,lb,HT],r7=function
e(a,b,c,d){return e.fun(a,b,c,d)},HV=function
d(a,b,c){return d.fun(a,b,c)},lc=function
e(a,b,c,d){return e.fun(a,b,c,d)},HW=function
d(a,b,c){return d.fun(a,b,c)};h(r7,function(f,g,a,e){b(c(a),aaa);d(f,a,e[1]);b(c(a),aab);var
h=e[2];function
i(a){return b(g,a)}j(lc,function(a){return b(f,a)},i,a,h);return b(c(a),aac)});h(HV,function(c,b,a){var
e=d(r7,c,b);return d(u(aad),e,a)});h(lc,function(f,i,a,e){b(c(a),aae);d(c(a),aag,aaf);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(af[17],m,l,a,k);b(c(a),aah);b(c(a),aai);d(c(a),aak,aaj);var
h=e[2];if(h){g(a,aal);var
n=h[1],o=function(a,b){return g(a,aam)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,aan)}else
g(a,aaq);b(c(a),aao);return b(c(a),aap)});h(HW,function(c,b,a){var
e=d(lc,c,b);return d(u(aar),e,a)});var
HX=[0,r7,HV,lc,HW],r8=function
e(a,b,c,d){return e.fun(a,b,c,d)},HY=function
d(a,b,c){return d.fun(a,b,c)},ld=function
e(a,b,c,d){return e.fun(a,b,c,d)},HZ=function
d(a,b,c){return d.fun(a,b,c)};h(r8,function(f,g,a,e){b(c(a),aas);d(f,a,e[1]);b(c(a),aat);var
h=e[2];function
i(a){return b(g,a)}j(ld,function(a){return b(f,a)},i,a,h);return b(c(a),aau)});h(HY,function(c,b,a){var
e=d(r8,c,b);return d(u(aav),e,a)});h(ld,function(e,h,a,f){b(c(a),aaw);d(c(a),aay,aax);var
i=f[1];if(i){g(a,aaz);var
m=i[1],n=function(a){return b(h,a)},o=function(a){return b(e,a)};j(HX[1],o,n,a,m);g(a,aaA)}else
g(a,aa1);b(c(a),aaB);b(c(a),aaC);d(c(a),aaE,aaD);var
p=f[2];b(c(a),aaF);var
q=0;T(function(f,d){if(f)b(c(a),aaG);function
g(a){return b(h,a)}function
i(a){return b(e,a)}j(r5[1],i,g,a,d);return 1},q,p);b(c(a),aaH);b(c(a),aaI);b(c(a),aaJ);d(c(a),aaL,aaK);var
k=f[3];if(k){g(a,aaM);var
r=k[1],s=function(a){return b(h,a)},t=function(a){return b(e,a)};j(HU[1],t,s,a,r);g(a,aaN)}else
g(a,aa0);b(c(a),aaO);b(c(a),aaP);d(c(a),aaR,aaQ);var
l=f[4];if(l){g(a,aaS);var
u=l[1],v=function(a,d){b(c(a),aaT);var
f=0;T(function(f,d){if(f)b(c(a),aaU);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),aaV)},w=function(a){return b(e,a)};j(I[1],w,v,a,u);g(a,aaW)}else
g(a,aaZ);b(c(a),aaX);return b(c(a),aaY)});h(HZ,function(c,b,a){var
e=d(ld,c,b);return d(u(aa2),e,a)});var
H0=[0,r8,HY,ld,HZ],r9=function
e(a,b,c,d){return e.fun(a,b,c,d)},H1=function
d(a,b,c){return d.fun(a,b,c)};h(r9,function(f,h,a,e){b(c(a),aa3);d(c(a),aa5,aa4);var
i=e[1];if(i){g(a,aa6);var
l=i[1],m=function(a){return b(h,a)},n=function(a){return b(f,a)};j(af[22][1],n,m,a,l);g(a,aa7)}else
g(a,abo);b(c(a),aa8);b(c(a),aa9);d(c(a),aa$,aa_);var
o=e[2];function
p(a){return b(h,a)}function
q(a){return b(f,a)}j(H0[1],q,p,a,o);b(c(a),aba);b(c(a),abb);d(c(a),abd,abc);var
r=e[3];function
s(a){return b(h,a)}function
t(a){return b(f,a)}j(af[13],t,s,a,r);b(c(a),abe);b(c(a),abf);d(c(a),abh,abg);var
k=e[4];if(k){g(a,abi);var
u=k[1],v=function(a,b){return g(a,abj)},w=function(a){return b(f,a)};j(I[1],w,v,a,u);g(a,abk)}else
g(a,abn);b(c(a),abl);return b(c(a),abm)});h(H1,function(c,b,a){var
e=d(r9,c,b);return d(u(abp),e,a)});var
jE=[0,r5,HU,HX,H0,r9,H1],le=function
e(a,b,c,d){return e.fun(a,b,c,d)},H2=function
d(a,b,c){return d.fun(a,b,c)},lf=function
e(a,b,c,d){return e.fun(a,b,c,d)},H3=function
d(a,b,c){return d.fun(a,b,c)},lg=function
e(a,b,c,d){return e.fun(a,b,c,d)},H4=function
d(a,b,c){return d.fun(a,b,c)};h(le,function(f,e,a,d){if(0===d[0]){b(c(a),abq);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(av[1],i,h,a,g);return b(c(a),abr)}b(c(a),abs);var
k=d[1];function
l(a){return b(e,a)}j(lf,function(a){return b(f,a)},l,a,k);return b(c(a),abt)});h(H2,function(c,b,a){var
e=d(le,c,b);return d(u(abu),e,a)});h(lf,function(f,g,a,e){b(c(a),abv);d(f,a,e[1]);b(c(a),abw);var
h=e[2];function
i(a){return b(g,a)}j(lg,function(a){return b(f,a)},i,a,h);return b(c(a),abx)});h(H3,function(c,b,a){var
e=d(lf,c,b);return d(u(aby),e,a)});h(lg,function(g,f,a,e){b(c(a),abz);d(c(a),abB,abA);var
h=e[1];function
i(a){return b(f,a)}j(le,function(a){return b(g,a)},i,a,h);b(c(a),abC);b(c(a),abD);d(c(a),abF,abE);var
k=e[2];function
l(a){return b(f,a)}function
m(a){return b(g,a)}j(av[1],m,l,a,k);b(c(a),abG);return b(c(a),abH)});h(H4,function(c,b,a){var
e=d(lg,c,b);return d(u(abI),e,a)});var
H5=[0,le,H2,lf,H3,lg,H4],r_=function
e(a,b,c,d){return e.fun(a,b,c,d)},H6=function
d(a,b,c){return d.fun(a,b,c)};h(r_,function(f,h,a,e){b(c(a),abJ);d(c(a),abL,abK);var
l=e[1];function
m(a){return b(h,a)}function
n(a){return b(f,a)}j(H5[1],n,m,a,l);b(c(a),abM);b(c(a),abN);d(c(a),abP,abO);var
i=e[2];if(i){g(a,abQ);var
o=i[1],p=function(a){return b(h,a)},q=function(a){return b(f,a)};j(af[23][1],q,p,a,o);g(a,abR)}else
g(a,ab2);b(c(a),abS);b(c(a),abT);d(c(a),abV,abU);var
k=e[3];if(k){g(a,abW);var
r=k[1],s=function(a,b){return g(a,abX)},t=function(a){return b(f,a)};j(I[1],t,s,a,r);g(a,abY)}else
g(a,ab1);b(c(a),abZ);return b(c(a),ab0)});h(H6,function(c,b,a){var
e=d(r_,c,b);return d(u(ab3),e,a)});var
r$=[0,H5,r_,H6],sa=function
e(a,b,c,d){return e.fun(a,b,c,d)},H7=function
d(a,b,c){return d.fun(a,b,c)};h(sa,function(f,h,a,e){b(c(a),ab4);d(c(a),ab6,ab5);var
k=e[1];function
l(a){return b(h,a)}function
m(a){return b(f,a)}j(af[13],m,l,a,k);b(c(a),ab7);b(c(a),ab8);d(c(a),ab_,ab9);var
n=e[2];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(af[13],p,o,a,n);b(c(a),ab$);b(c(a),aca);d(c(a),acc,acb);var
i=e[3];if(i){g(a,acd);var
q=i[1],r=function(a,b){return g(a,ace)},s=function(a){return b(f,a)};j(I[1],s,r,a,q);g(a,acf)}else
g(a,aci);b(c(a),acg);return b(c(a),ach)});h(H7,function(c,b,a){var
e=d(sa,c,b);return d(u(acj),e,a)});var
sb=[0,sa,H7],sc=function
e(a,b,c,d){return e.fun(a,b,c,d)},H8=function
d(a,b,c){return d.fun(a,b,c)};h(sc,function(g,f,a,e){b(c(a),ack);d(c(a),acm,acl);var
h=e[1];function
i(a){return b(f,a)}function
k(a){return b(g,a)}j(sb[1],k,i,a,h);b(c(a),acn);b(c(a),aco);d(c(a),acq,acp);var
l=e[2];d(c(a),acr,l);b(c(a),acs);return b(c(a),act)});h(H8,function(c,b,a){var
e=d(sc,c,b);return d(u(acu),e,a)});var
H9=[0,sc,H8],sd=function
e(a,b,c,d){return e.fun(a,b,c,d)},H_=function
d(a,b,c){return d.fun(a,b,c)},lh=function
e(a,b,c,d){return e.fun(a,b,c,d)},H$=function
d(a,b,c){return d.fun(a,b,c)},li=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ia=function
d(a,b,c){return d.fun(a,b,c)};h(sd,function(f,g,a,e){b(c(a),acv);d(f,a,e[1]);b(c(a),acw);var
h=e[2];function
i(a){return b(g,a)}j(lh,function(a){return b(f,a)},i,a,h);return b(c(a),acx)});h(H_,function(c,b,a){var
e=d(sd,c,b);return d(u(acy),e,a)});h(lh,function(f,h,a,e){b(c(a),acz);d(c(a),acB,acA);var
l=e[1];function
m(a){return b(h,a)}function
n(a){return b(f,a)}j(ab[7][1][1],n,m,a,l);b(c(a),acC);b(c(a),acD);d(c(a),acF,acE);var
o=e[2];function
p(a){return b(h,a)}j(li,function(a){return b(f,a)},p,a,o);b(c(a),acG);b(c(a),acH);d(c(a),acJ,acI);var
q=e[3];d(c(a),acK,q);b(c(a),acL);b(c(a),acM);d(c(a),acO,acN);var
r=e[4];d(c(a),acP,r);b(c(a),acQ);b(c(a),acR);d(c(a),acT,acS);var
s=e[5];d(c(a),acU,s);b(c(a),acV);b(c(a),acW);d(c(a),acY,acX);var
t=e[6];d(c(a),acZ,t);b(c(a),ac0);b(c(a),ac1);d(c(a),ac3,ac2);var
i=e[7];if(i){g(a,ac4);var
u=i[1],v=function(a){return b(f,a)};A(iE[1],v,a,u);g(a,ac5)}else
g(a,ade);b(c(a),ac6);b(c(a),ac7);d(c(a),ac9,ac8);var
k=e[8];if(k){g(a,ac_);var
w=k[1],x=function(a,b){return g(a,ac$)},y=function(a){return b(f,a)};j(I[1],y,x,a,w);g(a,ada)}else
g(a,add);b(c(a),adb);return b(c(a),adc)});h(H$,function(c,b,a){var
e=d(lh,c,b);return d(u(adf),e,a)});h(li,function(e,g,a,f){switch(f[0]){case
0:b(c(a),adg);var
k=f[1],l=function(a){return b(g,a)},m=function(a){return b(e,a)};j(af[13],m,l,a,k);return b(c(a),adh);case
1:var
h=f[1];b(c(a),adi);b(c(a),adj);d(e,a,h[1]);b(c(a),adk);var
n=h[2],o=function(a){return b(g,a)},p=function(a){return b(e,a)};j(jE[5],p,o,a,n);b(c(a),adl);return b(c(a),adm);default:var
i=f[1];b(c(a),adn);b(c(a),ado);d(e,a,i[1]);b(c(a),adp);var
q=i[2],r=function(a){return b(g,a)},s=function(a){return b(e,a)};j(jE[5],s,r,a,q);b(c(a),adq);return b(c(a),adr)}});h(Ia,function(c,b,a){var
e=d(li,c,b);return d(u(ads),e,a)});var
Ib=[0,sd,H_,lh,H$,li,Ia],se=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ic=function
d(a,b,c){return d.fun(a,b,c)},lj=function
e(a,b,c,d){return e.fun(a,b,c,d)},Id=function
d(a,b,c){return d.fun(a,b,c)};h(se,function(f,g,a,e){b(c(a),adt);d(f,a,e[1]);b(c(a),adu);var
h=e[2];function
i(a){return b(g,a)}j(lj,function(a){return b(f,a)},i,a,h);return b(c(a),adv)});h(Ic,function(c,b,a){var
e=d(se,c,b);return d(u(adw),e,a)});h(lj,function(f,i,a,e){b(c(a),adx);d(c(a),adz,ady);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(af[13],m,l,a,k);b(c(a),adA);b(c(a),adB);d(c(a),adD,adC);var
h=e[2];if(h){g(a,adE);var
n=h[1],o=function(a,b){return g(a,adF)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,adG)}else
g(a,adJ);b(c(a),adH);return b(c(a),adI)});h(Id,function(c,b,a){var
e=d(lj,c,b);return d(u(adK),e,a)});var
Ie=[0,se,Ic,lj,Id],lk=function
e(a,b,c,d){return e.fun(a,b,c,d)},If=function
d(a,b,c){return d.fun(a,b,c)},sf=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ig=function
d(a,b,c){return d.fun(a,b,c)};h(lk,function(f,h,a,e){b(c(a),adL);d(c(a),adN,adM);var
i=e[1];if(i){g(a,adO);var
m=i[1],n=function(a){return b(f,a)},o=function(a){return b(f,a)};j(av[1],o,n,a,m);g(a,adP)}else
g(a,aei);b(c(a),adQ);b(c(a),adR);d(c(a),adT,adS);var
p=e[2];function
q(a){return b(h,a)}function
r(a){return b(f,a)}j(af[13],r,q,a,p);b(c(a),adU);b(c(a),adV);d(c(a),adX,adW);var
s=e[3];function
t(a){return b(h,a)}function
u(a){return b(f,a)}j(af[13],u,t,a,s);b(c(a),adY);b(c(a),adZ);d(c(a),ad1,ad0);var
v=e[4];d(c(a),ad2,v);b(c(a),ad3);b(c(a),ad4);d(c(a),ad6,ad5);var
k=e[5];if(k){g(a,ad7);var
w=k[1],x=function(a){return b(f,a)};A(iE[1],x,a,w);g(a,ad8)}else
g(a,aeh);b(c(a),ad9);b(c(a),ad_);d(c(a),aea,ad$);var
l=e[6];if(l){g(a,aeb);var
y=l[1],z=function(a,b){return g(a,aec)},B=function(a){return b(f,a)};j(I[1],B,z,a,y);g(a,aed)}else
g(a,aeg);b(c(a),aee);return b(c(a),aef)});h(If,function(c,b,a){var
e=d(lk,c,b);return d(u(aej),e,a)});h(sf,function(f,g,a,e){b(c(a),aek);d(f,a,e[1]);b(c(a),ael);var
h=e[2];function
i(a){return b(g,a)}j(lk,function(a){return b(f,a)},i,a,h);return b(c(a),aem)});h(Ig,function(c,b,a){var
e=d(sf,c,b);return d(u(aen),e,a)});var
Ih=[0,lk,If,sf,Ig],sg=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ii=function
d(a,b,c){return d.fun(a,b,c)},ll=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ij=function
d(a,b,c){return d.fun(a,b,c)};h(sg,function(f,g,a,e){b(c(a),aeo);d(f,a,e[1]);b(c(a),aep);var
h=e[2];function
i(a){return b(g,a)}j(ll,function(a){return b(f,a)},i,a,h);return b(c(a),aeq)});h(Ii,function(c,b,a){var
e=d(sg,c,b);return d(u(aer),e,a)});h(ll,function(f,k,a,e){b(c(a),aes);d(c(a),aeu,aet);var
h=e[1];b(c(a),aev);d(f,a,h[1]);b(c(a),aew);var
l=h[2];function
m(a){return b(k,a)}function
n(a){return b(f,a)}j(jE[5],n,m,a,l);b(c(a),aex);b(c(a),aey);b(c(a),aez);d(c(a),aeB,aeA);var
o=e[2];d(c(a),aeC,o);b(c(a),aeD);b(c(a),aeE);d(c(a),aeG,aeF);var
i=e[3];if(i){g(a,aeH);var
p=i[1],q=function(a,b){return g(a,aeI)},r=function(a){return b(f,a)};j(I[1],r,q,a,p);g(a,aeJ)}else
g(a,aeM);b(c(a),aeK);return b(c(a),aeL)});h(Ij,function(c,b,a){var
e=d(ll,c,b);return d(u(aeN),e,a)});var
Ik=[0,sg,Ii,ll,Ij],sh=function
e(a,b,c,d){return e.fun(a,b,c,d)},Il=function
d(a,b,c){return d.fun(a,b,c)},lm=function
e(a,b,c,d){return e.fun(a,b,c,d)},Im=function
d(a,b,c){return d.fun(a,b,c)};h(sh,function(f,g,a,e){b(c(a),aeO);d(f,a,e[1]);b(c(a),aeP);var
h=e[2];function
i(a){return b(g,a)}j(lm,function(a){return b(f,a)},i,a,h);return b(c(a),aeQ)});h(Il,function(c,b,a){var
e=d(sh,c,b);return d(u(aeR),e,a)});h(lm,function(f,i,a,e){b(c(a),aeS);d(c(a),aeU,aeT);var
k=e[1];function
l(a){return b(f,a)}function
m(a){return b(f,a)}j(av[1],m,l,a,k);b(c(a),aeV);b(c(a),aeW);d(c(a),aeY,aeX);var
n=e[2];function
o(a){return b(i,a)}function
p(a){return b(f,a)}j(af[13],p,o,a,n);b(c(a),aeZ);b(c(a),ae0);d(c(a),ae2,ae1);var
q=e[3];d(c(a),ae3,q);b(c(a),ae4);b(c(a),ae5);d(c(a),ae7,ae6);var
r=e[4];d(c(a),ae8,r);b(c(a),ae9);b(c(a),ae_);d(c(a),afa,ae$);var
s=e[5];d(c(a),afb,s);b(c(a),afc);b(c(a),afd);d(c(a),aff,afe);var
h=e[6];if(h){g(a,afg);var
t=h[1],u=function(a,b){return g(a,afh)},v=function(a){return b(f,a)};j(I[1],v,u,a,t);g(a,afi)}else
g(a,afl);b(c(a),afj);return b(c(a),afk)});h(Im,function(c,b,a){var
e=d(lm,c,b);return d(u(afm),e,a)});var
In=[0,sh,Il,lm,Im],si=function
e(a,b,c,d){return e.fun(a,b,c,d)},Io=function
d(a,b,c){return d.fun(a,b,c)},ln=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ip=function
d(a,b,c){return d.fun(a,b,c)};h(si,function(f,i,a,e){b(c(a),afn);d(c(a),afp,afo);var
k=e[1];d(c(a),afq,k);b(c(a),afr);b(c(a),afs);d(c(a),afu,aft);var
l=e[2];d(c(a),afv,l);b(c(a),afw);b(c(a),afx);d(c(a),afz,afy);var
m=e[3];b(c(a),afA);var
n=0;T(function(e,d){if(e)b(c(a),afB);function
g(a){return b(i,a)}j(ln,function(a){return b(f,a)},g,a,d);return 1},n,m);b(c(a),afC);b(c(a),afD);b(c(a),afE);d(c(a),afG,afF);var
h=e[4];if(h){g(a,afH);var
o=h[1],p=function(a,d){b(c(a),afI);var
e=0;T(function(e,d){if(e)b(c(a),afJ);function
g(a){return b(f,a)}A(a9[1],g,a,d);return 1},e,d);return b(c(a),afK)},q=function(a){return b(f,a)};j(I[1],q,p,a,o);g(a,afL)}else
g(a,afO);b(c(a),afM);return b(c(a),afN)});h(Io,function(c,b,a){var
e=d(si,c,b);return d(u(afP),e,a)});h(ln,function(f,e,a,d){switch(d[0]){case
0:b(c(a),afQ);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(Ib[1],i,h,a,g);return b(c(a),afR);case
1:b(c(a),afS);var
k=d[1],l=function(a){return b(e,a)},m=function(a){return b(f,a)};j(Ie[1],m,l,a,k);return b(c(a),afT);case
2:b(c(a),afU);var
n=d[1],o=function(a){return b(e,a)},p=function(a){return b(f,a)};j(Ih[3],p,o,a,n);return b(c(a),afV);case
3:b(c(a),afW);var
q=d[1],r=function(a){return b(e,a)},s=function(a){return b(f,a)};j(Ik[1],s,r,a,q);return b(c(a),afX);default:b(c(a),afY);var
t=d[1],u=function(a){return b(e,a)},v=function(a){return b(f,a)};j(In[1],v,u,a,t);return b(c(a),afZ)}});h(Ip,function(c,b,a){var
e=d(ln,c,b);return d(u(af0),e,a)});var
sj=[0,Ib,Ie,Ih,Ik,In,si,Io,ln,Ip],sk=function
e(a,b,c,d){return e.fun(a,b,c,d)},Iq=function
d(a,b,c){return d.fun(a,b,c)};h(sk,function(e,h,a,f){b(c(a),af1);d(c(a),af3,af2);var
i=f[1];b(c(a),af4);d(e,a,i[1]);b(c(a),af5);var
l=i[2];function
m(a){return b(h,a)}function
n(a){return b(e,a)}j(sj[6],n,m,a,l);b(c(a),af6);b(c(a),af7);b(c(a),af8);d(c(a),af_,af9);var
o=f[2];b(c(a),af$);var
p=0;T(function(g,f){if(g)b(c(a),aga);b(c(a),agb);d(e,a,f[1]);b(c(a),agc);var
i=f[2];function
k(a){return b(h,a)}function
l(a){return b(e,a)}j(r$[2],l,k,a,i);b(c(a),agd);return 1},p,o);b(c(a),age);b(c(a),agf);b(c(a),agg);d(c(a),agi,agh);var
k=f[3];if(k){g(a,agj);var
q=k[1],r=function(a,b){return g(a,agk)},s=function(a){return b(e,a)};j(I[1],s,r,a,q);g(a,agl)}else
g(a,ago);b(c(a),agm);return b(c(a),agn)});h(Iq,function(c,b,a){var
e=d(sk,c,b);return d(u(agp),e,a)});var
Ir=[0,sk,Iq],sl=function
e(a,b,c,d){return e.fun(a,b,c,d)},Is=function
d(a,b,c){return d.fun(a,b,c)};h(sl,function(f,i,a,e){b(c(a),agq);d(c(a),ags,agr);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(af[13],m,l,a,k);b(c(a),agt);b(c(a),agu);d(c(a),agw,agv);var
h=e[2];if(h){g(a,agx);var
n=h[1],o=function(a,b){return g(a,agy)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,agz)}else
g(a,agC);b(c(a),agA);return b(c(a),agB)});h(Is,function(c,b,a){var
e=d(sl,c,b);return d(u(agD),e,a)});var
It=[0,sl,Is],lo=function
e(a,b,c,d){return e.fun(a,b,c,d)},Iu=function
d(a,b,c){return d.fun(a,b,c)},lp=function
e(a,b,c,d){return e.fun(a,b,c,d)},Iv=function
d(a,b,c){return d.fun(a,b,c)},lq=function
e(a,b,c,d){return e.fun(a,b,c,d)},Iw=function
d(a,b,c){return d.fun(a,b,c)};h(lo,function(f,e,a,d){if(0===d[0]){b(c(a),agE);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(av[1],i,h,a,g);return b(c(a),agF)}b(c(a),agG);var
k=d[1];function
l(a){return b(e,a)}j(lq,function(a){return b(f,a)},l,a,k);return b(c(a),agH)});h(Iu,function(c,b,a){var
e=d(lo,c,b);return d(u(agI),e,a)});h(lp,function(g,f,a,e){b(c(a),agJ);d(c(a),agL,agK);var
h=e[1];function
i(a){return b(f,a)}j(lo,function(a){return b(g,a)},i,a,h);b(c(a),agM);b(c(a),agN);d(c(a),agP,agO);var
k=e[2];function
l(a){return b(f,a)}function
m(a){return b(g,a)}j(av[1],m,l,a,k);b(c(a),agQ);return b(c(a),agR)});h(Iv,function(c,b,a){var
e=d(lp,c,b);return d(u(agS),e,a)});h(lq,function(g,f,a,e){b(c(a),agT);d(f,a,e[1]);b(c(a),agU);var
h=e[2];function
i(a){return b(f,a)}j(lp,function(a){return b(g,a)},i,a,h);return b(c(a),agV)});h(Iw,function(c,b,a){var
e=d(lq,c,b);return d(u(agW),e,a)});var
Ix=[0,lo,Iu,lp,Iv,lq,Iw],sm=function
e(a,b,c,d){return e.fun(a,b,c,d)},Iy=function
d(a,b,c){return d.fun(a,b,c)};h(sm,function(f,i,a,e){b(c(a),agX);d(c(a),agZ,agY);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(Ix[1],m,l,a,k);b(c(a),ag0);b(c(a),ag1);d(c(a),ag3,ag2);var
h=e[2];if(h){g(a,ag4);var
n=h[1],o=function(a,b){return g(a,ag5)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,ag6)}else
g(a,ag9);b(c(a),ag7);return b(c(a),ag8)});h(Iy,function(c,b,a){var
e=d(sm,c,b);return d(u(ag_),e,a)});var
Iz=[0,Ix,sm,Iy],sn=function
e(a,b,c,d){return e.fun(a,b,c,d)},IA=function
d(a,b,c){return d.fun(a,b,c)};h(sn,function(f,i,a,e){b(c(a),ag$);d(c(a),ahb,aha);var
k=e[1];b(c(a),ahc);var
l=0;T(function(e,d){if(e)b(c(a),ahd);function
g(a){return b(i,a)}function
h(a){return b(f,a)}j(af[13],h,g,a,d);return 1},l,k);b(c(a),ahe);b(c(a),ahf);b(c(a),ahg);d(c(a),ahi,ahh);var
h=e[2];if(h){g(a,ahj);var
m=h[1],n=function(a,b){return g(a,ahk)},o=function(a){return b(f,a)};j(I[1],o,n,a,m);g(a,ahl)}else
g(a,aho);b(c(a),ahm);return b(c(a),ahn)});h(IA,function(c,b,a){var
e=d(sn,c,b);return d(u(ahp),e,a)});var
IB=[0,sn,IA],so=function
e(a,b,c,d){return e.fun(a,b,c,d)},IC=function
d(a,b,c){return d.fun(a,b,c)};h(so,function(f,i,a,e){b(c(a),ahq);d(c(a),ahs,ahr);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(af[13],m,l,a,k);b(c(a),aht);b(c(a),ahu);d(c(a),ahw,ahv);var
h=e[2];if(h){g(a,ahx);var
n=h[1],o=function(a,b){return g(a,ahy)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,ahz)}else
g(a,ahC);b(c(a),ahA);return b(c(a),ahB)});h(IC,function(c,b,a){var
e=d(so,c,b);return d(u(ahD),e,a)});var
ID=[0,so,IC],sp=function
e(a,b,c,d){return e.fun(a,b,c,d)},IE=function
d(a,b,c){return d.fun(a,b,c)};h(sp,function(e,f,a,i){b(c(a),ahE);d(c(a),ahG,ahF);var
h=i[1];b(c(a),ahH);var
l=h[1];function
m(a){return b(f,a)}function
n(a){return b(e,a)}j(af[13],n,m,a,l);b(c(a),ahI);var
o=h[2];function
p(a){return b(f,a)}function
q(a){return b(e,a)}j(af[13],q,p,a,o);b(c(a),ahJ);b(c(a),ahK);var
r=h[3],s=0;T(function(g,d){if(g)b(c(a),ahL);function
h(a){return b(f,a)}function
i(a){return b(e,a)}j(af[13],i,h,a,d);return 1},s,r);b(c(a),ahM);b(c(a),ahN);b(c(a),ahO);b(c(a),ahP);d(c(a),ahR,ahQ);var
k=i[2];if(k){g(a,ahS);var
t=k[1],u=function(a,b){return g(a,ahT)},v=function(a){return b(e,a)};j(I[1],v,u,a,t);g(a,ahU)}else
g(a,ahX);b(c(a),ahV);return b(c(a),ahW)});h(IE,function(c,b,a){var
e=d(sp,c,b);return d(u(ahY),e,a)});var
IF=[0,sp,IE],sq=function
e(a,b,c,d){return e.fun(a,b,c,d)},IG=function
d(a,b,c){return d.fun(a,b,c)};h(sq,function(e,f,a,i){b(c(a),ahZ);d(c(a),ah1,ah0);var
h=i[1];b(c(a),ah2);var
l=h[1];function
m(a){return b(f,a)}function
n(a){return b(e,a)}j(af[13],n,m,a,l);b(c(a),ah3);var
o=h[2];function
p(a){return b(f,a)}function
q(a){return b(e,a)}j(af[13],q,p,a,o);b(c(a),ah4);b(c(a),ah5);var
r=h[3],s=0;T(function(g,d){if(g)b(c(a),ah6);function
h(a){return b(f,a)}function
i(a){return b(e,a)}j(af[13],i,h,a,d);return 1},s,r);b(c(a),ah7);b(c(a),ah8);b(c(a),ah9);b(c(a),ah_);d(c(a),aia,ah$);var
k=i[2];if(k){g(a,aib);var
t=k[1],u=function(a,b){return g(a,aic)},v=function(a){return b(e,a)};j(I[1],v,u,a,t);g(a,aid)}else
g(a,aig);b(c(a),aie);return b(c(a),aif)});h(IG,function(c,b,a){var
e=d(sq,c,b);return d(u(aih),e,a)});var
IH=[0,sq,IG],lr=function
e(a,b,c,d){return e.fun(a,b,c,d)},II=function
d(a,b,c){return d.fun(a,b,c)},ls=function
e(a,b,c,d){return e.fun(a,b,c,d)},IJ=function
d(a,b,c){return d.fun(a,b,c)},sr=function
e(a,b,c,d){return e.fun(a,b,c,d)},IK=function
d(a,b,c){return d.fun(a,b,c)},ss=function
e(a,b,c,d){return e.fun(a,b,c,d)},IL=function
d(a,b,c){return d.fun(a,b,c)};h(lr,function(g,f,a,e){b(c(a),aii);d(f,a,e[1]);b(c(a),aij);var
h=e[2];function
i(a){return b(f,a)}j(ls,function(a){return b(g,a)},i,a,h);return b(c(a),aik)});h(II,function(c,b,a){var
e=d(lr,c,b);return d(u(ail),e,a)});h(ls,function(e,f,a,d){switch(d[0]){case
0:var
h=d[1];b(c(a),aim);if(h){g(a,ain);var
t=h[1],u=function(a,b){return g(a,aio)},v=function(a){return b(e,a)};j(I[1],v,u,a,t);g(a,aip)}else
g(a,air);return b(c(a),aiq);case
1:var
i=d[1];b(c(a),ais);if(i){g(a,ait);var
w=i[1],x=function(a,b){return g(a,aiu)},y=function(a){return b(e,a)};j(I[1],y,x,a,w);g(a,aiv)}else
g(a,aix);return b(c(a),aiw);case
2:var
k=d[1];b(c(a),aiy);if(k){g(a,aiz);var
z=k[1],B=function(a,b){return g(a,aiA)},C=function(a){return b(e,a)};j(I[1],C,B,a,z);g(a,aiB)}else
g(a,aiD);return b(c(a),aiC);case
3:var
l=d[1];b(c(a),aiE);if(l){g(a,aiF);var
D=l[1],E=function(a,b){return g(a,aiG)},F=function(a){return b(e,a)};j(I[1],F,E,a,D);g(a,aiH)}else
g(a,aiJ);return b(c(a),aiI);case
4:var
m=d[1];b(c(a),aiK);if(m){g(a,aiL);var
G=m[1],H=function(a,b){return g(a,aiM)},J=function(a){return b(e,a)};j(I[1],J,H,a,G);g(a,aiN)}else
g(a,aiP);return b(c(a),aiO);case
5:var
n=d[1];b(c(a),aiQ);if(n){g(a,aiR);var
K=n[1],L=function(a,b){return g(a,aiS)},M=function(a){return b(e,a)};j(I[1],M,L,a,K);g(a,aiT)}else
g(a,aiV);return b(c(a),aiU);case
6:var
o=d[1];b(c(a),aiW);if(o){g(a,aiX);var
N=o[1],O=function(a,b){return g(a,aiY)},P=function(a){return b(e,a)};j(I[1],P,O,a,N);g(a,aiZ)}else
g(a,ai1);return b(c(a),ai0);case
7:var
p=d[1];b(c(a),ai2);if(p){g(a,ai3);var
Q=p[1],R=function(a,b){return g(a,ai4)},S=function(a){return b(e,a)};j(I[1],S,R,a,Q);g(a,ai5)}else
g(a,ai7);return b(c(a),ai6);case
8:var
q=d[1];b(c(a),ai8);if(q){g(a,ai9);var
T=q[1],U=function(a,b){return g(a,ai_)},V=function(a){return b(e,a)};j(I[1],V,U,a,T);g(a,ai$)}else
g(a,ajb);return b(c(a),aja);case
9:var
r=d[1];b(c(a),ajc);if(r){g(a,ajd);var
W=r[1],X=function(a,b){return g(a,aje)},Y=function(a){return b(e,a)};j(I[1],Y,X,a,W);g(a,ajf)}else
g(a,ajh);return b(c(a),ajg);case
10:var
s=d[1];b(c(a),aji);if(s){g(a,ajj);var
Z=s[1],_=function(a,b){return g(a,ajk)},$=function(a){return b(e,a)};j(I[1],$,_,a,Z);g(a,ajl)}else
g(a,ajn);return b(c(a),ajm);case
11:b(c(a),ajo);var
aa=d[1],ab=function(a){return b(f,a)},ac=function(a){return b(e,a)};j(It[1],ac,ab,a,aa);return b(c(a),ajp);case
12:b(c(a),ajq);var
ad=d[1],ae=function(a){return b(f,a)},af=function(a){return b(e,a)};j(jE[5],af,ae,a,ad);return b(c(a),ajr);case
13:b(c(a),ajs);var
ag=d[1],ah=function(a){return b(f,a)},ai=function(a){return b(e,a)};j(sj[6],ai,ah,a,ag);return b(c(a),ajt);case
14:b(c(a),aju);var
aj=d[1],ak=function(a){return b(f,a)},al=function(a){return b(e,a)};j(Ir[1],al,ak,a,aj);return b(c(a),ajv);case
15:b(c(a),ajw);var
am=d[1],an=function(a){return b(f,a)},ao=function(a){return b(e,a)};j(ID[1],ao,an,a,am);return b(c(a),ajx);case
16:b(c(a),ajy);var
ap=d[1],aq=function(a){return b(f,a)},ar=function(a){return b(e,a)};j(r$[2],ar,aq,a,ap);return b(c(a),ajz);case
17:b(c(a),ajA);var
as=d[1],at=function(a){return b(f,a)},au=function(a){return b(e,a)};j(sb[1],au,at,a,as);return b(c(a),ajB);case
18:b(c(a),ajC);var
av=d[1],aw=function(a){return b(f,a)},ax=function(a){return b(e,a)};j(H9[1],ax,aw,a,av);return b(c(a),ajD);case
19:b(c(a),ajE);var
ay=d[1],az=function(a){return b(f,a)},aA=function(a){return b(e,a)};j(IF[1],aA,az,a,ay);return b(c(a),ajF);case
20:b(c(a),ajG);var
aB=d[1],aC=function(a){return b(f,a)},aD=function(a){return b(e,a)};j(IH[1],aD,aC,a,aB);return b(c(a),ajH);case
21:b(c(a),ajI);var
aE=d[1],aF=function(a){return b(f,a)},aG=function(a){return b(e,a)};j(Iz[2],aG,aF,a,aE);return b(c(a),ajJ);case
22:b(c(a),ajK);var
aH=d[1],aI=function(a){return b(f,a)},aJ=function(a){return b(e,a)};j(IB[1],aJ,aI,a,aH);return b(c(a),ajL);case
23:b(c(a),ajM);var
aK=d[1],aL=function(a){return b(e,a)};A(h0[1],aL,a,aK);return b(c(a),ajN);case
24:b(c(a),ajO);var
aM=d[1],aN=function(a){return b(e,a)};A(rQ[1],aN,a,aM);return b(c(a),ajP);case
25:b(c(a),ajQ);var
aO=d[1],aP=function(a){return b(e,a)};A(Hx[1],aP,a,aO);return b(c(a),ajR);default:b(c(a),ajS);var
aQ=d[1],aR=function(a){return b(e,a)};A(rR[1],aR,a,aQ);return b(c(a),ajT)}});h(IJ,function(c,b,a){var
e=d(ls,c,b);return d(u(ajU),e,a)});h(sr,function(f,g,a,e){b(c(a),ajV);d(f,a,e[1]);b(c(a),ajW);var
h=e[2];function
i(a){return b(g,a)}j(lr,function(a){return b(f,a)},i,a,h);return b(c(a),ajX)});h(IK,function(c,b,a){var
e=d(sr,c,b);return d(u(ajY),e,a)});h(ss,function(g,f,a,e){if(0===e[0]){b(c(a),ajZ);d(f,a,e[1]);return b(c(a),aj0)}b(c(a),aj1);var
h=e[1];function
i(a){return b(f,a)}function
k(a){return b(g,a)}j(af[17],k,i,a,h);return b(c(a),aj2)});h(IL,function(c,b,a){var
e=d(ss,c,b);return d(u(aj3),e,a)});var
st=function
e(a,b,c,d){return e.fun(a,b,c,d)},IM=function
d(a,b,c){return d.fun(a,b,c)},lt=function
e(a,b,c,d){return e.fun(a,b,c,d)},IN=function
d(a,b,c){return d.fun(a,b,c)};h(st,function(f,g,a,e){b(c(a),aj4);d(f,a,e[1]);b(c(a),aj5);var
h=e[2];function
i(a){return b(g,a)}j(lt,function(a){return b(f,a)},i,a,h);return b(c(a),aj6)});h(IM,function(c,b,a){var
e=d(st,c,b);return d(u(aj7),e,a)});h(lt,function(e,h,a,f){b(c(a),aj8);d(c(a),aj_,aj9);var
l=f[1];function
m(a){return b(e,a)}function
n(a){return b(e,a)}j(av[1],n,m,a,l);b(c(a),aj$);b(c(a),aka);d(c(a),akc,akb);var
o=f[2];function
p(a){return b(h,a)}function
q(a){return b(e,a)}j(af[19],q,p,a,o);b(c(a),akd);b(c(a),ake);d(c(a),akg,akf);var
i=f[3];if(i){g(a,akh);var
r=i[1],s=function(a){return b(e,a)};A(iE[1],s,a,r);g(a,aki)}else
g(a,aks);b(c(a),akj);b(c(a),akk);d(c(a),akm,akl);var
k=f[4];if(k){g(a,akn);var
t=k[1],u=function(a){return b(h,a)},v=function(a){return b(e,a)};j(af[13],v,u,a,t);g(a,ako)}else
g(a,akr);b(c(a),akp);return b(c(a),akq)});h(IN,function(c,b,a){var
e=d(lt,c,b);return d(u(akt),e,a)});var
IO=[0,st,IM,lt,IN],su=function
e(a,b,c,d){return e.fun(a,b,c,d)},IP=function
d(a,b,c){return d.fun(a,b,c)},lu=function
e(a,b,c,d){return e.fun(a,b,c,d)},IQ=function
d(a,b,c){return d.fun(a,b,c)};h(su,function(f,g,a,e){b(c(a),aku);d(f,a,e[1]);b(c(a),akv);var
h=e[2];function
i(a){return b(g,a)}j(lu,function(a){return b(f,a)},i,a,h);return b(c(a),akw)});h(IP,function(c,b,a){var
e=d(su,c,b);return d(u(akx),e,a)});h(lu,function(e,i,a,f){b(c(a),aky);d(c(a),akA,akz);var
k=f[1];b(c(a),akB);var
l=0;T(function(f,d){if(f)b(c(a),akC);function
g(a){return b(i,a)}function
h(a){return b(e,a)}j(IO[1],h,g,a,d);return 1},l,k);b(c(a),akD);b(c(a),akE);b(c(a),akF);d(c(a),akH,akG);var
h=f[2];if(h){g(a,akI);var
m=h[1],n=function(a,d){b(c(a),akJ);var
f=0;T(function(f,d){if(f)b(c(a),akK);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),akL)},o=function(a){return b(e,a)};j(I[1],o,n,a,m);g(a,akM)}else
g(a,akP);b(c(a),akN);return b(c(a),akO)});h(IQ,function(c,b,a){var
e=d(lu,c,b);return d(u(akQ),e,a)});var
sv=function
e(a,b,c,d){return e.fun(a,b,c,d)},IR=function
d(a,b,c){return d.fun(a,b,c)},lv=function
e(a,b,c,d){return e.fun(a,b,c,d)},IS=function
d(a,b,c){return d.fun(a,b,c)},akR=[0,su,IP,lu,IQ];h(sv,function(f,g,a,e){b(c(a),akS);d(f,a,e[1]);b(c(a),akT);var
h=e[2];function
i(a){return b(g,a)}j(lv,function(a){return b(f,a)},i,a,h);return b(c(a),akU)});h(IR,function(c,b,a){var
e=d(sv,c,b);return d(u(akV),e,a)});h(lv,function(e,i,a,f){b(c(a),akW);d(c(a),akY,akX);var
k=f[1];b(c(a),akZ);var
l=0;T(function(f,d){if(f)b(c(a),ak0);function
g(a){return b(i,a)}function
h(a){return b(e,a)}j(af[13],h,g,a,d);return 1},l,k);b(c(a),ak1);b(c(a),ak2);b(c(a),ak3);d(c(a),ak5,ak4);var
h=f[2];if(h){g(a,ak6);var
m=h[1],n=function(a,d){b(c(a),ak7);var
f=0;T(function(f,d){if(f)b(c(a),ak8);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),ak9)},o=function(a){return b(e,a)};j(I[1],o,n,a,m);g(a,ak_)}else
g(a,alb);b(c(a),ak$);return b(c(a),ala)});h(IS,function(c,b,a){var
e=d(lv,c,b);return d(u(alc),e,a)});var
sw=function
e(a,b,c,d){return e.fun(a,b,c,d)},IT=function
d(a,b,c){return d.fun(a,b,c)},lw=function
e(a,b,c,d){return e.fun(a,b,c,d)},IU=function
d(a,b,c){return d.fun(a,b,c)},lx=function
e(a,b,c,d){return e.fun(a,b,c,d)},IV=function
d(a,b,c){return d.fun(a,b,c)},ald=[0,sv,IR,lv,IS];h(sw,function(f,g,a,e){b(c(a),ale);d(f,a,e[1]);b(c(a),alf);var
h=e[2];function
i(a){return b(g,a)}j(lw,function(a){return b(f,a)},i,a,h);return b(c(a),alg)});h(IT,function(c,b,a){var
e=d(sw,c,b);return d(u(alh),e,a)});h(lw,function(f,i,a,e){b(c(a),ali);d(c(a),alk,alj);var
k=e[1];function
l(a){return b(i,a)}j(lx,function(a){return b(f,a)},l,a,k);b(c(a),all);b(c(a),alm);d(c(a),alo,aln);var
h=e[2];if(h){g(a,alp);var
m=h[1],n=function(a,b){return g(a,alq)},o=function(a){return b(f,a)};j(I[1],o,n,a,m);g(a,alr)}else
g(a,alu);b(c(a),als);return b(c(a),alt)});h(IU,function(c,b,a){var
e=d(lw,c,b);return d(u(alv),e,a)});h(lx,function(f,e,a,d){if(d){b(c(a),alw);var
h=d[1],i=function(a){return b(e,a)},k=function(a){return b(f,a)};j(ab[31],k,i,a,h);return b(c(a),alx)}return g(a,aly)});h(IV,function(c,b,a){var
e=d(lx,c,b);return d(u(alz),e,a)});be(alA,af,[0,jE,r$,sb,H9,sj,Ir,It,Iz,IB,ID,IF,IH,lr,II,ls,IJ,sr,IK,ss,IL,IO,akR,ald,[0,sw,IT,lw,IU,lx,IV]]);var
sx=function
e(a,b,c,d){return e.fun(a,b,c,d)},IW=function
d(a,b,c){return d.fun(a,b,c)};h(sx,function(e,i,a,f){b(c(a),alB);d(c(a),alD,alC);var
k=f[1];b(c(a),alE);var
l=0;T(function(f,d){if(f)b(c(a),alF);function
g(a){return b(i,a)}function
h(a){return b(e,a)}j(bF[35],h,g,a,d);return 1},l,k);b(c(a),alG);b(c(a),alH);b(c(a),alI);d(c(a),alK,alJ);var
h=f[2];if(h){g(a,alL);var
m=h[1],n=function(a,d){b(c(a),alM);var
f=0;T(function(f,d){if(f)b(c(a),alN);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),alO)},o=function(a){return b(e,a)};j(I[1],o,n,a,m);g(a,alP)}else
g(a,alS);b(c(a),alQ);return b(c(a),alR)});h(IW,function(c,b,a){var
e=d(sx,c,b);return d(u(alT),e,a)});var
iF=[0,sx,IW],sy=function
e(a,b,c,d){return e.fun(a,b,c,d)},IX=function
d(a,b,c){return d.fun(a,b,c)},ly=function
e(a,b,c,d){return e.fun(a,b,c,d)},IY=function
d(a,b,c){return d.fun(a,b,c)};h(sy,function(f,g,a,e){b(c(a),alU);d(f,a,e[1]);b(c(a),alV);var
h=e[2];function
i(a){return b(g,a)}j(ly,function(a){return b(f,a)},i,a,h);return b(c(a),alW)});h(IX,function(c,b,a){var
e=d(sy,c,b);return d(u(alX),e,a)});h(ly,function(f,i,a,e){b(c(a),alY);d(c(a),al0,alZ);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(bF[35],m,l,a,k);b(c(a),al1);b(c(a),al2);d(c(a),al4,al3);var
h=e[2];if(h){g(a,al5);var
n=h[1],o=function(a,b){return g(a,al6)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,al7)}else
g(a,al_);b(c(a),al8);return b(c(a),al9)});h(IY,function(c,b,a){var
e=d(ly,c,b);return d(u(al$),e,a)});var
IZ=[0,sy,IX,ly,IY],sz=function
e(a,b,c,d){return e.fun(a,b,c,d)},I0=function
d(a,b,c){return d.fun(a,b,c)};h(sz,function(f,h,a,e){b(c(a),ama);d(c(a),amc,amb);var
l=e[1];function
m(a){return b(h,a)}function
n(a){return b(f,a)}j(ab[31],n,m,a,l);b(c(a),amd);b(c(a),ame);d(c(a),amg,amf);var
o=e[2];function
p(a){return b(h,a)}function
q(a){return b(f,a)}j(bF[35],q,p,a,o);b(c(a),amh);b(c(a),ami);d(c(a),amk,amj);var
i=e[3];if(i){g(a,aml);var
r=i[1],s=function(a){return b(h,a)},t=function(a){return b(f,a)};j(IZ[1],t,s,a,r);g(a,amm)}else
g(a,amx);b(c(a),amn);b(c(a),amo);d(c(a),amq,amp);var
k=e[4];if(k){g(a,amr);var
u=k[1],v=function(a,b){return g(a,ams)},w=function(a){return b(f,a)};j(I[1],w,v,a,u);g(a,amt)}else
g(a,amw);b(c(a),amu);return b(c(a),amv)});h(I0,function(c,b,a){var
e=d(sz,c,b);return d(u(amy),e,a)});var
I1=[0,IZ,sz,I0],sA=function
e(a,b,c,d){return e.fun(a,b,c,d)},I2=function
d(a,b,c){return d.fun(a,b,c)};h(sA,function(e,i,a,f){b(c(a),amz);d(c(a),amB,amA);var
k=f[1];function
l(a){return b(e,a)}function
m(a){return b(e,a)}j(av[1],m,l,a,k);b(c(a),amC);b(c(a),amD);d(c(a),amF,amE);var
n=f[2];function
o(a){return b(i,a)}function
p(a){return b(e,a)}j(bF[35],p,o,a,n);b(c(a),amG);b(c(a),amH);d(c(a),amJ,amI);var
h=f[3];if(h){g(a,amK);var
q=h[1],r=function(a,b){return g(a,amL)},s=function(a){return b(e,a)};j(I[1],s,r,a,q);g(a,amM)}else
g(a,amP);b(c(a),amN);return b(c(a),amO)});h(I2,function(c,b,a){var
e=d(sA,c,b);return d(u(amQ),e,a)});var
I3=[0,sA,I2],sB=function
d(a,b,c){return d.fun(a,b,c)},I4=function
c(a,b){return c.fun(a,b)};h(sB,function(e,a,f){b(c(a),amR);d(c(a),amT,amS);var
h=f[1];if(h){g(a,amU);var
k=h[1],l=function(a){return b(e,a)},m=function(a){return b(e,a)};j(av[1],m,l,a,k);g(a,amV)}else
g(a,am6);b(c(a),amW);b(c(a),amX);d(c(a),amZ,amY);var
i=f[2];if(i){g(a,am0);var
n=i[1],o=function(a,b){return g(a,am1)},p=function(a){return b(e,a)};j(I[1],p,o,a,n);g(a,am2)}else
g(a,am5);b(c(a),am3);return b(c(a),am4)});h(I4,function(c,a){var
e=b(sB,c);return d(u(am7),e,a)});var
I5=[0,sB,I4],sC=function
d(a,b,c){return d.fun(a,b,c)},I6=function
c(a,b){return c.fun(a,b)};h(sC,function(e,a,f){b(c(a),am8);d(c(a),am_,am9);var
h=f[1];if(h){g(a,am$);var
k=h[1],l=function(a){return b(e,a)},m=function(a){return b(e,a)};j(av[1],m,l,a,k);g(a,ana)}else
g(a,anl);b(c(a),anb);b(c(a),anc);d(c(a),ane,and);var
i=f[2];if(i){g(a,anf);var
n=i[1],o=function(a,b){return g(a,ang)},p=function(a){return b(e,a)};j(I[1],p,o,a,n);g(a,anh)}else
g(a,ank);b(c(a),ani);return b(c(a),anj)});h(I6,function(c,a){var
e=b(sC,c);return d(u(anm),e,a)});var
I7=[0,sC,I6],sD=function
d(a,b,c){return d.fun(a,b,c)},I8=function
c(a,b){return c.fun(a,b)};h(sD,function(h,a,f){b(c(a),ann);d(c(a),anp,ano);var
e=f[1];if(e){g(a,anq);var
i=e[1],k=function(a,b){return g(a,anr)},l=function(a){return b(h,a)};j(I[1],l,k,a,i);g(a,ans)}else
g(a,anv);b(c(a),ant);return b(c(a),anu)});h(I8,function(c,a){var
e=b(sD,c);return d(u(anw),e,a)});var
I9=[0,sD,I8],sE=function
e(a,b,c,d){return e.fun(a,b,c,d)},I_=function
d(a,b,c){return d.fun(a,b,c)};h(sE,function(f,h,a,e){b(c(a),anx);d(c(a),anz,any);var
k=e[1];function
l(a){return b(h,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),anA);b(c(a),anB);d(c(a),anD,anC);var
n=e[2];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(bF[35],p,o,a,n);b(c(a),anE);b(c(a),anF);d(c(a),anH,anG);var
i=e[3];if(i){g(a,anI);var
q=i[1],r=function(a,b){return g(a,anJ)},s=function(a){return b(f,a)};j(I[1],s,r,a,q);g(a,anK)}else
g(a,anN);b(c(a),anL);return b(c(a),anM)});h(I_,function(c,b,a){var
e=d(sE,c,b);return d(u(anO),e,a)});var
I$=[0,sE,I_],sF=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ja=function
d(a,b,c){return d.fun(a,b,c)};h(sF,function(f,h,a,e){b(c(a),anP);d(c(a),anR,anQ);var
l=e[1];function
m(a){return b(h,a)}function
n(a){return b(f,a)}j(av[1],n,m,a,l);b(c(a),anS);b(c(a),anT);d(c(a),anV,anU);var
i=e[2];if(i){g(a,anW);var
o=i[1],p=function(a){return b(h,a)},q=function(a){return b(f,a)};j(af[22][1],q,p,a,o);g(a,anX)}else
g(a,aoa);b(c(a),anY);b(c(a),anZ);d(c(a),an1,an0);var
r=e[3];function
s(a){return b(h,a)}function
t(a){return b(f,a)}j(af[13],t,s,a,r);b(c(a),an2);b(c(a),an3);d(c(a),an5,an4);var
k=e[4];if(k){g(a,an6);var
u=k[1],v=function(a,b){return g(a,an7)},w=function(a){return b(f,a)};j(I[1],w,v,a,u);g(a,an8)}else
g(a,an$);b(c(a),an9);return b(c(a),an_)});h(Ja,function(c,b,a){var
e=d(sF,c,b);return d(u(aob),e,a)});var
lz=[0,sF,Ja],sG=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jb=function
d(a,b,c){return d.fun(a,b,c)};h(sG,function(f,h,a,e){b(c(a),aoc);d(c(a),aoe,aod);var
n=e[1];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(av[1],p,o,a,n);b(c(a),aof);b(c(a),aog);d(c(a),aoi,aoh);var
i=e[2];if(i){g(a,aoj);var
q=i[1],r=function(a){return b(h,a)},s=function(a){return b(f,a)};j(af[22][1],s,r,a,q);g(a,aok)}else
g(a,aoJ);b(c(a),aol);b(c(a),aom);d(c(a),aoo,aon);var
k=e[3];if(k){g(a,aop);var
t=k[1],u=function(a){return b(h,a)},v=function(a){return b(f,a)};j(af[13],v,u,a,t);g(a,aoq)}else
g(a,aoI);b(c(a),aor);b(c(a),aos);d(c(a),aou,aot);var
l=e[4];if(l){g(a,aov);var
w=l[1],x=function(a){return b(h,a)},y=function(a){return b(f,a)};j(af[13],y,x,a,w);g(a,aow)}else
g(a,aoH);b(c(a),aox);b(c(a),aoy);d(c(a),aoA,aoz);var
m=e[5];if(m){g(a,aoB);var
z=m[1],A=function(a,b){return g(a,aoC)},B=function(a){return b(f,a)};j(I[1],B,A,a,z);g(a,aoD)}else
g(a,aoG);b(c(a),aoE);return b(c(a),aoF)});h(Jb,function(c,b,a){var
e=d(sG,c,b);return d(u(aoK),e,a)});var
lA=[0,sG,Jb],sH=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jc=function
d(a,b,c){return d.fun(a,b,c)},lB=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jd=function
d(a,b,c){return d.fun(a,b,c)};h(sH,function(f,g,a,e){b(c(a),aoL);d(f,a,e[1]);b(c(a),aoM);var
h=e[2];function
i(a){return b(g,a)}j(lB,function(a){return b(f,a)},i,a,h);return b(c(a),aoN)});h(Jc,function(c,b,a){var
e=d(sH,c,b);return d(u(aoO),e,a)});h(lB,function(f,h,a,e){b(c(a),aoP);d(c(a),aoR,aoQ);var
i=e[1];if(i){g(a,aoS);var
l=i[1],m=function(a){return b(h,a)},n=function(a){return b(f,a)};j(ab[31],n,m,a,l);g(a,aoT)}else
g(a,ao$);b(c(a),aoU);b(c(a),aoV);d(c(a),aoX,aoW);var
o=e[2];b(c(a),aoY);var
p=0;T(function(e,d){if(e)b(c(a),aoZ);function
g(a){return b(h,a)}function
i(a){return b(f,a)}j(bF[35],i,g,a,d);return 1},p,o);b(c(a),ao0);b(c(a),ao1);b(c(a),ao2);d(c(a),ao4,ao3);var
k=e[3];if(k){g(a,ao5);var
q=k[1],r=function(a,b){return g(a,ao6)},s=function(a){return b(f,a)};j(I[1],s,r,a,q);g(a,ao7)}else
g(a,ao_);b(c(a),ao8);return b(c(a),ao9)});h(Jd,function(c,b,a){var
e=d(lB,c,b);return d(u(apa),e,a)});var
Je=[0,sH,Jc,lB,Jd],sI=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jf=function
d(a,b,c){return d.fun(a,b,c)};h(sI,function(h,f,a,e){b(c(a),apb);d(c(a),apd,apc);var
k=e[1];function
l(a){return b(f,a)}function
m(a){return b(h,a)}j(ab[31],m,l,a,k);b(c(a),ape);b(c(a),apf);d(c(a),aph,apg);var
n=e[2];b(c(a),api);var
o=0;T(function(e,d){if(e)b(c(a),apj);function
g(a){return b(f,a)}function
i(a){return b(h,a)}j(Je[1],i,g,a,d);return 1},o,n);b(c(a),apk);b(c(a),apl);b(c(a),apm);d(c(a),apo,apn);var
i=e[3];if(i){g(a,app);var
p=i[1],q=function(a,b){return g(a,apq)},r=function(a){return b(h,a)};j(I[1],r,q,a,p);g(a,apr)}else
g(a,apy);b(c(a),aps);b(c(a),apt);d(c(a),apv,apu);d(f,a,e[4]);b(c(a),apw);return b(c(a),apx)});h(Jf,function(c,b,a){var
e=d(sI,c,b);return d(u(apz),e,a)});var
Jg=[0,Je,sI,Jf],sJ=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jh=function
d(a,b,c){return d.fun(a,b,c)};h(sJ,function(h,f,a,e){b(c(a),apA);d(c(a),apC,apB);var
i=e[1];if(i){g(a,apD);var
l=i[1],m=function(a){return b(f,a)},n=function(a){return b(h,a)};j(ab[31],n,m,a,l);g(a,apE)}else
g(a,apT);b(c(a),apF);b(c(a),apG);d(c(a),apI,apH);var
k=e[2];if(k){g(a,apJ);var
o=k[1],p=function(a,b){return g(a,apK)},q=function(a){return b(h,a)};j(I[1],q,p,a,o);g(a,apL)}else
g(a,apS);b(c(a),apM);b(c(a),apN);d(c(a),apP,apO);d(f,a,e[3]);b(c(a),apQ);return b(c(a),apR)});h(Jh,function(c,b,a){var
e=d(sJ,c,b);return d(u(apU),e,a)});var
Ji=[0,sJ,Jh],sK=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jj=function
d(a,b,c){return d.fun(a,b,c)};h(sK,function(f,i,a,e){b(c(a),apV);d(c(a),apX,apW);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),apY);b(c(a),apZ);d(c(a),ap1,ap0);var
h=e[2];if(h){g(a,ap2);var
n=h[1],o=function(a,b){return g(a,ap3)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,ap4)}else
g(a,ap7);b(c(a),ap5);return b(c(a),ap6)});h(Jj,function(c,b,a){var
e=d(sK,c,b);return d(u(ap8),e,a)});var
Jk=[0,sK,Jj],sL=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jl=function
d(a,b,c){return d.fun(a,b,c)},lC=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jm=function
d(a,b,c){return d.fun(a,b,c)};h(sL,function(f,g,a,e){b(c(a),ap9);d(f,a,e[1]);b(c(a),ap_);var
h=e[2];function
i(a){return b(g,a)}j(lC,function(a){return b(f,a)},i,a,h);return b(c(a),ap$)});h(Jl,function(c,b,a){var
e=d(sL,c,b);return d(u(aqa),e,a)});h(lC,function(e,h,a,f){b(c(a),aqb);d(c(a),aqd,aqc);var
i=f[1];if(i){g(a,aqe);var
m=i[1],n=function(a){return b(h,a)},o=function(a){return b(e,a)};j(cB[5],o,n,a,m);g(a,aqf)}else
g(a,aqx);b(c(a),aqg);b(c(a),aqh);d(c(a),aqj,aqi);var
k=f[2];b(c(a),aqk);d(e,a,k[1]);b(c(a),aql);var
p=k[2];function
q(a){return b(h,a)}function
r(a){return b(e,a)}j(iF[1],r,q,a,p);b(c(a),aqm);b(c(a),aqn);b(c(a),aqo);d(c(a),aqq,aqp);var
l=f[3];if(l){g(a,aqr);var
s=l[1],t=function(a,b){return g(a,aqs)},u=function(a){return b(e,a)};j(I[1],u,t,a,s);g(a,aqt)}else
g(a,aqw);b(c(a),aqu);return b(c(a),aqv)});h(Jm,function(c,b,a){var
e=d(lC,c,b);return d(u(aqy),e,a)});var
Jn=[0,sL,Jl,lC,Jm],sM=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jo=function
d(a,b,c){return d.fun(a,b,c)};h(sM,function(e,h,a,f){b(c(a),aqz);d(c(a),aqB,aqA);var
i=f[1];b(c(a),aqC);d(e,a,i[1]);b(c(a),aqD);var
o=i[2];function
p(a){return b(h,a)}function
q(a){return b(e,a)}j(iF[1],q,p,a,o);b(c(a),aqE);b(c(a),aqF);b(c(a),aqG);d(c(a),aqI,aqH);var
k=f[2];if(k){g(a,aqJ);var
r=k[1],s=function(a){return b(h,a)},t=function(a){return b(e,a)};j(Jn[1],t,s,a,r);g(a,aqK)}else
g(a,aq5);b(c(a),aqL);b(c(a),aqM);d(c(a),aqO,aqN);var
l=f[3];if(l){var
m=l[1];g(a,aqP);b(c(a),aqQ);d(e,a,m[1]);b(c(a),aqR);var
u=m[2],v=function(a){return b(h,a)},w=function(a){return b(e,a)};j(iF[1],w,v,a,u);b(c(a),aqS);g(a,aqT)}else
g(a,aq4);b(c(a),aqU);b(c(a),aqV);d(c(a),aqX,aqW);var
n=f[4];if(n){g(a,aqY);var
x=n[1],y=function(a,b){return g(a,aqZ)},z=function(a){return b(e,a)};j(I[1],z,y,a,x);g(a,aq0)}else
g(a,aq3);b(c(a),aq1);return b(c(a),aq2)});h(Jo,function(c,b,a){var
e=d(sM,c,b);return d(u(aq6),e,a)});var
Jp=[0,Jn,sM,Jo],sN=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jq=function
d(a,b,c){return d.fun(a,b,c)},lD=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jr=function
d(a,b,c){return d.fun(a,b,c)};h(sN,function(f,g,a,e){b(c(a),aq7);d(f,a,e[1]);b(c(a),aq8);var
h=e[2];function
i(a){return b(g,a)}j(lD,function(a){return b(f,a)},i,a,h);return b(c(a),aq9)});h(Jq,function(c,b,a){var
e=d(sN,c,b);return d(u(aq_),e,a)});h(lD,function(h,f,a,e){b(c(a),aq$);d(c(a),arb,ara);var
k=e[1];function
l(a){return b(f,a)}function
m(a){return b(h,a)}j(cB[5],m,l,a,k);b(c(a),arc);b(c(a),ard);d(c(a),arf,are);var
i=e[2];if(i){g(a,arg);var
n=i[1],o=function(a){return b(f,a)},p=function(a){return b(h,a)};j(ab[31],p,o,a,n);g(a,arh)}else
g(a,ark);b(c(a),ari);return b(c(a),arj)});h(Jr,function(c,b,a){var
e=d(lD,c,b);return d(u(arl),e,a)});var
Js=[0,sN,Jq,lD,Jr],sO=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jt=function
d(a,b,c){return d.fun(a,b,c)},lE=function
c(a,b){return c.fun(a,b)},Ju=function
b(a){return b.fun(a)};h(sO,function(f,i,a,e){b(c(a),arm);d(c(a),aro,arn);var
k=e[1];b(c(a),arp);var
l=0;T(function(e,d){if(e)b(c(a),arq);function
g(a){return b(i,a)}function
h(a){return b(f,a)}j(Js[1],h,g,a,d);return 1},l,k);b(c(a),arr);b(c(a),ars);b(c(a),art);d(c(a),arv,aru);d(lE,a,e[2]);b(c(a),arw);b(c(a),arx);d(c(a),arz,ary);var
h=e[3];if(h){g(a,arA);var
m=h[1],n=function(a,b){return g(a,arB)},o=function(a){return b(f,a)};j(I[1],o,n,a,m);g(a,arC)}else
g(a,arF);b(c(a),arD);return b(c(a),arE)});h(Jt,function(c,b,a){var
e=d(sO,c,b);return d(u(arG),e,a)});h(lE,function(a,b){switch(b){case
0:return g(a,arH);case
1:return g(a,arI);default:return g(a,arJ)}});h(Ju,function(a){return d(u(arK),lE,a)});var
jF=[0,Js,sO,Jt,lE,Ju],sP=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jv=function
d(a,b,c){return d.fun(a,b,c)};h(sP,function(f,h,a,e){b(c(a),arL);d(c(a),arN,arM);var
k=e[1];function
l(a){return b(h,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),arO);b(c(a),arP);d(c(a),arR,arQ);var
n=e[2];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(bF[35],p,o,a,n);b(c(a),arS);b(c(a),arT);d(c(a),arV,arU);var
i=e[3];if(i){g(a,arW);var
q=i[1],r=function(a,b){return g(a,arX)},s=function(a){return b(f,a)};j(I[1],s,r,a,q);g(a,arY)}else
g(a,ar1);b(c(a),arZ);return b(c(a),ar0)});h(Jv,function(c,b,a){var
e=d(sP,c,b);return d(u(ar2),e,a)});var
Jw=[0,sP,Jv],sQ=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jx=function
d(a,b,c){return d.fun(a,b,c)};h(sQ,function(f,h,a,e){b(c(a),ar3);d(c(a),ar5,ar4);var
k=e[1];function
l(a){return b(h,a)}function
m(a){return b(f,a)}j(bF[35],m,l,a,k);b(c(a),ar6);b(c(a),ar7);d(c(a),ar9,ar8);var
n=e[2];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(ab[31],p,o,a,n);b(c(a),ar_);b(c(a),ar$);d(c(a),asb,asa);var
i=e[3];if(i){g(a,asc);var
q=i[1],r=function(a,b){return g(a,asd)},s=function(a){return b(f,a)};j(I[1],s,r,a,q);g(a,ase)}else
g(a,ash);b(c(a),asf);return b(c(a),asg)});h(Jx,function(c,b,a){var
e=d(sQ,c,b);return d(u(asi),e,a)});var
Jy=[0,sQ,Jx],sR=function
e(a,b,c,d){return e.fun(a,b,c,d)},Jz=function
d(a,b,c){return d.fun(a,b,c)},lF=function
e(a,b,c,d){return e.fun(a,b,c,d)},JA=function
d(a,b,c){return d.fun(a,b,c)};h(sR,function(f,h,a,e){b(c(a),asj);d(c(a),asl,ask);var
i=e[1];if(i){g(a,asm);var
n=i[1],o=function(a){return b(h,a)};j(lF,function(a){return b(f,a)},o,a,n);g(a,asn)}else
g(a,asQ);b(c(a),aso);b(c(a),asp);d(c(a),asr,asq);var
k=e[2];if(k){g(a,ass);var
p=k[1],q=function(a){return b(h,a)},r=function(a){return b(f,a)};j(ab[31],r,q,a,p);g(a,ast)}else
g(a,asP);b(c(a),asu);b(c(a),asv);d(c(a),asx,asw);var
l=e[3];if(l){g(a,asy);var
s=l[1],t=function(a){return b(h,a)},u=function(a){return b(f,a)};j(ab[31],u,t,a,s);g(a,asz)}else
g(a,asO);b(c(a),asA);b(c(a),asB);d(c(a),asD,asC);var
v=e[4];function
w(a){return b(h,a)}function
x(a){return b(f,a)}j(bF[35],x,w,a,v);b(c(a),asE);b(c(a),asF);d(c(a),asH,asG);var
m=e[5];if(m){g(a,asI);var
y=m[1],z=function(a,b){return g(a,asJ)},A=function(a){return b(f,a)};j(I[1],A,z,a,y);g(a,asK)}else
g(a,asN);b(c(a),asL);return b(c(a),asM)});h(Jz,function(c,b,a){var
e=d(sR,c,b);return d(u(asR),e,a)});h(lF,function(f,g,a,e){if(0===e[0]){var
h=e[1];b(c(a),asS);b(c(a),asT);d(f,a,h[1]);b(c(a),asU);var
i=h[2],k=function(a){return b(g,a)},l=function(a){return b(f,a)};j(jF[2],l,k,a,i);b(c(a),asV);return b(c(a),asW)}b(c(a),asX);var
m=e[1];function
n(a){return b(g,a)}function
o(a){return b(f,a)}j(ab[31],o,n,a,m);return b(c(a),asY)});h(JA,function(c,b,a){var
e=d(lF,c,b);return d(u(asZ),e,a)});var
JB=[0,sR,Jz,lF,JA],sS=function
e(a,b,c,d){return e.fun(a,b,c,d)},JC=function
d(a,b,c){return d.fun(a,b,c)},lG=function
e(a,b,c,d){return e.fun(a,b,c,d)},JD=function
d(a,b,c){return d.fun(a,b,c)};h(sS,function(f,h,a,e){b(c(a),as0);d(c(a),as2,as1);var
k=e[1];function
l(a){return b(h,a)}j(lG,function(a){return b(f,a)},l,a,k);b(c(a),as3);b(c(a),as4);d(c(a),as6,as5);var
m=e[2];function
n(a){return b(h,a)}function
o(a){return b(f,a)}j(ab[31],o,n,a,m);b(c(a),as7);b(c(a),as8);d(c(a),as_,as9);var
p=e[3];function
q(a){return b(h,a)}function
r(a){return b(f,a)}j(bF[35],r,q,a,p);b(c(a),as$);b(c(a),ata);d(c(a),atc,atb);var
s=e[4];d(c(a),atd,s);b(c(a),ate);b(c(a),atf);d(c(a),ath,atg);var
i=e[5];if(i){g(a,ati);var
t=i[1],u=function(a,b){return g(a,atj)},v=function(a){return b(f,a)};j(I[1],v,u,a,t);g(a,atk)}else
g(a,atn);b(c(a),atl);return b(c(a),atm)});h(JC,function(c,b,a){var
e=d(sS,c,b);return d(u(ato),e,a)});h(lG,function(f,g,a,e){if(0===e[0]){var
h=e[1];b(c(a),atp);b(c(a),atq);d(f,a,h[1]);b(c(a),atr);var
i=h[2],k=function(a){return b(g,a)},l=function(a){return b(f,a)};j(jF[2],l,k,a,i);b(c(a),ats);return b(c(a),att)}b(c(a),atu);var
m=e[1];function
n(a){return b(g,a)}function
o(a){return b(f,a)}j(cB[5],o,n,a,m);return b(c(a),atv)});h(JD,function(c,b,a){var
e=d(lG,c,b);return d(u(atw),e,a)});var
JE=[0,sS,JC,lG,JD],sT=function
e(a,b,c,d){return e.fun(a,b,c,d)},JF=function
d(a,b,c){return d.fun(a,b,c)},lH=function
e(a,b,c,d){return e.fun(a,b,c,d)},JG=function
d(a,b,c){return d.fun(a,b,c)};h(sT,function(f,h,a,e){b(c(a),atx);d(c(a),atz,aty);var
k=e[1];function
l(a){return b(h,a)}j(lH,function(a){return b(f,a)},l,a,k);b(c(a),atA);b(c(a),atB);d(c(a),atD,atC);var
m=e[2];function
n(a){return b(h,a)}function
o(a){return b(f,a)}j(ab[31],o,n,a,m);b(c(a),atE);b(c(a),atF);d(c(a),atH,atG);var
p=e[3];function
q(a){return b(h,a)}function
r(a){return b(f,a)}j(bF[35],r,q,a,p);b(c(a),atI);b(c(a),atJ);d(c(a),atL,atK);var
s=e[4];d(c(a),atM,s);b(c(a),atN);b(c(a),atO);d(c(a),atQ,atP);var
i=e[5];if(i){g(a,atR);var
t=i[1],u=function(a,b){return g(a,atS)},v=function(a){return b(f,a)};j(I[1],v,u,a,t);g(a,atT)}else
g(a,atW);b(c(a),atU);return b(c(a),atV)});h(JF,function(c,b,a){var
e=d(sT,c,b);return d(u(atX),e,a)});h(lH,function(f,g,a,e){if(0===e[0]){var
h=e[1];b(c(a),atY);b(c(a),atZ);d(f,a,h[1]);b(c(a),at0);var
i=h[2],k=function(a){return b(g,a)},l=function(a){return b(f,a)};j(jF[2],l,k,a,i);b(c(a),at1);return b(c(a),at2)}b(c(a),at3);var
m=e[1];function
n(a){return b(g,a)}function
o(a){return b(f,a)}j(cB[5],o,n,a,m);return b(c(a),at4)});h(JG,function(c,b,a){var
e=d(lH,c,b);return d(u(at5),e,a)});var
JH=[0,sT,JF,lH,JG],sU=function
d(a,b,c){return d.fun(a,b,c)},JI=function
c(a,b){return c.fun(a,b)},lI=function
d(a,b,c){return d.fun(a,b,c)},JJ=function
c(a,b){return c.fun(a,b)};h(sU,function(f,a,e){b(c(a),at6);d(f,a,e[1]);b(c(a),at7);var
g=e[2];A(lI,function(a){return b(f,a)},a,g);return b(c(a),at8)});h(JI,function(c,a){var
e=b(sU,c);return d(u(at9),e,a)});h(lI,function(e,a,f){b(c(a),at_);d(c(a),aua,at$);var
g=f[1];function
h(a){return b(e,a)}function
i(a){return b(e,a)}j(av[1],i,h,a,g);b(c(a),aub);return b(c(a),auc)});h(JJ,function(c,a){var
e=b(lI,c);return d(u(aud),e,a)});var
sV=[0,sU,JI,lI,JJ],sW=function
e(a,b,c,d){return e.fun(a,b,c,d)},JK=function
d(a,b,c){return d.fun(a,b,c)},lJ=function
e(a,b,c,d){return e.fun(a,b,c,d)},JL=function
d(a,b,c){return d.fun(a,b,c)};h(sW,function(g,f,a,e){b(c(a),aue);d(f,a,e[1]);b(c(a),auf);var
h=e[2];function
i(a){return b(f,a)}j(lJ,function(a){return b(g,a)},i,a,h);return b(c(a),aug)});h(JK,function(c,b,a){var
e=d(sW,c,b);return d(u(auh),e,a)});h(lJ,function(h,e,a,f){b(c(a),aui);d(c(a),auk,auj);var
i=f[1];function
k(a){return b(e,a)}function
l(a){return b(e,a)}j(av[1],l,k,a,i);b(c(a),aul);b(c(a),aum);d(c(a),auo,aun);var
g=f[2];b(c(a),aup);d(e,a,g[1]);b(c(a),auq);d(h,a,g[2]);b(c(a),aur);b(c(a),aus);return b(c(a),aut)});h(JL,function(c,b,a){var
e=d(lJ,c,b);return d(u(auu),e,a)});var
lK=[0,sW,JK,lJ,JL],sX=function
d(a,b,c){return d.fun(a,b,c)},JM=function
c(a,b){return c.fun(a,b)};h(sX,function(f,a,e){b(c(a),auv);d(c(a),aux,auw);var
i=e[1];b(c(a),auy);var
k=0;T(function(g,e){if(g)b(c(a),auz);function
h(a){return b(f,a)}function
i(a){function
c(a){return b(f,a)}return d(rR[1],c,a)}j(lK[1],i,h,a,e);return 1},k,i);b(c(a),auA);b(c(a),auB);b(c(a),auC);d(c(a),auE,auD);var
l=e[2];d(c(a),auF,l);b(c(a),auG);b(c(a),auH);d(c(a),auJ,auI);var
m=e[3];d(c(a),auK,m);b(c(a),auL);b(c(a),auM);d(c(a),auO,auN);var
h=e[4];if(h){g(a,auP);var
n=h[1],o=function(a,d){b(c(a),auQ);var
e=0;T(function(e,d){if(e)b(c(a),auR);function
g(a){return b(f,a)}A(a9[1],g,a,d);return 1},e,d);return b(c(a),auS)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,auT)}else
g(a,auW);b(c(a),auU);return b(c(a),auV)});h(JM,function(c,a){var
e=b(sX,c);return d(u(auX),e,a)});var
JN=[0,sX,JM],sY=function
d(a,b,c){return d.fun(a,b,c)},JO=function
c(a,b){return c.fun(a,b)};h(sY,function(f,a,e){b(c(a),auY);d(c(a),au0,auZ);var
i=e[1];b(c(a),au1);var
k=0;T(function(g,e){if(g)b(c(a),au2);function
h(a){return b(f,a)}function
i(a){function
c(a){return b(f,a)}return d(rQ[1],c,a)}j(lK[1],i,h,a,e);return 1},k,i);b(c(a),au3);b(c(a),au4);b(c(a),au5);d(c(a),au7,au6);var
l=e[2];d(c(a),au8,l);b(c(a),au9);b(c(a),au_);d(c(a),ava,au$);var
m=e[3];d(c(a),avb,m);b(c(a),avc);b(c(a),avd);d(c(a),avf,ave);var
h=e[4];if(h){g(a,avg);var
n=h[1],o=function(a,d){b(c(a),avh);var
e=0;T(function(e,d){if(e)b(c(a),avi);function
g(a){return b(f,a)}A(a9[1],g,a,d);return 1},e,d);return b(c(a),avj)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,avk)}else
g(a,avn);b(c(a),avl);return b(c(a),avm)});h(JO,function(c,a){var
e=b(sY,c);return d(u(avo),e,a)});var
JP=[0,sY,JO],sZ=function
d(a,b,c){return d.fun(a,b,c)},JQ=function
c(a,b){return c.fun(a,b)},lL=function
e(a,b,c,d){return e.fun(a,b,c,d)},JR=function
d(a,b,c){return d.fun(a,b,c)};h(sZ,function(f,a,e){b(c(a),avp);d(c(a),avr,avq);var
i=e[1];function
k(a){return b(f,a)}j(lL,function(a){function
c(a){return b(f,a)}return d(h0[1],c,a)},k,a,i);b(c(a),avs);b(c(a),avt);d(c(a),avv,avu);var
l=e[2];d(c(a),avw,l);b(c(a),avx);b(c(a),avy);d(c(a),avA,avz);var
m=e[3];d(c(a),avB,m);b(c(a),avC);b(c(a),avD);d(c(a),avF,avE);var
h=e[4];if(h){g(a,avG);var
n=h[1],o=function(a,d){b(c(a),avH);var
e=0;T(function(e,d){if(e)b(c(a),avI);function
g(a){return b(f,a)}A(a9[1],g,a,d);return 1},e,d);return b(c(a),avJ)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,avK)}else
g(a,avN);b(c(a),avL);return b(c(a),avM)});h(JQ,function(c,a){var
e=b(sZ,c);return d(u(avO),e,a)});h(lL,function(f,e,a,d){if(0===d[0]){b(c(a),avP);b(c(a),avQ);var
g=d[1],h=0;T(function(f,d){if(f)b(c(a),avR);function
g(a){return b(e,a)}A(sV[1],g,a,d);return 1},h,g);b(c(a),avS);return b(c(a),avT)}b(c(a),avU);b(c(a),avV);var
i=d[1],k=0;T(function(g,d){if(g)b(c(a),avW);function
h(a){return b(e,a)}function
i(a){return b(f,a)}j(lK[1],i,h,a,d);return 1},k,i);b(c(a),avX);return b(c(a),avY)});h(JR,function(c,b,a){var
e=d(lL,c,b);return d(u(avZ),e,a)});var
JS=[0,sZ,JQ,lL,JR],s0=function
d(a,b,c){return d.fun(a,b,c)},JT=function
c(a,b){return c.fun(a,b)};h(s0,function(f,a,e){b(c(a),av0);d(c(a),av2,av1);var
i=e[1];b(c(a),av3);var
k=0;T(function(e,d){if(e)b(c(a),av4);function
g(a){return b(f,a)}A(sV[1],g,a,d);return 1},k,i);b(c(a),av5);b(c(a),av6);b(c(a),av7);d(c(a),av9,av8);var
l=e[2];d(c(a),av_,l);b(c(a),av$);b(c(a),awa);d(c(a),awc,awb);var
h=e[3];if(h){g(a,awd);var
m=h[1],n=function(a,d){b(c(a),awe);var
e=0;T(function(e,d){if(e)b(c(a),awf);function
g(a){return b(f,a)}A(a9[1],g,a,d);return 1},e,d);return b(c(a),awg)},o=function(a){return b(f,a)};j(I[1],o,n,a,m);g(a,awh)}else
g(a,awk);b(c(a),awi);return b(c(a),awj)});h(JT,function(c,a){var
e=b(s0,c);return d(u(awl),e,a)});var
JU=[0,s0,JT],s1=function
e(a,b,c,d){return e.fun(a,b,c,d)},JV=function
d(a,b,c){return d.fun(a,b,c)},lM=function
d(a,b,c){return d.fun(a,b,c)},JW=function
c(a,b){return c.fun(a,b)},lN=function
d(a,b,c){return d.fun(a,b,c)},JX=function
c(a,b){return c.fun(a,b)};h(s1,function(f,i,a,e){b(c(a),awm);d(c(a),awo,awn);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(av[1],m,l,a,k);b(c(a),awp);b(c(a),awq);d(c(a),aws,awr);var
n=e[2];A(lM,function(a){return b(f,a)},a,n);b(c(a),awt);b(c(a),awu);d(c(a),aww,awv);var
h=e[3];if(h){g(a,awx);var
o=h[1],p=function(a,b){return g(a,awy)},q=function(a){return b(f,a)};j(I[1],q,p,a,o);g(a,awz)}else
g(a,awC);b(c(a),awA);return b(c(a),awB)});h(JV,function(c,b,a){var
e=d(s1,c,b);return d(u(awD),e,a)});h(lM,function(f,a,e){b(c(a),awE);d(f,a,e[1]);b(c(a),awF);var
g=e[2];A(lN,function(a){return b(f,a)},a,g);return b(c(a),awG)});h(JW,function(c,a){var
e=b(lM,c);return d(u(awH),e,a)});h(lN,function(e,a,d){switch(d[0]){case
0:b(c(a),awI);var
f=d[1],g=function(a){return b(e,a)};A(JN[1],g,a,f);return b(c(a),awJ);case
1:b(c(a),awK);var
h=d[1],i=function(a){return b(e,a)};A(JP[1],i,a,h);return b(c(a),awL);case
2:b(c(a),awM);var
j=d[1],k=function(a){return b(e,a)};A(JS[1],k,a,j);return b(c(a),awN);default:b(c(a),awO);var
l=d[1],m=function(a){return b(e,a)};A(JU[1],m,a,l);return b(c(a),awP)}});h(JX,function(c,a){var
e=b(lN,c);return d(u(awQ),e,a)});var
JY=[0,sV,lK,JN,JP,JS,JU,s1,JV,lM,JW,lN,JX],s2=function
e(a,b,c,d){return e.fun(a,b,c,d)},JZ=function
d(a,b,c){return d.fun(a,b,c)};h(s2,function(e,h,a,f){b(c(a),awR);d(c(a),awT,awS);var
m=f[1];function
n(a){return b(h,a)}function
o(a){return b(e,a)}j(av[1],o,n,a,m);b(c(a),awU);b(c(a),awV);d(c(a),awX,awW);var
i=f[2];if(i){g(a,awY);var
p=i[1],q=function(a){return b(h,a)},r=function(a){return b(e,a)};j(af[22][1],r,q,a,p);g(a,awZ)}else
g(a,axp);b(c(a),aw0);b(c(a),aw1);d(c(a),aw3,aw2);var
s=f[3];b(c(a),aw4);var
t=0;T(function(g,f){if(g)b(c(a),aw5);b(c(a),aw6);d(e,a,f[1]);b(c(a),aw7);var
i=f[2];function
k(a){return b(h,a)}function
l(a){return b(e,a)}j(af[2][2],l,k,a,i);b(c(a),aw8);return 1},t,s);b(c(a),aw9);b(c(a),aw_);b(c(a),aw$);d(c(a),axb,axa);var
k=f[4];b(c(a),axc);d(e,a,k[1]);b(c(a),axd);var
u=k[2];function
v(a){return b(h,a)}function
w(a){return b(e,a)}j(af[5][6],w,v,a,u);b(c(a),axe);b(c(a),axf);b(c(a),axg);d(c(a),axi,axh);var
l=f[5];if(l){g(a,axj);var
x=l[1],y=function(a,b){return g(a,axk)},z=function(a){return b(e,a)};j(I[1],z,y,a,x);g(a,axl)}else
g(a,axo);b(c(a),axm);return b(c(a),axn)});h(JZ,function(c,b,a){var
e=d(s2,c,b);return d(u(axq),e,a)});var
lO=[0,s2,JZ],s3=function
e(a,b,c,d){return e.fun(a,b,c,d)},J0=function
d(a,b,c){return d.fun(a,b,c)};h(s3,function(e,h,a,f){b(c(a),axr);d(c(a),axt,axs);var
p=f[1];function
q(a){return b(h,a)}function
r(a){return b(e,a)}j(av[1],r,q,a,p);b(c(a),axu);b(c(a),axv);d(c(a),axx,axw);var
i=f[2];if(i){g(a,axy);var
s=i[1],t=function(a){return b(h,a)},u=function(a){return b(e,a)};j(af[22][1],u,t,a,s);g(a,axz)}else
g(a,ayg);b(c(a),axA);b(c(a),axB);d(c(a),axD,axC);var
k=f[3];b(c(a),axE);d(e,a,k[1]);b(c(a),axF);var
v=k[2];function
w(a){return b(h,a)}function
x(a){return b(e,a)}j(af[5][6],x,w,a,v);b(c(a),axG);b(c(a),axH);b(c(a),axI);d(c(a),axK,axJ);var
l=f[4];if(l){var
m=l[1];g(a,axL);b(c(a),axM);d(e,a,m[1]);b(c(a),axN);var
y=m[2],z=function(a){return b(h,a)},A=function(a){return b(e,a)};j(af[2][2],A,z,a,y);b(c(a),axO);g(a,axP)}else
g(a,ayf);b(c(a),axQ);b(c(a),axR);d(c(a),axT,axS);var
B=f[5];b(c(a),axU);var
C=0;T(function(g,f){if(g)b(c(a),axV);b(c(a),axW);d(e,a,f[1]);b(c(a),axX);var
i=f[2];function
k(a){return b(h,a)}function
l(a){return b(e,a)}j(af[2][2],l,k,a,i);b(c(a),axY);return 1},C,B);b(c(a),axZ);b(c(a),ax0);b(c(a),ax1);d(c(a),ax3,ax2);var
n=f[6];if(n){g(a,ax4);var
D=n[1],E=function(a){return b(h,a)},F=function(a){return b(e,a)};j(h1[5][2],F,E,a,D);g(a,ax5)}else
g(a,aye);b(c(a),ax6);b(c(a),ax7);d(c(a),ax9,ax8);var
o=f[7];if(o){g(a,ax_);var
G=o[1],H=function(a,b){return g(a,ax$)},J=function(a){return b(e,a)};j(I[1],J,H,a,G);g(a,aya)}else
g(a,ayd);b(c(a),ayb);return b(c(a),ayc)});h(J0,function(c,b,a){var
e=d(s3,c,b);return d(u(ayh),e,a)});var
s4=[0,s3,J0],s5=function
e(a,b,c,d){return e.fun(a,b,c,d)},J1=function
d(a,b,c){return d.fun(a,b,c)};h(s5,function(f,h,a,e){b(c(a),ayi);d(c(a),ayk,ayj);var
k=e[1];function
l(a){return b(h,a)}function
m(a){return b(f,a)}j(av[1],m,l,a,k);b(c(a),ayl);b(c(a),aym);d(c(a),ayo,ayn);var
n=e[2];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(af[17],p,o,a,n);b(c(a),ayp);b(c(a),ayq);d(c(a),ays,ayr);var
i=e[3];if(i){g(a,ayt);var
q=i[1],r=function(a,b){return g(a,ayu)},s=function(a){return b(f,a)};j(I[1],s,r,a,q);g(a,ayv)}else
g(a,ayy);b(c(a),ayw);return b(c(a),ayx)});h(J1,function(c,b,a){var
e=d(s5,c,b);return d(u(ayz),e,a)});var
s6=[0,s5,J1],s7=function
e(a,b,c,d){return e.fun(a,b,c,d)},J2=function
d(a,b,c){return d.fun(a,b,c)};h(s7,function(f,h,a,e){b(c(a),ayA);d(c(a),ayC,ayB);var
l=e[1];function
m(a){return b(h,a)}function
n(a){return b(f,a)}j(av[1],n,m,a,l);b(c(a),ayD);b(c(a),ayE);d(c(a),ayG,ayF);var
o=e[2];function
p(a){return b(h,a)}function
q(a){return b(f,a)}j(af[17],q,p,a,o);b(c(a),ayH);b(c(a),ayI);d(c(a),ayK,ayJ);var
i=e[3];if(i){g(a,ayL);var
r=i[1],s=function(a){return b(h,a)},t=function(a){return b(f,a)};j(af[24][1],t,s,a,r);g(a,ayM)}else
g(a,ayX);b(c(a),ayN);b(c(a),ayO);d(c(a),ayQ,ayP);var
k=e[4];if(k){g(a,ayR);var
u=k[1],v=function(a,b){return g(a,ayS)},w=function(a){return b(f,a)};j(I[1],w,v,a,u);g(a,ayT)}else
g(a,ayW);b(c(a),ayU);return b(c(a),ayV)});h(J2,function(c,b,a){var
e=d(s7,c,b);return d(u(ayY),e,a)});var
s8=[0,s7,J2],lP=function
e(a,b,c,d){return e.fun(a,b,c,d)},J3=function
d(a,b,c){return d.fun(a,b,c)},lQ=function
c(a,b){return c.fun(a,b)},J4=function
b(a){return b.fun(a)},s9=function
e(a,b,c,d){return e.fun(a,b,c,d)},J5=function
d(a,b,c){return d.fun(a,b,c)};h(lP,function(g,f,a,e){if(0===e[0]){b(c(a),ayZ);var
i=e[1],k=function(a){return b(f,a)},l=function(a){return b(g,a)};j(av[1],l,k,a,i);return b(c(a),ay0)}var
h=e[1];b(c(a),ay1);b(c(a),ay2);d(f,a,h[1]);b(c(a),ay3);var
m=h[2];function
n(a){return b(g,a)}A(h0[1],n,a,m);b(c(a),ay4);return b(c(a),ay5)});h(J3,function(c,b,a){var
e=d(lP,c,b);return d(u(ay6),e,a)});h(lQ,function(a,b){return b?g(a,ay7):g(a,ay8)});h(J4,function(a){return d(u(ay9),lQ,a)});h(s9,function(f,h,a,e){b(c(a),ay_);d(c(a),aza,ay$);var
l=e[1];function
m(a){return b(h,a)}j(lP,function(a){return b(f,a)},m,a,l);b(c(a),azb);b(c(a),azc);d(c(a),aze,azd);var
i=e[2];b(c(a),azf);d(f,a,i[1]);b(c(a),azg);var
n=i[2];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(iF[1],p,o,a,n);b(c(a),azh);b(c(a),azi);b(c(a),azj);d(c(a),azl,azk);d(lQ,a,e[3]);b(c(a),azm);b(c(a),azn);d(c(a),azp,azo);var
k=e[4];if(k){g(a,azq);var
q=k[1],r=function(a,b){return g(a,azr)},s=function(a){return b(f,a)};j(I[1],s,r,a,q);g(a,azs)}else
g(a,azv);b(c(a),azt);return b(c(a),azu)});h(J5,function(c,b,a){var
e=d(s9,c,b);return d(u(azw),e,a)});var
J6=[0,lP,J3,lQ,J4,s9,J5],s_=function
e(a,b,c,d){return e.fun(a,b,c,d)},J7=function
d(a,b,c){return d.fun(a,b,c)};h(s_,function(f,i,a,e){b(c(a),azx);d(c(a),azz,azy);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(af[17],m,l,a,k);b(c(a),azA);b(c(a),azB);d(c(a),azD,azC);var
h=e[2];if(h){g(a,azE);var
n=h[1],o=function(a,b){return g(a,azF)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,azG)}else
g(a,azJ);b(c(a),azH);return b(c(a),azI)});h(J7,function(c,b,a){var
e=d(s_,c,b);return d(u(azK),e,a)});var
J8=[0,s_,J7],s$=function
d(a,b,c){return d.fun(a,b,c)},J9=function
c(a,b){return c.fun(a,b)},lR=function
d(a,b,c){return d.fun(a,b,c)},J_=function
c(a,b){return c.fun(a,b)};h(s$,function(f,a,e){b(c(a),azL);d(f,a,e[1]);b(c(a),azM);var
g=e[2];A(lR,function(a){return b(f,a)},a,g);return b(c(a),azN)});h(J9,function(c,a){var
e=b(s$,c);return d(u(azO),e,a)});h(lR,function(e,a,f){b(c(a),azP);d(c(a),azR,azQ);var
i=f[1];function
k(a){return b(e,a)}function
l(a){return b(e,a)}j(av[1],l,k,a,i);b(c(a),azS);b(c(a),azT);d(c(a),azV,azU);var
h=f[2];if(h){g(a,azW);var
m=h[1],n=function(a){return b(e,a)},o=function(a){return b(e,a)};j(av[1],o,n,a,m);g(a,azX)}else
g(a,az0);b(c(a),azY);return b(c(a),azZ)});h(J_,function(c,a){var
e=b(lR,c);return d(u(az1),e,a)});var
J$=[0,s$,J9,lR,J_],ta=function
d(a,b,c){return d.fun(a,b,c)},Ka=function
c(a,b){return c.fun(a,b)};h(ta,function(e,a,f){var
h=f[2];b(c(a),az2);d(e,a,f[1]);b(c(a),az3);if(h){g(a,az4);var
i=h[1],k=function(a){return b(e,a)},l=function(a){return b(e,a)};j(av[1],l,k,a,i);g(a,az5)}else
g(a,az7);return b(c(a),az6)});h(Ka,function(c,a){var
e=b(ta,c);return d(u(az8),e,a)});var
Kb=[0,ta,Ka],tb=function
e(a,b,c,d){return e.fun(a,b,c,d)},Kc=function
d(a,b,c){return d.fun(a,b,c)},lS=function
d(a,b,c){return d.fun(a,b,c)},Kd=function
c(a,b){return c.fun(a,b)};h(tb,function(f,n,a,e){b(c(a),az9);d(c(a),az$,az_);var
h=e[1];if(h){g(a,aAa);var
o=h[1],p=function(a){return b(n,a)},q=function(a){return b(f,a)};j(bF[35],q,p,a,o);g(a,aAb)}else
g(a,aAH);b(c(a),aAc);b(c(a),aAd);d(c(a),aAf,aAe);var
i=e[2];if(i){g(a,aAg);var
r=i[1];A(lS,function(a){return b(f,a)},a,r);g(a,aAh)}else
g(a,aAG);b(c(a),aAi);b(c(a),aAj);d(c(a),aAl,aAk);var
k=e[3];if(k){var
l=k[1];g(a,aAm);b(c(a),aAn);d(f,a,l[1]);b(c(a),aAo);var
s=l[2],t=function(a){return b(f,a)};A(h0[1],t,a,s);b(c(a),aAp);g(a,aAq)}else
g(a,aAF);b(c(a),aAr);b(c(a),aAs);d(c(a),aAu,aAt);d(bF[33],a,e[4]);b(c(a),aAv);b(c(a),aAw);d(c(a),aAy,aAx);var
m=e[5];if(m){g(a,aAz);var
u=m[1],v=function(a,b){return g(a,aAA)},w=function(a){return b(f,a)};j(I[1],w,v,a,u);g(a,aAB)}else
g(a,aAE);b(c(a),aAC);return b(c(a),aAD)});h(Kc,function(c,b,a){var
e=d(tb,c,b);return d(u(aAI),e,a)});h(lS,function(e,a,d){if(0===d[0]){b(c(a),aAJ);b(c(a),aAK);var
f=d[1],g=0;T(function(f,d){if(f)b(c(a),aAL);function
g(a){return b(e,a)}A(J$[1],g,a,d);return 1},g,f);b(c(a),aAM);return b(c(a),aAN)}b(c(a),aAO);var
h=d[1];function
i(a){return b(e,a)}A(Kb[1],i,a,h);return b(c(a),aAP)});h(Kd,function(c,a){var
e=b(lS,c);return d(u(aAQ),e,a)});var
tc=[0,J$,Kb,tb,Kc,lS,Kd],td=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ke=function
d(a,b,c){return d.fun(a,b,c)},lT=function
e(a,b,c,d){return e.fun(a,b,c,d)},Kf=function
d(a,b,c){return d.fun(a,b,c)};h(td,function(f,i,a,e){b(c(a),aAR);d(c(a),aAT,aAS);d(f,a,e[1]);b(c(a),aAU);b(c(a),aAV);d(c(a),aAX,aAW);var
k=e[2];function
l(a){return b(i,a)}j(lT,function(a){return b(f,a)},l,a,k);b(c(a),aAY);b(c(a),aAZ);d(c(a),aA1,aA0);var
h=e[3];if(h){g(a,aA2);var
m=h[1],n=function(a,b){return g(a,aA3)},o=function(a){return b(f,a)};j(I[1],o,n,a,m);g(a,aA4)}else
g(a,aA7);b(c(a),aA5);return b(c(a),aA6)});h(Ke,function(c,b,a){var
e=d(td,c,b);return d(u(aA8),e,a)});h(lT,function(f,e,a,d){if(0===d[0]){b(c(a),aA9);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(bF[35],i,h,a,g);return b(c(a),aA_)}b(c(a),aA$);var
k=d[1];function
l(a){return b(e,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);return b(c(a),aBa)});h(Kf,function(c,b,a){var
e=d(lT,c,b);return d(u(aBb),e,a)});var
Kg=[0,td,Ke,lT,Kf],lU=function
e(a,b,c,d){return e.fun(a,b,c,d)},Kh=function
d(a,b,c){return d.fun(a,b,c)},te=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ki=function
d(a,b,c){return d.fun(a,b,c)};h(lU,function(e,g,a,f){switch(f[0]){case
0:var
h=f[1];b(c(a),aBc);b(c(a),aBd);d(e,a,h[1]);b(c(a),aBe);var
o=h[2],p=function(a){return b(g,a)},q=function(a){return b(e,a)};j(s6[1],q,p,a,o);b(c(a),aBf);return b(c(a),aBg);case
1:var
i=f[1];b(c(a),aBh);b(c(a),aBi);d(e,a,i[1]);b(c(a),aBj);var
r=i[2],s=function(a){return b(g,a)},t=function(a){return b(e,a)};j(s8[1],t,s,a,r);b(c(a),aBk);return b(c(a),aBl);case
2:var
k=f[1];b(c(a),aBm);b(c(a),aBn);d(e,a,k[1]);b(c(a),aBo);var
u=k[2],v=function(a){return b(g,a)},w=function(a){return b(e,a)};j(s4[1],w,v,a,u);b(c(a),aBp);return b(c(a),aBq);case
3:b(c(a),aBr);var
x=f[1],y=function(a){return b(g,a)},z=function(a){return b(e,a)};j(af[13],z,y,a,x);return b(c(a),aBs);case
4:var
l=f[1];b(c(a),aBt);b(c(a),aBu);d(e,a,l[1]);b(c(a),aBv);var
A=l[2],B=function(a){return b(g,a)},C=function(a){return b(e,a)};j(lz[1],C,B,a,A);b(c(a),aBw);return b(c(a),aBx);case
5:var
m=f[1];b(c(a),aBy);b(c(a),aBz);d(e,a,m[1]);b(c(a),aBA);var
D=m[2],E=function(a){return b(g,a)},F=function(a){return b(e,a)};j(lA[1],F,E,a,D);b(c(a),aBB);return b(c(a),aBC);default:var
n=f[1];b(c(a),aBD);b(c(a),aBE);d(e,a,n[1]);b(c(a),aBF);var
G=n[2],H=function(a){return b(g,a)},I=function(a){return b(e,a)};j(lO[1],I,H,a,G);b(c(a),aBG);return b(c(a),aBH)}});h(Kh,function(c,b,a){var
e=d(lU,c,b);return d(u(aBI),e,a)});h(te,function(e,o,a,f){b(c(a),aBJ);d(c(a),aBL,aBK);var
h=f[1];if(h){g(a,aBM);d(e,a,h[1]);g(a,aBN)}else
g(a,aCk);b(c(a),aBO);b(c(a),aBP);d(c(a),aBR,aBQ);var
i=f[2];if(i){g(a,aBS);var
p=i[1],q=function(a){return b(o,a)};j(lU,function(a){return b(e,a)},q,a,p);g(a,aBT)}else
g(a,aCj);b(c(a),aBU);b(c(a),aBV);d(c(a),aBX,aBW);var
k=f[3];if(k){g(a,aBY);var
r=k[1],s=function(a){return b(e,a)};A(tc[5],s,a,r);g(a,aBZ)}else
g(a,aCi);b(c(a),aB0);b(c(a),aB1);d(c(a),aB3,aB2);var
l=f[4];if(l){var
m=l[1];g(a,aB4);b(c(a),aB5);d(e,a,m[1]);b(c(a),aB6);var
t=m[2],u=function(a){return b(e,a)};A(h0[1],u,a,t);b(c(a),aB7);g(a,aB8)}else
g(a,aCh);b(c(a),aB9);b(c(a),aB_);d(c(a),aCa,aB$);var
n=f[5];if(n){g(a,aCb);var
v=n[1],w=function(a,b){return g(a,aCc)},x=function(a){return b(e,a)};j(I[1],x,w,a,v);g(a,aCd)}else
g(a,aCg);b(c(a),aCe);return b(c(a),aCf)});h(Ki,function(c,b,a){var
e=d(te,c,b);return d(u(aCl),e,a)});var
Kj=[0,lU,Kh,te,Ki],jG=function
c(a,b){return c.fun(a,b)},Kk=function
b(a){return b.fun(a)},lV=function
e(a,b,c,d){return e.fun(a,b,c,d)},Kl=function
d(a,b,c){return d.fun(a,b,c)},lW=function
e(a,b,c,d){return e.fun(a,b,c,d)},Km=function
d(a,b,c){return d.fun(a,b,c)},tf=function
e(a,b,c,d){return e.fun(a,b,c,d)},Kn=function
d(a,b,c){return d.fun(a,b,c)};h(jG,function(a,b){switch(b){case
0:return g(a,aCm);case
1:return g(a,aCn);default:return g(a,aCo)}});h(Kk,function(a){return d(u(aCp),jG,a)});h(lV,function(f,g,a,e){if(0===e[0]){b(c(a),aCq);b(c(a),aCr);var
i=e[1],k=0;T(function(e,d){if(e)b(c(a),aCs);function
h(a){return b(g,a)}j(lW,function(a){return b(f,a)},h,a,d);return 1},k,i);b(c(a),aCt);return b(c(a),aCu)}var
h=e[1];b(c(a),aCv);b(c(a),aCw);d(f,a,h[1]);b(c(a),aCx);var
l=h[2];function
m(a){return b(g,a)}function
n(a){return b(f,a)}j(av[1],n,m,a,l);b(c(a),aCy);return b(c(a),aCz)});h(Kl,function(c,b,a){var
e=d(lV,c,b);return d(u(aCA),e,a)});h(lW,function(h,f,a,e){b(c(a),aCB);d(c(a),aCD,aCC);var
i=e[1];if(i){g(a,aCE);d(jG,a,i[1]);g(a,aCF)}else
g(a,aCT);b(c(a),aCG);b(c(a),aCH);d(c(a),aCJ,aCI);var
k=e[2];if(k){g(a,aCK);var
l=k[1],m=function(a){return b(f,a)},n=function(a){return b(h,a)};j(av[1],n,m,a,l);g(a,aCL)}else
g(a,aCS);b(c(a),aCM);b(c(a),aCN);d(c(a),aCP,aCO);var
o=e[3];function
p(a){return b(f,a)}function
q(a){return b(h,a)}j(av[1],q,p,a,o);b(c(a),aCQ);return b(c(a),aCR)});h(Km,function(c,b,a){var
e=d(lW,c,b);return d(u(aCU),e,a)});h(tf,function(f,h,a,e){b(c(a),aCV);d(c(a),aCX,aCW);d(jG,a,e[1]);b(c(a),aCY);b(c(a),aCZ);d(c(a),aC1,aC0);var
i=e[2];b(c(a),aC2);d(f,a,i[1]);b(c(a),aC3);var
n=i[2];function
o(a){return b(f,a)}A(h0[1],o,a,n);b(c(a),aC4);b(c(a),aC5);b(c(a),aC6);d(c(a),aC8,aC7);var
k=e[3];if(k){g(a,aC9);var
p=k[1],q=function(a){return b(h,a)},r=function(a){return b(f,a)};j(av[1],r,q,a,p);g(a,aC_)}else
g(a,aDq);b(c(a),aC$);b(c(a),aDa);d(c(a),aDc,aDb);var
l=e[4];if(l){g(a,aDd);var
s=l[1],t=function(a){return b(h,a)};j(lV,function(a){return b(f,a)},t,a,s);g(a,aDe)}else
g(a,aDp);b(c(a),aDf);b(c(a),aDg);d(c(a),aDi,aDh);var
m=e[5];if(m){g(a,aDj);var
u=m[1],v=function(a,b){return g(a,aDk)},w=function(a){return b(f,a)};j(I[1],w,v,a,u);g(a,aDl)}else
g(a,aDo);b(c(a),aDm);return b(c(a),aDn)});h(Kn,function(c,b,a){var
e=d(tf,c,b);return d(u(aDr),e,a)});var
Ko=[0,jG,Kk,lV,Kl,lW,Km,tf,Kn],tg=function
e(a,b,c,d){return e.fun(a,b,c,d)},Kp=function
d(a,b,c){return d.fun(a,b,c)};h(tg,function(f,k,a,e){b(c(a),aDs);d(c(a),aDu,aDt);var
l=e[1];function
m(a){return b(k,a)}function
n(a){return b(f,a)}j(ab[31],n,m,a,l);b(c(a),aDv);b(c(a),aDw);d(c(a),aDy,aDx);var
h=e[2];if(h){g(a,aDz);var
o=h[1];d(c(a),aDA,o);g(a,aDB)}else
g(a,aDM);b(c(a),aDC);b(c(a),aDD);d(c(a),aDF,aDE);var
i=e[3];if(i){g(a,aDG);var
p=i[1],q=function(a,b){return g(a,aDH)},r=function(a){return b(f,a)};j(I[1],r,q,a,p);g(a,aDI)}else
g(a,aDL);b(c(a),aDJ);return b(c(a),aDK)});h(Kp,function(c,b,a){var
e=d(tg,c,b);return d(u(aDN),e,a)});var
Kq=[0,tg,Kp],th=function
d(a,b,c){return d.fun(a,b,c)},Kr=function
c(a,b){return c.fun(a,b)};h(th,function(h,a,f){b(c(a),aDO);d(c(a),aDQ,aDP);var
e=f[1];if(e){g(a,aDR);var
i=e[1],k=function(a,b){return g(a,aDS)},l=function(a){return b(h,a)};j(I[1],l,k,a,i);g(a,aDT)}else
g(a,aDW);b(c(a),aDU);return b(c(a),aDV)});h(Kr,function(c,a){var
e=b(th,c);return d(u(aDX),e,a)});var
Ks=[0,th,Kr],ti=function
c(a,b){return c.fun(a,b)},Kt=function
b(a){return b.fun(a)},tj=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ku=function
d(a,b,c){return d.fun(a,b,c)},lX=function
e(a,b,c,d){return e.fun(a,b,c,d)},Kv=function
d(a,b,c){return d.fun(a,b,c)};h(ti,function(a,b){return b?g(a,aDY):g(a,aDZ)});h(Kt,function(a){return d(u(aD0),ti,a)});h(tj,function(f,g,a,e){b(c(a),aD1);d(f,a,e[1]);b(c(a),aD2);var
h=e[2];function
i(a){return b(g,a)}j(lX,function(a){return b(f,a)},i,a,h);return b(c(a),aD3)});h(Ku,function(c,b,a){var
e=d(tj,c,b);return d(u(aD4),e,a)});h(lX,function(e,f,a,d){switch(d[0]){case
0:b(c(a),aD5);var
g=d[1],h=function(a){return b(f,a)},i=function(a){return b(e,a)};j(iF[1],i,h,a,g);return b(c(a),aD6);case
1:b(c(a),aD7);var
k=d[1],l=function(a){return b(e,a)};A(I5[1],l,a,k);return b(c(a),aD8);case
2:b(c(a),aD9);var
m=d[1],n=function(a){return b(f,a)},o=function(a){return b(e,a)};j(h1[8],o,n,a,m);return b(c(a),aD_);case
3:b(c(a),aD$);var
p=d[1],q=function(a){return b(e,a)};A(I7[1],q,a,p);return b(c(a),aEa);case
4:b(c(a),aEb);var
r=d[1],s=function(a){return b(e,a)};A(I9[1],s,a,r);return b(c(a),aEc);case
5:b(c(a),aEd);var
t=d[1],u=function(a){return b(f,a)},v=function(a){return b(e,a)};j(s4[1],v,u,a,t);return b(c(a),aEe);case
6:b(c(a),aEf);var
w=d[1],x=function(a){return b(f,a)},y=function(a){return b(e,a)};j(Kj[3],y,x,a,w);return b(c(a),aEg);case
7:b(c(a),aEh);var
z=d[1],B=function(a){return b(f,a)},C=function(a){return b(e,a)};j(s8[1],C,B,a,z);return b(c(a),aEi);case
8:b(c(a),aEj);var
D=d[1],E=function(a){return b(f,a)},F=function(a){return b(e,a)};j(lO[1],F,E,a,D);return b(c(a),aEk);case
9:b(c(a),aEl);var
G=d[1],H=function(a){return b(f,a)},I=function(a){return b(e,a)};j(J6[5],I,H,a,G);return b(c(a),aEm);case
10:b(c(a),aEn);var
J=d[1],K=function(a){return b(f,a)},L=function(a){return b(e,a)};j(J8[1],L,K,a,J);return b(c(a),aEo);case
11:b(c(a),aEp);var
M=d[1],N=function(a){return b(f,a)},O=function(a){return b(e,a)};j(lz[1],O,N,a,M);return b(c(a),aEq);case
12:b(c(a),aEr);var
P=d[1],Q=function(a){return b(f,a)},R=function(a){return b(e,a)};j(lA[1],R,Q,a,P);return b(c(a),aEs);case
13:b(c(a),aEt);var
S=d[1],T=function(a){return b(f,a)},U=function(a){return b(e,a)};j(s6[1],U,T,a,S);return b(c(a),aEu);case
14:b(c(a),aEv);var
V=d[1],W=function(a){return b(f,a)},X=function(a){return b(e,a)};j(Jy[1],X,W,a,V);return b(c(a),aEw);case
15:b(c(a),aEx);var
Y=d[1],Z=function(a){return b(e,a)};A(Ks[1],Z,a,Y);return b(c(a),aEy);case
16:b(c(a),aEz);var
_=d[1],$=function(a){return b(f,a)},aa=function(a){return b(e,a)};j(JY[7],aa,$,a,_);return b(c(a),aEA);case
17:b(c(a),aEB);var
ab=d[1],ac=function(a){return b(f,a)},ad=function(a){return b(e,a)};j(Kg[1],ad,ac,a,ab);return b(c(a),aEC);case
18:b(c(a),aED);var
ae=d[1],af=function(a){return b(f,a)},ag=function(a){return b(e,a)};j(tc[3],ag,af,a,ae);return b(c(a),aEE);case
19:b(c(a),aEF);var
ah=d[1],ai=function(a){return b(f,a)},aj=function(a){return b(e,a)};j(Kq[1],aj,ai,a,ah);return b(c(a),aEG);case
20:b(c(a),aEH);var
ak=d[1],al=function(a){return b(f,a)},am=function(a){return b(e,a)};j(JB[1],am,al,a,ak);return b(c(a),aEI);case
21:b(c(a),aEJ);var
an=d[1],ao=function(a){return b(f,a)},ap=function(a){return b(e,a)};j(JE[1],ap,ao,a,an);return b(c(a),aEK);case
22:b(c(a),aEL);var
aq=d[1],ar=function(a){return b(f,a)},as=function(a){return b(e,a)};j(JH[1],as,ar,a,aq);return b(c(a),aEM);case
23:b(c(a),aEN);var
at=d[1],au=function(a){return b(f,a)},av=function(a){return b(e,a)};j(hy[5],av,au,a,at);return b(c(a),aEO);case
24:b(c(a),aEP);var
aw=d[1],ax=function(a){return b(f,a)},ay=function(a){return b(e,a)};j(I1[2],ay,ax,a,aw);return b(c(a),aEQ);case
25:b(c(a),aER);var
az=d[1],aA=function(a){return b(f,a)},aB=function(a){return b(e,a)};j(Ko[7],aB,aA,a,az);return b(c(a),aES);case
26:b(c(a),aET);var
aC=d[1],aD=function(a){return b(f,a)},aE=function(a){return b(e,a)};j(lO[1],aE,aD,a,aC);return b(c(a),aEU);case
27:b(c(a),aEV);var
aF=d[1],aG=function(a){return b(f,a)},aH=function(a){return b(e,a)};j(I3[1],aH,aG,a,aF);return b(c(a),aEW);case
28:b(c(a),aEX);var
aI=d[1],aJ=function(a){return b(f,a)},aK=function(a){return b(e,a)};j(Ji[1],aK,aJ,a,aI);return b(c(a),aEY);case
29:b(c(a),aEZ);var
aL=d[1],aM=function(a){return b(f,a)},aN=function(a){return b(e,a)};j(Jg[2],aN,aM,a,aL);return b(c(a),aE0);case
30:b(c(a),aE1);var
aO=d[1],aP=function(a){return b(f,a)},aQ=function(a){return b(e,a)};j(Jk[1],aQ,aP,a,aO);return b(c(a),aE2);case
31:b(c(a),aE3);var
aR=d[1],aS=function(a){return b(f,a)},aT=function(a){return b(e,a)};j(Jp[2],aT,aS,a,aR);return b(c(a),aE4);case
32:b(c(a),aE5);var
aU=d[1],aV=function(a){return b(f,a)},aW=function(a){return b(e,a)};j(lz[1],aW,aV,a,aU);return b(c(a),aE6);case
33:b(c(a),aE7);var
aX=d[1],aY=function(a){return b(f,a)},aZ=function(a){return b(e,a)};j(lA[1],aZ,aY,a,aX);return b(c(a),aE8);case
34:b(c(a),aE9);var
a0=d[1],a1=function(a){return b(f,a)},a2=function(a){return b(e,a)};j(jF[2],a2,a1,a,a0);return b(c(a),aE_);case
35:b(c(a),aE$);var
a3=d[1],a4=function(a){return b(f,a)},a5=function(a){return b(e,a)};j(Jw[1],a5,a4,a,a3);return b(c(a),aFa);default:b(c(a),aFb);var
a6=d[1],a7=function(a){return b(f,a)},a8=function(a){return b(e,a)};j(I$[1],a8,a7,a,a6);return b(c(a),aFc)}});h(Kv,function(c,b,a){var
e=d(lX,c,b);return d(u(aFd),e,a)});be(aFe,bF,[0,iF,I1,I3,I5,I7,I9,I$,lz,lA,Jg,Ji,Jk,Jp,jF,Jw,Jy,JB,JE,JH,JY,lO,s4,s6,s8,J6,J8,tc,Kg,Kj,Ko,Kq,Ks,ti,Kt,tj,Ku,lX,Kv]);var
tk=function
e(a,b,c,d){return e.fun(a,b,c,d)},Kw=function
d(a,b,c){return d.fun(a,b,c)},lY=function
d(a,b,c){return d.fun(a,b,c)},Kx=function
c(a,b){return c.fun(a,b)};h(tk,function(g,f,a,e){b(c(a),aFf);d(f,a,e[1]);b(c(a),aFg);var
h=e[2];A(lY,function(a){return b(g,a)},a,h);return b(c(a),aFh)});h(Kw,function(c,b,a){var
e=d(tk,c,b);return d(u(aFi),e,a)});h(lY,function(h,a,f){b(c(a),aFj);d(c(a),aFl,aFk);var
e=f[1];if(e){g(a,aFm);var
i=e[1],k=function(a,b){return g(a,aFn)},l=function(a){return b(h,a)};j(I[1],l,k,a,i);g(a,aFo)}else
g(a,aFr);b(c(a),aFp);return b(c(a),aFq)});h(Kx,function(c,a){var
e=b(lY,c);return d(u(aFs),e,a)});var
Ky=[0,tk,Kw,lY,Kx],tl=function
e(a,b,c,d){return e.fun(a,b,c,d)},Kz=function
d(a,b,c){return d.fun(a,b,c)};h(tl,function(f,e,a,d){if(0===d[0]){b(c(a),aFt);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(af[13],i,h,a,g);return b(c(a),aFu)}b(c(a),aFv);var
k=d[1];function
l(a){return b(e,a)}function
m(a){return b(f,a)}j(Ky[1],m,l,a,k);return b(c(a),aFw)});h(Kz,function(c,b,a){var
e=d(tl,c,b);return d(u(aFx),e,a)});var
KA=[0,Ky,tl,Kz],tm=function
e(a,b,c,d){return e.fun(a,b,c,d)},KB=function
d(a,b,c){return d.fun(a,b,c)},lZ=function
e(a,b,c,d){return e.fun(a,b,c,d)},KC=function
d(a,b,c){return d.fun(a,b,c)};h(tm,function(f,g,a,e){b(c(a),aFy);d(f,a,e[1]);b(c(a),aFz);var
h=e[2];function
i(a){return b(g,a)}j(lZ,function(a){return b(f,a)},i,a,h);return b(c(a),aFA)});h(KB,function(c,b,a){var
e=d(tm,c,b);return d(u(aFB),e,a)});h(lZ,function(e,i,a,f){b(c(a),aFC);d(c(a),aFE,aFD);var
k=f[1];b(c(a),aFF);var
l=0;T(function(f,d){if(f)b(c(a),aFG);function
g(a){return b(i,a)}function
h(a){return b(e,a)}j(KA[2],h,g,a,d);return 1},l,k);b(c(a),aFH);b(c(a),aFI);b(c(a),aFJ);d(c(a),aFL,aFK);var
h=f[2];if(h){g(a,aFM);var
m=h[1],n=function(a,d){b(c(a),aFN);var
f=0;T(function(f,d){if(f)b(c(a),aFO);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),aFP)},o=function(a){return b(e,a)};j(I[1],o,n,a,m);g(a,aFQ)}else
g(a,aFT);b(c(a),aFR);return b(c(a),aFS)});h(KC,function(c,b,a){var
e=d(lZ,c,b);return d(u(aFU),e,a)});var
tn=function
e(a,b,c,d){return e.fun(a,b,c,d)},KD=function
d(a,b,c){return d.fun(a,b,c)},l0=function
e(a,b,c,d){return e.fun(a,b,c,d)},KE=function
d(a,b,c){return d.fun(a,b,c)},aFV=[0,tm,KB,lZ,KC];h(tn,function(f,g,a,e){b(c(a),aFW);d(f,a,e[1]);b(c(a),aFX);var
h=e[2];function
i(a){return b(g,a)}j(l0,function(a){return b(f,a)},i,a,h);return b(c(a),aFY)});h(KD,function(c,b,a){var
e=d(tn,c,b);return d(u(aFZ),e,a)});h(l0,function(f,i,a,e){b(c(a),aF0);d(c(a),aF2,aF1);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aF3);b(c(a),aF4);d(c(a),aF6,aF5);var
h=e[2];if(h){g(a,aF7);var
n=h[1],o=function(a,b){return g(a,aF8)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,aF9)}else
g(a,aGa);b(c(a),aF_);return b(c(a),aF$)});h(KE,function(c,b,a){var
e=d(l0,c,b);return d(u(aGb),e,a)});var
to=[0,tn,KD,l0,KE],l1=function
e(a,b,c,d){return e.fun(a,b,c,d)},KF=function
d(a,b,c){return d.fun(a,b,c)};h(l1,function(f,g,a,e){switch(e[0]){case
0:b(c(a),aGc);var
h=e[1],i=function(a){return b(g,a)},k=function(a){return b(f,a)};j(ab[31],k,i,a,h);return b(c(a),aGd);case
1:b(c(a),aGe);var
l=e[1],m=function(a){return b(g,a)},n=function(a){return b(f,a)};j(to[1],n,m,a,l);return b(c(a),aGf);default:b(c(a),aGg);d(f,a,e[1]);return b(c(a),aGh)}});h(KF,function(c,b,a){var
e=d(l1,c,b);return d(u(aGi),e,a)});var
tp=function
e(a,b,c,d){return e.fun(a,b,c,d)},KG=function
d(a,b,c){return d.fun(a,b,c)};h(tp,function(e,i,a,f){b(c(a),aGj);d(c(a),aGl,aGk);var
k=f[1];b(c(a),aGm);var
l=0;T(function(f,d){if(f)b(c(a),aGn);function
g(a){return b(i,a)}j(l1,function(a){return b(e,a)},g,a,d);return 1},l,k);b(c(a),aGo);b(c(a),aGp);b(c(a),aGq);d(c(a),aGs,aGr);var
h=f[2];if(h){g(a,aGt);var
m=h[1],n=function(a,d){b(c(a),aGu);var
f=0;T(function(f,d){if(f)b(c(a),aGv);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),aGw)},o=function(a){return b(e,a)};j(I[1],o,n,a,m);g(a,aGx)}else
g(a,aGA);b(c(a),aGy);return b(c(a),aGz)});h(KG,function(c,b,a){var
e=d(tp,c,b);return d(u(aGB),e,a)});var
KH=[0,l1,KF,tp,KG],l2=function
c(a,b){return c.fun(a,b)},KI=function
b(a){return b.fun(a)},tq=function
d(a,b,c){return d.fun(a,b,c)},KJ=function
c(a,b){return c.fun(a,b)},l3=function
c(a,b){return c.fun(a,b)},KK=function
b(a){return b.fun(a)};h(l2,function(a,e){b(c(a),aGC);d(c(a),aGE,aGD);var
f=e[1];d(c(a),aGF,f);b(c(a),aGG);b(c(a),aGH);d(c(a),aGJ,aGI);var
g=e[2];d(c(a),aGK,g);b(c(a),aGL);return b(c(a),aGM)});h(KI,function(a){return d(u(aGN),l2,a)});h(tq,function(f,a,e){b(c(a),aGO);d(f,a,e[1]);b(c(a),aGP);d(l3,a,e[2]);return b(c(a),aGQ)});h(KJ,function(c,a){var
e=b(tq,c);return d(u(aGR),e,a)});h(l3,function(a,e){b(c(a),aGS);d(c(a),aGU,aGT);d(l2,a,e[1]);b(c(a),aGV);b(c(a),aGW);d(c(a),aGY,aGX);var
f=e[2];d(c(a),aGZ,f);b(c(a),aG0);return b(c(a),aG1)});h(KK,function(a){return d(u(aG2),l3,a)});var
KL=[0,l2,KI,tq,KJ,l3,KK],tr=function
e(a,b,c,d){return e.fun(a,b,c,d)},KM=function
d(a,b,c){return d.fun(a,b,c)};h(tr,function(f,i,a,e){b(c(a),aG3);d(c(a),aG5,aG4);var
k=e[1];b(c(a),aG6);var
l=0;T(function(e,d){if(e)b(c(a),aG7);function
g(a){return b(f,a)}A(KL[3],g,a,d);return 1},l,k);b(c(a),aG8);b(c(a),aG9);b(c(a),aG_);d(c(a),aHa,aG$);var
m=e[2];b(c(a),aHb);var
n=0;T(function(e,d){if(e)b(c(a),aHc);function
g(a){return b(i,a)}function
h(a){return b(f,a)}j(ab[31],h,g,a,d);return 1},n,m);b(c(a),aHd);b(c(a),aHe);b(c(a),aHf);d(c(a),aHh,aHg);var
h=e[3];if(h){g(a,aHi);var
o=h[1],p=function(a,b){return g(a,aHj)},q=function(a){return b(f,a)};j(I[1],q,p,a,o);g(a,aHk)}else
g(a,aHn);b(c(a),aHl);return b(c(a),aHm)});h(KM,function(c,b,a){var
e=d(tr,c,b);return d(u(aHo),e,a)});var
ts=[0,KL,tr,KM],tt=function
e(a,b,c,d){return e.fun(a,b,c,d)},KN=function
d(a,b,c){return d.fun(a,b,c)};h(tt,function(e,h,a,f){b(c(a),aHp);d(c(a),aHr,aHq);var
l=f[1];function
m(a){return b(h,a)}function
n(a){return b(e,a)}j(ab[31],n,m,a,l);b(c(a),aHs);b(c(a),aHt);d(c(a),aHv,aHu);var
i=f[2];b(c(a),aHw);d(e,a,i[1]);b(c(a),aHx);var
o=i[2];function
p(a){return b(h,a)}function
q(a){return b(e,a)}j(ts[2],q,p,a,o);b(c(a),aHy);b(c(a),aHz);b(c(a),aHA);d(c(a),aHC,aHB);var
k=f[3];if(k){g(a,aHD);var
r=k[1],s=function(a,b){return g(a,aHE)},t=function(a){return b(e,a)};j(I[1],t,s,a,r);g(a,aHF)}else
g(a,aHI);b(c(a),aHG);return b(c(a),aHH)});h(KN,function(c,b,a){var
e=d(tt,c,b);return d(u(aHJ),e,a)});var
KO=[0,tt,KN],h2=function
e(a,b,c,d){return e.fun(a,b,c,d)},KP=function
d(a,b,c){return d.fun(a,b,c)},tu=function
e(a,b,c,d){return e.fun(a,b,c,d)},KQ=function
d(a,b,c){return d.fun(a,b,c)},l4=function
e(a,b,c,d){return e.fun(a,b,c,d)},KR=function
d(a,b,c){return d.fun(a,b,c)};h(h2,function(f,g,a,e){switch(e[0]){case
0:var
h=e[1];b(c(a),aHK);b(c(a),aHL);d(g,a,h[1]);b(c(a),aHM);var
i=h[2],k=function(a){return b(f,a)};A(jD[2],k,a,i);b(c(a),aHN);return b(c(a),aHO);case
1:b(c(a),aHP);var
l=e[1],m=function(a){return b(g,a)},n=function(a){return b(f,a)};j(av[1],n,m,a,l);return b(c(a),aHQ);case
2:b(c(a),aHR);var
o=e[1],p=function(a){return b(f,a)};A(k5[1],p,a,o);return b(c(a),aHS);default:b(c(a),aHT);var
q=e[1],r=function(a){return b(g,a)},s=function(a){return b(f,a)};j(k6[1],s,r,a,q);return b(c(a),aHU)}});h(KP,function(c,b,a){var
e=d(h2,c,b);return d(u(aHV),e,a)});h(tu,function(f,g,a,e){b(c(a),aHW);d(f,a,e[1]);b(c(a),aHX);var
h=e[2];function
i(a){return b(g,a)}j(l4,function(a){return b(f,a)},i,a,h);return b(c(a),aHY)});h(KQ,function(c,b,a){var
e=d(tu,c,b);return d(u(aHZ),e,a)});h(l4,function(e,h,a,f){switch(f[0]){case
0:b(c(a),aH0);d(c(a),aH2,aH1);var
o=f[1],p=function(a){return b(h,a)};j(h2,function(a){return b(e,a)},p,a,o);b(c(a),aH3);b(c(a),aH4);d(c(a),aH6,aH5);var
q=f[2],r=function(a){return b(h,a)},s=function(a){return b(e,a)};j(ab[31],s,r,a,q);b(c(a),aH7);b(c(a),aH8);d(c(a),aH_,aH9);var
t=f[3];d(c(a),aH$,t);b(c(a),aIa);return b(c(a),aIb);case
1:var
i=f[2];b(c(a),aIc);d(c(a),aIe,aId);var
u=f[1],v=function(a){return b(h,a)};j(h2,function(a){return b(e,a)},v,a,u);b(c(a),aIf);b(c(a),aIg);d(c(a),aIi,aIh);b(c(a),aIj);d(e,a,i[1]);b(c(a),aIk);var
w=i[2],x=function(a){return b(h,a)},y=function(a){return b(e,a)};j(hy[5],y,x,a,w);b(c(a),aIl);b(c(a),aIm);return b(c(a),aIn);case
2:var
k=f[3],l=f[2];b(c(a),aIo);d(c(a),aIq,aIp);var
z=f[1],A=function(a){return b(h,a)};j(h2,function(a){return b(e,a)},A,a,z);b(c(a),aIr);b(c(a),aIs);d(c(a),aIu,aIt);b(c(a),aIv);d(e,a,l[1]);b(c(a),aIw);var
B=l[2],C=function(a){return b(h,a)},D=function(a){return b(e,a)};j(hy[5],D,C,a,B);b(c(a),aIx);b(c(a),aIy);b(c(a),aIz);d(c(a),aIB,aIA);if(k){g(a,aIC);var
E=k[1],F=function(a,b){return g(a,aID)},G=function(a){return b(e,a)};j(I[1],G,F,a,E);g(a,aIE)}else
g(a,aIH);b(c(a),aIF);return b(c(a),aIG);default:var
m=f[3],n=f[2];b(c(a),aII);d(c(a),aIK,aIJ);var
H=f[1],J=function(a){return b(h,a)};j(h2,function(a){return b(e,a)},J,a,H);b(c(a),aIL);b(c(a),aIM);d(c(a),aIO,aIN);b(c(a),aIP);d(e,a,n[1]);b(c(a),aIQ);var
K=n[2],L=function(a){return b(h,a)},M=function(a){return b(e,a)};j(hy[5],M,L,a,K);b(c(a),aIR);b(c(a),aIS);b(c(a),aIT);d(c(a),aIV,aIU);if(m){g(a,aIW);var
N=m[1],O=function(a,b){return g(a,aIX)},P=function(a){return b(e,a)};j(I[1],P,O,a,N);g(a,aIY)}else
g(a,aI1);b(c(a),aIZ);return b(c(a),aI0)}});h(KR,function(c,b,a){var
e=d(l4,c,b);return d(u(aI2),e,a)});var
KS=[0,h2,KP,tu,KQ,l4,KR],tv=function
e(a,b,c,d){return e.fun(a,b,c,d)},KT=function
d(a,b,c){return d.fun(a,b,c)},l5=function
e(a,b,c,d){return e.fun(a,b,c,d)},KU=function
d(a,b,c){return d.fun(a,b,c)};h(tv,function(f,g,a,e){b(c(a),aI3);d(f,a,e[1]);b(c(a),aI4);var
h=e[2];function
i(a){return b(g,a)}j(l5,function(a){return b(f,a)},i,a,h);return b(c(a),aI5)});h(KT,function(c,b,a){var
e=d(tv,c,b);return d(u(aI6),e,a)});h(l5,function(f,i,a,e){b(c(a),aI7);d(c(a),aI9,aI8);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aI_);b(c(a),aI$);d(c(a),aJb,aJa);var
h=e[2];if(h){g(a,aJc);var
n=h[1],o=function(a,b){return g(a,aJd)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,aJe)}else
g(a,aJh);b(c(a),aJf);return b(c(a),aJg)});h(KU,function(c,b,a){var
e=d(l5,c,b);return d(u(aJi),e,a)});var
KV=[0,tv,KT,l5,KU],l6=function
e(a,b,c,d){return e.fun(a,b,c,d)},KW=function
d(a,b,c){return d.fun(a,b,c)},tw=function
e(a,b,c,d){return e.fun(a,b,c,d)},KX=function
d(a,b,c){return d.fun(a,b,c)};h(l6,function(f,e,a,d){if(0===d[0]){b(c(a),aJj);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(KS[3],i,h,a,g);return b(c(a),aJk)}b(c(a),aJl);var
k=d[1];function
l(a){return b(e,a)}function
m(a){return b(f,a)}j(KV[1],m,l,a,k);return b(c(a),aJm)});h(KW,function(c,b,a){var
e=d(l6,c,b);return d(u(aJn),e,a)});h(tw,function(e,i,a,f){b(c(a),aJo);d(c(a),aJq,aJp);var
k=f[1];b(c(a),aJr);var
l=0;T(function(f,d){if(f)b(c(a),aJs);function
g(a){return b(i,a)}j(l6,function(a){return b(e,a)},g,a,d);return 1},l,k);b(c(a),aJt);b(c(a),aJu);b(c(a),aJv);d(c(a),aJx,aJw);var
h=f[2];if(h){g(a,aJy);var
m=h[1],n=function(a,d){b(c(a),aJz);var
f=0;T(function(f,d){if(f)b(c(a),aJA);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),aJB)},o=function(a){return b(e,a)};j(I[1],o,n,a,m);g(a,aJC)}else
g(a,aJF);b(c(a),aJD);return b(c(a),aJE)});h(KX,function(c,b,a){var
e=d(tw,c,b);return d(u(aJG),e,a)});var
KY=[0,KS,KV,l6,KW,tw,KX],tx=function
e(a,b,c,d){return e.fun(a,b,c,d)},KZ=function
d(a,b,c){return d.fun(a,b,c)};h(tx,function(f,i,a,e){b(c(a),aJH);d(c(a),aJJ,aJI);var
k=e[1];b(c(a),aJK);var
l=0;T(function(e,d){if(e)b(c(a),aJL);function
g(a){return b(i,a)}function
h(a){return b(f,a)}j(ab[31],h,g,a,d);return 1},l,k);b(c(a),aJM);b(c(a),aJN);b(c(a),aJO);d(c(a),aJQ,aJP);var
h=e[2];if(h){g(a,aJR);var
m=h[1],n=function(a,b){return g(a,aJS)},o=function(a){return b(f,a)};j(I[1],o,n,a,m);g(a,aJT)}else
g(a,aJW);b(c(a),aJU);return b(c(a),aJV)});h(KZ,function(c,b,a){var
e=d(tx,c,b);return d(u(aJX),e,a)});var
K0=[0,tx,KZ],l7=function
c(a,b){return c.fun(a,b)},K1=function
b(a){return b.fun(a)},ty=function
e(a,b,c,d){return e.fun(a,b,c,d)},K2=function
d(a,b,c){return d.fun(a,b,c)};h(l7,function(a,b){switch(b){case
0:return g(a,aJY);case
1:return g(a,aJZ);case
2:return g(a,aJ0);case
3:return g(a,aJ1);case
4:return g(a,aJ2);case
5:return g(a,aJ3);case
6:return g(a,aJ4);default:return g(a,aJ5)}});h(K1,function(a){return d(u(aJ6),l7,a)});h(ty,function(f,i,a,e){b(c(a),aJ7);d(c(a),aJ9,aJ8);d(l7,a,e[1]);b(c(a),aJ_);b(c(a),aJ$);d(c(a),aKb,aKa);var
k=e[2];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aKc);b(c(a),aKd);d(c(a),aKf,aKe);var
h=e[3];if(h){g(a,aKg);var
n=h[1],o=function(a,b){return g(a,aKh)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,aKi)}else
g(a,aKl);b(c(a),aKj);return b(c(a),aKk)});h(K2,function(c,b,a){var
e=d(ty,c,b);return d(u(aKm),e,a)});var
K3=[0,l7,K1,ty,K2],l8=function
c(a,b){return c.fun(a,b)},K4=function
b(a){return b.fun(a)},tz=function
e(a,b,c,d){return e.fun(a,b,c,d)},K5=function
d(a,b,c){return d.fun(a,b,c)};h(l8,function(a,b){switch(b){case
0:return g(a,aKn);case
1:return g(a,aKo);case
2:return g(a,aKp);case
3:return g(a,aKq);case
4:return g(a,aKr);case
5:return g(a,aKs);case
6:return g(a,aKt);case
7:return g(a,aKu);case
8:return g(a,aKv);case
9:return g(a,aKw);case
10:return g(a,aKx);case
11:return g(a,aKy);case
12:return g(a,aKz);case
13:return g(a,aKA);case
14:return g(a,aKB);case
15:return g(a,aKC);case
16:return g(a,aKD);case
17:return g(a,aKE);case
18:return g(a,aKF);case
19:return g(a,aKG);case
20:return g(a,aKH);default:return g(a,aKI)}});h(K4,function(a){return d(u(aKJ),l8,a)});h(tz,function(f,h,a,e){b(c(a),aKK);d(c(a),aKM,aKL);d(l8,a,e[1]);b(c(a),aKN);b(c(a),aKO);d(c(a),aKQ,aKP);var
k=e[2];function
l(a){return b(h,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aKR);b(c(a),aKS);d(c(a),aKU,aKT);var
n=e[3];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(ab[31],p,o,a,n);b(c(a),aKV);b(c(a),aKW);d(c(a),aKY,aKX);var
i=e[4];if(i){g(a,aKZ);var
q=i[1],r=function(a,b){return g(a,aK0)},s=function(a){return b(f,a)};j(I[1],s,r,a,q);g(a,aK1)}else
g(a,aK4);b(c(a),aK2);return b(c(a),aK3)});h(K5,function(c,b,a){var
e=d(tz,c,b);return d(u(aK5),e,a)});var
K6=[0,l8,K4,tz,K5],l9=function
c(a,b){return c.fun(a,b)},K7=function
b(a){return b.fun(a)},tA=function
e(a,b,c,d){return e.fun(a,b,c,d)},K8=function
d(a,b,c){return d.fun(a,b,c)};h(l9,function(a,b){switch(b){case
0:return g(a,aK6);case
1:return g(a,aK7);case
2:return g(a,aK8);case
3:return g(a,aK9);case
4:return g(a,aK_);case
5:return g(a,aK$);case
6:return g(a,aLa);case
7:return g(a,aLb);case
8:return g(a,aLc);case
9:return g(a,aLd);case
10:return g(a,aLe);case
11:return g(a,aLf);case
12:return g(a,aLg);case
13:return g(a,aLh);default:return g(a,aLi)}});h(K7,function(a){return d(u(aLj),l9,a)});h(tA,function(f,h,a,e){b(c(a),aLk);d(c(a),aLm,aLl);var
i=e[1];if(i){g(a,aLn);d(l9,a,i[1]);g(a,aLo)}else
g(a,aLH);b(c(a),aLp);b(c(a),aLq);d(c(a),aLs,aLr);var
l=e[2];function
m(a){return b(h,a)}function
n(a){return b(f,a)}j(cB[5],n,m,a,l);b(c(a),aLt);b(c(a),aLu);d(c(a),aLw,aLv);var
o=e[3];function
p(a){return b(h,a)}function
q(a){return b(f,a)}j(ab[31],q,p,a,o);b(c(a),aLx);b(c(a),aLy);d(c(a),aLA,aLz);var
k=e[4];if(k){g(a,aLB);var
r=k[1],s=function(a,b){return g(a,aLC)},t=function(a){return b(f,a)};j(I[1],t,s,a,r);g(a,aLD)}else
g(a,aLG);b(c(a),aLE);return b(c(a),aLF)});h(K8,function(c,b,a){var
e=d(tA,c,b);return d(u(aLI),e,a)});var
K9=[0,l9,K7,tA,K8],l_=function
c(a,b){return c.fun(a,b)},K_=function
b(a){return b.fun(a)},tB=function
e(a,b,c,d){return e.fun(a,b,c,d)},K$=function
d(a,b,c){return d.fun(a,b,c)};h(l_,function(a,b){return b?g(a,aLJ):g(a,aLK)});h(K_,function(a){return d(u(aLL),l_,a)});h(tB,function(f,i,a,e){b(c(a),aLM);d(c(a),aLO,aLN);d(l_,a,e[1]);b(c(a),aLP);b(c(a),aLQ);d(c(a),aLS,aLR);var
k=e[2];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aLT);b(c(a),aLU);d(c(a),aLW,aLV);var
n=e[3];d(c(a),aLX,n);b(c(a),aLY);b(c(a),aLZ);d(c(a),aL1,aL0);var
h=e[4];if(h){g(a,aL2);var
o=h[1],p=function(a,b){return g(a,aL3)},q=function(a){return b(f,a)};j(I[1],q,p,a,o);g(a,aL4)}else
g(a,aL7);b(c(a),aL5);return b(c(a),aL6)});h(K$,function(c,b,a){var
e=d(tB,c,b);return d(u(aL8),e,a)});var
La=[0,l_,K_,tB,K$],l$=function
c(a,b){return c.fun(a,b)},Lb=function
b(a){return b.fun(a)},tC=function
e(a,b,c,d){return e.fun(a,b,c,d)},Lc=function
d(a,b,c){return d.fun(a,b,c)};h(l$,function(a,b){switch(b){case
0:return g(a,aL9);case
1:return g(a,aL_);default:return g(a,aL$)}});h(Lb,function(a){return d(u(aMa),l$,a)});h(tC,function(f,h,a,e){b(c(a),aMb);d(c(a),aMd,aMc);d(l$,a,e[1]);b(c(a),aMe);b(c(a),aMf);d(c(a),aMh,aMg);var
k=e[2];function
l(a){return b(h,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aMi);b(c(a),aMj);d(c(a),aMl,aMk);var
n=e[3];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(ab[31],p,o,a,n);b(c(a),aMm);b(c(a),aMn);d(c(a),aMp,aMo);var
i=e[4];if(i){g(a,aMq);var
q=i[1],r=function(a,b){return g(a,aMr)},s=function(a){return b(f,a)};j(I[1],s,r,a,q);g(a,aMs)}else
g(a,aMv);b(c(a),aMt);return b(c(a),aMu)});h(Lc,function(c,b,a){var
e=d(tC,c,b);return d(u(aMw),e,a)});var
Ld=[0,l$,Lb,tC,Lc],tD=function
e(a,b,c,d){return e.fun(a,b,c,d)},Le=function
d(a,b,c){return d.fun(a,b,c)};h(tD,function(f,h,a,e){b(c(a),aMx);d(c(a),aMz,aMy);var
k=e[1];function
l(a){return b(h,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aMA);b(c(a),aMB);d(c(a),aMD,aMC);var
n=e[2];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(ab[31],p,o,a,n);b(c(a),aME);b(c(a),aMF);d(c(a),aMH,aMG);var
q=e[3];function
r(a){return b(h,a)}function
s(a){return b(f,a)}j(ab[31],s,r,a,q);b(c(a),aMI);b(c(a),aMJ);d(c(a),aML,aMK);var
i=e[4];if(i){g(a,aMM);var
t=i[1],u=function(a,b){return g(a,aMN)},v=function(a){return b(f,a)};j(I[1],v,u,a,t);g(a,aMO)}else
g(a,aMR);b(c(a),aMP);return b(c(a),aMQ)});h(Le,function(c,b,a){var
e=d(tD,c,b);return d(u(aMS),e,a)});var
Lf=[0,tD,Le],ma=function
e(a,b,c,d){return e.fun(a,b,c,d)},Lg=function
d(a,b,c){return d.fun(a,b,c)};h(ma,function(f,e,a,d){if(0===d[0]){b(c(a),aMT);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(ab[31],i,h,a,g);return b(c(a),aMU)}b(c(a),aMV);var
k=d[1];function
l(a){return b(e,a)}function
m(a){return b(f,a)}j(to[1],m,l,a,k);return b(c(a),aMW)});h(Lg,function(c,b,a){var
e=d(ma,c,b);return d(u(aMX),e,a)});var
tE=function
e(a,b,c,d){return e.fun(a,b,c,d)},Lh=function
d(a,b,c){return d.fun(a,b,c)},mb=function
e(a,b,c,d){return e.fun(a,b,c,d)},Li=function
d(a,b,c){return d.fun(a,b,c)};h(tE,function(f,g,a,e){b(c(a),aMY);d(f,a,e[1]);b(c(a),aMZ);var
h=e[2];function
i(a){return b(g,a)}j(mb,function(a){return b(f,a)},i,a,h);return b(c(a),aM0)});h(Lh,function(c,b,a){var
e=d(tE,c,b);return d(u(aM1),e,a)});h(mb,function(e,i,a,f){b(c(a),aM2);d(c(a),aM4,aM3);var
k=f[1];b(c(a),aM5);var
l=0;T(function(f,d){if(f)b(c(a),aM6);function
g(a){return b(i,a)}j(ma,function(a){return b(e,a)},g,a,d);return 1},l,k);b(c(a),aM7);b(c(a),aM8);b(c(a),aM9);d(c(a),aM$,aM_);var
h=f[2];if(h){g(a,aNa);var
m=h[1],n=function(a,d){b(c(a),aNb);var
f=0;T(function(f,d){if(f)b(c(a),aNc);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),aNd)},o=function(a){return b(e,a)};j(I[1],o,n,a,m);g(a,aNe)}else
g(a,aNh);b(c(a),aNf);return b(c(a),aNg)});h(Li,function(c,b,a){var
e=d(mb,c,b);return d(u(aNi),e,a)});var
tF=[0,tE,Lh,mb,Li],tG=function
e(a,b,c,d){return e.fun(a,b,c,d)},Lj=function
d(a,b,c){return d.fun(a,b,c)};h(tG,function(f,h,a,e){b(c(a),aNj);d(c(a),aNl,aNk);var
m=e[1];function
n(a){return b(h,a)}function
o(a){return b(f,a)}j(ab[31],o,n,a,m);b(c(a),aNm);b(c(a),aNn);d(c(a),aNp,aNo);var
i=e[2];if(i){g(a,aNq);var
p=i[1],q=function(a){return b(h,a)},r=function(a){return b(f,a)};j(ab[2][1],r,q,a,p);g(a,aNr)}else
g(a,aNJ);b(c(a),aNs);b(c(a),aNt);d(c(a),aNv,aNu);var
k=e[3];if(k){g(a,aNw);var
s=k[1],t=function(a){return b(h,a)},u=function(a){return b(f,a)};j(tF[1],u,t,a,s);g(a,aNx)}else
g(a,aNI);b(c(a),aNy);b(c(a),aNz);d(c(a),aNB,aNA);var
l=e[4];if(l){g(a,aNC);var
v=l[1],w=function(a,b){return g(a,aND)},x=function(a){return b(f,a)};j(I[1],x,w,a,v);g(a,aNE)}else
g(a,aNH);b(c(a),aNF);return b(c(a),aNG)});h(Lj,function(c,b,a){var
e=d(tG,c,b);return d(u(aNK),e,a)});var
Lk=[0,tG,Lj],tH=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ll=function
d(a,b,c){return d.fun(a,b,c)};h(tH,function(f,h,a,e){b(c(a),aNL);d(c(a),aNN,aNM);var
l=e[1];function
m(a){return b(h,a)}function
n(a){return b(f,a)}j(ab[31],n,m,a,l);b(c(a),aNO);b(c(a),aNP);d(c(a),aNR,aNQ);var
i=e[2];if(i){g(a,aNS);var
o=i[1],p=function(a){return b(h,a)},q=function(a){return b(f,a)};j(ab[2][1],q,p,a,o);g(a,aNT)}else
g(a,aN8);b(c(a),aNU);b(c(a),aNV);d(c(a),aNX,aNW);var
r=e[3];function
s(a){return b(h,a)}function
t(a){return b(f,a)}j(tF[1],t,s,a,r);b(c(a),aNY);b(c(a),aNZ);d(c(a),aN1,aN0);var
k=e[4];if(k){g(a,aN2);var
u=k[1],v=function(a,b){return g(a,aN3)},w=function(a){return b(f,a)};j(I[1],w,v,a,u);g(a,aN4)}else
g(a,aN7);b(c(a),aN5);return b(c(a),aN6)});h(Ll,function(c,b,a){var
e=d(tH,c,b);return d(u(aN9),e,a)});var
tI=[0,tH,Ll],tJ=function
e(a,b,c,d){return e.fun(a,b,c,d)},Lm=function
d(a,b,c){return d.fun(a,b,c)};h(tJ,function(g,f,a,e){b(c(a),aN_);d(c(a),aOa,aN$);var
h=e[1];function
i(a){return b(f,a)}function
k(a){return b(g,a)}j(tI[1],k,i,a,h);b(c(a),aOb);b(c(a),aOc);d(c(a),aOe,aOd);d(f,a,e[2]);b(c(a),aOf);b(c(a),aOg);d(c(a),aOi,aOh);var
l=e[3];d(c(a),aOj,l);b(c(a),aOk);return b(c(a),aOl)});h(Lm,function(c,b,a){var
e=d(tJ,c,b);return d(u(aOm),e,a)});var
Ln=[0,tJ,Lm],mc=function
e(a,b,c,d){return e.fun(a,b,c,d)},Lo=function
d(a,b,c){return d.fun(a,b,c)},tK=function
e(a,b,c,d){return e.fun(a,b,c,d)},Lp=function
d(a,b,c){return d.fun(a,b,c)};h(mc,function(e,f,a,d){switch(d[0]){case
0:b(c(a),aOn);var
g=d[1],h=function(a){return b(f,a)},i=function(a){return b(e,a)};j(av[1],i,h,a,g);return b(c(a),aOo);case
1:b(c(a),aOp);var
k=d[1],l=function(a){return b(e,a)};A(k5[1],l,a,k);return b(c(a),aOq);default:b(c(a),aOr);var
m=d[1],n=function(a){return b(f,a)},o=function(a){return b(e,a)};j(ab[31],o,n,a,m);return b(c(a),aOs)}});h(Lo,function(c,b,a){var
e=d(mc,c,b);return d(u(aOt),e,a)});h(tK,function(f,h,a,e){b(c(a),aOu);d(c(a),aOw,aOv);var
k=e[1];function
l(a){return b(h,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aOx);b(c(a),aOy);d(c(a),aOA,aOz);var
n=e[2];function
o(a){return b(h,a)}j(mc,function(a){return b(f,a)},o,a,n);b(c(a),aOB);b(c(a),aOC);d(c(a),aOE,aOD);var
i=e[3];if(i){g(a,aOF);var
p=i[1],q=function(a,b){return g(a,aOG)},r=function(a){return b(f,a)};j(I[1],r,q,a,p);g(a,aOH)}else
g(a,aOK);b(c(a),aOI);return b(c(a),aOJ)});h(Lp,function(c,b,a){var
e=d(tK,c,b);return d(u(aOL),e,a)});var
tL=[0,mc,Lo,tK,Lp],tM=function
e(a,b,c,d){return e.fun(a,b,c,d)},Lq=function
d(a,b,c){return d.fun(a,b,c)};h(tM,function(g,f,a,e){b(c(a),aOM);d(c(a),aOO,aON);var
h=e[1];function
i(a){return b(f,a)}function
k(a){return b(g,a)}j(tL[3],k,i,a,h);b(c(a),aOP);b(c(a),aOQ);d(c(a),aOS,aOR);d(f,a,e[2]);b(c(a),aOT);b(c(a),aOU);d(c(a),aOW,aOV);var
l=e[3];d(c(a),aOX,l);b(c(a),aOY);return b(c(a),aOZ)});h(Lq,function(c,b,a){var
e=d(tM,c,b);return d(u(aO0),e,a)});var
Lr=[0,tM,Lq],tN=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ls=function
d(a,b,c){return d.fun(a,b,c)};h(tN,function(h,f,a,e){b(c(a),aO1);d(c(a),aO3,aO2);var
i=e[1];if(i){g(a,aO4);var
l=i[1],m=function(a){return b(f,a)},n=function(a){return b(h,a)};j(ab[31],n,m,a,l);g(a,aO5)}else
g(a,aPn);b(c(a),aO6);b(c(a),aO7);d(c(a),aO9,aO8);var
k=e[2];if(k){g(a,aO_);var
o=k[1],p=function(a,b){return g(a,aO$)},q=function(a){return b(h,a)};j(I[1],q,p,a,o);g(a,aPa)}else
g(a,aPm);b(c(a),aPb);b(c(a),aPc);d(c(a),aPe,aPd);var
r=e[3];d(c(a),aPf,r);b(c(a),aPg);b(c(a),aPh);d(c(a),aPj,aPi);d(f,a,e[4]);b(c(a),aPk);return b(c(a),aPl)});h(Ls,function(c,b,a){var
e=d(tN,c,b);return d(u(aPo),e,a)});var
Lt=[0,tN,Ls],tO=function
e(a,b,c,d){return e.fun(a,b,c,d)},Lu=function
d(a,b,c){return d.fun(a,b,c)},md=function
e(a,b,c,d){return e.fun(a,b,c,d)},Lv=function
d(a,b,c){return d.fun(a,b,c)};h(tO,function(f,g,a,e){b(c(a),aPp);d(f,a,e[1]);b(c(a),aPq);var
h=e[2];function
i(a){return b(g,a)}j(md,function(a){return b(f,a)},i,a,h);return b(c(a),aPr)});h(Lu,function(c,b,a){var
e=d(tO,c,b);return d(u(aPs),e,a)});h(md,function(g,f,a,e){b(c(a),aPt);d(c(a),aPv,aPu);var
h=e[1];function
i(a){return b(f,a)}function
k(a){return b(g,a)}j(cB[5],k,i,a,h);b(c(a),aPw);b(c(a),aPx);d(c(a),aPz,aPy);var
l=e[2];function
m(a){return b(f,a)}function
n(a){return b(g,a)}j(ab[31],n,m,a,l);b(c(a),aPA);b(c(a),aPB);d(c(a),aPD,aPC);var
o=e[3];d(c(a),aPE,o);b(c(a),aPF);return b(c(a),aPG)});h(Lv,function(c,b,a){var
e=d(md,c,b);return d(u(aPH),e,a)});var
Lw=[0,tO,Lu,md,Lv],tP=function
e(a,b,c,d){return e.fun(a,b,c,d)},Lx=function
d(a,b,c){return d.fun(a,b,c)};h(tP,function(h,f,a,e){b(c(a),aPI);d(c(a),aPK,aPJ);var
k=e[1];b(c(a),aPL);var
l=0;T(function(e,d){if(e)b(c(a),aPM);function
g(a){return b(f,a)}function
i(a){return b(h,a)}j(Lw[1],i,g,a,d);return 1},l,k);b(c(a),aPN);b(c(a),aPO);b(c(a),aPP);d(c(a),aPR,aPQ);var
i=e[2];if(i){g(a,aPS);var
m=i[1],n=function(a){return b(f,a)},o=function(a){return b(h,a)};j(ab[31],o,n,a,m);g(a,aPT)}else
g(a,aPW);b(c(a),aPU);return b(c(a),aPV)});h(Lx,function(c,b,a){var
e=d(tP,c,b);return d(u(aPX),e,a)});var
tQ=[0,Lw,tP,Lx],tR=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ly=function
d(a,b,c){return d.fun(a,b,c)};h(tR,function(h,f,a,e){b(c(a),aPY);d(c(a),aP0,aPZ);var
k=e[1];b(c(a),aP1);var
l=0;T(function(e,d){if(e)b(c(a),aP2);function
g(a){return b(f,a)}function
i(a){return b(h,a)}j(tQ[1][1],i,g,a,d);return 1},l,k);b(c(a),aP3);b(c(a),aP4);b(c(a),aP5);d(c(a),aP7,aP6);var
i=e[2];if(i){g(a,aP8);var
m=i[1],n=function(a){return b(f,a)},o=function(a){return b(h,a)};j(ab[31],o,n,a,m);g(a,aP9)}else
g(a,aQa);b(c(a),aP_);return b(c(a),aP$)});h(Ly,function(c,b,a){var
e=d(tR,c,b);return d(u(aQb),e,a)});var
Lz=[0,tR,Ly],tS=function
e(a,b,c,d){return e.fun(a,b,c,d)},LA=function
d(a,b,c){return d.fun(a,b,c)};h(tS,function(f,h,a,e){b(c(a),aQc);d(c(a),aQe,aQd);var
k=e[1];function
l(a){return b(h,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aQf);b(c(a),aQg);d(c(a),aQi,aQh);var
n=e[2];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(af[17],p,o,a,n);b(c(a),aQj);b(c(a),aQk);d(c(a),aQm,aQl);var
i=e[3];if(i){g(a,aQn);var
q=i[1],r=function(a,b){return g(a,aQo)},s=function(a){return b(f,a)};j(I[1],s,r,a,q);g(a,aQp)}else
g(a,aQs);b(c(a),aQq);return b(c(a),aQr)});h(LA,function(c,b,a){var
e=d(tS,c,b);return d(u(aQt),e,a)});var
LB=[0,tS,LA],tT=function
d(a,b,c){return d.fun(a,b,c)},LC=function
c(a,b){return c.fun(a,b)};h(tT,function(e,a,f){b(c(a),aQu);d(c(a),aQw,aQv);var
i=f[1];function
k(a){return b(e,a)}function
l(a){return b(e,a)}j(av[1],l,k,a,i);b(c(a),aQx);b(c(a),aQy);d(c(a),aQA,aQz);var
m=f[2];function
n(a){return b(e,a)}function
o(a){return b(e,a)}j(av[1],o,n,a,m);b(c(a),aQB);b(c(a),aQC);d(c(a),aQE,aQD);var
h=f[3];if(h){g(a,aQF);var
p=h[1],q=function(a,b){return g(a,aQG)},r=function(a){return b(e,a)};j(I[1],r,q,a,p);g(a,aQH)}else
g(a,aQK);b(c(a),aQI);return b(c(a),aQJ)});h(LC,function(c,a){var
e=b(tT,c);return d(u(aQL),e,a)});var
LD=[0,tT,LC],tU=function
d(a,b,c){return d.fun(a,b,c)},LE=function
c(a,b){return c.fun(a,b)};h(tU,function(h,a,f){b(c(a),aQM);d(c(a),aQO,aQN);var
e=f[1];if(e){g(a,aQP);var
i=e[1],k=function(a,b){return g(a,aQQ)},l=function(a){return b(h,a)};j(I[1],l,k,a,i);g(a,aQR)}else
g(a,aQU);b(c(a),aQS);return b(c(a),aQT)});h(LE,function(c,a){var
e=b(tU,c);return d(u(aQV),e,a)});var
LF=[0,tU,LE],tV=function
d(a,b,c){return d.fun(a,b,c)},LG=function
c(a,b){return c.fun(a,b)};h(tV,function(h,a,f){b(c(a),aQW);d(c(a),aQY,aQX);var
e=f[1];if(e){g(a,aQZ);var
i=e[1],k=function(a,b){return g(a,aQ0)},l=function(a){return b(h,a)};j(I[1],l,k,a,i);g(a,aQ1)}else
g(a,aQ4);b(c(a),aQ2);return b(c(a),aQ3)});h(LG,function(c,a){var
e=b(tV,c);return d(u(aQ5),e,a)});var
LH=[0,tV,LG],tW=function
e(a,b,c,d){return e.fun(a,b,c,d)},LI=function
d(a,b,c){return d.fun(a,b,c)};h(tW,function(f,i,a,e){b(c(a),aQ6);d(c(a),aQ8,aQ7);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aQ9);b(c(a),aQ_);d(c(a),aRa,aQ$);var
h=e[2];if(h){g(a,aRb);var
n=h[1],o=function(a,b){return g(a,aRc)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,aRd)}else
g(a,aRg);b(c(a),aRe);return b(c(a),aRf)});h(LI,function(c,b,a){var
e=d(tW,c,b);return d(u(aRh),e,a)});var
LJ=[0,tW,LI],tX=function
e(a,b,c,d){return e.fun(a,b,c,d)},LK=function
d(a,b,c){return d.fun(a,b,c)},me=function
e(a,b,c,d){return e.fun(a,b,c,d)},LL=function
d(a,b,c){return d.fun(a,b,c)};h(tX,function(g,f,a,e){b(c(a),aRi);d(f,a,e[1]);b(c(a),aRj);var
h=e[2];function
i(a){return b(f,a)}j(me,function(a){return b(g,a)},i,a,h);return b(c(a),aRk)});h(LK,function(c,b,a){var
e=d(tX,c,b);return d(u(aRl),e,a)});h(me,function(e,f,a,d){switch(d[0]){case
0:b(c(a),aRm);var
g=d[1],h=function(a){return b(f,a)},i=function(a){return b(e,a)};j(KH[3],i,h,a,g);return b(c(a),aRn);case
1:b(c(a),aRo);var
k=d[1],l=function(a){return b(f,a)},m=function(a){return b(e,a)};j(hy[5],m,l,a,k);return b(c(a),aRp);case
2:b(c(a),aRq);var
n=d[1],o=function(a){return b(f,a)},p=function(a){return b(e,a)};j(K9[3],p,o,a,n);return b(c(a),aRr);case
3:b(c(a),aRs);var
q=d[1],r=function(a){return b(f,a)},s=function(a){return b(e,a)};j(K6[3],s,r,a,q);return b(c(a),aRt);case
4:b(c(a),aRu);var
t=d[1],u=function(a){return b(f,a)},v=function(a){return b(e,a)};j(tI[1],v,u,a,t);return b(c(a),aRv);case
5:b(c(a),aRw);var
w=d[1],x=function(a){return b(f,a)},y=function(a){return b(e,a)};j(h1[8],y,x,a,w);return b(c(a),aRx);case
6:b(c(a),aRy);var
z=d[1],B=function(a){return b(f,a)},C=function(a){return b(e,a)};j(tQ[2],C,B,a,z);return b(c(a),aRz);case
7:b(c(a),aRA);var
D=d[1],E=function(a){return b(f,a)},F=function(a){return b(e,a)};j(Lf[1],F,E,a,D);return b(c(a),aRB);case
8:b(c(a),aRC);var
G=d[1],H=function(a){return b(f,a)},I=function(a){return b(e,a)};j(hy[5],I,H,a,G);return b(c(a),aRD);case
9:b(c(a),aRE);var
J=d[1],K=function(a){return b(f,a)},L=function(a){return b(e,a)};j(Lz[1],L,K,a,J);return b(c(a),aRF);case
10:b(c(a),aRG);var
M=d[1],N=function(a){return b(f,a)},O=function(a){return b(e,a)};j(av[1],O,N,a,M);return b(c(a),aRH);case
11:b(c(a),aRI);var
P=d[1],Q=function(a){return b(f,a)},R=function(a){return b(e,a)};j(LJ[1],R,Q,a,P);return b(c(a),aRJ);case
12:b(c(a),aRK);var
S=d[1],T=function(a){return b(f,a)},U=function(a){return b(e,a)};j(rS[17],U,T,a,S);return b(c(a),aRL);case
13:b(c(a),aRM);var
V=d[1],W=function(a){return b(f,a)},X=function(a){return b(e,a)};j(rS[19],X,W,a,V);return b(c(a),aRN);case
14:b(c(a),aRO);var
Y=d[1],Z=function(a){return b(e,a)};A(jD[2],Z,a,Y);return b(c(a),aRP);case
15:b(c(a),aRQ);var
_=d[1],$=function(a){return b(f,a)},aa=function(a){return b(e,a)};j(Ld[3],aa,$,a,_);return b(c(a),aRR);case
16:b(c(a),aRS);var
ab=d[1],ac=function(a){return b(f,a)},ad=function(a){return b(e,a)};j(tL[3],ad,ac,a,ab);return b(c(a),aRT);case
17:b(c(a),aRU);var
ae=d[1],af=function(a){return b(e,a)};A(LD[1],af,a,ae);return b(c(a),aRV);case
18:b(c(a),aRW);var
ag=d[1],ah=function(a){return b(f,a)},ai=function(a){return b(e,a)};j(Lk[1],ai,ah,a,ag);return b(c(a),aRX);case
19:b(c(a),aRY);var
aj=d[1],ak=function(a){return b(f,a)},al=function(a){return b(e,a)};j(KY[5],al,ak,a,aj);return b(c(a),aRZ);case
20:b(c(a),aR0);var
am=d[1],an=function(a){return b(f,a)},ao=function(a){return b(e,a)};j(Ln[1],ao,an,a,am);return b(c(a),aR1);case
21:b(c(a),aR2);var
ap=d[1],aq=function(a){return b(f,a)},ar=function(a){return b(e,a)};j(Lr[1],ar,aq,a,ap);return b(c(a),aR3);case
22:b(c(a),aR4);var
as=d[1],at=function(a){return b(f,a)},au=function(a){return b(e,a)};j(K0[1],au,at,a,as);return b(c(a),aR5);case
23:b(c(a),aR6);var
aw=d[1],ax=function(a){return b(e,a)};A(LH[1],ax,a,aw);return b(c(a),aR7);case
24:b(c(a),aR8);var
ay=d[1],az=function(a){return b(f,a)},aA=function(a){return b(e,a)};j(KO[1],aA,az,a,ay);return b(c(a),aR9);case
25:b(c(a),aR_);var
aB=d[1],aC=function(a){return b(f,a)},aD=function(a){return b(e,a)};j(ts[2],aD,aC,a,aB);return b(c(a),aR$);case
26:b(c(a),aSa);var
aE=d[1],aF=function(a){return b(e,a)};A(LF[1],aF,a,aE);return b(c(a),aSb);case
27:b(c(a),aSc);var
aG=d[1],aH=function(a){return b(f,a)},aI=function(a){return b(e,a)};j(LB[1],aI,aH,a,aG);return b(c(a),aSd);case
28:b(c(a),aSe);var
aJ=d[1],aK=function(a){return b(f,a)},aL=function(a){return b(e,a)};j(K3[3],aL,aK,a,aJ);return b(c(a),aSf);case
29:b(c(a),aSg);var
aM=d[1],aN=function(a){return b(f,a)},aO=function(a){return b(e,a)};j(La[3],aO,aN,a,aM);return b(c(a),aSh);default:b(c(a),aSi);var
aP=d[1],aQ=function(a){return b(f,a)},aR=function(a){return b(e,a)};j(Lt[1],aR,aQ,a,aP);return b(c(a),aSj)}});h(LL,function(c,b,a){var
e=d(me,c,b);return d(u(aSk),e,a)});be(aSl,ab,[0,KA,aFV,to,KH,ts,KO,KY,K0,K3,K6,K9,La,Ld,Lf,ma,Lg,tF,Lk,tI,Ln,tL,Lr,Lt,tQ,Lz,LB,LD,LF,LH,LJ,tX,LK,me,LL]);var
tY=function
e(a,b,c,d){return e.fun(a,b,c,d)},LM=function
d(a,b,c){return d.fun(a,b,c)},mf=function
d(a,b,c){return d.fun(a,b,c)},LN=function
c(a,b){return c.fun(a,b)};h(tY,function(g,f,a,e){b(c(a),aSm);d(f,a,e[1]);b(c(a),aSn);var
h=e[2];A(mf,function(a){return b(g,a)},a,h);return b(c(a),aSo)});h(LM,function(c,b,a){var
e=d(tY,c,b);return d(u(aSp),e,a)});h(mf,function(h,a,e){b(c(a),aSq);d(c(a),aSs,aSr);var
i=e[1];d(c(a),aSt,i);b(c(a),aSu);b(c(a),aSv);d(c(a),aSx,aSw);var
f=e[2];if(f){g(a,aSy);var
k=f[1],l=function(a,b){return g(a,aSz)},m=function(a){return b(h,a)};j(I[1],m,l,a,k);g(a,aSA)}else
g(a,aSD);b(c(a),aSB);return b(c(a),aSC)});h(LN,function(c,a){var
e=b(mf,c);return d(u(aSE),e,a)});var
h3=[0,tY,LM,mf,LN],tZ=function
e(a,b,c,d){return e.fun(a,b,c,d)},LO=function
d(a,b,c){return d.fun(a,b,c)},mg=function
e(a,b,c,d){return e.fun(a,b,c,d)},LP=function
d(a,b,c){return d.fun(a,b,c)};h(tZ,function(f,g,a,e){b(c(a),aSF);d(f,a,e[1]);b(c(a),aSG);var
h=e[2];function
i(a){return b(g,a)}j(mg,function(a){return b(f,a)},i,a,h);return b(c(a),aSH)});h(LO,function(c,b,a){var
e=d(tZ,c,b);return d(u(aSI),e,a)});h(mg,function(g,f,a,e){b(c(a),aSJ);d(c(a),aSL,aSK);var
h=e[1];function
i(a){return b(f,a)}function
k(a){return b(g,a)}j(h3[1],k,i,a,h);b(c(a),aSM);b(c(a),aSN);d(c(a),aSP,aSO);var
l=e[2];function
m(a){return b(f,a)}function
n(a){return b(g,a)}j(h3[1],n,m,a,l);b(c(a),aSQ);return b(c(a),aSR)});h(LP,function(c,b,a){var
e=d(mg,c,b);return d(u(aSS),e,a)});var
t0=[0,tZ,LO,mg,LP],t1=function
e(a,b,c,d){return e.fun(a,b,c,d)},LQ=function
d(a,b,c){return d.fun(a,b,c)},mh=function
e(a,b,c,d){return e.fun(a,b,c,d)},LR=function
d(a,b,c){return d.fun(a,b,c)};h(t1,function(e,i,a,f){b(c(a),aST);d(c(a),aSV,aSU);var
k=f[1];function
l(a){return b(i,a)}j(mh,function(a){return b(e,a)},l,a,k);b(c(a),aSW);b(c(a),aSX);d(c(a),aSZ,aSY);var
h=f[2];if(h){g(a,aS0);var
m=h[1],n=function(a,d){b(c(a),aS1);var
f=0;T(function(f,d){if(f)b(c(a),aS2);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),aS3)},o=function(a){return b(e,a)};j(I[1],o,n,a,m);g(a,aS4)}else
g(a,aS7);b(c(a),aS5);return b(c(a),aS6)});h(LQ,function(c,b,a){var
e=d(t1,c,b);return d(u(aS8),e,a)});h(mh,function(f,e,a,d){if(d){b(c(a),aS9);var
h=d[1],i=function(a){return b(e,a)},k=function(a){return b(f,a)};j(ab[31],k,i,a,h);return b(c(a),aS_)}return g(a,aS$)});h(LR,function(c,b,a){var
e=d(mh,c,b);return d(u(aTa),e,a)});var
t2=[0,t1,LQ,mh,LR];function
LS(a,e){b(c(a),aTb);d(c(a),aTd,aTc);var
f=e[1];d(c(a),aTe,f);b(c(a),aTf);b(c(a),aTg);d(c(a),aTi,aTh);var
g=e[2];d(c(a),aTj,g);b(c(a),aTk);return b(c(a),aTl)}var
LT=[0,LS,function(a){return d(u(aTm),LS,a)}],t3=function
e(a,b,c,d){return e.fun(a,b,c,d)},LU=function
d(a,b,c){return d.fun(a,b,c)},mi=function
e(a,b,c,d){return e.fun(a,b,c,d)},LV=function
d(a,b,c){return d.fun(a,b,c)},mj=function
e(a,b,c,d){return e.fun(a,b,c,d)},LW=function
d(a,b,c){return d.fun(a,b,c)},mk=function
e(a,b,c,d){return e.fun(a,b,c,d)},LX=function
d(a,b,c){return d.fun(a,b,c)};h(t3,function(f,g,a,e){b(c(a),aTn);d(f,a,e[1]);b(c(a),aTo);var
h=e[2];function
i(a){return b(g,a)}j(mk,function(a){return b(f,a)},i,a,h);return b(c(a),aTp)});h(LU,function(c,b,a){var
e=d(t3,c,b);return d(u(aTq),e,a)});h(mi,function(f,e,a,d){if(0===d[0]){b(c(a),aTr);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(h3[1],i,h,a,g);return b(c(a),aTs)}b(c(a),aTt);var
k=d[1];function
l(a){return b(e,a)}function
m(a){return b(f,a)}j(t0[1],m,l,a,k);return b(c(a),aTu)});h(LV,function(c,b,a){var
e=d(mi,c,b);return d(u(aTv),e,a)});h(mj,function(g,f,a,e){if(0===e[0]){b(c(a),aTw);d(f,a,e[1]);b(c(a),aTx);var
h=e[2],i=function(a){return b(g,a)};A(jD[2],i,a,h);return b(c(a),aTy)}b(c(a),aTz);d(f,a,e[1]);b(c(a),aTA);var
k=e[2];function
l(a){return b(f,a)}function
m(a){return b(g,a)}j(t2[1],m,l,a,k);return b(c(a),aTB)});h(LW,function(c,b,a){var
e=d(mj,c,b);return d(u(aTC),e,a)});h(mk,function(h,f,a,e){b(c(a),aTD);d(c(a),aTF,aTE);var
k=e[1];function
l(a){return b(f,a)}j(mi,function(a){return b(h,a)},l,a,k);b(c(a),aTG);b(c(a),aTH);d(c(a),aTJ,aTI);var
i=e[2];if(i){g(a,aTK);var
m=i[1],n=function(a){return b(f,a)};j(mj,function(a){return b(h,a)},n,a,m);g(a,aTL)}else
g(a,aTO);b(c(a),aTM);return b(c(a),aTN)});h(LX,function(c,b,a){var
e=d(mk,c,b);return d(u(aTP),e,a)});var
LY=[0,t3,LU,mi,LV,mj,LW,mk,LX],t4=function
e(a,b,c,d){return e.fun(a,b,c,d)},LZ=function
d(a,b,c){return d.fun(a,b,c)},ml=function
e(a,b,c,d){return e.fun(a,b,c,d)},L0=function
d(a,b,c){return d.fun(a,b,c)};h(t4,function(f,g,a,e){b(c(a),aTQ);d(f,a,e[1]);b(c(a),aTR);var
h=e[2];function
i(a){return b(g,a)}j(ml,function(a){return b(f,a)},i,a,h);return b(c(a),aTS)});h(LZ,function(c,b,a){var
e=d(t4,c,b);return d(u(aTT),e,a)});h(ml,function(f,i,a,e){b(c(a),aTU);d(c(a),aTW,aTV);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aTX);b(c(a),aTY);d(c(a),aT0,aTZ);var
h=e[2];if(h){g(a,aT1);var
n=h[1],o=function(a,b){return g(a,aT2)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,aT3)}else
g(a,aT6);b(c(a),aT4);return b(c(a),aT5)});h(L0,function(c,b,a){var
e=d(ml,c,b);return d(u(aT7),e,a)});var
L1=[0,t4,LZ,ml,L0],mm=function
e(a,b,c,d){return e.fun(a,b,c,d)},L2=function
d(a,b,c){return d.fun(a,b,c)},mn=function
e(a,b,c,d){return e.fun(a,b,c,d)},L3=function
d(a,b,c){return d.fun(a,b,c)},mo=function
e(a,b,c,d){return e.fun(a,b,c,d)},L4=function
d(a,b,c){return d.fun(a,b,c)};h(mm,function(f,g,a,e){b(c(a),aT8);d(f,a,e[1]);b(c(a),aT9);var
h=e[2];function
i(a){return b(g,a)}j(mo,function(a){return b(f,a)},i,a,h);return b(c(a),aT_)});h(L2,function(c,b,a){var
e=d(mm,c,b);return d(u(aT$),e,a)});h(mn,function(f,e,a,d){if(0===d[0]){b(c(a),aUa);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(h3[1],i,h,a,g);return b(c(a),aUb)}b(c(a),aUc);var
k=d[1];function
l(a){return b(e,a)}j(mm,function(a){return b(f,a)},l,a,k);return b(c(a),aUd)});h(L3,function(c,b,a){var
e=d(mn,c,b);return d(u(aUe),e,a)});h(mo,function(g,f,a,e){b(c(a),aUf);d(c(a),aUh,aUg);var
h=e[1];function
i(a){return b(f,a)}j(mn,function(a){return b(g,a)},i,a,h);b(c(a),aUi);b(c(a),aUj);d(c(a),aUl,aUk);var
k=e[2];function
l(a){return b(f,a)}function
m(a){return b(g,a)}j(h3[1],m,l,a,k);b(c(a),aUm);return b(c(a),aUn)});h(L4,function(c,b,a){var
e=d(mo,c,b);return d(u(aUo),e,a)});var
L5=[0,mm,L2,mn,L3,mo,L4],jH=function
e(a,b,c,d){return e.fun(a,b,c,d)},L6=function
d(a,b,c){return d.fun(a,b,c)};h(jH,function(f,e,a,d){switch(d[0]){case
0:b(c(a),aUp);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(h3[1],i,h,a,g);return b(c(a),aUq);case
1:b(c(a),aUr);var
k=d[1],l=function(a){return b(e,a)},m=function(a){return b(f,a)};j(t0[1],m,l,a,k);return b(c(a),aUs);default:b(c(a),aUt);var
n=d[1],o=function(a){return b(e,a)},p=function(a){return b(f,a)};j(L5[1],p,o,a,n);return b(c(a),aUu)}});h(L6,function(c,b,a){var
e=d(jH,c,b);return d(u(aUv),e,a)});var
t5=function
e(a,b,c,d){return e.fun(a,b,c,d)},L7=function
d(a,b,c){return d.fun(a,b,c)},mp=function
e(a,b,c,d){return e.fun(a,b,c,d)},L8=function
d(a,b,c){return d.fun(a,b,c)},mq=function
e(a,b,c,d){return e.fun(a,b,c,d)},L9=function
d(a,b,c){return d.fun(a,b,c)};h(t5,function(f,g,a,e){b(c(a),aUw);d(f,a,e[1]);b(c(a),aUx);var
h=e[2];function
i(a){return b(g,a)}j(mq,function(a){return b(f,a)},i,a,h);return b(c(a),aUy)});h(L7,function(c,b,a){var
e=d(t5,c,b);return d(u(aUz),e,a)});h(mp,function(f,e,a,d){if(0===d[0]){b(c(a),aUA);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(LY[1],i,h,a,g);return b(c(a),aUB)}b(c(a),aUC);var
k=d[1];function
l(a){return b(e,a)}function
m(a){return b(f,a)}j(L1[1],m,l,a,k);return b(c(a),aUD)});h(L8,function(c,b,a){var
e=d(mp,c,b);return d(u(aUE),e,a)});h(mq,function(g,f,a,e){b(c(a),aUF);d(c(a),aUH,aUG);var
h=e[1];function
i(a){return b(f,a)}j(jH,function(a){return b(g,a)},i,a,h);b(c(a),aUI);b(c(a),aUJ);d(c(a),aUL,aUK);var
k=e[2];d(c(a),aUM,k);b(c(a),aUN);b(c(a),aUO);d(c(a),aUQ,aUP);var
l=e[3];b(c(a),aUR);var
m=0;T(function(e,d){if(e)b(c(a),aUS);function
h(a){return b(f,a)}j(mp,function(a){return b(g,a)},h,a,d);return 1},m,l);b(c(a),aUT);b(c(a),aUU);return b(c(a),aUV)});h(L9,function(c,b,a){var
e=d(mq,c,b);return d(u(aUW),e,a)});var
L_=[0,t5,L7,mp,L8,mq,L9],t6=function
e(a,b,c,d){return e.fun(a,b,c,d)},L$=function
d(a,b,c){return d.fun(a,b,c)},mr=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ma=function
d(a,b,c){return d.fun(a,b,c)};h(t6,function(f,g,a,e){b(c(a),aUX);d(f,a,e[1]);b(c(a),aUY);var
h=e[2];function
i(a){return b(g,a)}j(mr,function(a){return b(f,a)},i,a,h);return b(c(a),aUZ)});h(L$,function(c,b,a){var
e=d(t6,c,b);return d(u(aU0),e,a)});h(mr,function(g,f,a,e){b(c(a),aU1);d(c(a),aU3,aU2);var
h=e[1];function
i(a){return b(f,a)}j(jH,function(a){return b(g,a)},i,a,h);b(c(a),aU4);return b(c(a),aU5)});h(Ma,function(c,b,a){var
e=d(mr,c,b);return d(u(aU6),e,a)});var
Mb=[0,t6,L$,mr,Ma],t7=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mc=function
d(a,b,c){return d.fun(a,b,c)};h(t7,function(f,i,a,e){b(c(a),aU7);d(c(a),aU9,aU8);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),aU_);b(c(a),aU$);d(c(a),aVb,aVa);var
h=e[2];if(h){g(a,aVc);var
n=h[1],o=function(a,b){return g(a,aVd)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,aVe)}else
g(a,aVh);b(c(a),aVf);return b(c(a),aVg)});h(Mc,function(c,b,a){var
e=d(t7,c,b);return d(u(aVi),e,a)});var
Md=[0,t7,Mc],jI=function
e(a,b,c,d){return e.fun(a,b,c,d)},Me=function
d(a,b,c){return d.fun(a,b,c)},ms=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mf=function
d(a,b,c){return d.fun(a,b,c)},mt=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mg=function
d(a,b,c){return d.fun(a,b,c)},mu=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mh=function
d(a,b,c){return d.fun(a,b,c)};h(jI,function(f,g,a,e){b(c(a),aVj);d(f,a,e[1]);b(c(a),aVk);var
h=e[2];function
i(a){return b(g,a)}j(ms,function(a){return b(f,a)},i,a,h);return b(c(a),aVl)});h(Me,function(c,b,a){var
e=d(jI,c,b);return d(u(aVm),e,a)});h(ms,function(g,f,a,e){switch(e[0]){case
0:b(c(a),aVn);var
h=e[1],i=function(a){return b(f,a)};j(mt,function(a){return b(g,a)},i,a,h);return b(c(a),aVo);case
1:b(c(a),aVp);var
k=e[1],l=function(a){return b(f,a)};j(mu,function(a){return b(g,a)},l,a,k);return b(c(a),aVq);case
2:b(c(a),aVr);var
m=e[1],n=function(a){return b(f,a)},o=function(a){return b(g,a)};j(t2[1],o,n,a,m);return b(c(a),aVs);case
3:b(c(a),aVt);var
p=e[1],q=function(a){return b(f,a)},r=function(a){return b(g,a)};j(Md[1],r,q,a,p);return b(c(a),aVu);default:b(c(a),aVv);d(LT[1],a,e[1]);return b(c(a),aVw)}});h(Mf,function(c,b,a){var
e=d(ms,c,b);return d(u(aVx),e,a)});h(mt,function(e,h,a,f){b(c(a),aVy);d(c(a),aVA,aVz);var
m=f[1];function
n(a){return b(h,a)}function
o(a){return b(e,a)}j(L_[1],o,n,a,m);b(c(a),aVB);b(c(a),aVC);d(c(a),aVE,aVD);var
i=f[2];if(i){g(a,aVF);var
p=i[1],q=function(a){return b(h,a)},r=function(a){return b(e,a)};j(Mb[1],r,q,a,p);g(a,aVG)}else
g(a,aV1);b(c(a),aVH);b(c(a),aVI);d(c(a),aVK,aVJ);var
k=f[3];b(c(a),aVL);d(e,a,k[1]);b(c(a),aVM);b(c(a),aVN);var
s=k[2],t=0;T(function(f,d){if(f)b(c(a),aVO);function
g(a){return b(h,a)}j(jI,function(a){return b(e,a)},g,a,d);return 1},t,s);b(c(a),aVP);b(c(a),aVQ);b(c(a),aVR);b(c(a),aVS);d(c(a),aVU,aVT);var
l=f[4];if(l){g(a,aVV);var
u=l[1],v=function(a,b){return g(a,aVW)},w=function(a){return b(e,a)};j(I[1],w,v,a,u);g(a,aVX)}else
g(a,aV0);b(c(a),aVY);return b(c(a),aVZ)});h(Mg,function(c,b,a){var
e=d(mt,c,b);return d(u(aV2),e,a)});h(mu,function(e,k,a,f){b(c(a),aV3);d(c(a),aV5,aV4);d(e,a,f[1]);b(c(a),aV6);b(c(a),aV7);d(c(a),aV9,aV8);d(e,a,f[2]);b(c(a),aV_);b(c(a),aV$);d(c(a),aWb,aWa);var
h=f[3];b(c(a),aWc);d(e,a,h[1]);b(c(a),aWd);b(c(a),aWe);var
l=h[2],m=0;T(function(f,d){if(f)b(c(a),aWf);function
g(a){return b(k,a)}j(jI,function(a){return b(e,a)},g,a,d);return 1},m,l);b(c(a),aWg);b(c(a),aWh);b(c(a),aWi);b(c(a),aWj);d(c(a),aWl,aWk);var
i=f[4];if(i){g(a,aWm);var
n=i[1],o=function(a,b){return g(a,aWn)},p=function(a){return b(e,a)};j(I[1],p,o,a,n);g(a,aWo)}else
g(a,aWr);b(c(a),aWp);return b(c(a),aWq)});h(Mh,function(c,b,a){var
e=d(mu,c,b);return d(u(aWs),e,a)});be(aWt,rS,[0,h3,t0,t2,LT,LY,L1,L5,jH,L6,L_,Mb,Md,jI,Me,ms,Mf,mt,Mg,mu,Mh]);var
t8=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mi=function
d(a,b,c){return d.fun(a,b,c)},mv=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mj=function
d(a,b,c){return d.fun(a,b,c)};h(t8,function(f,g,a,e){b(c(a),aWu);d(f,a,e[1]);b(c(a),aWv);var
h=e[2];function
i(a){return b(g,a)}j(mv,function(a){return b(f,a)},i,a,h);return b(c(a),aWw)});h(Mi,function(c,b,a){var
e=d(t8,c,b);return d(u(aWx),e,a)});h(mv,function(f,i,a,e){b(c(a),aWy);d(c(a),aWA,aWz);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(cB[5],m,l,a,k);b(c(a),aWB);b(c(a),aWC);d(c(a),aWE,aWD);var
h=e[2];if(h){g(a,aWF);var
n=h[1],o=function(a,b){return g(a,aWG)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,aWH)}else
g(a,aWK);b(c(a),aWI);return b(c(a),aWJ)});h(Mj,function(c,b,a){var
e=d(mv,c,b);return d(u(aWL),e,a)});var
t9=[0,t8,Mi,mv,Mj],mw=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mk=function
d(a,b,c){return d.fun(a,b,c)},t_=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ml=function
d(a,b,c){return d.fun(a,b,c)},mx=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mm=function
d(a,b,c){return d.fun(a,b,c)};h(mw,function(f,g,a,e){switch(e[0]){case
0:var
h=e[1];b(c(a),aWM);b(c(a),aWN);d(f,a,h[1]);b(c(a),aWO);var
i=h[2],k=function(a){return b(f,a)};A(jD[2],k,a,i);b(c(a),aWP);return b(c(a),aWQ);case
1:b(c(a),aWR);var
l=e[1],m=function(a){return b(g,a)},n=function(a){return b(f,a)};j(av[1],n,m,a,l);return b(c(a),aWS);default:b(c(a),aWT);var
o=e[1],p=function(a){return b(g,a)},q=function(a){return b(f,a)};j(k6[1],q,p,a,o);return b(c(a),aWU)}});h(Mk,function(c,b,a){var
e=d(mw,c,b);return d(u(aWV),e,a)});h(t_,function(f,g,a,e){b(c(a),aWW);d(f,a,e[1]);b(c(a),aWX);var
h=e[2];function
i(a){return b(g,a)}j(mx,function(a){return b(f,a)},i,a,h);return b(c(a),aWY)});h(Ml,function(c,b,a){var
e=d(t_,c,b);return d(u(aWZ),e,a)});h(mx,function(h,f,a,e){b(c(a),aW0);d(c(a),aW2,aW1);var
k=e[1];function
l(a){return b(f,a)}j(mw,function(a){return b(h,a)},l,a,k);b(c(a),aW3);b(c(a),aW4);d(c(a),aW6,aW5);var
m=e[2];function
n(a){return b(f,a)}function
o(a){return b(h,a)}j(cB[5],o,n,a,m);b(c(a),aW7);b(c(a),aW8);d(c(a),aW_,aW9);var
i=e[3];if(i){g(a,aW$);var
p=i[1],q=function(a){return b(f,a)},r=function(a){return b(h,a)};j(ab[31],r,q,a,p);g(a,aXa)}else
g(a,aXi);b(c(a),aXb);b(c(a),aXc);d(c(a),aXe,aXd);var
s=e[4];d(c(a),aXf,s);b(c(a),aXg);return b(c(a),aXh)});h(Mm,function(c,b,a){var
e=d(mx,c,b);return d(u(aXj),e,a)});var
Mn=[0,mw,Mk,t_,Ml,mx,Mm],my=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mo=function
d(a,b,c){return d.fun(a,b,c)},t$=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mp=function
d(a,b,c){return d.fun(a,b,c)};h(my,function(f,e,a,d){if(0===d[0]){b(c(a),aXk);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(Mn[3],i,h,a,g);return b(c(a),aXl)}b(c(a),aXm);var
k=d[1];function
l(a){return b(e,a)}function
m(a){return b(f,a)}j(t9[1],m,l,a,k);return b(c(a),aXn)});h(Mo,function(c,b,a){var
e=d(my,c,b);return d(u(aXo),e,a)});h(t$,function(e,h,a,f){b(c(a),aXp);d(c(a),aXr,aXq);var
k=f[1];b(c(a),aXs);var
l=0;T(function(f,d){if(f)b(c(a),aXt);function
g(a){return b(h,a)}j(my,function(a){return b(e,a)},g,a,d);return 1},l,k);b(c(a),aXu);b(c(a),aXv);b(c(a),aXw);d(c(a),aXy,aXx);var
m=f[2];function
n(a){return b(h,a)}function
o(a){return b(e,a)}j(af[19],o,n,a,m);b(c(a),aXz);b(c(a),aXA);d(c(a),aXC,aXB);var
i=f[3];if(i){g(a,aXD);var
p=i[1],q=function(a,d){b(c(a),aXE);var
f=0;T(function(f,d){if(f)b(c(a),aXF);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),aXG)},r=function(a){return b(e,a)};j(I[1],r,q,a,p);g(a,aXH)}else
g(a,aXK);b(c(a),aXI);return b(c(a),aXJ)});h(Mp,function(c,b,a){var
e=d(t$,c,b);return d(u(aXL),e,a)});var
Mq=[0,Mn,my,Mo,t$,Mp],ua=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mr=function
d(a,b,c){return d.fun(a,b,c)},mz=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ms=function
d(a,b,c){return d.fun(a,b,c)};h(ua,function(f,g,a,e){b(c(a),aXM);d(f,a,e[1]);b(c(a),aXN);var
h=e[2];function
i(a){return b(g,a)}j(mz,function(a){return b(f,a)},i,a,h);return b(c(a),aXO)});h(Mr,function(c,b,a){var
e=d(ua,c,b);return d(u(aXP),e,a)});h(mz,function(h,f,a,e){b(c(a),aXQ);d(c(a),aXS,aXR);var
k=e[1];function
l(a){return b(f,a)}function
m(a){return b(h,a)}j(cB[5],m,l,a,k);b(c(a),aXT);b(c(a),aXU);d(c(a),aXW,aXV);var
i=e[2];if(i){g(a,aXX);var
n=i[1],o=function(a){return b(f,a)},p=function(a){return b(h,a)};j(ab[31],p,o,a,n);g(a,aXY)}else
g(a,aX1);b(c(a),aXZ);return b(c(a),aX0)});h(Ms,function(c,b,a){var
e=d(mz,c,b);return d(u(aX2),e,a)});var
Mt=[0,ua,Mr,mz,Ms],mA=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mu=function
d(a,b,c){return d.fun(a,b,c)},ub=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mv=function
d(a,b,c){return d.fun(a,b,c)};h(mA,function(f,g,a,e){switch(e[0]){case
0:b(c(a),aX3);var
h=e[1],i=function(a){return b(g,a)},k=function(a){return b(f,a)};j(Mt[1],k,i,a,h);return b(c(a),aX4);case
1:b(c(a),aX5);var
l=e[1],m=function(a){return b(g,a)},n=function(a){return b(f,a)};j(t9[1],n,m,a,l);return b(c(a),aX6);default:b(c(a),aX7);d(f,a,e[1]);return b(c(a),aX8)}});h(Mu,function(c,b,a){var
e=d(mA,c,b);return d(u(aX9),e,a)});h(ub,function(e,h,a,f){b(c(a),aX_);d(c(a),aYa,aX$);var
k=f[1];b(c(a),aYb);var
l=0;T(function(f,d){if(f)b(c(a),aYc);function
g(a){return b(h,a)}j(mA,function(a){return b(e,a)},g,a,d);return 1},l,k);b(c(a),aYd);b(c(a),aYe);b(c(a),aYf);d(c(a),aYh,aYg);var
m=f[2];function
n(a){return b(h,a)}function
o(a){return b(e,a)}j(af[19],o,n,a,m);b(c(a),aYi);b(c(a),aYj);d(c(a),aYl,aYk);var
i=f[3];if(i){g(a,aYm);var
p=i[1],q=function(a,d){b(c(a),aYn);var
f=0;T(function(f,d){if(f)b(c(a),aYo);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),aYp)},r=function(a){return b(e,a)};j(I[1],r,q,a,p);g(a,aYq)}else
g(a,aYt);b(c(a),aYr);return b(c(a),aYs)});h(Mv,function(c,b,a){var
e=d(ub,c,b);return d(u(aYu),e,a)});var
Mw=[0,Mt,mA,Mu,ub,Mv],uc=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mx=function
d(a,b,c){return d.fun(a,b,c)};h(uc,function(g,f,a,e){b(c(a),aYv);d(c(a),aYx,aYw);var
h=e[1];function
i(a){return b(f,a)}function
k(a){return b(g,a)}j(av[1],k,i,a,h);b(c(a),aYy);b(c(a),aYz);d(c(a),aYB,aYA);var
l=e[2];function
m(a){return b(f,a)}function
n(a){return b(g,a)}j(af[19],n,m,a,l);b(c(a),aYC);b(c(a),aYD);d(c(a),aYF,aYE);var
o=e[3];d(c(a),aYG,o);b(c(a),aYH);return b(c(a),aYI)});h(Mx,function(c,b,a){var
e=d(uc,c,b);return d(u(aYJ),e,a)});var
My=[0,uc,Mx],ud=function
e(a,b,c,d){return e.fun(a,b,c,d)},Mz=function
d(a,b,c){return d.fun(a,b,c)},mB=function
e(a,b,c,d){return e.fun(a,b,c,d)},MA=function
d(a,b,c){return d.fun(a,b,c)};h(ud,function(g,f,a,e){b(c(a),aYK);d(f,a,e[1]);b(c(a),aYL);var
h=e[2];function
i(a){return b(f,a)}j(mB,function(a){return b(g,a)},i,a,h);return b(c(a),aYM)});h(Mz,function(c,b,a){var
e=d(ud,c,b);return d(u(aYN),e,a)});h(mB,function(f,e,a,d){switch(d[0]){case
0:b(c(a),aYO);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(Mq[4],i,h,a,g);return b(c(a),aYP);case
1:b(c(a),aYQ);var
k=d[1],l=function(a){return b(e,a)},m=function(a){return b(f,a)};j(Mw[4],m,l,a,k);return b(c(a),aYR);case
2:b(c(a),aYS);var
n=d[1],o=function(a){return b(e,a)},p=function(a){return b(f,a)};j(My[1],p,o,a,n);return b(c(a),aYT);default:b(c(a),aYU);var
q=d[1],r=function(a){return b(e,a)},s=function(a){return b(f,a)};j(ab[31],s,r,a,q);return b(c(a),aYV)}});h(MA,function(c,b,a){var
e=d(mB,c,b);return d(u(aYW),e,a)});be(aYX,cB,[0,t9,Mq,Mw,My,ud,Mz,mB,MA]);var
ue=function
d(a,b,c){return d.fun(a,b,c)},MB=function
c(a,b){return c.fun(a,b)},mC=function
c(a,b){return c.fun(a,b)},MC=function
b(a){return b.fun(a)},mD=function
c(a,b){return c.fun(a,b)},MD=function
b(a){return b.fun(a)};h(ue,function(f,a,e){b(c(a),aYY);d(f,a,e[1]);b(c(a),aYZ);d(mD,a,e[2]);return b(c(a),aY0)});h(MB,function(c,a){var
e=b(ue,c);return d(u(aY1),e,a)});h(mC,function(a,b){return b?g(a,aY2):g(a,aY3)});h(MC,function(a){return d(u(aY4),mC,a)});h(mD,function(a,e){b(c(a),aY5);d(c(a),aY7,aY6);d(mC,a,e[1]);b(c(a),aY8);b(c(a),aY9);d(c(a),aY$,aY_);var
f=e[2];d(c(a),aZa,f);b(c(a),aZb);b(c(a),aZc);d(c(a),aZe,aZd);var
g=e[3];d(c(a),aZf,g);b(c(a),aZg);return b(c(a),aZh)});h(MD,function(a){return d(u(aZi),mD,a)});be(aZj,a9,[0,ue,MB,mC,MC,mD,MD]);var
uf=function
e(a,b,c,d){return e.fun(a,b,c,d)},ME=function
d(a,b,c){return d.fun(a,b,c)},mE=function
c(a,b){return c.fun(a,b)},MF=function
b(a){return b.fun(a)},mF=function
e(a,b,c,d){return e.fun(a,b,c,d)},MG=function
d(a,b,c){return d.fun(a,b,c)};h(uf,function(g,f,a,e){b(c(a),aZk);d(f,a,e[1]);b(c(a),aZl);var
h=e[2];function
i(a){return b(f,a)}j(mF,function(a){return b(g,a)},i,a,h);return b(c(a),aZm)});h(ME,function(c,b,a){var
e=d(uf,c,b);return d(u(aZn),e,a)});h(mE,function(a,b){switch(b){case
0:return g(a,aZo);case
1:return g(a,aZp);case
2:return g(a,aZq);default:return g(a,aZr)}});h(MF,function(a){return d(u(aZs),mE,a)});h(mF,function(f,h,a,e){b(c(a),aZt);d(c(a),aZv,aZu);d(mE,a,e[1]);b(c(a),aZw);b(c(a),aZx);d(c(a),aZz,aZy);var
l=e[2];function
m(a){return b(h,a)}function
n(a){return b(f,a)}j(ab[7][1][1],n,m,a,l);b(c(a),aZA);b(c(a),aZB);d(c(a),aZD,aZC);var
i=e[3];b(c(a),aZE);d(f,a,i[1]);b(c(a),aZF);var
o=i[2];function
p(a){return b(h,a)}function
q(a){return b(f,a)}j(hy[5],q,p,a,o);b(c(a),aZG);b(c(a),aZH);b(c(a),aZI);d(c(a),aZK,aZJ);var
r=e[4];d(c(a),aZL,r);b(c(a),aZM);b(c(a),aZN);d(c(a),aZP,aZO);var
s=e[5];b(c(a),aZQ);var
t=0;T(function(e,d){if(e)b(c(a),aZR);function
g(a){return b(h,a)}function
i(a){return b(f,a)}j(h1[7][1],i,g,a,d);return 1},t,s);b(c(a),aZS);b(c(a),aZT);b(c(a),aZU);d(c(a),aZW,aZV);var
k=e[6];if(k){g(a,aZX);var
u=k[1],v=function(a,b){return g(a,aZY)},w=function(a){return b(f,a)};j(I[1],w,v,a,u);g(a,aZZ)}else
g(a,aZ2);b(c(a),aZ0);return b(c(a),aZ1)});h(MG,function(c,b,a){var
e=d(mF,c,b);return d(u(aZ3),e,a)});var
MH=[0,uf,ME,mE,MF,mF,MG],ug=function
e(a,b,c,d){return e.fun(a,b,c,d)},MI=function
d(a,b,c){return d.fun(a,b,c)},mG=function
e(a,b,c,d){return e.fun(a,b,c,d)},MJ=function
d(a,b,c){return d.fun(a,b,c)},mH=function
e(a,b,c,d){return e.fun(a,b,c,d)},MK=function
d(a,b,c){return d.fun(a,b,c)};h(ug,function(g,f,a,e){b(c(a),aZ4);d(f,a,e[1]);b(c(a),aZ5);var
h=e[2];function
i(a){return b(f,a)}j(mG,function(a){return b(g,a)},i,a,h);return b(c(a),aZ6)});h(MI,function(c,b,a){var
e=d(ug,c,b);return d(u(aZ7),e,a)});h(mG,function(f,h,a,e){b(c(a),aZ8);d(c(a),aZ_,aZ9);var
l=e[1];function
m(a){return b(h,a)}function
n(a){return b(f,a)}j(ab[7][1][1],n,m,a,l);b(c(a),aZ$);b(c(a),a0a);d(c(a),a0c,a0b);var
o=e[2];function
p(a){return b(h,a)}j(mH,function(a){return b(f,a)},p,a,o);b(c(a),a0d);b(c(a),a0e);d(c(a),a0g,a0f);var
q=e[3];function
r(a){return b(h,a)}function
s(a){return b(f,a)}j(af[19],s,r,a,q);b(c(a),a0h);b(c(a),a0i);d(c(a),a0k,a0j);var
t=e[4];d(c(a),a0l,t);b(c(a),a0m);b(c(a),a0n);d(c(a),a0p,a0o);var
i=e[5];if(i){g(a,a0q);var
u=i[1],v=function(a){return b(f,a)};A(iE[1],v,a,u);g(a,a0r)}else
g(a,a0C);b(c(a),a0s);b(c(a),a0t);d(c(a),a0v,a0u);var
k=e[6];if(k){g(a,a0w);var
w=k[1],x=function(a,b){return g(a,a0x)},y=function(a){return b(f,a)};j(I[1],y,x,a,w);g(a,a0y)}else
g(a,a0B);b(c(a),a0z);return b(c(a),a0A)});h(MJ,function(c,b,a){var
e=d(mG,c,b);return d(u(a0D),e,a)});h(mH,function(f,e,a,d){if(typeof
d==="number")return d?g(a,a0E):g(a,a0F);b(c(a),a0G);var
h=d[1];function
i(a){return b(e,a)}function
k(a){return b(f,a)}j(ab[31],k,i,a,h);return b(c(a),a0H)});h(MK,function(c,b,a){var
e=d(mH,c,b);return d(u(a0I),e,a)});var
ML=[0,ug,MI,mG,MJ,mH,MK],uh=function
e(a,b,c,d){return e.fun(a,b,c,d)},MM=function
d(a,b,c){return d.fun(a,b,c)},mI=function
e(a,b,c,d){return e.fun(a,b,c,d)},MN=function
d(a,b,c){return d.fun(a,b,c)};h(uh,function(g,f,a,e){b(c(a),a0J);d(f,a,e[1]);b(c(a),a0K);var
h=e[2];function
i(a){return b(f,a)}j(mI,function(a){return b(g,a)},i,a,h);return b(c(a),a0L)});h(MM,function(c,b,a){var
e=d(uh,c,b);return d(u(a0M),e,a)});h(mI,function(f,h,a,e){b(c(a),a0N);d(c(a),a0P,a0O);var
l=e[1];function
m(a){return b(f,a)}A(k5[1],m,a,l);b(c(a),a0Q);b(c(a),a0R);d(c(a),a0T,a0S);var
n=e[2];function
o(a){return b(h,a)}function
p(a){return b(f,a)}j(h1[2][5],p,o,a,n);b(c(a),a0U);b(c(a),a0V);d(c(a),a0X,a0W);var
q=e[3];function
r(a){return b(h,a)}function
s(a){return b(f,a)}j(af[19],s,r,a,q);b(c(a),a0Y);b(c(a),a0Z);d(c(a),a01,a00);var
t=e[4];d(c(a),a02,t);b(c(a),a03);b(c(a),a04);d(c(a),a06,a05);var
i=e[5];if(i){g(a,a07);var
u=i[1],v=function(a){return b(f,a)};A(iE[1],v,a,u);g(a,a08)}else
g(a,a1h);b(c(a),a09);b(c(a),a0_);d(c(a),a1a,a0$);var
k=e[6];if(k){g(a,a1b);var
w=k[1],x=function(a,b){return g(a,a1c)},y=function(a){return b(f,a)};j(I[1],y,x,a,w);g(a,a1d)}else
g(a,a1g);b(c(a),a1e);return b(c(a),a1f)});h(MN,function(c,b,a){var
e=d(mI,c,b);return d(u(a1i),e,a)});var
MO=[0,uh,MM,mI,MN],ui=function
e(a,b,c,d){return e.fun(a,b,c,d)},MP=function
d(a,b,c){return d.fun(a,b,c)},mJ=function
e(a,b,c,d){return e.fun(a,b,c,d)},MQ=function
d(a,b,c){return d.fun(a,b,c)};h(ui,function(f,g,a,e){b(c(a),a1j);d(f,a,e[1]);b(c(a),a1k);var
h=e[2];function
i(a){return b(g,a)}j(mJ,function(a){return b(f,a)},i,a,h);return b(c(a),a1l)});h(MP,function(c,b,a){var
e=d(ui,c,b);return d(u(a1m),e,a)});h(mJ,function(f,h,a,e){b(c(a),a1n);d(c(a),a1p,a1o);var
l=e[1];function
m(a){return b(h,a)}function
n(a){return b(f,a)}j(ab[31],n,m,a,l);b(c(a),a1q);b(c(a),a1r);d(c(a),a1t,a1s);var
i=e[2];if(i){g(a,a1u);var
o=i[1],p=function(a){return b(h,a)},q=function(a){return b(f,a)};j(af[23][1],q,p,a,o);g(a,a1v)}else
g(a,a1G);b(c(a),a1w);b(c(a),a1x);d(c(a),a1z,a1y);var
k=e[3];if(k){g(a,a1A);var
r=k[1],s=function(a,b){return g(a,a1B)},t=function(a){return b(f,a)};j(I[1],t,s,a,r);g(a,a1C)}else
g(a,a1F);b(c(a),a1D);return b(c(a),a1E)});h(MQ,function(c,b,a){var
e=d(mJ,c,b);return d(u(a1H),e,a)});var
MR=[0,ui,MP,mJ,MQ],uj=function
e(a,b,c,d){return e.fun(a,b,c,d)},MS=function
d(a,b,c){return d.fun(a,b,c)},mK=function
e(a,b,c,d){return e.fun(a,b,c,d)},MT=function
d(a,b,c){return d.fun(a,b,c)};h(uj,function(f,g,a,e){b(c(a),a1I);d(f,a,e[1]);b(c(a),a1J);var
h=e[2];function
i(a){return b(g,a)}j(mK,function(a){return b(f,a)},i,a,h);return b(c(a),a1K)});h(MS,function(c,b,a){var
e=d(uj,c,b);return d(u(a1L),e,a)});h(mK,function(h,f,a,e){b(c(a),a1M);d(c(a),a1O,a1N);var
k=e[1];function
l(a){return b(f,a)}function
m(a){return b(h,a)}j(av[1],m,l,a,k);b(c(a),a1P);b(c(a),a1Q);d(c(a),a1S,a1R);var
i=e[2];if(i){g(a,a1T);var
n=i[1],o=function(a){return b(f,a)},p=function(a){return b(h,a)};j(af[23][1],p,o,a,n);g(a,a1U)}else
g(a,a1X);b(c(a),a1V);return b(c(a),a1W)});h(MT,function(c,b,a){var
e=d(mK,c,b);return d(u(a1Y),e,a)});var
MU=[0,uj,MS,mK,MT],uk=function
e(a,b,c,d){return e.fun(a,b,c,d)},MV=function
d(a,b,c){return d.fun(a,b,c)},mL=function
e(a,b,c,d){return e.fun(a,b,c,d)},MW=function
d(a,b,c){return d.fun(a,b,c)};h(uk,function(f,g,a,e){b(c(a),a1Z);d(f,a,e[1]);b(c(a),a10);var
h=e[2];function
i(a){return b(g,a)}j(mL,function(a){return b(f,a)},i,a,h);return b(c(a),a11)});h(MV,function(c,b,a){var
e=d(uk,c,b);return d(u(a12),e,a)});h(mL,function(f,i,a,e){b(c(a),a13);d(c(a),a15,a14);var
k=e[1];b(c(a),a16);var
l=0;T(function(e,d){if(e)b(c(a),a17);function
g(a){return b(i,a)}function
h(a){return b(f,a)}j(MU[1],h,g,a,d);return 1},l,k);b(c(a),a18);b(c(a),a19);b(c(a),a1_);d(c(a),a2a,a1$);var
h=e[2];if(h){g(a,a2b);var
m=h[1],n=function(a,b){return g(a,a2c)},o=function(a){return b(f,a)};j(I[1],o,n,a,m);g(a,a2d)}else
g(a,a2g);b(c(a),a2e);return b(c(a),a2f)});h(MW,function(c,b,a){var
e=d(mL,c,b);return d(u(a2h),e,a)});var
MX=[0,MU,uk,MV,mL,MW],ul=function
e(a,b,c,d){return e.fun(a,b,c,d)},MY=function
d(a,b,c){return d.fun(a,b,c)},mM=function
e(a,b,c,d){return e.fun(a,b,c,d)},MZ=function
d(a,b,c){return d.fun(a,b,c)},mN=function
e(a,b,c,d){return e.fun(a,b,c,d)},M0=function
d(a,b,c){return d.fun(a,b,c)};h(ul,function(f,g,a,e){b(c(a),a2i);d(f,a,e[1]);b(c(a),a2j);var
h=e[2];function
i(a){return b(g,a)}j(mM,function(a){return b(f,a)},i,a,h);return b(c(a),a2k)});h(MY,function(c,b,a){var
e=d(ul,c,b);return d(u(a2l),e,a)});h(mM,function(f,i,a,e){b(c(a),a2m);d(c(a),a2o,a2n);var
k=e[1];b(c(a),a2p);var
l=0;T(function(e,d){if(e)b(c(a),a2q);function
g(a){return b(i,a)}j(mN,function(a){return b(f,a)},g,a,d);return 1},l,k);b(c(a),a2r);b(c(a),a2s);b(c(a),a2t);d(c(a),a2v,a2u);var
h=e[2];if(h){g(a,a2w);var
m=h[1],n=function(a,b){return g(a,a2x)},o=function(a){return b(f,a)};j(I[1],o,n,a,m);g(a,a2y)}else
g(a,a2B);b(c(a),a2z);return b(c(a),a2A)});h(MZ,function(c,b,a){var
e=d(mM,c,b);return d(u(a2C),e,a)});h(mN,function(f,e,a,d){switch(d[0]){case
0:b(c(a),a2D);var
g=d[1],h=function(a){return b(e,a)},i=function(a){return b(f,a)};j(MH[1],i,h,a,g);return b(c(a),a2E);case
1:b(c(a),a2F);var
k=d[1],l=function(a){return b(e,a)},m=function(a){return b(f,a)};j(ML[1],m,l,a,k);return b(c(a),a2G);default:b(c(a),a2H);var
n=d[1],o=function(a){return b(e,a)},p=function(a){return b(f,a)};j(MO[1],p,o,a,n);return b(c(a),a2I)}});h(M0,function(c,b,a){var
e=d(mN,c,b);return d(u(a2J),e,a)});var
um=function
e(a,b,c,d){return e.fun(a,b,c,d)},M1=function
d(a,b,c){return d.fun(a,b,c)},mO=function
e(a,b,c,d){return e.fun(a,b,c,d)},M2=function
d(a,b,c){return d.fun(a,b,c)},a2K=[0,ul,MY,mM,MZ,mN,M0];h(um,function(f,g,a,e){b(c(a),a2L);d(f,a,e[1]);b(c(a),a2M);var
h=e[2];function
i(a){return b(g,a)}j(mO,function(a){return b(f,a)},i,a,h);return b(c(a),a2N)});h(M1,function(c,b,a){var
e=d(um,c,b);return d(u(a2O),e,a)});h(mO,function(f,i,a,e){b(c(a),a2P);d(c(a),a2R,a2Q);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(ab[31],m,l,a,k);b(c(a),a2S);b(c(a),a2T);d(c(a),a2V,a2U);var
h=e[2];if(h){g(a,a2W);var
n=h[1],o=function(a,b){return g(a,a2X)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,a2Y)}else
g(a,a21);b(c(a),a2Z);return b(c(a),a20)});h(M2,function(c,b,a){var
e=d(mO,c,b);return d(u(a22),e,a)});var
M3=[0,um,M1,mO,M2],un=function
e(a,b,c,d){return e.fun(a,b,c,d)},M4=function
d(a,b,c){return d.fun(a,b,c)};h(un,function(f,h,a,e){b(c(a),a23);d(c(a),a25,a24);var
i=e[1];if(i){g(a,a26);var
o=i[1],p=function(a){return b(h,a)},q=function(a){return b(f,a)};j(av[1],q,p,a,o);g(a,a27)}else
g(a,a3M);b(c(a),a28);b(c(a),a29);d(c(a),a2$,a2_);var
r=e[2];function
s(a){return b(h,a)}function
t(a){return b(f,a)}j(h1[6][1],t,s,a,r);b(c(a),a3a);b(c(a),a3b);d(c(a),a3d,a3c);var
k=e[3];if(k){g(a,a3e);var
u=k[1],v=function(a){return b(h,a)},w=function(a){return b(f,a)};j(af[22][1],w,v,a,u);g(a,a3f)}else
g(a,a3L);b(c(a),a3g);b(c(a),a3h);d(c(a),a3j,a3i);var
l=e[4];if(l){g(a,a3k);var
x=l[1],y=function(a){return b(h,a)},z=function(a){return b(f,a)};j(MR[1],z,y,a,x);g(a,a3l)}else
g(a,a3K);b(c(a),a3m);b(c(a),a3n);d(c(a),a3p,a3o);var
m=e[5];if(m){g(a,a3q);var
A=m[1],B=function(a){return b(h,a)},C=function(a){return b(f,a)};j(MX[2],C,B,a,A);g(a,a3r)}else
g(a,a3J);b(c(a),a3s);b(c(a),a3t);d(c(a),a3v,a3u);var
D=e[6];b(c(a),a3w);var
E=0;T(function(e,d){if(e)b(c(a),a3x);function
g(a){return b(h,a)}function
i(a){return b(f,a)}j(M3[1],i,g,a,d);return 1},E,D);b(c(a),a3y);b(c(a),a3z);b(c(a),a3A);d(c(a),a3C,a3B);var
n=e[7];if(n){g(a,a3D);var
F=n[1],G=function(a,b){return g(a,a3E)},H=function(a){return b(f,a)};j(I[1],H,G,a,F);g(a,a3F)}else
g(a,a3I);b(c(a),a3G);return b(c(a),a3H)});h(M4,function(c,b,a){var
e=d(un,c,b);return d(u(a3N),e,a)});be(a3O,h1,[0,MH,ML,MO,MR,MX,a2K,M3,un,M4]);var
uo=function
e(a,b,c,d){return e.fun(a,b,c,d)},M5=function
d(a,b,c){return d.fun(a,b,c)},mP=function
e(a,b,c,d){return e.fun(a,b,c,d)},M6=function
d(a,b,c){return d.fun(a,b,c)};h(uo,function(f,g,a,e){b(c(a),a3P);d(f,a,e[1]);b(c(a),a3Q);var
h=e[2];function
i(a){return b(g,a)}j(mP,function(a){return b(f,a)},i,a,h);return b(c(a),a3R)});h(M5,function(c,b,a){var
e=d(uo,c,b);return d(u(a3S),e,a)});h(mP,function(f,i,a,e){b(c(a),a3T);d(c(a),a3V,a3U);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(cB[5],m,l,a,k);b(c(a),a3W);b(c(a),a3X);d(c(a),a3Z,a3Y);var
h=e[2];if(h){g(a,a30);var
n=h[1],o=function(a,b){return g(a,a31)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,a32)}else
g(a,a35);b(c(a),a33);return b(c(a),a34)});h(M6,function(c,b,a){var
e=d(mP,c,b);return d(u(a36),e,a)});var
M7=[0,uo,M5,mP,M6],up=function
e(a,b,c,d){return e.fun(a,b,c,d)},M8=function
d(a,b,c){return d.fun(a,b,c)},mQ=function
e(a,b,c,d){return e.fun(a,b,c,d)},M9=function
d(a,b,c){return d.fun(a,b,c)};h(up,function(f,g,a,e){b(c(a),a37);d(f,a,e[1]);b(c(a),a38);var
h=e[2];function
i(a){return b(g,a)}j(mQ,function(a){return b(f,a)},i,a,h);return b(c(a),a39)});h(M8,function(c,b,a){var
e=d(up,c,b);return d(u(a3_),e,a)});h(mQ,function(h,f,a,e){b(c(a),a3$);d(c(a),a4b,a4a);var
k=e[1];function
l(a){return b(f,a)}function
m(a){return b(h,a)}j(cB[5],m,l,a,k);b(c(a),a4c);b(c(a),a4d);d(c(a),a4f,a4e);var
i=e[2];if(i){g(a,a4g);var
n=i[1],o=function(a){return b(f,a)},p=function(a){return b(h,a)};j(ab[31],p,o,a,n);g(a,a4h)}else
g(a,a4k);b(c(a),a4i);return b(c(a),a4j)});h(M9,function(c,b,a){var
e=d(mQ,c,b);return d(u(a4l),e,a)});var
M_=[0,up,M8,mQ,M9],uq=function
e(a,b,c,d){return e.fun(a,b,c,d)},M$=function
d(a,b,c){return d.fun(a,b,c)},mR=function
e(a,b,c,d){return e.fun(a,b,c,d)},Na=function
d(a,b,c){return d.fun(a,b,c)};h(uq,function(f,g,a,e){b(c(a),a4m);d(f,a,e[1]);b(c(a),a4n);var
h=e[2];function
i(a){return b(g,a)}j(mR,function(a){return b(f,a)},i,a,h);return b(c(a),a4o)});h(M$,function(c,b,a){var
e=d(uq,c,b);return d(u(a4p),e,a)});h(mR,function(f,i,a,e){b(c(a),a4q);d(c(a),a4s,a4r);var
k=e[1];function
l(a){return b(i,a)}function
m(a){return b(f,a)}j(af[17],m,l,a,k);b(c(a),a4t);b(c(a),a4u);d(c(a),a4w,a4v);var
h=e[2];if(h){g(a,a4x);var
n=h[1],o=function(a,b){return g(a,a4y)},p=function(a){return b(f,a)};j(I[1],p,o,a,n);g(a,a4z)}else
g(a,a4C);b(c(a),a4A);return b(c(a),a4B)});h(Na,function(c,b,a){var
e=d(mR,c,b);return d(u(a4D),e,a)});var
Nb=[0,uq,M$,mR,Na],ur=function
e(a,b,c,d){return e.fun(a,b,c,d)},Nc=function
d(a,b,c){return d.fun(a,b,c)},mS=function
e(a,b,c,d){return e.fun(a,b,c,d)},Nd=function
d(a,b,c){return d.fun(a,b,c)};h(ur,function(f,g,a,e){b(c(a),a4E);d(f,a,e[1]);b(c(a),a4F);var
h=e[2];function
i(a){return b(g,a)}j(mS,function(a){return b(f,a)},i,a,h);return b(c(a),a4G)});h(Nc,function(c,b,a){var
e=d(ur,c,b);return d(u(a4H),e,a)});h(mS,function(e,h,a,f){b(c(a),a4I);d(c(a),a4K,a4J);var
i=f[1];if(i){g(a,a4L);var
m=i[1],n=function(a){return b(h,a)},o=function(a){return b(e,a)};j(Nb[1],o,n,a,m);g(a,a4M)}else
g(a,a5b);b(c(a),a4N);b(c(a),a4O);d(c(a),a4Q,a4P);var
p=f[2];b(c(a),a4R);var
q=0;T(function(f,d){if(f)b(c(a),a4S);function
g(a){return b(h,a)}function
i(a){return b(e,a)}j(M_[1],i,g,a,d);return 1},q,p);b(c(a),a4T);b(c(a),a4U);b(c(a),a4V);d(c(a),a4X,a4W);var
k=f[3];if(k){g(a,a4Y);var
r=k[1],s=function(a){return b(h,a)},t=function(a){return b(e,a)};j(M7[1],t,s,a,r);g(a,a4Z)}else
g(a,a5a);b(c(a),a40);b(c(a),a41);d(c(a),a43,a42);var
l=f[4];if(l){g(a,a44);var
u=l[1],v=function(a,d){b(c(a),a45);var
f=0;T(function(f,d){if(f)b(c(a),a46);function
g(a){return b(e,a)}A(a9[1],g,a,d);return 1},f,d);return b(c(a),a47)},w=function(a){return b(e,a)};j(I[1],w,v,a,u);g(a,a48)}else
g(a,a4$);b(c(a),a49);return b(c(a),a4_)});h(Nd,function(c,b,a){var
e=d(mS,c,b);return d(u(a5c),e,a)});var
Ne=[0,ur,Nc,mS,Nd],us=function
e(a,b,c,d){return e.fun(a,b,c,d)},Nf=function
d(a,b,c){return d.fun(a,b,c)},mT=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ng=function
d(a,b,c){return d.fun(a,b,c)};h(us,function(f,h,a,e){b(c(a),a5d);d(c(a),a5f,a5e);var
i=e[1];if(i){g(a,a5g);var
n=i[1],o=function(a){return b(h,a)},p=function(a){return b(f,a)};j(av[1],p,o,a,n);g(a,a5h)}else
g(a,a56);b(c(a),a5i);b(c(a),a5j);d(c(a),a5l,a5k);var
q=e[2];function
r(a){return b(h,a)}function
s(a){return b(f,a)}j(Ne[1],s,r,a,q);b(c(a),a5m);b(c(a),a5n);d(c(a),a5p,a5o);var
t=e[3];function
u(a){return b(h,a)}j(mT,function(a){return b(f,a)},u,a,t);b(c(a),a5q);b(c(a),a5r);d(c(a),a5t,a5s);var
v=e[4];d(c(a),a5u,v);b(c(a),a5v);b(c(a),a5w);d(c(a),a5y,a5x);var
w=e[5];d(c(a),a5z,w);b(c(a),a5A);b(c(a),a5B);d(c(a),a5D,a5C);var
k=e[6];if(k){g(a,a5E);var
x=k[1],y=function(a){return b(h,a)},z=function(a){return b(f,a)};j(af[24][1],z,y,a,x);g(a,a5F)}else
g(a,a55);b(c(a),a5G);b(c(a),a5H);d(c(a),a5J,a5I);var
A=e[7];function
B(a){return b(h,a)}function
C(a){return b(f,a)}j(af[19],C,B,a,A);b(c(a),a5K);b(c(a),a5L);d(c(a),a5N,a5M);var
l=e[8];if(l){g(a,a5O);var
D=l[1],E=function(a){return b(h,a)},F=function(a){return b(f,a)};j(af[22][1],F,E,a,D);g(a,a5P)}else
g(a,a54);b(c(a),a5Q);b(c(a),a5R);d(c(a),a5T,a5S);var
m=e[9];if(m){g(a,a5U);var
G=m[1],H=function(a,b){return g(a,a5V)},J=function(a){return b(f,a)};j(I[1],J,H,a,G);g(a,a5W)}else
g(a,a53);b(c(a),a5X);b(c(a),a5Y);d(c(a),a50,a5Z);d(f,a,e[10]);b(c(a),a51);return b(c(a),a52)});h(Nf,function(c,b,a){var
e=d(us,c,b);return d(u(a57),e,a)});h(mT,function(f,g,a,e){if(0===e[0]){var
h=e[1];b(c(a),a58);b(c(a),a59);d(f,a,h[1]);b(c(a),a5_);var
i=h[2],k=function(a){return b(g,a)},l=function(a){return b(f,a)};j(bF[1][1],l,k,a,i);b(c(a),a5$);return b(c(a),a6a)}b(c(a),a6b);var
m=e[1];function
n(a){return b(g,a)}function
o(a){return b(f,a)}j(ab[31],o,n,a,m);return b(c(a),a6c)});h(Ng,function(c,b,a){var
e=d(mT,c,b);return d(u(a6d),e,a)});be(a6e,hy,[0,M7,M_,Nb,Ne,us,Nf,mT,Ng]);var
ut=function
e(a,b,c,d){return e.fun(a,b,c,d)},Nh=function
d(a,b,c){return d.fun(a,b,c)},mU=function
e(a,b,c,d){return e.fun(a,b,c,d)},Ni=function
d(a,b,c){return d.fun(a,b,c)};h(ut,function(f,g,a,e){b(c(a),a6f);d(f,a,e[1]);b(c(a),a6g);var
h=e[2];function
i(a){return b(g,a)}j(mU,function(a){return b(f,a)},i,a,h);return b(c(a),a6h)});h(Nh,function(c,b,a){var
e=d(ut,c,b);return d(u(a6i),e,a)});h(mU,function(f,i,a,e){b(c(a),a6j);d(c(a),a6l,a6k);var
k=e[1];b(c(a),a6m);var
l=0;T(function(e,d){if(e)b(c(a),a6n);function
g(a){return b(i,a)}function
h(a){return b(f,a)}j(bF[35],h,g,a,d);return 1},l,k);b(c(a),a6o);b(c(a),a6p);b(c(a),a6q);d(c(a),a6s,a6r);var
h=e[2];if(h){g(a,a6t);var
m=h[1],n=function(a,b){return g(a,a6u)},o=function(a){return b(f,a)};j(I[1],o,n,a,m);g(a,a6v)}else
g(a,a6F);b(c(a),a6w);b(c(a),a6x);d(c(a),a6z,a6y);var
p=e[3];b(c(a),a6A);var
q=0;T(function(e,d){if(e)b(c(a),a6B);function
g(a){return b(f,a)}A(a9[1],g,a,d);return 1},q,p);b(c(a),a6C);b(c(a),a6D);return b(c(a),a6E)});h(Ni,function(c,b,a){var
e=d(mU,c,b);return d(u(a6G),e,a)});be(a6H,XY,[0,ut,Nh,mU,Ni]);function
ae(e,a){if(a){var
c=a[1],d=b(e,c);return c===d?a:[0,d]}return a}function
P(h,g,a,f,e){var
c=d(h,g,a);return a===c?f:b(e,c)}function
O(f,a,e,d){var
c=b(f,a);return a===c?e:b(d,c)}function
bf(c,a){var
b=a[1];function
d(a){return[0,b,a]}return P(c,b,a[2],a,d)}function
aw(e,a){var
c=T(function(c,a){var
d=b(e,a),f=c[2],g=f||(d!==a?1:0);return[0,[0,d,c[1]],g]},a6J,a);return c[2]?U(c[1]):a}var
uu=k1(a6U,function(Q){var
a=rH(Q,a6I),aD=a[1],aE=a[2],aF=a[3],q=a[4],aG=a[5],aH=a[6],aI=a[7],v=a[8],aJ=a[9],aK=a[10],aL=a[11],aM=a[12],aN=a[13],aO=a[14],aQ=a[15],R=a[16],j=a[17],aR=a[18],B=a[19],S=a[20],aS=a[21],C=a[22],k=a[23],l=a[24],E=a[25],f=a[26],aT=a[27],aU=a[28],aV=a[29],aW=a[30],aX=a[31],aY=a[32],V=a[33],aZ=a[34],c=a[35],a0=a[36],a1=a[37],a4=a[38],a5=a[39],a6=a[40],F=a[41],a8=a[42],h=a[43],a9=a[44],W=a[45],a_=a[46],a$=a[47],G=a[49],r=a[50],X=a[51],ba=a[52],bb=a[53],bc=a[54],bd=a[55],be=a[56],bg=a[57],bh=a[58],bi=a[59],bj=a[60],bk=a[61],i=a[62],bl=a[63],bm=a[65],bn=a[66],bo=a[67],bp=a[68],bq=a[69],m=a[70],br=a[71],bs=a[72],bt=a[73],H=a[74],bu=a[75],bv=a[76],w=a[77],bw=a[78],bx=a[79],by=a[80],bz=a[81],bA=a[82],bB=a[83],bC=a[84],n=a[85],bD=a[86],bE=a[87],bF=a[88],bG=a[89],bH=a[90],bI=a[91],bJ=a[92],bK=a[93],bL=a[94],bM=a[95],bN=a[96],bO=a[97],bP=a[98],Y=a[99],bQ=a[cA],x=a[cm],bR=a[cX],I=a[b8],bS=a[ci],bT=a[cl],bU=a[a2],bV=a[hn],Z=a[hl],bW=a[je],bX=a[a3],_=a[eV],s=a[cr],$=a[au],aa=a[hP],bY=a[io],bZ=a[ip],ab=a[kl],ac=a[ke],ad=a[jf],b0=a[e4],af=a[kv],b1=a[aP],b2=a[hm],b3=a[kG],b4=a[D],b5=a[Ql],b6=a[aC],b7=a[a7],b9=a[Qb],b_=a[Ff],b$=a[wq],ca=a[Qx],J=a[133],ag=a[134],cb=a[135],cc=a[Qv],cd=a[137],ce=a[Sw],cf=a[139],cg=a[RO],ch=a[141],cj=a[142],ck=a[143],g=a[Ph],t=a[145],cn=a[146],ah=a[Se],co=a[148],y=a[QK],cp=a[150],cq=a[151],cs=a[152],ct=a[153],cu=a[QA],ai=a[155],aj=a[156],cv=a[157],ak=a[158],u=a[159],cw=a[R_],cx=a[RT],cy=a[Db],cz=a[SS],K=a[zf],cB=a[Rs],cC=a[R3],cD=a[y4],cE=a[Rg],cF=a[Rx],cG=a[zo],cH=a[BH],cI=a[PX],cJ=a[Qf],cK=a[SD],cL=a[Qt],cM=a[R0],cN=a[P9],e=a[A8],al=a[R2],cO=a[P4],cP=a[AE],cQ=a[ws],cR=a[zG],cS=a[FD],cT=a[P0],cU=a[xB],cV=a[xc],cW=a[Rp],cY=a[Si],z=a[Qd],am=a[RB],cZ=a[i3],c0=a[Bd],c1=a[vH],c2=a[Qh],c3=a[Rt],c4=a[Rl],an=a[QF],c5=a[PH],c7=a[PY],c8=a[Rn],c9=a[QJ],ao=a[P_],c_=a[Pw],c$=a[PI],ap=a[PM],da=a[Sf],db=a[Sx],dc=a[Ew],aq=a[qg],dd=a[RW],L=a[Po],ar=a[Rw],de=a[y8],df=a[Eh],dg=a[nJ],dh=a[nA],as=a[w7],at=a[QS],di=a[ys],dj=a[Qi],dk=a[Ry],av=a[n_],dl=a[jg],dm=a[vJ],ax=a[CN],dn=a[Sn],dp=a[Q4],dq=a[QU],az=a[xR],dr=a[Pz],aA=a[y$],aB=a[y5],ds=a[QI],dt=a[PT],p=a[yT],o=a[Re],M=a[QG],du=a[nN],dv=a[i_],N=a[x4],dw=a[Ed],dx=a[SC],dy=a[p0],dz=a[Q_],dA=a[kd],dB=a[48],dC=a[64];function
dD(f,k,a){var
g=a[2],h=a[1],i=ae(b(f[1][1+e],f),h),j=d(f[1][1+c],f,g);if(g===j&&h===i)return a;return[0,i,j,a[3],a[4]]}function
dE(a,q,e){var
g=e[4],h=e[3],i=e[2],k=e[1],l=d(a[1][1+o],a,k),m=ae(b(a[1][1+j],a),i),n=d(a[1][1+f],a,h),p=d(a[1][1+c],a,g);if(k===l&&h===n&&i===m&&g===p)return e;return[0,l,m,n,p]}function
dF(a,m,b){var
f=b[3],g=b[2],i=b[1],j=d(a[1][1+e],a,i),k=d(a[1][1+h],a,g),l=d(a[1][1+c],a,f);if(i===j&&g===k&&f===l)return b;return[0,j,k,l]}function
dG(a,l,b){var
e=b[3],f=b[2],g=b[1],i=d(a[1][1+r],a,g),j=d(a[1][1+h],a,f),k=d(a[1][1+c],a,e);if(g===i&&f===j&&e===k)return b;return[0,i,j,k]}function
dH(a,j,c){var
d=c[2],f=d[2],g=d[1],h=A(a[1][1+aH],a,j,g),i=ae(b(a[1][1+e],a),f);if(g===h&&f===i)return c;return[0,c[1],[0,h,i]]}function
dI(b,j,a){var
e=a[3],f=a[2],g=a[1],h=aw(d(b[1][1+aI],b,f),g),i=d(b[1][1+c],b,e);if(g===h&&e===i)return a;return[0,h,f,i]}function
dJ(b,j,a){var
f=a[4],g=a[2],h=d(b[1][1+e],b,g),i=d(b[1][1+c],b,f);if(g===h&&f===i)return a;return[0,a[1],h,a[3],i]}function
dK(b,j,a){var
f=a[3],g=a[2],h=d(b[1][1+e],b,g),i=d(b[1][1+c],b,f);if(g===h&&f===i)return a;return[0,a[1],h,i]}function
dL(a,m,b){var
f=b[3],g=b[2],h=b[1],i=d(a[1][1+e],a,h),j=d(a[1][1+l],a,g),k=d(a[1][1+c],a,f);if(i===h&&j===g&&k===f)return b;return[0,i,j,k]}function
dM(a,w,e){var
j=e[4],f=e[3],g=e[2],k=e[1],l=bf(b(a[1][1+p],a),k);if(g)var
m=g[1],n=m[1],s=function(a){return[0,[0,n,a]]},t=m[2],h=P(b(a[1][1+dp],a),n,t,g,s);else
var
h=g;if(f)var
o=f[1],q=o[1],u=function(a){return[0,[0,q,a]]},v=o[2],i=P(b(a[1][1+p],a),q,v,f,u);else
var
i=f;var
r=d(a[1][1+c],a,j);if(k===l&&g===h&&f===i&&j===r)return e;return[0,l,h,i,r]}function
dN(a,j,b){var
f=b[2],g=b[1],h=d(a[1][1+e],a,g),i=d(a[1][1+c],a,f);if(g===h&&f===i)return b;return[0,h,i]}function
dO(b,g,a){var
e=a[1],f=d(b[1][1+c],b,e);return e===f?a:[0,f]}function
dP(b,a){return a}function
dQ(a,m,f){var
g=f[3],h=f[2],i=f[1],j=aw(b(a[1][1+aY],a),i),k=aw(b(a[1][1+e],a),h),l=d(a[1][1+c],a,g);if(i===j&&h===k&&g===l)return f;return[0,j,k,l]}function
dR(a,m,f){var
g=f[3],h=f[2],i=f[1],j=d(a[1][1+e],a,i),k=bf(b(a[1][1+V],a),h),l=d(a[1][1+c],a,g);if(i===j&&h===k&&g===l)return f;return[0,j,k,l]}function
dS(a,f){var
g=f[2],h=g[3],i=g[2],j=g[1],k=ae(b(a[1][1+e],a),j),l=d(a[1][1+F],a,i),m=d(a[1][1+c],a,h);if(j===k&&i===l&&h===m)return f;return[0,f[1],[0,k,l,m]]}function
dT(a,m,f){var
g=f[3],h=f[2],i=f[1],j=d(a[1][1+e],a,i),k=aw(b(a[1][1+a1],a),h),l=d(a[1][1+c],a,g);if(i===j&&h===k&&g===l)return f;return[0,j,k,l,f[4]]}function
dU(b,g,a){var
e=a[1],f=d(b[1][1+c],b,e);return e===f?a:[0,f]}function
dV(a,b){var
f=b[2],g=f[2],h=f[1],i=d(a[1][1+e],a,h),j=d(a[1][1+c],a,g);if(h===i&&g===j)return b;return[0,b[1],[0,i,j]]}function
dW(a,b){var
f=b[2],g=f[2],h=f[1],i=d(a[1][1+e],a,h),j=d(a[1][1+c],a,g);if(h===i&&g===j)return b;return[0,b[1],[0,i,j]]}function
dX(a,b){return[0,d(a[1][1+h],a,b),0]}function
dY(d,c){var
i=b(d[1][1+a8],d),a=T(function(e,d){var
c=e[1],a=b(i,d);if(a){if(a[2])return[0,c6(a,c),1];var
f=a[1],g=e[2],h=g||(d!==f?1:0);return[0,[0,f,c],h]}return[0,c,1]},a6K,c);return a[2]?U(a[1]):c}function
dZ(a,b){return d(a[1][1+F],a,b)}function
d0(a,k,f){var
g=f[2],h=f[1],i=aw(b(a[1][1+e],a),h),j=d(a[1][1+c],a,g);if(h===i&&g===j)return f;return[0,i,j]}function
d1(f,k,a){var
g=a[2],h=a[1],i=ae(b(f[1][1+e],f),h),j=d(f[1][1+c],f,g);if(h===i&&g===j)return a;return[0,i,j,a[3]]}function
d2(a,b){var
e=b[2],f=e[2],g=e[1],h=d(a[1][1+aj],a,g),i=d(a[1][1+c],a,f);if(g===h&&f===i)return b;return[0,b[1],[0,h,i]]}function
d3(a,b){return d(a[1][1+e],a,b)}function
d4(f,g){var
i=g[2],j=i[2],a=i[1];if(a)var
l=function(a){return[0,a]},m=a[1],h=O(b(f[1][1+e],f),m,a,l);else
var
h=a;var
k=d(f[1][1+c],f,j);if(a===h&&j===k)return g;return[0,g[1],[0,h,k]]}function
d5(a,b){return d(a[1][1+e],a,b)}function
d6(a,c,b){return A(a[1][1+m],a,c,b)}function
d7(a,c,b){return A(a[1][1+m],a,c,b)}function
d8(a,j,b){var
e=b[2],f=e[2],g=e[1],h=A(a[1][1+bm],a,j,g),i=d(a[1][1+c],a,f);if(h===g&&f===i)return b;return[0,b[1],[0,h,i]]}function
d9(a,c,b){return A(a[1][1+m],a,c,b)}function
d_(a,j,c){var
d=c[2],f=d[2],g=d[1],h=A(a[1][1+bo],a,j,g),i=ae(b(a[1][1+e],a),f);if(g===h&&f===i)return c;return[0,c[1],[0,h,i]]}function
d$(b,c,a){switch(a[0]){case
0:var
e=function(a){return[0,a]},f=a[1];return O(d(b[1][1+bp],b,c),f,a,e);case
1:var
g=function(a){return[1,a]},h=a[1];return O(d(b[1][1+bn],b,c),h,a,g);default:return a}}function
ea(a,c,b){return A(a[1][1+m],a,c,b)}function
eb(a,c,b){return A(a[1][1+m],a,c,b)}function
ec(a,j,b){var
e=b[2],f=e[2],g=e[1],h=A(a[1][1+ba],a,j,g),i=d(a[1][1+c],a,f);if(h===g&&f===i)return b;return[0,b[1],[0,h,i]]}function
ed(a,c,b){return d(a[1][1+aq],a,b)}function
ee(a,c,b){return A(a[1][1+i],a,c,b)}function
ef(b,e,a){var
c=a[1];function
f(a){return[0,c,a]}var
g=a[2];return P(d(b[1][1+bk],b,e),c,g,a,f)}function
eg(b,c,a){switch(a[0]){case
0:var
e=function(a){return[0,a]},f=a[1];return O(d(b[1][1+bd],b,c),f,a,e);case
1:var
g=function(a){return[1,a]},h=a[1];return O(d(b[1][1+bg],b,c),h,a,g);default:var
i=function(a){return[2,a]},j=a[1];return O(d(b[1][1+bh],b,c),j,a,i)}}function
eh(a,m,h){var
d=h[2],i=d[4],n=d[3],j=d[2],k=d[1],c=A(a[1][1+be],a,m,k),f=A(a[1][1+bc],a,m,j),o=ae(b(a[1][1+e],a),n);if(i){var
l=0;if(1===c[0]){var
q=f[2];if(2===q[0])var
g=ay(c[1][2][1],q[1][1][2][1]);else
l=1}else
l=1;if(l)var
p=k===c?1:0,g=p?j===f?1:0:p}else
var
g=i;if(c===k&&f===j&&o===n&&i===g)return h;return[0,h[1],[0,c,f,o,g]]}function
ei(b,c,a){if(0===a[0]){var
e=function(a){return[0,a]},f=a[1];return O(d(b[1][1+bi],b,c),f,a,e)}function
g(a){return[1,a]}var
h=a[1];return O(d(b[1][1+bb],b,c),h,a,g)}function
ej(a,d,c,b){return A(a[1][1+x],a,c,b)}function
ek(a,c,b){return d(a[1][1+g],a,b)}function
el(a,h,g){var
e=g[2];switch(e[0]){case
0:var
j=e[1],n=j[3],o=j[2],p=j[1],q=aw(d(a[1][1+bj],a,h),p),r=d(a[1][1+k],a,o),s=d(a[1][1+c],a,n),H=0;if(q===p&&r===o&&s===n){var
t=e;H=1}if(!H)var
t=[0,[0,q,r,s]];var
f=t;break;case
1:var
l=e[1],u=l[3],v=l[2],w=l[1],x=aw(d(a[1][1+bq],a,h),w),y=d(a[1][1+k],a,v),z=d(a[1][1+c],a,u),I=0;if(u===z&&x===w&&y===v){var
B=e;I=1}if(!I)var
B=[1,[0,x,y,z]];var
f=B;break;case
2:var
m=e[1],C=m[2],D=m[1],E=A(a[1][1+i],a,h,D),F=d(a[1][1+k],a,C),J=0;if(D===E&&C===F){var
G=e;J=1}if(!J)var
G=[2,[0,E,F,m[3]]];var
f=G;break;default:var
K=function(a){return[3,a]},L=e[1],f=O(b(a[1][1+bl],a),L,e,K)}return e===f?g:[0,g[1],f]}function
em(a,b){return A(a[1][1+m],a,0,b)}function
en(b,a,c){var
d=a?a[1]:a;return A(b[1][1+m],b,[0,d],c)}function
eo(a,b){return d(a[1][1+N],a,b)}function
ep(a,b){return d(a[1][1+N],a,b)}function
eq(a,b){return A(a[1][1+M],a,a6L,b)}function
er(a,c,b){return A(a[1][1+M],a,[0,c],b)}function
es(a,b){return A(a[1][1+M],a,a6M,b)}function
et(a,s,e){var
i=e[5],k=e[4],g=e[3],l=e[2],m=e[1],n=d(a[1][1+o],a,m),p=ae(b(a[1][1+j],a),l),h=ae(b(a[1][1+f],a),g),q=ae(b(a[1][1+f],a),k),r=d(a[1][1+c],a,i);if(m===n&&g===h&&l===p&&g===h&&k===q&&i===r)return e;return[0,n,p,h,q,r]}function
eu(a,b){return d(a[1][1+aq],a,b)}function
ev(a,b){return d(a[1][1+g],a,b)}function
ew(c,a){var
d=a[1];function
e(a){return[0,d,a]}var
f=a[2];return P(b(c[1][1+x],c),d,f,a,e)}function
ex(c,a){switch(a[0]){case
0:var
d=function(a){return[0,a]},e=a[1];return O(b(c[1][1+bA],c),e,a,d);case
1:var
f=function(a){return[1,a]},g=a[1];return O(b(c[1][1+bB],c),g,a,f);case
2:var
h=function(a){return[2,a]},i=a[1];return O(b(c[1][1+G],c),i,a,h);default:var
j=function(a){return[3,a]},k=a[1];return O(b(c[1][1+bC],c),k,a,j)}}function
ey(a,g){var
f=g[2],i=g[1];switch(f[0]){case
0:var
l=f[3],m=f[2],o=f[1],h=d(a[1][1+n],a,o),j=d(a[1][1+e],a,m);if(l){var
p=0;if(1===h[0]){var
r=j[2];if(10===r[0])var
k=ay(h[1][2][1],r[1][2][1]);else
p=1}else
p=1;if(p)var
q=o===h?1:0,k=q?m===j?1:0:q}else
var
k=l;if(o===h&&m===j&&l===k)return g;return[0,i,[0,h,j,k]];case
1:var
s=f[2],t=f[1],v=d(a[1][1+n],a,t),w=bf(b(a[1][1+u],a),s);if(t===v&&s===w)return g;return[0,i,[1,v,w]];case
2:var
x=f[3],y=f[2],z=f[1],A=d(a[1][1+n],a,z),B=bf(b(a[1][1+u],a),y),C=d(a[1][1+c],a,x);if(z===A&&y===B&&x===C)return g;return[0,i,[2,A,B,C]];default:var
D=f[3],E=f[2],F=f[1],G=d(a[1][1+n],a,F),H=bf(b(a[1][1+u],a),E),I=d(a[1][1+c],a,D);if(F===G&&E===H&&D===I)return g;return[0,i,[3,G,H,I]]}}function
ez(a,i,b){var
e=b[2],f=b[1],g=aw(function(b){if(0===b[0]){var
c=b[1],e=d(a[1][1+bz],a,c);return c===e?b:[0,e]}var
f=b[1],g=d(a[1][1+a9],a,f);return f===g?b:[1,g]},f),h=d(a[1][1+c],a,e);if(f===g&&e===h)return b;return[0,g,h]}function
eA(a,o,f){var
g=f[4],h=f[3],i=f[2],j=f[1],k=d(a[1][1+e],a,j),l=ae(b(a[1][1+az],a),i),m=ae(b(a[1][1+aA],a),h),n=d(a[1][1+c],a,g);if(j===k&&i===l&&h===m&&g===n)return f;return[0,k,l,m,n]}function
eB(a,l,b){var
e=b[3],f=b[2],h=b[1],i=d(a[1][1+g],a,h),j=d(a[1][1+g],a,f),k=d(a[1][1+c],a,e);if(h===i&&f===j&&e===k)return b;return[0,i,j,k]}function
eC(a,b){return d(a[1][1+e],a,b)}function
eD(a,b){return d(a[1][1+G],a,b)}function
eE(a,b){return d(a[1][1+g],a,b)}function
eF(c,a){switch(a[0]){case
0:var
d=function(a){return[0,a]},e=a[1];return O(b(c[1][1+bM],c),e,a,d);case
1:var
f=function(a){return[1,a]},g=a[1];return O(b(c[1][1+bP],c),g,a,f);default:var
h=function(a){return[2,a]},i=a[1];return O(b(c[1][1+bN],c),i,a,h)}}function
eG(b,e,a){var
c=a[1],d=A(b[1][1+Y],b,e,c);return c===d?a:[0,d,a[2],a[3]]}function
eH(a,l,b){var
f=b[3],g=b[2],h=b[1],i=d(a[1][1+e],a,h),j=d(a[1][1+bO],a,g),k=d(a[1][1+c],a,f);if(h===i&&g===j&&f===k)return b;return[0,i,j,k]}function
eI(a,l,b){var
f=b[4],g=b[3],h=b[2],i=d(a[1][1+e],a,h),j=d(a[1][1+e],a,g),k=d(a[1][1+c],a,f);if(h===i&&g===j&&f===k)return b;return[0,b[1],i,j,k]}function
eJ(b,g,a){var
e=a[3],f=d(b[1][1+c],b,e);return e===f?a:[0,a[1],a[2],f]}function
eK(a,l,b){var
e=b[3],f=b[2],g=b[1],i=d(a[1][1+I],a,g),j=d(a[1][1+h],a,f),k=d(a[1][1+c],a,e);if(g===i&&f===j&&e===k)return b;return[0,i,j,k]}function
eL(b,a){var
e=a[2],f=e[2],g=d(b[1][1+c],b,f);return f===g?a:[0,a[1],[0,e[1],g]]}function
eM(a,b){return d(a[1][1+ab],a,b)}function
eN(c,a){if(0===a[0]){var
d=function(a){return[0,a]},e=a[1];return O(b(c[1][1+bX],c),e,a,d)}function
f(a){return[1,a]}var
g=a[1];return O(b(c[1][1+_],c),g,a,f)}function
eO(a,b){var
c=b[2],e=c[2],f=c[1],g=d(a[1][1+bW],a,f),h=d(a[1][1+s],a,e);if(f===g&&e===h)return b;return[0,b[1],[0,g,h]]}function
eP(a,b){var
c=b[2],e=c[2],f=c[1],g=d(a[1][1+s],a,f),h=d(a[1][1+s],a,e);if(f===g&&e===h)return b;return[0,b[1],[0,g,h]]}function
eQ(a,b){return d(a[1][1+_],a,b)}function
eR(a,b){return d(a[1][1+Z],a,b)}function
eS(a,b){return d(a[1][1+s],a,b)}function
eT(c,a){switch(a[0]){case
0:var
d=function(a){return[0,a]},e=a[1];return O(b(c[1][1+ab],c),e,a,d);case
1:var
f=function(a){return[1,a]},g=a[1];return O(b(c[1][1+bY],c),g,a,f);default:var
h=function(a){return[2,a]},i=a[1];return O(b(c[1][1+bZ],c),i,a,h)}}function
eU(a,b){var
f=b[2],g=b[1],h=d(a[1][1+e],a,g),i=d(a[1][1+c],a,f);if(g===h&&f===i)return b;return[0,h,i]}function
eW(b,k,a){var
g=a[2],h=a[1],f=d(b[1][1+c],b,g);if(h){var
i=h[1],j=d(b[1][1+e],b,i);if(i===j&&g===f)return a;return[0,[0,j],f]}return g===f?a:[0,0,f]}function
eX(a,c){var
e=c[2],d=c[1];switch(e[0]){case
0:var
f=function(a){return[0,d,[0,a]]},g=e[1];return P(b(a[1][1+ad],a),d,g,c,f);case
1:var
h=function(a){return[0,d,[1,a]]},i=e[1];return P(b(a[1][1+$],a),d,i,c,h);case
2:var
j=function(a){return[0,d,[2,a]]},k=e[1];return P(b(a[1][1+aa],a),d,k,c,j);case
3:var
l=function(a){return[0,d,[3,a]]},m=e[1];return O(b(a[1][1+bS],a),m,c,l);default:return c}}function
eY(c,a){var
d=a[2],e=aw(b(c[1][1+b1],c),d);return d===e?a:[0,a[1],e]}function
eZ(a,c,b){return A(a[1][1+x],a,c,b)}function
e0(a,c,b){return A(a[1][1+aa],a,c,b)}function
e1(c,a){if(0===a[0]){var
d=a[1],f=function(a){return[0,d,a]},g=a[2];return P(b(c[1][1+b2],c),d,g,a,f)}var
e=a[1];function
h(a){return[1,e,a]}var
i=a[2];return P(b(c[1][1+b3],c),e,i,a,h)}function
e2(a,b){return d(a[1][1+Z],a,b)}function
e3(a,b){return d(a[1][1+s],a,b)}function
e5(c,a){if(0===a[0]){var
d=function(a){return[0,a]},e=a[1];return O(b(c[1][1+b6],c),e,a,d)}function
f(a){return[1,a]}var
g=a[1];return O(b(c[1][1+b5],c),g,a,f)}function
e6(a,c){var
e=c[2],f=e[2],g=e[1],h=d(a[1][1+b7],a,g),i=ae(b(a[1][1+b4],a),f);if(g===h&&f===i)return c;return[0,c[1],[0,h,i]]}function
e7(a,j,b){var
f=b[2],g=b[1],h=d(a[1][1+e],a,g),i=d(a[1][1+c],a,f);if(g===h&&f===i)return b;return[0,h,i]}function
e8(c,a){if(0===a[0]){var
f=function(a){return[0,a]},g=a[1];return O(b(c[1][1+b9],c),g,a,f)}var
d=a[1],e=d[1];function
h(a){return[1,[0,e,a]]}var
i=d[2];return P(b(c[1][1+bT],c),e,i,a,h)}function
e9(b,a){var
c=a[2][1],e=d(b[1][1+ac],b,c);return c===e?a:[0,a[1],[0,e]]}function
e_(a,c){var
e=c[2],f=e[3],g=e[1],h=d(a[1][1+ac],a,g),i=aw(b(a[1][1+bV],a),f);if(g===h&&f===i)return c;return[0,c[1],[0,h,e[2],i]]}function
e$(b,i,a){var
e=a[4],f=a[3],g=d(b[1][1+af],b,f),h=d(b[1][1+c],b,e);if(f===g&&e===h)return a;return[0,a[1],a[2],g,h]}function
fa(a,n,e){var
f=e[4],g=e[3],h=e[2],i=e[1],j=d(a[1][1+bU],a,i),k=ae(b(a[1][1+b0],a),h),l=d(a[1][1+af],a,g),m=d(a[1][1+c],a,f);if(i===j&&h===k&&g===l&&f===m)return e;return[0,j,k,l,m]}function
fb(a,e,g,c){var
f=2<=e?d(a[1][1+i],a,a6N):b(a[1][1+o],a);return b(f,c)}function
fc(a,e,c){var
f=2<=e?d(a[1][1+i],a,a6O):b(a[1][1+o],a);return b(f,c)}function
fd(a,q,e){var
f=e[3],c=e[2],h=e[1],m=0;if(q){var
n=0;if(h)switch(h[1]){case
2:break;case
0:m=1;n=2;break;default:n=1}var
p=0;switch(n){case
2:p=1;break;case
0:if(2<=q){var
k=0,j=0;p=1}break}if(!p)var
k=1,j=0}else
m=1;if(m)var
k=1,j=1;var
r=j?d(a[1][1+B],a,f):d(a[1][1+g],a,f);if(c)var
s=k?b(a[1][1+o],a):d(a[1][1+i],a,a6P),t=function(a){return[0,a]},l=O(s,c[1],c,t);else
var
l=c;if(c===l&&f===r)return e;return[0,h,l,r]}function
fe(b,c,a){if(0===a[0]){var
e=a[1],f=aw(d(b[1][1+cd],b,c),e);return e===f?a:[0,f]}var
g=a[1],h=g[1];function
i(a){return[1,[0,h,a]]}var
j=g[2];return P(d(b[1][1+cc],b,c),h,j,a,i)}function
ff(b,l,a){var
f=a[5],g=a[4],h=a[3],e=a[1],i=ae(d(b[1][1+cb],b,e),g),j=ae(d(b[1][1+ce],b,e),h),k=d(b[1][1+c],b,f);if(g===i&&h===j&&f===k)return a;return[0,e,a[2],j,i,k]}function
fg(a,o,e){var
g=e[4],f=e[3],h=e[2],i=e[1],j=d(a[1][1+r],a,i),k=A(a[1][1+cj],a,0!==f?1:0,h),n=b(a[1][1+ck],a),l=ae(function(a){return bf(n,a)},f),m=d(a[1][1+c],a,g);if(i===j&&h===k&&f===l&&g===m)return e;return[0,j,k,l,m]}function
fh(a,j,b){var
e=b[2],f=b[1],g=d(a[1][1+h],a,f),i=d(a[1][1+c],a,e);if(f===g&&e===i)return b;return[0,g,i]}function
fi(a,c,b){return d(a[1][1+h],a,b)}function
fj(a,j,b){var
f=b[2],g=b[1],h=d(a[1][1+e],a,g),i=d(a[1][1+c],a,f);if(g===h&&f===i)return b;return[0,h,i]}function
fk(a,b){var
f=b[2],g=f[2],h=f[1],i=d(a[1][1+e],a,h),j=d(a[1][1+c],a,g);if(h===i&&g===j)return b;return[0,b[1],[0,i,j]]}function
fl(b,a){var
e=a[2],f=e[2],g=d(b[1][1+c],b,f);return f===g?a:[0,a[1],[0,e[1],g]]}function
fm(a,c,b){return A(a[1][1+J],a,c,b)}function
fn(a,s,e){var
f=e[5],g=e[4],h=e[3],i=e[2],k=e[1],l=d(a[1][1+o],a,k),m=ae(b(a[1][1+j],a),i),r=b(a[1][1+t],a),n=aw(function(a){return bf(r,a)},h),p=bf(b(a[1][1+w],a),g),q=d(a[1][1+c],a,f);if(l===k&&m===i&&n===h&&p===g&&q===f)return e;return[0,l,m,n,p,q]}function
fo(a,b){return d(a[1][1+S],a,b)}function
fp(a,b){return d(a[1][1+S],a,b)}function
fq(a,b){return d(a[1][1+g],a,b)}function
fr(b,a){var
e=a[2],f=e[2],g=d(b[1][1+c],b,f);return f===g?a:[0,a[1],[0,e[1],g]]}function
fs(c,b,a){return a}function
ft(a,b){return A(a[1][1+i],a,a6Q,b)}function
fu(c,a){var
d=a[1];function
e(a){return[0,d,a]}var
f=a[2];return P(b(c[1][1+p],c),d,f,a,e)}function
fv(c,a){if(0===a[0]){var
d=function(a){return[0,a]},f=a[1];return O(b(c[1][1+cz],c),f,a,d)}function
g(a){return[1,a]}var
h=a[1];return O(b(c[1][1+e],c),h,a,g)}function
fw(a,c){var
f=c[2],g=f[2],h=f[1],i=d(a[1][1+aj],a,h),j=ae(b(a[1][1+e],a),g);if(h===i&&g===j)return c;return[0,c[1],[0,i,j]]}function
fx(a,b){var
e=b[2],f=e[2],g=e[1],h=d(a[1][1+l],a,g),i=d(a[1][1+c],a,f);if(h===g&&i===f)return b;return[0,b[1],[0,h,i]]}function
fy(a,f){var
e=f[2],g=e[4],h=e[3],i=e[2],j=e[1],k=aw(b(a[1][1+cv],a),i),l=ae(b(a[1][1+ct],a),h),m=ae(b(a[1][1+cq],a),j),n=d(a[1][1+c],a,g);if(i===k&&h===l&&g===n&&j===m)return f;return[0,f[1],[0,m,k,l,n]]}function
fz(a,v,e){var
f=e[9],g=e[8],h=e[7],i=e[6],l=e[3],m=e[2],n=e[1],o=ae(b(a[1][1+ak],a),n),p=ae(b(a[1][1+j],a),g),q=d(a[1][1+cu],a,m),r=d(a[1][1+k],a,h),s=d(a[1][1+cy],a,l),t=ae(b(a[1][1+X],a),i),u=d(a[1][1+c],a,f);if(n===o&&m===q&&l===s&&i===t&&h===r&&g===p&&f===u)return e;return[0,o,q,s,e[4],e[5],t,r,p,u,e[10]]}function
fA(a,c,b){return A(a[1][1+K],a,c,b)}function
fB(a,c,b){return A(a[1][1+u],a,c,b)}function
fC(a,c,b){return A(a[1][1+K],a,c,b)}function
fD(b,a){if(0===a[0])return a;var
c=a[1],e=d(b[1][1+l],b,c);return e===c?a:[1,e]}function
fE(c,a){var
d=a[1];function
e(a){return[0,d,a]}var
g=a[2];return O(b(c[1][1+f],c),g,a,e)}function
fF(a,e){var
f=e[2],d=e[1];switch(f[0]){case
0:var
g=function(a){return[0,d,[0,a]]},h=f[1];return O(b(a[1][1+c],a),h,e,g);case
1:var
i=function(a){return[0,d,[1,a]]},j=f[1];return O(b(a[1][1+c],a),j,e,i);case
2:var
k=function(a){return[0,d,[2,a]]},l=f[1];return O(b(a[1][1+c],a),l,e,k);case
3:var
m=function(a){return[0,d,[3,a]]},n=f[1];return O(b(a[1][1+c],a),n,e,m);case
4:var
o=function(a){return[0,d,[4,a]]},p=f[1];return O(b(a[1][1+c],a),p,e,o);case
5:var
q=function(a){return[0,d,[5,a]]},r=f[1];return O(b(a[1][1+c],a),r,e,q);case
6:var
s=function(a){return[0,d,[6,a]]},u=f[1];return O(b(a[1][1+c],a),u,e,s);case
7:var
v=function(a){return[0,d,[7,a]]},x=f[1];return O(b(a[1][1+c],a),x,e,v);case
8:var
z=function(a){return[0,d,[8,a]]},A=f[1];return O(b(a[1][1+c],a),A,e,z);case
9:var
B=function(a){return[0,d,[9,a]]},C=f[1];return O(b(a[1][1+c],a),C,e,B);case
10:var
D=function(a){return[0,d,[10,a]]},E=f[1];return O(b(a[1][1+c],a),E,e,D);case
11:var
F=function(a){return[0,d,[11,a]]},G=f[1];return O(b(a[1][1+bI],a),G,e,F);case
12:var
H=function(a){return[0,d,[12,a]]},I=f[1];return P(b(a[1][1+y],a),d,I,e,H);case
13:var
J=function(a){return[0,d,[13,a]]},K=f[1];return P(b(a[1][1+w],a),d,K,e,J);case
14:var
L=function(a){return[0,d,[14,a]]},M=f[1];return P(b(a[1][1+b$],a),d,M,e,L);case
15:var
N=function(a){return[0,d,[15,a]]},Q=f[1];return O(b(a[1][1+dy],a),Q,e,N);case
16:var
R=function(a){return[0,d,[16,a]]},S=f[1];return P(b(a[1][1+t],a),d,S,e,R);case
17:var
T=function(a){return[0,d,[17,a]]},U=f[1];return P(b(a[1][1+ag],a),d,U,e,T);case
18:var
V=function(a){return[0,d,[18,a]]},W=f[1];return P(b(a[1][1+bs],a),d,W,e,V);case
19:var
X=function(a){return[0,d,[19,a]]},Y=f[1];return P(b(a[1][1+aK],a),d,Y,e,X);case
20:var
Z=function(a){return[0,d,[20,a]]},_=f[1];return P(b(a[1][1+b_],a),d,_,e,Z);case
21:var
$=function(a){return[0,d,[21,a]]},aa=f[1];return O(b(a[1][1+aM],a),aa,e,$);case
22:var
ab=function(a){return[0,d,[22,a]]},ac=f[1];return O(b(a[1][1+aT],a),ac,e,ab);case
23:var
ad=function(a){return[0,d,[23,a]]},ae=f[1];return P(b(a[1][1+a6],a),d,ae,e,ad);case
24:var
af=function(a){return[0,d,[24,a]]},ah=f[1];return P(b(a[1][1+bH],a),d,ah,e,af);case
25:var
ai=function(a){return[0,d,[25,a]]},aj=f[1];return P(b(a[1][1+dv],a),d,aj,e,ai);default:var
ak=function(a){return[0,d,[26,a]]},al=f[1];return P(b(a[1][1+dt],a),d,al,e,ak)}}function
fG(a,p,e){var
h=e[2],g=e[1],i=g[3],j=g[2],k=g[1],l=d(a[1][1+f],a,k),m=d(a[1][1+f],a,j),n=aw(b(a[1][1+f],a),i),o=d(a[1][1+c],a,h);if(l===k&&m===j&&n===i&&o===h)return e;return[0,[0,l,m,n],o]}function
fH(a,p,e){var
h=e[2],g=e[1],i=g[3],j=g[2],k=g[1],l=d(a[1][1+f],a,k),m=d(a[1][1+f],a,j),n=aw(b(a[1][1+f],a),i),o=d(a[1][1+c],a,h);if(l===k&&m===j&&n===i&&o===h)return e;return[0,[0,l,m,n],o]}function
fI(a,b){var
e=b[2],g=b[1],h=d(a[1][1+f],a,g),i=d(a[1][1+c],a,e);if(g===h&&e===i)return b;return[0,h,i]}function
fJ(a,e){var
g=e[2],h=e[1],i=aw(b(a[1][1+f],a),h),j=d(a[1][1+c],a,g);if(h===i&&g===j)return e;return[0,i,j]}function
fK(a,b){var
c=b[2],e=c[2],f=c[1],g=d(a[1][1+R],a,f),h=d(a[1][1+aO],a,e);if(g===f&&h===e)return b;return[0,b[1],[0,g,h]]}function
fL(a,b){return d(a[1][1+g],a,b)}function
fM(a,b){return d(a[1][1+g],a,b)}function
fN(c,a){if(0===a[0]){var
d=function(a){return[0,a]},e=a[1];return O(b(c[1][1+aQ],c),e,a,d)}function
f(a){return[1,a]}var
g=a[1];return O(b(c[1][1+aN],c),g,a,f)}function
fO(a,b){var
e=b[2],f=b[1],g=d(a[1][1+R],a,f),h=d(a[1][1+c],a,e);if(f===g&&e===h)return b;return[0,g,h]}function
fP(a,b){var
e=b[2],g=b[1],h=d(a[1][1+f],a,g),i=d(a[1][1+c],a,e);if(g===h&&e===i)return b;return[0,h,i]}function
fQ(b,g,a){var
e=a[2],f=d(b[1][1+c],b,e);return e===f?a:[0,a[1],f]}function
fR(b,g,a){var
e=a[3],f=d(b[1][1+c],b,e);return e===f?a:[0,a[1],a[2],f]}function
fS(b,g,a){var
e=a[3],f=d(b[1][1+c],b,e);return e===f?a:[0,a[1],a[2],f]}function
fT(b,g,a){var
e=a[3],f=d(b[1][1+c],b,e);return e===f?a:[0,a[1],a[2],f]}function
fU(b,e,a){var
c=a[1],d=A(b[1][1+ag],b,e,c);return d===c?a:[0,d,a[2]]}function
fV(a,l,b){var
e=b[3],g=b[2],h=b[1],i=d(a[1][1+f],a,h),j=d(a[1][1+f],a,g),k=d(a[1][1+c],a,e);if(i===h&&j===g&&k===e)return b;return[0,i,j,k]}function
fW(a,l,e){var
f=e[3],g=e[2],h=e[1],i=d(a[1][1+ah],a,h),j=ae(b(a[1][1+C],a),g),k=d(a[1][1+c],a,f);if(i===h&&j===g&&k===f)return e;return[0,i,j,k]}function
fX(a,e){var
c=e[2],g=c[4],h=c[3],i=c[2],j=c[1],l=d(a[1][1+k],a,i),m=d(a[1][1+q],a,h),n=ae(b(a[1][1+f],a),g),p=d(a[1][1+o],a,j);if(p===j&&l===i&&m===h&&n===g)return e;return[0,e[1],[0,p,l,m,n]]}function
fY(a,e){var
f=e[2],g=f[2],h=f[1],i=aw(b(a[1][1+aR],a),h),j=d(a[1][1+c],a,g);if(i===h&&j===g)return e;return[0,e[1],[0,i,j]]}function
fZ(a,e){var
g=e[2],h=g[2],i=g[1],j=aw(b(a[1][1+f],a),i),k=d(a[1][1+c],a,h);if(i===j&&h===k)return e;return[0,e[1],[0,j,k]]}function
f0(a,c){return ae(b(a[1][1+aG],a),c)}function
f1(b,a){var
e=a[2],f=e[2],g=d(b[1][1+c],b,f);return f===g?a:[0,a[1],[0,e[1],g]]}function
f2(a,b){return d(a[1][1+g],a,b)}function
f3(a,b){var
c=b[2],e=c[2],f=c[1],g=d(a[1][1+ah],a,f),h=d(a[1][1+bL],a,e);if(g===f&&h===e)return b;return[0,b[1],[0,g,h]]}function
f4(c,a){if(0===a[0]){var
d=function(a){return[0,a]},e=a[1];return O(b(c[1][1+B],c),e,a,d)}function
f(a){return[1,a]}var
g=a[1];return O(b(c[1][1+cn],c),g,a,f)}function
f5(a,m,e){var
f=e[3],g=e[2],h=e[1],l=b(a[1][1+t],a),i=aw(function(a){return bf(l,a)},g),j=bf(b(a[1][1+w],a),h),k=d(a[1][1+c],a,f);if(i===g&&j===h&&f===k)return e;return[0,j,i,k]}function
f6(a,j,e){var
f=e[4],g=e[3],h=aw(function(c){switch(c[0]){case
0:var
d=function(a){return[0,a]},e=c[1];return O(b(a[1][1+by],a),e,c,d);case
1:var
f=function(a){return[1,a]},g=c[1];return O(b(a[1][1+bw],a),g,c,f);case
2:var
h=function(a){return[2,a]},i=c[1];return O(b(a[1][1+bE],a),i,c,h);case
3:var
j=function(a){return[3,a]},k=c[1];return O(b(a[1][1+bF],a),k,c,j);default:var
l=function(a){return[4,a]},m=c[1];return O(b(a[1][1+bD],a),m,c,l)}},g),i=d(a[1][1+c],a,f);if(h===g&&f===i)return e;return[0,e[1],e[2],h,i]}function
f7(a,b){var
e=b[2],f=e[3],g=e[1],h=g[2],i=g[1],j=A(a[1][1+y],a,i,h),k=d(a[1][1+c],a,f);if(h===j&&f===k)return b;return[0,b[1],[0,[0,i,j],e[2],k]]}function
f8(a,e){var
b=e[2],h=b[6],i=b[2],j=b[1],k=d(a[1][1+g],a,j),l=d(a[1][1+f],a,i),m=d(a[1][1+c],a,h);if(j===k&&i===l&&h===m)return e;return[0,e[1],[0,k,l,b[3],b[4],b[5],m]]}function
f9(a,e){var
b=e[2],g=b[6],h=b[5],i=b[3],j=b[2],k=d(a[1][1+f],a,j),l=d(a[1][1+f],a,i),m=d(a[1][1+q],a,h),n=d(a[1][1+c],a,g);if(k===j&&l===i&&m===h&&n===g)return e;return[0,e[1],[0,b[1],k,l,b[4],m,n]]}function
f_(a,b){var
e=b[2],g=e[2],h=e[1],i=d(a[1][1+f],a,h),j=d(a[1][1+c],a,g);if(i===h&&g===j)return b;return[0,b[1],[0,i,j]]}function
f$(a,e){var
b=e[2],f=b[8],g=b[7],h=b[2],i=b[1],j=d(a[1][1+n],a,i),k=d(a[1][1+bx],a,h),l=d(a[1][1+q],a,g),m=d(a[1][1+c],a,f);if(j===i&&k===h&&l===g&&m===f)return e;return[0,e[1],[0,j,k,b[3],b[4],b[5],b[6],l,m]]}function
ga(c,a){var
d=a[1];function
e(a){return[0,d,a]}var
f=a[2];return P(b(c[1][1+y],c),d,f,a,e)}function
gb(c,a){var
d=a[1];function
e(a){return[0,d,a]}var
f=a[2];return P(b(c[1][1+y],c),d,f,a,e)}function
gc(c,a){switch(a[0]){case
0:var
d=function(a){return[0,a]},e=a[1];return O(b(c[1][1+f],c),e,a,d);case
1:var
g=function(a){return[1,a]},h=a[1];return O(b(c[1][1+bv],c),h,a,g);default:var
i=function(a){return[2,a]},j=a[1];return O(b(c[1][1+bu],c),j,a,i)}}function
gd(a,b){return d(a[1][1+g],a,b)}function
ge(a,x,e){var
h=e[4],i=e[3],k=e[2],g=k[2],l=g[4],m=g[3],n=g[2],o=g[1],p=e[1],q=ae(b(a[1][1+j],a),p),r=ae(b(a[1][1+cp],a),o),s=aw(b(a[1][1+ai],a),n),t=ae(b(a[1][1+cs],a),m),u=d(a[1][1+f],a,i),v=d(a[1][1+c],a,h),w=d(a[1][1+c],a,l);if(s===n&&t===m&&u===i&&q===p&&v===h&&w===l&&r===o)return e;return[0,q,[0,k[1],[0,r,s,t,w]],u,v]}function
gf(a,b){var
e=b[2],f=e[2],g=e[1],h=d(a[1][1+l],a,g),i=d(a[1][1+c],a,f);if(h===g&&i===f)return b;return[0,b[1],[0,h,i]]}function
gg(a,b){var
e=b[2],f=e[2],g=e[1],h=d(a[1][1+ai],a,g),i=d(a[1][1+c],a,f);if(h===g&&i===f)return b;return[0,b[1],[0,h,i]]}function
gh(a,c){var
e=c[2],h=e[2],i=e[1],j=d(a[1][1+f],a,h),k=ae(b(a[1][1+g],a),i);if(j===h&&k===i)return c;return[0,c[1],[0,k,j,e[3]]]}function
gi(c,a){var
d=a[1];function
e(a){return[0,d,a]}var
f=a[2];return P(b(c[1][1+v],c),d,f,a,e)}function
gj(c,a){if(0===a[0]){var
d=function(a){return[0,a]},f=a[1];return O(b(c[1][1+cH],c),f,a,d)}function
g(a){return[1,a]}var
h=a[1];return O(b(c[1][1+e],c),h,a,g)}function
gk(a,s,f){var
g=f[5],i=f[4],j=f[3],k=f[2],l=f[1],m=ae(b(a[1][1+cB],a),l),n=ae(b(a[1][1+r],a),k),o=ae(b(a[1][1+e],a),j),p=d(a[1][1+h],a,i),q=d(a[1][1+c],a,g);if(l===m&&k===n&&j===o&&i===p&&g===q)return f;return[0,m,n,o,p,q]}function
gl(c,a){var
d=a[1];function
e(a){return[0,d,a]}var
f=a[2];return P(b(c[1][1+v],c),d,f,a,e)}function
gm(c,a){if(0===a[0]){var
d=function(a){return[0,a]},e=a[1];return O(b(c[1][1+cF],c),e,a,d)}function
f(a){return[1,a]}var
g=a[1];return O(b(c[1][1+cG],c),g,a,f)}function
gn(a,o,b){var
f=b[5],g=b[3],i=b[2],j=b[1],k=d(a[1][1+cD],a,j),l=d(a[1][1+e],a,i),m=d(a[1][1+h],a,g),n=d(a[1][1+c],a,f);if(j===k&&i===l&&g===m&&f===n)return b;return[0,k,l,m,b[4],n]}function
go(c,a){var
d=a[1];function
e(a){return[0,d,a]}var
f=a[2];return P(b(c[1][1+v],c),d,f,a,e)}function
gp(c,a){if(0===a[0]){var
d=function(a){return[0,a]},e=a[1];return O(b(c[1][1+cK],c),e,a,d)}function
f(a){return[1,a]}var
g=a[1];return O(b(c[1][1+cL],c),g,a,f)}function
gq(a,o,b){var
f=b[5],g=b[3],i=b[2],j=b[1],k=d(a[1][1+cI],a,j),l=d(a[1][1+e],a,i),m=d(a[1][1+h],a,g),n=d(a[1][1+c],a,f);if(j===k&&i===l&&g===m&&f===n)return b;return[0,k,l,m,b[4],n]}function
gr(c,a){if(0===a[0]){var
d=function(a){return[0,a]},f=a[1];return O(b(c[1][1+e],c),f,a,d)}function
g(a){return[1,a]}var
h=a[1];return O(b(c[1][1+W],c),h,a,g)}function
gs(b,j,a){var
f=a[3],g=a[1],h=d(b[1][1+e],b,g),i=d(b[1][1+c],b,f);if(g===h&&f===i)return a;return[0,h,a[2],i]}function
gt(c,a){if(0===a[0]){var
e=a[1],f=aw(b(c[1][1+cO],c),e);return e===f?a:[0,f]}var
g=a[1],h=d(c[1][1+cS],c,g);return g===h?a:[1,h]}function
gu(c,a){var
d=a[2],e=ae(b(c[1][1+g],c),d);return d===e?a:[0,a[1],e]}function
gv(a,c){var
e=c[2],f=e[2],h=e[1],i=d(a[1][1+g],a,h),j=ae(b(a[1][1+g],a),f);if(h===i&&f===j)return c;return[0,c[1],[0,i,j]]}function
gw(e,m,a){var
f=a[5],g=a[2],i=a[1],j=ae(b(e[1][1+al],e),g),k=ae(b(e[1][1+h],e),i),l=d(e[1][1+c],e,f);if(g===j&&i===k&&f===l)return a;return[0,k,j,a[3],a[4],l]}function
gx(c,a){if(0===a[0]){var
d=function(a){return[0,a]},f=a[1];return O(b(c[1][1+h],c),f,a,d)}function
g(a){return[1,a]}var
i=a[1];return O(b(c[1][1+e],c),i,a,g)}function
gy(b,i,a){var
e=a[3],f=a[2],g=d(b[1][1+cQ],b,f),h=d(b[1][1+c],b,e);if(g===f&&h===e)return a;return[0,a[1],g,h]}function
gz(a,b){return d(a[1][1+g],a,b)}function
gA(b,a){var
c=a[2],e=c[1],f=d(b[1][1+z],b,e);return e===f?a:[0,a[1],[0,f,c[2]]]}function
gB(b,a){var
c=a[2],e=c[1],f=d(b[1][1+z],b,e);return e===f?a:[0,a[1],[0,f,c[2]]]}function
gC(b,a){var
c=a[2],e=c[1],f=d(b[1][1+z],b,e);return e===f?a:[0,a[1],[0,f,c[2]]]}function
gD(b,a){var
c=a[2][1],e=d(b[1][1+z],b,c);return c===e?a:[0,a[1],[0,e]]}function
gE(e,a){var
f=a[3],g=a[1],h=aw(b(e[1][1+am],e),g),i=d(e[1][1+c],e,f);if(g===h&&f===i)return a;return[0,h,a[2],i]}function
gF(a,f){var
h=f[4],e=f[1];if(0===e[0])var
j=function(a){return[0,a]},k=e[1],l=b(a[1][1+am],a),g=O(function(a){return aw(l,a)},k,e,j);else
var
m=function(a){return[1,a]},n=e[1],o=b(a[1][1+cU],a),g=O(function(a){return aw(o,a)},n,e,m);var
i=d(a[1][1+c],a,h);if(e===g&&h===i)return f;return[0,g,f[2],f[3],i]}function
gG(e,a){var
f=a[4],g=a[1],h=aw(b(e[1][1+cW],e),g),i=d(e[1][1+c],e,f);if(g===h&&f===i)return a;return[0,h,a[2],a[3],i]}function
gH(e,a){var
f=a[4],g=a[1],h=aw(b(e[1][1+c0],e),g),i=d(e[1][1+c],e,f);if(g===h&&f===i)return a;return[0,h,a[2],a[3],i]}function
gI(a,c){var
d=c[2],e=c[1];switch(d[0]){case
0:var
f=function(a){return[0,e,[0,a]]},g=d[1];return O(b(a[1][1+c1],a),g,c,f);case
1:var
h=function(a){return[0,e,[1,a]]},i=d[1];return O(b(a[1][1+cY],a),i,c,h);case
2:var
j=function(a){return[0,e,[2,a]]},k=d[1];return O(b(a[1][1+cV],a),k,c,j);default:var
l=function(a){return[0,e,[3,a]]},m=d[1];return O(b(a[1][1+cT],a),m,c,l)}}function
gJ(a,l,b){var
e=b[3],f=b[2],g=b[1],h=A(a[1][1+i],a,a6R,g),j=d(a[1][1+c2],a,f),k=d(a[1][1+c],a,e);if(g===h&&f===j&&e===k)return b;return[0,h,j,k]}function
gK(b,g,a){var
e=a[1],f=d(b[1][1+c],b,e);return e===f?a:[0,f]}function
gL(a,l,b){var
e=b[3],f=b[2],g=b[1],i=d(a[1][1+h],a,g),j=d(a[1][1+r],a,f),k=d(a[1][1+c],a,e);if(g===i&&f===j&&e===k)return b;return[0,i,j,k]}function
gM(a,m,b){var
e=b[3],f=b[2],g=b[1],h=A(a[1][1+i],a,a6S,g),j=d(a[1][1+l],a,f),k=d(a[1][1+c],a,e);if(h===g&&j===f&&k===e)return b;return[0,h,j,k]}function
gN(a,c,b){return A(a[1][1+E],a,c,b)}function
gO(a,i,b){var
e=b[2],f=b[1],g=d(a[1][1+l],a,f),h=d(a[1][1+c],a,e);if(f===g&&e===h)return b;return[0,g,h]}function
gP(e,j,a){var
f=a[4],g=a[2],h=bf(b(e[1][1+p],e),g),i=d(e[1][1+c],e,f);if(h===g&&f===i)return a;return[0,a[1],h,a[3],i]}function
gQ(a,c,b){return A(a[1][1+J],a,c,b)}function
gR(a,o,e){var
f=e[4],g=e[3],h=e[2],i=e[1],j=d(a[1][1+ak],a,i),k=d(a[1][1+l],a,h),m=ae(b(a[1][1+X],a),g),n=d(a[1][1+c],a,f);if(j===i&&k===h&&m===g&&n===f)return e;return[0,j,k,m,n]}function
gS(b,a){switch(a[0]){case
0:var
c=a[1],e=c[2],g=c[1],h=A(b[1][1+an],b,g,e);return h===e?a:[0,[0,g,h]];case
1:var
i=a[1],j=i[2],k=i[1],l=A(b[1][1+ao],b,k,j);return l===j?a:[1,[0,k,l]];case
2:var
m=a[1],n=m[2],o=m[1],p=A(b[1][1+ap],b,o,n);return p===n?a:[2,[0,o,p]];case
3:var
q=a[1],r=d(b[1][1+f],b,q);return r===q?a:[3,r];case
4:var
s=a[1],t=s[2],u=s[1],v=A(b[1][1+E],b,u,t);return v===t?a:[4,[0,u,v]];case
5:var
w=a[1],x=w[2],y=w[1],z=A(b[1][1+H],b,y,x);return z===x?a:[5,[0,y,z]];default:var
B=a[1],C=B[2],D=B[1],F=A(b[1][1+J],b,D,C);return F===C?a:[6,[0,D,F]]}}function
gT(e,l,a){var
f=a[5],g=a[3],h=a[2],i=ae(b(e[1][1+al],e),g),j=ae(b(e[1][1+c_],e),h),k=d(e[1][1+c],e,f);if(g===i&&h===j&&f===k)return a;return[0,a[1],j,i,a[4],k]}function
gU(a,y,e){var
f=e[7],g=e[6],h=e[5],i=e[4],k=e[3],l=e[2],m=e[1],n=d(a[1][1+at],a,m),o=ae(b(a[1][1+j],a),l),p=bf(b(a[1][1+w],a),k),v=b(a[1][1+t],a),q=ae(function(a){return bf(v,a)},i),x=b(a[1][1+t],a),r=aw(function(a){return bf(x,a)},h),s=ae(b(a[1][1+as],a),g),u=d(a[1][1+c],a,f);if(n===m&&o===l&&p===k&&q===i&&r===h&&s===g&&u===f)return e;return[0,n,o,p,q,r,s,u]}function
gV(b,g,a){var
e=a[1],f=d(b[1][1+c],b,e);return e===f?a:[0,f]}function
gW(a,j,e){var
f=e[2],g=e[1],h=ae(b(a[1][1+I],a),g),i=d(a[1][1+c],a,f);if(g===h&&f===i)return e;return[0,h,i]}function
gX(a,n,b){var
f=b[4],g=b[3],h=b[2],i=b[1],j=d(a[1][1+r],a,i),k=d(a[1][1+e],a,h),l=d(a[1][1+e],a,g),m=d(a[1][1+c],a,f);if(i===j&&h===k&&g===l&&f===m)return b;return[0,j,k,l,m]}function
gY(c,b,a){return a}function
gZ(a,p,b){var
e=b[6],f=b[5],g=b[3],h=b[2],i=b[1],j=d(a[1][1+G],a,i),l=d(a[1][1+ar],a,h),m=d(a[1][1+k],a,g),n=d(a[1][1+q],a,f),o=d(a[1][1+c],a,e);if(i===j&&h===l&&m===g&&n===f&&o===e)return b;return[0,j,l,m,b[4],n,o]}function
g0(b,a){if(typeof
a==="number")return a;var
c=a[1],f=d(b[1][1+e],b,c);return c===f?a:[0,f]}function
g1(a,r,b){var
e=b[6],f=b[5],g=b[3],h=b[2],i=b[1],j=d(a[1][1+n],a,i),l=d(a[1][1+ar],a,h),m=d(a[1][1+k],a,g),o=d(a[1][1+q],a,f),p=d(a[1][1+c],a,e);if(i===j&&h===l&&m===g&&o===f&&p===e)return b;return[0,j,l,m,b[4],o,p]}function
g2(a,o,e){var
f=e[6],g=e[5],h=e[3],i=e[2],j=d(a[1][1+n],a,i),k=bf(b(a[1][1+u],a),h),l=aw(b(a[1][1+av],a),g),m=d(a[1][1+c],a,f);if(i===j&&h===k&&g===l&&f===m)return e;return[0,e[1],j,k,e[4],l,m]}function
g3(a,c){var
e=c[2],f=e[2],g=e[1],h=d(a[1][1+B],a,g),i=ae(b(a[1][1+C],a),f);if(g===h&&f===i)return c;return[0,c[1],[0,h,i]]}function
g4(a,e){var
f=e[2],g=f[2],h=f[1],i=aw(b(a[1][1+dh],a),h),j=d(a[1][1+c],a,g);if(h===i&&g===j)return e;return[0,e[1],[0,i,j]]}function
g5(c,a){switch(a[0]){case
0:var
d=a[1],e=d[1],j=function(a){return[0,[0,e,a]]},k=d[2];return P(b(c[1][1+dg],c),e,k,a,j);case
1:var
f=a[1],g=f[1],l=function(a){return[1,[0,g,a]]},m=f[2];return P(b(c[1][1+de],c),g,m,a,l);default:var
h=a[1],i=h[1],n=function(a){return[2,[0,i,a]]},o=h[2];return P(b(c[1][1+df],c),i,o,a,n)}}function
g6(a,b){var
f=b[2],g=f[2],h=f[1],i=d(a[1][1+e],a,h),j=d(a[1][1+c],a,g);if(h===i&&g===j)return b;return[0,b[1],[0,i,j]]}function
g7(a,e){var
f=e[2],g=f[2],h=f[1],i=aw(b(a[1][1+dk],a),h),j=d(a[1][1+c],a,g);if(h===i&&g===j)return e;return[0,e[1],[0,i,j]]}function
g8(a,b){return A(a[1][1+i],a,a6T,b)}function
g9(a,m,f){var
g=f[3],h=f[2],i=f[1],j=d(a[1][1+e],a,i),k=ae(b(a[1][1+C],a),h),l=d(a[1][1+c],a,g);if(i===j&&h===k&&g===l)return f;return[0,j,k,l]}function
g_(a,v,e){var
f=e[7],g=e[6],h=e[5],i=e[4],k=e[3],l=e[2],m=e[1],n=ae(b(a[1][1+at],a),m),o=ae(b(a[1][1+j],a),k),p=d(a[1][1+dm],a,l),u=b(a[1][1+di],a),q=ae(function(a){return bf(u,a)},i),r=ae(b(a[1][1+as],a),h),s=aw(b(a[1][1+av],a),g),t=d(a[1][1+c],a,f);if(m===n&&l===p&&i===q&&h===r&&g===s&&f===t&&k===o)return e;return[0,n,p,o,q,r,s,t]}function
g$(a,c,b){return A(a[1][1+ax],a,c,b)}function
ha(a,c,b){return A(a[1][1+ax],a,c,b)}function
hb(a,l,e){var
f=e[3],g=e[2],h=e[1],i=ae(b(a[1][1+dn],a),h),j=d(a[1][1+dq],a,g),k=d(a[1][1+c],a,f);if(h===i&&g===j&&f===k)return e;return[0,i,j,k]}function
hc(a,c){return bf(b(a[1][1+p],a),c)}function
hd(b,a){if(0===a[0]){var
e=a[1],g=d(b[1][1+f],b,e);return g===e?a:[0,g]}var
h=a[1],i=h[2][1],j=d(b[1][1+c],b,i);return i===j?a:[1,[0,h[1],[0,j]]]}function
he(a,e){var
f=e[2],g=f[2],h=f[1],i=aw(b(a[1][1+dr],a),h),j=d(a[1][1+c],a,g);if(h===i&&g===j)return e;return[0,e[1],[0,i,j]]}function
hf(b,e,a){var
c=a[1],d=A(b[1][1+aB],b,e,c);return c===d?a:[0,d,a[2],a[3]]}function
hg(a,e){var
f=e[2],g=f[2],h=f[1],i=aw(b(a[1][1+cN],a),h),j=d(a[1][1+c],a,g);if(h===i&&g===j)return e;return[0,e[1],[0,i,j]]}function
hh(a,o,f){var
g=f[4],h=f[3],i=f[2],j=f[1],k=d(a[1][1+e],a,j),l=ae(b(a[1][1+az],a),i),m=d(a[1][1+aA],a,h),n=d(a[1][1+c],a,g);if(j===k&&i===l&&h===m&&g===n)return f;return[0,k,l,m,n]}function
hi(a,j,e){var
f=e[2],g=e[1],h=ae(b(a[1][1+I],a),g),i=d(a[1][1+c],a,f);if(g===h&&f===i)return e;return[0,h,i]}function
hj(a,i,b){var
e=b[2],f=b[1],g=d(a[1][1+F],a,f),h=d(a[1][1+c],a,e);if(f===g&&e===h)return b;return[0,g,h]}function
hk(a,l,b){var
f=b[4],g=b[3],h=b[2],i=d(a[1][1+e],a,h),j=d(a[1][1+e],a,g),k=d(a[1][1+c],a,f);if(h===i&&g===j&&f===k)return b;return[0,b[1],i,j,k]}function
ho(a,l,b){var
f=b[4],g=b[3],h=b[2],i=d(a[1][1+N],a,h),j=d(a[1][1+e],a,g),k=d(a[1][1+c],a,f);if(h===i&&g===j&&f===k)return b;return[0,b[1],i,j,k]}function
hp(a,c,b){return A(a[1][1+K],a,c,b)}function
hq(c,a){switch(a[0]){case
0:var
d=function(a){return[0,a]},f=a[1];return O(b(c[1][1+e],c),f,a,d);case
1:var
g=function(a){return[1,a]},h=a[1];return O(b(c[1][1+W],c),h,a,g);default:return a}}function
hr(a,j,e){var
f=e[2],g=e[1],h=aw(b(a[1][1+dz],a),g),i=d(a[1][1+c],a,f);if(g===h&&f===i)return e;return[0,h,i]}function
hs(a,e){var
f=e[2],c=e[1];switch(f[0]){case
0:var
h=function(a){return[0,c,[0,a]]},i=f[1];return P(b(a[1][1+dA],a),c,i,e,h);case
1:var
j=function(a){return[0,c,[1,a]]},k=f[1];return P(b(a[1][1+dx],a),c,k,e,j);case
2:var
l=function(a){return[0,c,[2,a]]},m=f[1];return P(b(a[1][1+dw],a),c,m,e,l);case
3:var
n=function(a){return[0,c,[3,a]]},o=f[1];return P(b(a[1][1+du],a),c,o,e,n);case
4:var
p=function(a){return[0,c,[4,a]]},q=f[1];return P(b(a[1][1+aB],a),c,q,e,p);case
5:var
r=function(a){return[0,c,[5,a]]},s=f[1];return P(b(a[1][1+dj],a),c,s,e,r);case
6:var
t=function(a){return[0,c,[6,a]]},u=f[1];return P(b(a[1][1+dd],a),c,u,e,t);case
7:var
v=function(a){return[0,c,[7,a]]},w=f[1];return P(b(a[1][1+dc],a),c,w,e,v);case
8:var
y=function(a){return[0,c,[8,a]]},z=f[1];return P(b(a[1][1+cw],a),c,z,e,y);case
9:var
A=function(a){return[0,c,[9,a]]},B=f[1];return P(b(a[1][1+co],a),c,B,e,A);case
10:var
C=function(a){return[0,c,[10,a]]},D=f[1];return O(b(a[1][1+g],a),D,e,C);case
11:var
E=function(a){return[0,c,[11,a]]},F=f[1];return O(d(a[1][1+cg],a,c),F,e,E);case
12:var
G=function(a){return[0,c,[12,a]]},H=f[1];return P(b(a[1][1+ad],a),c,H,e,G);case
13:var
I=function(a){return[0,c,[13,a]]},J=f[1];return P(b(a[1][1+$],a),c,J,e,I);case
14:var
K=function(a){return[0,c,[14,a]]},L=f[1];return P(b(a[1][1+x],a),c,L,e,K);case
15:var
M=function(a){return[0,c,[15,a]]},N=f[1];return P(b(a[1][1+bQ],a),c,N,e,M);case
16:var
Q=function(a){return[0,c,[16,a]]},R=f[1];return P(b(a[1][1+Y],a),c,R,e,Q);case
17:var
S=function(a){return[0,c,[17,a]]},T=f[1];return P(b(a[1][1+bK],a),c,T,e,S);case
18:var
U=function(a){return[0,c,[18,a]]},W=f[1];return P(b(a[1][1+bJ],a),c,W,e,U);case
19:var
X=function(a){return[0,c,[19,a]]},Z=f[1];return P(b(a[1][1+bG],a),c,Z,e,X);case
20:var
_=function(a){return[0,c,[20,a]]},aa=f[1];return O(d(a[1][1+bt],a,c),aa,e,_);case
21:var
ab=function(a){return[0,c,[21,a]]},ac=f[1];return P(b(a[1][1+br],a),c,ac,e,ab);case
22:var
ae=function(a){return[0,c,[22,a]]},af=f[1];return P(b(a[1][1+a_],a),c,af,e,ae);case
23:var
ag=function(a){return[0,c,[23,a]]},ah=f[1];return P(b(a[1][1+a5],a),c,ah,e,ag);case
24:var
ai=function(a){return[0,c,[24,a]]},aj=f[1];return P(b(a[1][1+aZ],a),c,aj,e,ai);case
25:var
ak=function(a){return[0,c,[25,a]]},al=f[1];return P(b(a[1][1+V],a),c,al,e,ak);case
26:var
am=function(a){return[0,c,[26,a]]},an=f[1];return P(b(a[1][1+aX],a),c,an,e,am);case
27:var
ao=function(a){return[0,c,[27,a]]},ap=f[1];return P(b(a[1][1+aS],a),c,ap,e,ao);case
28:var
aq=function(a){return[0,c,[28,a]]},ar=f[1];return P(b(a[1][1+aL],a),c,ar,e,aq);case
29:var
as=function(a){return[0,c,[29,a]]},at=f[1];return P(b(a[1][1+aJ],a),c,at,e,as);default:var
au=function(a){return[0,c,[30,a]]},av=f[1];return P(b(a[1][1+aD],a),c,av,e,au)}}function
ht(c,a){var
d=a[2],e=a[1],f=aw(b(c[1][1+L],c),e),g=aw(b(c[1][1+L],c),d);if(e===f&&d===g)return a;return[0,f,g,a[3]]}var
hu=8;function
hv(b,a){return a}function
hw(a,d){var
e=d[2],c=d[1];switch(e[0]){case
0:var
f=function(a){return[0,c,[0,a]]},g=e[1];return P(b(a[1][1+p],a),c,g,d,f);case
1:var
h=function(a){return[0,c,[1,a]]},i=e[1];return P(b(a[1][1+ds],a),c,i,d,h);case
2:var
j=function(a){return[0,c,[2,a]]},k=e[1];return P(b(a[1][1+dl],a),c,k,d,j);case
3:var
l=function(a){return[0,c,[3,a]]},m=e[1];return P(b(a[1][1+db],a),c,m,d,l);case
4:var
n=function(a){return[0,c,[4,a]]},o=e[1];return P(b(a[1][1+da],a),c,o,d,n);case
5:var
q=function(a){return[0,c,[5,a]]},r=e[1];return P(b(a[1][1+ap],a),c,r,d,q);case
6:var
s=function(a){return[0,c,[6,a]]},t=e[1];return P(b(a[1][1+c$],a),c,t,d,s);case
7:var
u=function(a){return[0,c,[7,a]]},w=e[1];return P(b(a[1][1+ao],a),c,w,d,u);case
8:var
x=function(a){return[0,c,[8,a]]},y=e[1];return P(b(a[1][1+c9],a),c,y,d,x);case
9:var
z=function(a){return[0,c,[9,a]]},A=e[1];return P(b(a[1][1+c8],a),c,A,d,z);case
10:var
B=function(a){return[0,c,[10,a]]},C=e[1];return P(b(a[1][1+c7],a),c,C,d,B);case
11:var
D=function(a){return[0,c,[11,a]]},F=e[1];return P(b(a[1][1+c5],a),c,F,d,D);case
12:var
G=function(a){return[0,c,[33,a]]},I=e[1];return P(b(a[1][1+H],a),c,I,d,G);case
13:var
J=function(a){return[0,c,[13,a]]},K=e[1];return P(b(a[1][1+an],a),c,K,d,J);case
14:var
L=function(a){return[0,c,[14,a]]},M=e[1];return P(b(a[1][1+c4],a),c,M,d,L);case
15:var
N=function(a){return[0,c,[15,a]]},O=e[1];return P(b(a[1][1+c3],a),c,O,d,N);case
16:var
Q=function(a){return[0,c,[16,a]]},R=e[1];return P(b(a[1][1+cZ],a),c,R,d,Q);case
17:var
S=function(a){return[0,c,[17,a]]},T=e[1];return P(b(a[1][1+cR],a),c,T,d,S);case
18:var
U=function(a){return[0,c,[18,a]]},V=e[1];return P(b(a[1][1+cP],a),c,V,d,U);case
19:var
W=function(a){return[0,c,[19,a]]},X=e[1];return P(b(a[1][1+cM],a),c,X,d,W);case
20:var
Y=function(a){return[0,c,[20,a]]},Z=e[1];return P(b(a[1][1+cC],a),c,Z,d,Y);case
21:var
_=function(a){return[0,c,[21,a]]},$=e[1];return P(b(a[1][1+cJ],a),c,$,d,_);case
22:var
aa=function(a){return[0,c,[22,a]]},ab=e[1];return P(b(a[1][1+cE],a),c,ab,d,aa);case
23:var
ac=function(a){return[0,c,[23,a]]},ad=e[1];return P(b(a[1][1+cx],a),c,ad,d,ac);case
24:var
ae=function(a){return[0,c,[24,a]]},af=e[1];return P(b(a[1][1+ch],a),c,af,d,ae);case
25:var
ag=function(a){return[0,c,[25,a]]},ah=e[1];return P(b(a[1][1+cf],a),c,ah,d,ag);case
26:var
ai=function(a){return[0,c,[26,a]]},aj=e[1];return P(b(a[1][1+ca],a),c,aj,d,ai);case
27:var
ak=function(a){return[0,c,[27,a]]},al=e[1];return P(b(a[1][1+bR],a),c,al,d,ak);case
28:var
am=function(a){return[0,c,[28,a]]},aq=e[1];return P(b(a[1][1+a$],a),c,aq,d,am);case
29:var
ar=function(a){return[0,c,[29,a]]},as=e[1];return P(b(a[1][1+a4],a),c,as,d,ar);case
30:var
at=function(a){return[0,c,[30,a]]},au=e[1];return P(b(a[1][1+aW],a),c,au,d,at);case
31:var
av=function(a){return[0,c,[31,a]]},aw=e[1];return P(b(a[1][1+aU],a),c,aw,d,av);case
32:var
ax=function(a){return[0,c,[32,a]]},ay=e[1];return P(b(a[1][1+E],a),c,ay,d,ax);case
33:var
az=function(a){return[0,c,[33,a]]},aA=e[1];return P(b(a[1][1+H],a),c,aA,d,az);case
34:var
aB=function(a){return[0,c,[34,a]]},aC=e[1];return P(b(a[1][1+v],a),c,aC,d,aB);case
35:var
aD=function(a){return[0,c,[35,a]]},aG=e[1];return P(b(a[1][1+aF],a),c,aG,d,aD);default:var
aH=function(a){return[0,c,[36,a]]},aI=e[1];return P(b(a[1][1+aE],a),c,aI,d,aH)}}rN(Q,[0,dB,function(a,e){var
f=e[2],g=f[3],h=f[2],i=f[1],j=d(a[1][1+aV],a,i),k=d(a[1][1+c],a,h),l=aw(b(a[1][1+L],a),g);if(i===j&&h===k&&g===l)return e;return[0,e[1],[0,j,k,l]]},h,hw,L,hv,c,hu,ae,a0,a0,ht,e,hs,dA,hr,dz,hq,dx,hp,dw,ho,du,hk,p,hj,ds,hi,aB,hh,aA,hg,bt,hf,az,he,dr,hd,dq,hc,dp,hb,dl,ha,dj,g$,ax,g_,di,g9,at,g8,dm,g7,av,g6,dk,g5,as,g4,dh,g3,dg,g2,de,g1,ar,g0,df,gZ,dd,gY,dc,gX,db,gW,da,gV,ap,gU,c$,gT,c_,gS,ao,gR,c9,gQ,c8,gP,c7,gO,c5,gN,an,gM,c4,gL,c3,gK,cZ,gJ,c2,gI,c1,gH,cY,gG,cV,gF,cT,gE,am,gD,c0,gC,cW,gB,cU,gA,z,gz,cR,gy,cQ,gx,cP,gw,cO,gv,cS,gu,al,gt,cM,gs,cN,gr,cJ,gq,cI,gp,cK,go,cE,gn,cD,gm,cF,gl,cC,gk,cB,gj,cH,gi,ai,gh,cs,gg,cp,gf,y,ge,I,gd,bx,gc,bv,gb,bu,ga,by,f$,bw,f_,bE,f9,bD,f8,bF,f7,w,f6,b$,f5,ah,f4,cn,f3,bL,f2,aG,f1,q,f0,C,fZ,j,fY,aR,fX,t,fW,ag,fV,bs,fU,a6,fT,bH,fS,dv,fR,dt,fQ,bI,fP,aM,fO,R,fN,aQ,fM,aO,fL,aN,fK,aT,fJ,dy,fI,aK,fH,b_,fG,f,fF,l,fE,k,fD,cx,fC,cw,fB,u,fA,K,fz,cu,fy,cq,fx,cv,fw,cy,fv,cz,fu,ak,ft,co,fs,g,fr,S,fq,B,fp,o,fo,J,fn,ca,fm,G,fl,aq,fk,cg,fj,cj,fi,ck,fh,ch,fg,cf,ff,cb,fe,cd,fd,ce,fc,cc,fb,ad,fa,$,e$,bU,e_,b0,e9,bV,e8,bT,e7,b9,e6,b7,e5,b6,e3,b5,e2,b4,e1,b3,e0,b2,eZ,af,eY,b1,eX,aa,eW,bS,eU,ac,eT,ab,eS,bY,eR,bZ,eQ,Z,eP,_,eO,bW,eN,bX,eM,s,eL,bR,eK,x,eJ,bQ,eI,Y,eH,br,eG,bO,eF,bM,eE,bP,eD,bN,eC,bK,eB,bJ,eA,bG,ez,bz,ey,n,ex,bA,ew,bB,ev,bC,eu,H,et,aj,es,aH,er,dn,eq,cL,ep,cG,eo,M,en,N,em,m,el,i,ek,bk,ej,bj,ei,bi,eh,be,eg,bd,ef,bg,ee,bh,ed,bb,ec,bc,eb,ba,ea,bq,d$,bp,d_,bo,d9,bn,d8,bm,d7,dC,d6,bl,d5,X,d4,r,d3,ct,d2,a$,d1,a_,d0,aV,dZ,F,dY,a8,dX,W,dW,a9,dV,a5,dU,a4,dT,a1,dS,aZ,dR,V,dQ,aY,dP,aX,dO,aW,dN,aU,dM,aS,dL,aL,dK,aJ,dJ,v,dI,aI,dH,aF,dG,aE,dF,E,dE,aD,dD]);return function(b,a){return k2(a,Q)}});function
Nj(a){switch(a[0]){case
0:return 1;case
3:return 3;default:return 2}}function
Nk(a,e){b(c(a),a67);d(c(a),a69,a68);var
f=e[1];d(c(a),a6_,f);b(c(a),a6$);b(c(a),a7a);d(c(a),a7c,a7b);var
g=e[2];d(c(a),a7d,g);b(c(a),a7e);return b(c(a),a7f)}var
Nl=function
c(a,b){return c.fun(a,b)},a7g=function
b(a){return b.fun(a)};h(Nl,function(a,f){b(c(a),a7h);d(c(a),a7j,a7i);var
h=f[1];if(h){g(a,a7k);var
e=h[1];switch(e[0]){case
0:b(c(a),a6V);var
i=e[1];d(c(a),a6W,i);b(c(a),a6X);break;case
1:b(c(a),a6Y);var
j=e[1];d(c(a),a6Z,j);b(c(a),a60);break;case
2:b(c(a),a61);var
k=e[1];d(c(a),a62,k);b(c(a),a63);break;default:b(c(a),a64);var
l=e[1];d(c(a),a65,l);b(c(a),a66)}g(a,a7l)}else
g(a,a7w);b(c(a),a7m);b(c(a),a7n);d(c(a),a7p,a7o);Nk(a,f[2]);b(c(a),a7q);b(c(a),a7r);d(c(a),a7t,a7s);Nk(a,f[3]);b(c(a),a7u);return b(c(a),a7v)});h(a7g,function(a){return d(u(a7x),Nl,a)});function
aM(a,b){return[0,a[1],a[2],b[3]]}function
hd(b,a){var
c=b[1]-a[1]|0;return 0===c?b[2]-a[2]|0:c}function
Nn(d,c){var
a=c[1],h=d[1];if(h)if(a)var
f=a[1],g=h[1],j=Nj(f),e=Nj(g)-j|0,b=0===e?Y(g[1],f[1]):e;else
var
b=-1;else
var
k=a?1:a,b=k;if(0===b){var
i=hd(d[2],c[2]);return 0===i?hd(d[3],c[3]):i}return b}function
iG(b,a){return 0===Nn(b,a)?1:0}var
uv=function
d(a,b,c){return d.fun(a,b,c)},a7B=k1(a7A,function(a){var
c=rH(a,a7z)[35],e=rL(a,0,0,a7y,uu,1)[1];Hs(a,c,function(b,a){return 0});return function(f,c){var
d=k2(c,a);b(e,d);return rM(c,d,a)}});h(uv,function(c,a,e){var
b=e[2];switch(b[0]){case
0:var
f=b[1][1];return T(function(d,a){var
b=0===a[0]?a[1][2][2]:a[1][2][1];return A(uv,c,d,b)},a,f);case
1:var
g=b[1][1];return T(function(a,b){return 2===b[0]?a:A(uv,c,a,b[1][2][1])},a,g);case
2:return d(c,a,b[1][1]);default:return a}});function
c7(b,a){return[0,a[1],[0,a[2],b]]}function
No(b,a,c){var
d=b?b[1]:b,e=a?a[1]:a;return[0,d,e,c]}function
C(b,a,e){var
d=b?b[1]:b,c=a?a[1]:a;if(!d&&!c)return c;return[0,No([0,d],[0,c],0)]}function
bg(c,b,a,f){var
d=c?c[1]:c,e=b?b[1]:b;if(!d&&!e&&!a)return a;return[0,No([0,d],[0,e],a)]}function
b1(b,a){if(b){if(a){var
c=a[1],d=b[1],f=[0,ai(d[2],c[2])];return C([0,ai(c[1],d[1])],f,0)}var
e=b}else
var
e=a;return e}function
uw(b,a){if(a){if(b){var
d=a[1],c=b[1],f=c[3],g=[0,ai(c[2],d[2])];return bg([0,ai(d[1],c[1])],g,f,0)}var
e=a[1];return bg([0,e[1]],[0,e[2]],0,0)}return b}function
iH(d,c){var
a=d,b=c;for(;;)if(typeof
a==="number")return b;else{if(0===a[0])return[0,a[1],0,b];var
e=[0,a[2],a[4],b],a=a[3],b=e;continue}}function
Np(a,e){if(a)var
c=iH(a[2],a[3]),d=function(a){return Np(c,a)},b=[0,a[1],d];else
var
b=a;return b}function
a8b(a){var
b=iH(a,0);return function(a){return Np(b,a)}}function
he(a){return typeof
a==="number"?0:0===a[0]?1:a[1]}function
a8c(a){return[0,a]}function
cc(b,c,a){var
d=0;if(typeof
b==="number"){if(typeof
a==="number")return[0,c];else
if(1===a[0])d=1}else
if(0===b[0]){if(typeof
a!=="number"&&1===a[0])d=1}else{var
e=b[1];if(typeof
a!=="number"&&1===a[0]){var
g=a[1],h=g<=e?e+1|0:g+1|0;return[1,h,c,b,a]}var
f=e;d=2}switch(d){case
1:var
f=a[1];break;case
0:return[1,2,c,b,a]}return[1,f+1|0,c,b,a]}function
hz(b,e,a){var
c=he(b),d=he(a),f=d<=c?c+1|0:d+1|0;return[1,f,e,b,a]}function
ux(c,a){var
d=0!==a?1:0;if(d){if(1!==a){var
f=a>>>1|0,g=ux(c,f),h=b(c,0),i=ux(c,(a-f|0)-1|0);return[1,he(g)+1|0,h,g,i]}var
e=[0,b(c,0)]}else
var
e=d;return e}function
cC(b,c,a){var
h=he(b),i=he(a);if((i+2|0)<h){var
d=b[4],f=b[3],j=b[2],l=he(d);if(l<=he(f))return hz(f,j,cc(d,c,a));var
m=cc(d[4],c,a),n=d[2];return hz(cc(f,j,d[3]),n,m)}if((h+2|0)<i){var
g=a[4],e=a[3],k=a[2],o=he(e);if(o<=he(g))return hz(cc(b,c,e),k,g);var
p=cc(e[4],k,g),q=e[2];return hz(cc(b,c,e[3]),q,p)}return cc(b,c,a)}function
Nq(b,a){if(typeof
a==="number")return[0,b];else{if(0===a[0])return cc([0,b],a[1],0);var
c=a[4],d=a[2];return cC(Nq(b,a[3]),d,c)}}function
Nr(b,a){if(typeof
a==="number")return[0,b];else{if(0===a[0])return cc(0,a[1],[0,b]);var
c=Nr(b,a[4]);return cC(a[3],a[2],c)}}function
bG(b,c,a){if(typeof
b==="number")return Nq(c,a);else
if(0===b[0]){if(typeof
a!=="number"){if(0===a[0])return cc(b,c,a);if(3<a[1]){var
i=a[4],j=a[2];return cC(bG(b,c,a[3]),j,i)}return hz(b,c,a)}}else{var
e=b[4],f=b[3],g=b[2],d=b[1];if(typeof
a!=="number"){if(0===a[0])return 3<d?cC(f,g,bG(e,c,a)):hz(b,c,a);var
h=a[1];if((h+2|0)<d)return cC(f,g,bG(e,c,a));if((d+2|0)<h){var
k=a[4],l=a[2];return cC(bG(b,c,a[3]),l,k)}return hz(b,c,a)}}return Nr(c,b)}function
jJ(b){var
a=b;for(;;)if(typeof
a==="number")throw a4;else{if(0===a[0])return a[1];if(typeof
a[3]==="number")return a[2];var
a=a[3];continue}}function
Ns(b){var
a=b;for(;;)if(typeof
a==="number")return 0;else{if(0===a[0])return[0,a[1]];if(typeof
a[3]==="number")return[0,a[2]];var
a=a[3];continue}}function
Nt(b){var
a=b;for(;;)if(typeof
a==="number")throw a4;else{if(0===a[0])return a[1];if(typeof
a[4]==="number")return a[2];var
a=a[4];continue}}function
a8d(b){var
a=b;for(;;)if(typeof
a==="number")return 0;else{if(0===a[0])return[0,a[1]];if(typeof
a[4]==="number")return[0,a[2]];var
a=a[4];continue}}function
uy(a){if(typeof
a==="number")return bv(a8e);else{if(0===a[0])return 0;if(typeof
a[3]==="number")return a[4];var
b=a[4],c=a[2];return cC(uy(a[3]),c,b)}}function
jK(b,a){if(typeof
b==="number")return a;if(typeof
a==="number")return b;var
c=uy(a);return bG(b,jJ(a),c)}function
uz(a){if(typeof
a==="number")return 0;else{if(0===a[0])return 1;var
b=uz(a[4]);return(uz(a[3])+1|0)+b|0}}function
Nu(d,c){var
b=d,a=c;for(;;)if(typeof
a==="number")return b;else{if(0===a[0])return[0,a[1],b];var
e=a[3],f=Nu(b,a[4]),b=[0,a[2],f],a=e;continue}}function
Nv(a){return Nu(0,a)}var
aI=0;function
uA(b){var
a=typeof
b==="number"?1:0,c=a?1:a;return c}function
uB(a){function
e(c,b){if(typeof
b==="number")return[0,c];else{if(0===b[0]){var
i=b[1],j=d(a[1],c,i);return 0===j?b:0<=j?cc(b,c,aI):cc([0,c],i,aI)}var
f=b[4],g=b[3],h=b[2],k=d(a[1],c,h);if(0===k)return b;if(0<=k){var
l=e(c,f);return f===l?b:cC(g,h,l)}var
m=e(c,g);return g===m?b:cC(m,h,f)}}function
f(c,b){if(typeof
b==="number")return[0,aI,0,aI];else{if(0===b[0]){var
k=d(a[1],c,b[1]);return 0===k?[0,aI,1,aI]:0<=k?[0,b,0,aI]:[0,aI,0,b]}var
e=b[4],g=b[3],h=b[2],l=d(a[1],c,h);if(0===l)return[0,g,1,e];if(0<=l){var
i=f(c,e),m=i[3],n=i[2];return[0,bG(g,h,i[1]),n,m]}var
j=f(c,g),o=bG(j[3],h,e);return[0,j[1],j[2],o]}}function
j(c,g){var
b=g;for(;;)if(typeof
b==="number")return 0;else{if(0===b[0])return 0===d(a[1],c,b[1])?1:0;var
e=d(a[1],c,b[2]),f=0===e?1:0;if(f)return f;var
h=0<=e?b[4]:b[3],b=h;continue}}function
l(f,b){if(typeof
b==="number")return aI;else{if(0===b[0])return 0===d(a[1],f,b[1])?aI:b;var
c=b[4],e=b[3],g=b[2],h=d(a[1],f,g);if(0===h){if(typeof
e==="number")return c;if(typeof
c==="number")return e;var
k=uy(c);return cC(e,jJ(c),k)}if(0<=h){var
i=l(f,c);return c===i?b:cC(e,g,i)}var
j=l(f,e);return e===j?b:cC(j,g,c)}}function
g(b,a){if(typeof
b==="number")return a;else
if(1===b[0]){var
c=b[2],h=b[1];if(typeof
a!=="number"){if(0===a[0])return e(a[1],b);var
d=a[2],i=a[1];if(i<=h){if(1===i)return e(d,b);var
j=f(c,a),l=g(b[4],j[3]);return bG(g(b[3],j[1]),c,l)}if(1===h)return e(c,a);var
k=f(d,b),m=g(k[3],a[4]);return bG(g(k[1],a[3]),d,m)}}return typeof
a==="number"?b:e(b[1],a)}function
h(a,c){if(typeof
a==="number")return aI;if(typeof
c==="number")return aI;if(typeof
a!=="number"&&0!==a[0]){var
d=a[4],e=a[3],g=a[2],b=f(g,c),i=b[1];if(b[2]){var
k=h(d,b[3]);return bG(h(e,i),g,k)}var
l=h(d,b[3]);return jK(h(e,i),l)}return j(a[1],c)?a:aI}function
m(e,c){if(typeof
c==="number")return[0,aI,function(a){return aI}];else{if(0===c[0])return 0===d(a[1],e,c[1])?0:[0,aI,function(a){return aI}];var
i=c[4],j=c[3],h=c[2],k=d(a[1],e,h);if(0===k)return 0;if(0<=k){var
f=m(e,i);if(f)var
o=f[2],l=[0,bG(j,h,f[1]),o];else
var
l=f;return l}var
g=m(e,j);if(g)var
p=g[2],q=function(a){return bG(b(p,0),h,i)},n=[0,g[1],q];else
var
n=g;return n}}function
q(l,k){var
a=l,c=k;for(;;){if(typeof
a!=="number"&&typeof
c!=="number"){var
i=0;if(typeof
a!=="number"&&0!==a[0]){if(typeof
c!=="number"&&0!==c[0]){if(a===c)return 0;var
d=m(a[2],c);if(d){var
g=q(a[3],d[1]);if(g){var
n=b(d[2],0),a=a[4],c=n;continue}var
h=g}else
var
h=d;return h}var
f=a,e=c[1];i=1}if(!i)var
f=c,e=a[1];return 1-j(e,f)}return 1}}function
i(a,c){if(typeof
a==="number")return aI;if(typeof
c==="number")return a;if(typeof
a!=="number"&&0!==a[0]){var
d=a[4],e=a[3],g=a[2],b=f(g,c),h=b[1];if(b[2]){var
k=i(d,b[3]);return jK(i(e,h),k)}var
l=i(d,b[3]);return bG(i(e,h),g,l)}return j(a[1],c)?aI:a}function
r(i,h){var
j=iH(h,0),c=iH(i,0),b=j;for(;;){if(c){if(b){var
e=d(a[1],c[1],b[1]);if(0===e){var
f=iH(b[2],b[3]),c=iH(c[2],c[3]),b=f;continue}return e}return 1}var
g=b?-1:b;return g}}function
w(b,a){return 0===r(b,a)?1:0}function
k(t,s){var
c=t,b=s;for(;;){if(typeof
c==="number")return 1;else
if(0===c[0]){var
h=c[1];if(typeof
b!=="number"){if(0===b[0]){var
i=0===d(a[1],h,b[1])?1:0,u=i?1:i;return u}var
j=d(a[1],h,b[2]);if(0===j)return 1;if(0<=j){var
b=b[4];continue}var
b=b[3];continue}}else{var
f=c[4],g=c[3],e=c[2];if(typeof
b!=="number"){if(0===b[0]){var
l=1===c[1]?1:0,v=l?0===d(a[1],e,b[1])?1:0:l;return v}var
m=b[4],n=b[3],o=d(a[1],e,b[2]);if(0===o){var
p=k(g,n);if(p){var
c=f,b=m;continue}return p}if(0<=o){var
q=k(cc(aI,e,f),m);if(q){var
c=g;continue}return q}var
r=k(cc(g,e,aI),n);if(r){var
c=f;continue}return r}}return 0}}function
s(c,d){var
a=d;for(;;)if(typeof
a==="number")return 0;else{if(0===a[0])return b(c,a[1]);s(c,a[3]);b(c,a[2]);var
a=a[4];continue}}function
t(c,f,e){var
a=f,b=e;for(;;)if(typeof
a==="number")return b;else{if(0===a[0])return d(c,a[1],b);var
g=t(c,a[3],b),h=d(c,a[2],g),a=a[4],b=h;continue}}function
u(c,g){var
a=g;for(;;)if(typeof
a==="number")return 1;else{if(0===a[0])return b(c,a[1]);var
d=b(c,a[2]);if(d){var
e=u(c,a[3]);if(e){var
a=a[4];continue}var
f=e}else
var
f=d;return f}}function
v(c,g){var
a=g;for(;;)if(typeof
a==="number")return 0;else{if(0===a[0])return b(c,a[1]);var
d=b(c,a[2]);if(d)var
e=d;else{var
f=v(c,a[3]);if(!f){var
a=a[4];continue}var
e=f}return e}}function
n(c,a){if(typeof
a==="number")return aI;else{if(0===a[0])return b(c,a[1])?a:aI;var
f=a[4],g=a[3],h=a[2],d=n(c,g),i=b(c,h),e=n(c,f);if(i){if(g===d&&f===e)return a;return bG(d,h,e)}return jK(d,e)}}function
o(c,a){if(typeof
a==="number")return[0,aI,aI];else{if(0===a[0])return b(c,a[1])?[0,a,aI]:[0,aI,a];var
d=a[2],e=o(c,a[3]),f=e[2],g=e[1],k=b(c,d),h=o(c,a[4]),i=h[2],j=h[1];if(k){var
l=jK(f,i);return[0,bG(g,d,j),l]}var
m=bG(f,d,i);return[0,jK(g,j),m]}}function
x(c,h){var
b=h;for(;;)if(typeof
b==="number")throw a4;else{if(0===b[0]){var
e=b[1];if(0===d(a[1],c,e))return e;throw a4}var
f=b[2],g=d(a[1],c,f);if(0===g)return f;var
i=0<=g?b[4]:b[3],b=i;continue}}function
y(c,i){var
b=i;for(;;)if(typeof
b==="number")return 0;else{if(0===b[0]){var
e=b[1],f=0===d(a[1],c,e)?1:0,j=f?[0,e]:f;return j}var
g=b[2],h=d(a[1],c,g);if(0===h)return[0,g];var
k=0<=h?b[4]:b[3],b=k;continue}}function
p(j,c){if(typeof
c==="number")return aI;else{if(0===c[0]){var
k=c[1],l=b(j,k);return k===l?c:[0,l]}var
m=c[4],n=c[3],o=c[2],f=p(j,n),h=b(j,o),i=p(j,m);if(n===f&&o===h&&m===i)return c;var
q=0;if(!uA(f)){var
t=Nt(f);if(0<=d(a[1],t,h))q=1}if(!q){var
r=0;if(!uA(i)){var
s=jJ(i);if(0<=d(a[1],h,s))r=1}if(!r)return bG(f,h,i)}return g(f,e(h,i))}}function
z(c){if(c){var
i=c[2],f=c[1];if(i){var
j=i[2],g=i[1];if(j){var
k=j[2],l=j[1];if(k){var
n=k[2],p=k[1];if(n){if(n[2]){var
b=a[1],x=function(j,g){if(2===j){if(g){var
n=g[2];if(n){var
o=n[1],k=g[1],J=n[2],y=d(b,k,o),K=0===y?[0,k,0]:0<y?[0,k,[0,o,0]]:[0,o,[0,k,0]];return[0,K,J]}}}else
if(3===j&&g){var
p=g[2];if(p){var
q=p[2];if(q){var
c=q[1],a=p[1],e=g[1],N=q[2],D=d(b,e,a);if(0===D)var
E=d(b,a,c),O=0===E?[0,a,0]:0<E?[0,a,[0,c,0]]:[0,c,[0,a,0]],r=O;else
if(0<D){var
F=d(b,a,c);if(0===F)var
s=[0,e,[0,a,0]];else
if(0<F)var
s=[0,e,[0,a,[0,c,0]]];else
var
G=d(b,e,c),P=0===G?[0,e,[0,a,0]]:0<G?[0,e,[0,c,[0,a,0]]]:[0,c,[0,e,[0,a,0]]],s=P;var
r=s}else{var
H=d(b,e,c);if(0===H)var
t=[0,a,[0,e,0]];else
if(0<H)var
t=[0,a,[0,e,[0,c,0]]];else
var
I=d(b,a,c),Q=0===I?[0,a,[0,e,0]]:0<I?[0,a,[0,c,[0,e,0]]]:[0,c,[0,a,[0,e,0]]],t=Q;var
r=t}return[0,r,N]}}}var
z=j>>1,A=m(z,g),L=A[1],B=m(j-z|0,A[2]),i=L,h=B[1],f=0,M=B[2];for(;;){if(i){if(h){var
u=h[2],v=h[1],w=i[2],l=i[1],x=d(b,l,v);if(0===x){var
i=w,h=u,f=[0,l,f];continue}if(0<=x){var
h=u,f=[0,v,f];continue}var
i=w,f=[0,l,f];continue}var
C=c6(i,f)}else
var
C=c6(h,f);return[0,C,M]}},m=function(j,g){if(2===j){if(g){var
m=g[2];if(m){var
n=m[1],k=g[1],J=m[2],y=d(b,k,n),K=0===y?[0,k,0]:0<=y?[0,n,[0,k,0]]:[0,k,[0,n,0]];return[0,K,J]}}}else
if(3===j&&g){var
o=g[2];if(o){var
p=o[2];if(p){var
c=p[1],a=o[1],e=g[1],N=p[2],D=d(b,e,a);if(0===D)var
E=d(b,a,c),O=0===E?[0,a,0]:0<=E?[0,c,[0,a,0]]:[0,a,[0,c,0]],q=O;else
if(0<=D){var
F=d(b,e,c);if(0===F)var
r=[0,a,[0,e,0]];else
if(0<=F)var
G=d(b,a,c),P=0===G?[0,a,[0,e,0]]:0<=G?[0,c,[0,a,[0,e,0]]]:[0,a,[0,c,[0,e,0]]],r=P;else
var
r=[0,a,[0,e,[0,c,0]]];var
q=r}else{var
H=d(b,a,c);if(0===H)var
s=[0,e,[0,a,0]];else
if(0<=H)var
I=d(b,e,c),Q=0===I?[0,e,[0,a,0]]:0<=I?[0,c,[0,e,[0,a,0]]]:[0,e,[0,c,[0,a,0]]],s=Q;else
var
s=[0,e,[0,a,[0,c,0]]];var
q=s}return[0,q,N]}}}var
z=j>>1,A=x(z,g),L=A[1],B=x(j-z|0,A[2]),i=L,h=B[1],f=0,M=B[2];for(;;){if(i){if(h){var
t=h[2],u=h[1],v=i[2],l=i[1],w=d(b,l,u);if(0===w){var
i=v,h=t,f=[0,l,f];continue}if(0<w){var
i=v,f=[0,l,f];continue}var
h=t,f=[0,u,f];continue}var
C=c6(i,f)}else
var
C=c6(h,f);return[0,C,M]}},o=c5(c),q=2<=o?m(o,c)[1]:c,h=function(b,a){if(!(3<b>>>0))switch(b){case
0:return[0,0,a];case
1:if(a)return[0,[0,a[1]],a[2]];break;case
2:if(a){var
d=a[2];if(d)return[0,[1,2,d[1],[0,a[1]],0],d[2]]}break;default:if(a){var
e=a[2];if(e){var
f=e[2];if(f)return[0,[1,2,e[1],[0,a[1]],[0,f[1]]],f[2]]}}}var
g=b/2|0,i=h(g,a),c=i[2];if(c){var
j=h((b-g|0)-1|0,c[2]),k=j[2];return[0,hz(i[1],c[1],j[1]),k]}throw[0,ap,a8f]};return h(c5(q),q)[1]}var
r=e(p,e(l,e(g,[0,f])));return e(n[1],r)}return e(p,e(l,e(g,[0,f])))}return e(l,e(g,[0,f]))}return e(g,[0,f])}return[0,f]}return aI}function
A(g,a,f){b(c(a),a8g);var
e=Nv(f);if(e)b(c(a),a8h);var
h=0;T(function(f,e){if(f)b(c(a),a8i);d(g,a,e);return 1},h,e);if(e)b(c(a),a8j);return b(c(a),a8k)}return[0,aI,uA,j,e,a8c,l,g,h,q,i,r,w,k,s,p,t,u,v,n,o,uz,Nv,jJ,Ns,Nt,a8d,jJ,Ns,x,y,a8b,z,A,ux,function(d,k){var
c=k;for(;;)if(typeof
c==="number")return 0;else{if(0===c[0]){var
h=c[1],i=b(d,h),l=i?[0,h]:i;return l}var
j=c[2];if(b(d,j)){var
e=j,a=c[3];for(;;)if(typeof
a==="number")return[0,e];else{if(0===a[0]){var
f=a[1];return b(d,f)?[0,f]:[0,e]}var
g=a[2];if(b(d,g)){var
e=g,a=a[3];continue}var
a=a[4];continue}}var
c=c[4];continue}}]}var
Nw=a8l.slice();function
uC(e){var
a=0,b=Nw.length-1-1|0;for(;;){if(b<a)return 0;var
c=a+((b-a|0)/2|0)|0,d=Nw[1+c];if(e<d[1]){var
b=c-1|0;continue}if(d[2]<=e){var
a=c+1|0;continue}return 1}}var
Nx=function
c(a,b){return c.fun(a,b)};h(Nx,function(b,a){if(typeof
b==="number"){var
i=b;if(55<=i)switch(i){case
55:if(typeof
a==="number"){var
ap=55!==a?1:0;if(!ap)return ap}break;case
56:if(typeof
a==="number"){var
aq=56!==a?1:0;if(!aq)return aq}break;case
57:if(typeof
a==="number"){var
ar=57!==a?1:0;if(!ar)return ar}break;case
58:if(typeof
a==="number"){var
as=58!==a?1:0;if(!as)return as}break;case
59:if(typeof
a==="number"){var
at=59!==a?1:0;if(!at)return at}break;case
60:if(typeof
a==="number"){var
av=60!==a?1:0;if(!av)return av}break;case
61:if(typeof
a==="number"){var
aw=61!==a?1:0;if(!aw)return aw}break;case
62:if(typeof
a==="number"){var
ax=62!==a?1:0;if(!ax)return ax}break;case
63:if(typeof
a==="number"){var
ay=63!==a?1:0;if(!ay)return ay}break;case
64:if(typeof
a==="number"){var
az=64!==a?1:0;if(!az)return az}break;case
65:if(typeof
a==="number"){var
aA=65!==a?1:0;if(!aA)return aA}break;case
66:if(typeof
a==="number"){var
aB=66!==a?1:0;if(!aB)return aB}break;case
67:if(typeof
a==="number"){var
aD=67!==a?1:0;if(!aD)return aD}break;case
68:if(typeof
a==="number"){var
aE=68!==a?1:0;if(!aE)return aE}break;case
69:if(typeof
a==="number"){var
aF=69!==a?1:0;if(!aF)return aF}break;case
70:if(typeof
a==="number"){var
aG=70!==a?1:0;if(!aG)return aG}break;case
71:if(typeof
a==="number"){var
aH=71!==a?1:0;if(!aH)return aH}break;case
72:if(typeof
a==="number"){var
aI=72!==a?1:0;if(!aI)return aI}break;case
73:if(typeof
a==="number"){var
aJ=73!==a?1:0;if(!aJ)return aJ}break;case
74:if(typeof
a==="number"){var
aK=74!==a?1:0;if(!aK)return aK}break;case
75:if(typeof
a==="number"){var
aL=75!==a?1:0;if(!aL)return aL}break;case
76:if(typeof
a==="number"){var
aM=76!==a?1:0;if(!aM)return aM}break;case
77:if(typeof
a==="number"){var
aN=77!==a?1:0;if(!aN)return aN}break;case
78:if(typeof
a==="number"){var
aO=78!==a?1:0;if(!aO)return aO}break;case
79:if(typeof
a==="number"){var
aQ=79!==a?1:0;if(!aQ)return aQ}break;case
80:if(typeof
a==="number"){var
aR=80!==a?1:0;if(!aR)return aR}break;case
81:if(typeof
a==="number"){var
aS=81!==a?1:0;if(!aS)return aS}break;case
82:if(typeof
a==="number"){var
aT=82!==a?1:0;if(!aT)return aT}break;case
83:if(typeof
a==="number"){var
aU=83!==a?1:0;if(!aU)return aU}break;case
84:if(typeof
a==="number"){var
aV=84!==a?1:0;if(!aV)return aV}break;case
85:if(typeof
a==="number"){var
aW=85!==a?1:0;if(!aW)return aW}break;case
86:if(typeof
a==="number"){var
aX=86!==a?1:0;if(!aX)return aX}break;case
87:if(typeof
a==="number"){var
aY=87!==a?1:0;if(!aY)return aY}break;case
88:if(typeof
a==="number"){var
aZ=88!==a?1:0;if(!aZ)return aZ}break;case
89:if(typeof
a==="number"){var
a0=89!==a?1:0;if(!a0)return a0}break;case
90:if(typeof
a==="number"){var
a1=90!==a?1:0;if(!a1)return a1}break;case
91:if(typeof
a==="number"){var
a4=91!==a?1:0;if(!a4)return a4}break;case
92:if(typeof
a==="number"){var
a5=92!==a?1:0;if(!a5)return a5}break;case
93:if(typeof
a==="number"){var
a6=93!==a?1:0;if(!a6)return a6}break;case
94:if(typeof
a==="number"){var
a8=94!==a?1:0;if(!a8)return a8}break;case
95:if(typeof
a==="number"){var
a9=95!==a?1:0;if(!a9)return a9}break;case
96:if(typeof
a==="number"){var
a_=96!==a?1:0;if(!a_)return a_}break;case
97:if(typeof
a==="number"){var
a$=97!==a?1:0;if(!a$)return a$}break;case
98:if(typeof
a==="number"){var
ba=98!==a?1:0;if(!ba)return ba}break;case
99:if(typeof
a==="number"){var
bb=99!==a?1:0;if(!bb)return bb}break;case
100:if(typeof
a==="number"){var
bc=cA!==a?1:0;if(!bc)return bc}break;case
101:if(typeof
a==="number"){var
bd=cm!==a?1:0;if(!bd)return bd}break;case
102:if(typeof
a==="number"){var
be=cX!==a?1:0;if(!be)return be}break;case
103:if(typeof
a==="number"){var
bf=b8!==a?1:0;if(!bf)return bf}break;case
104:if(typeof
a==="number"){var
bg=ci!==a?1:0;if(!bg)return bg}break;case
105:if(typeof
a==="number"){var
bh=cl!==a?1:0;if(!bh)return bh}break;case
106:if(typeof
a==="number"){var
bi=a2!==a?1:0;if(!bi)return bi}break;case
107:if(typeof
a==="number"){var
bj=hn!==a?1:0;if(!bj)return bj}break;default:if(typeof
a==="number"&&hl<=a)return 0}else
switch(i){case
0:if(typeof
a==="number"&&!a)return a;break;case
1:if(typeof
a==="number"){var
n=1!==a?1:0;if(!n)return n}break;case
2:if(typeof
a==="number"){var
o=2!==a?1:0;if(!o)return o}break;case
3:if(typeof
a==="number"){var
p=3!==a?1:0;if(!p)return p}break;case
4:if(typeof
a==="number"){var
q=4!==a?1:0;if(!q)return q}break;case
5:if(typeof
a==="number"){var
r=5!==a?1:0;if(!r)return r}break;case
6:if(typeof
a==="number"){var
s=6!==a?1:0;if(!s)return s}break;case
7:if(typeof
a==="number"){var
t=7!==a?1:0;if(!t)return t}break;case
8:if(typeof
a==="number"){var
u=8!==a?1:0;if(!u)return u}break;case
9:if(typeof
a==="number"){var
v=9!==a?1:0;if(!v)return v}break;case
10:if(typeof
a==="number"){var
w=10!==a?1:0;if(!w)return w}break;case
11:if(typeof
a==="number"){var
x=11!==a?1:0;if(!x)return x}break;case
12:if(typeof
a==="number"){var
y=12!==a?1:0;if(!y)return y}break;case
13:if(typeof
a==="number"){var
z=13!==a?1:0;if(!z)return z}break;case
14:if(typeof
a==="number"){var
A=14!==a?1:0;if(!A)return A}break;case
15:if(typeof
a==="number"){var
B=15!==a?1:0;if(!B)return B}break;case
16:if(typeof
a==="number"){var
C=16!==a?1:0;if(!C)return C}break;case
17:if(typeof
a==="number"){var
E=17!==a?1:0;if(!E)return E}break;case
18:if(typeof
a==="number"){var
F=18!==a?1:0;if(!F)return F}break;case
19:if(typeof
a==="number"){var
G=19!==a?1:0;if(!G)return G}break;case
20:if(typeof
a==="number"){var
H=20!==a?1:0;if(!H)return H}break;case
21:if(typeof
a==="number"){var
I=21!==a?1:0;if(!I)return I}break;case
22:if(typeof
a==="number"){var
J=22!==a?1:0;if(!J)return J}break;case
23:if(typeof
a==="number"){var
K=23!==a?1:0;if(!K)return K}break;case
24:if(typeof
a==="number"){var
L=24!==a?1:0;if(!L)return L}break;case
25:if(typeof
a==="number"){var
M=25!==a?1:0;if(!M)return M}break;case
26:if(typeof
a==="number"){var
N=26!==a?1:0;if(!N)return N}break;case
27:if(typeof
a==="number"){var
O=27!==a?1:0;if(!O)return O}break;case
28:if(typeof
a==="number"){var
P=28!==a?1:0;if(!P)return P}break;case
29:if(typeof
a==="number"){var
Q=29!==a?1:0;if(!Q)return Q}break;case
30:if(typeof
a==="number"){var
R=30!==a?1:0;if(!R)return R}break;case
31:if(typeof
a==="number"){var
S=31!==a?1:0;if(!S)return S}break;case
32:if(typeof
a==="number"){var
T=32!==a?1:0;if(!T)return T}break;case
33:if(typeof
a==="number"){var
U=33!==a?1:0;if(!U)return U}break;case
34:if(typeof
a==="number"){var
V=34!==a?1:0;if(!V)return V}break;case
35:if(typeof
a==="number"){var
W=35!==a?1:0;if(!W)return W}break;case
36:if(typeof
a==="number"){var
X=36!==a?1:0;if(!X)return X}break;case
37:if(typeof
a==="number"){var
Z=37!==a?1:0;if(!Z)return Z}break;case
38:if(typeof
a==="number"){var
_=38!==a?1:0;if(!_)return _}break;case
39:if(typeof
a==="number"){var
$=39!==a?1:0;if(!$)return $}break;case
40:if(typeof
a==="number"){var
aa=40!==a?1:0;if(!aa)return aa}break;case
41:if(typeof
a==="number"){var
ab=41!==a?1:0;if(!ab)return ab}break;case
42:if(typeof
a==="number"){var
ac=42!==a?1:0;if(!ac)return ac}break;case
43:if(typeof
a==="number"){var
ad=43!==a?1:0;if(!ad)return ad}break;case
44:if(typeof
a==="number"){var
ae=44!==a?1:0;if(!ae)return ae}break;case
45:if(typeof
a==="number"){var
af=45!==a?1:0;if(!af)return af}break;case
46:if(typeof
a==="number"){var
ag=46!==a?1:0;if(!ag)return ag}break;case
47:if(typeof
a==="number"){var
ah=47!==a?1:0;if(!ah)return ah}break;case
48:if(typeof
a==="number"){var
ai=48!==a?1:0;if(!ai)return ai}break;case
49:if(typeof
a==="number"){var
aj=49!==a?1:0;if(!aj)return aj}break;case
50:if(typeof
a==="number"){var
ak=50!==a?1:0;if(!ak)return ak}break;case
51:if(typeof
a==="number"){var
al=51!==a?1:0;if(!al)return al}break;case
52:if(typeof
a==="number"){var
am=52!==a?1:0;if(!am)return am}break;case
53:if(typeof
a==="number"){var
an=53!==a?1:0;if(!an)return an}break;default:if(typeof
a==="number"){var
ao=54!==a?1:0;if(!ao)return ao}}}else
switch(b[0]){case
0:if(typeof
a!=="number"&&0===a[0]){var
bk=Y(b[1],a[1]);return 0===bk?Y(b[2],a[2]):bk}break;case
1:if(typeof
a!=="number"&&1===a[0]){var
bl=Y(b[1],a[1]);return 0===bl?Y(b[2],a[2]):bl}break;case
2:if(typeof
a!=="number"&&2===a[0])return Y(b[1],a[1]);break;case
3:if(typeof
a!=="number"&&3===a[0]){var
f=a[2],bm=b[2],bn=Y(b[1],a[1]);if(0===bn){if(bm)return f?Y(bm[1],f[1]):1;var
bB=f?-1:f;return bB}return bn}break;case
4:if(typeof
a!=="number"&&4===a[0])return Y(b[1],a[1]);break;case
5:if(typeof
a!=="number"&&5===a[0]){var
g=a[2],bo=b[2],bp=Y(b[1],a[1]);if(0===bp){if(bo)if(g){var
c=g[1],bq=bo[1],e=0;switch(bq){case
0:if(c)e=1;else
var
d=c;break;case
1:var
k=1!==c?1:0;if(k)e=1;else
var
d=k;break;case
2:var
l=2!==c?1:0;if(l)e=1;else
var
d=l;break;default:if(3<=c)var
d=0;else
e=1}if(e)var
j=function(a){switch(a){case
0:return 0;case
1:return 1;case
2:return 2;default:return 3}},bz=j(c),d=g8(j(bq),bz);var
h=d}else
var
h=1;else
var
h=g?-1:g;return 0===h?Y(b[3],a[3]):h}return bp}break;case
6:if(typeof
a!=="number"&&6===a[0]){var
br=Y(b[1],a[1]);return 0===br?Y(b[2],a[2]):br}break;case
7:if(typeof
a!=="number"&&7===a[0])return g8(b[1],a[1]);break;case
8:if(typeof
a!=="number"&&8===a[0]){var
bs=Y(b[1],a[1]);return 0===bs?Y(b[2],a[2]):bs}break;case
9:if(typeof
a!=="number"&&9===a[0])return Y(b[1],a[1]);break;case
10:if(typeof
a!=="number"&&10===a[0])return Y(b[1],a[1]);break;case
11:if(typeof
a!=="number"&&11===a[0]){var
bt=Y(b[1],a[1]);return 0===bt?Y(b[2],a[2]):bt}break;case
12:if(typeof
a!=="number"&&12===a[0]){var
bu=Y(b[1],a[1]);return 0===bu?Y(b[2],a[2]):bu}break;case
13:if(typeof
a!=="number"&&13===a[0])return Y(b[1],a[1]);break;case
14:if(typeof
a!=="number"&&14===a[0])return g8(b[1],a[1]);break;case
15:if(typeof
a!=="number"&&15===a[0])return Y(b[1],a[1]);break;case
16:if(typeof
a!=="number"&&16===a[0]){var
bv=Y(b[1],a[1]);return 0===bv?Y(b[2],a[2]):bv}break;case
17:if(typeof
a!=="number"&&17===a[0])return Y(b[1],a[1]);break;case
18:if(typeof
a!=="number"&&18===a[0])return g8(b[1],a[1]);break;case
19:if(typeof
a!=="number"&&19===a[0])return Y(b[1],a[1]);break;case
20:if(typeof
a!=="number"&&20===a[0])return Y(b[1],a[1]);break;case
21:if(typeof
a!=="number"&&21===a[0]){var
bw=Y(b[1],a[1]);if(0===bw){var
bx=g8(b[2],a[2]);if(0===bx){var
by=g8(b[3],a[3]);return 0===by?g8(b[4],a[4]):by}return bx}return bw}break;case
22:if(typeof
a!=="number"&&22===a[0])return Y(b[1],a[1]);break;default:if(typeof
a!=="number"&&23===a[0])return Y(b[1],a[1])}function
m(a){if(typeof
a==="number"){var
b=a;if(55<=b)switch(b){case
55:return 72;case
56:return 73;case
57:return 74;case
58:return 76;case
59:return 77;case
60:return 78;case
61:return 80;case
62:return 81;case
63:return 82;case
64:return 83;case
65:return 84;case
66:return 85;case
67:return 86;case
68:return 87;case
69:return 88;case
70:return 89;case
71:return 90;case
72:return 91;case
73:return 92;case
74:return 93;case
75:return 94;case
76:return 96;case
77:return 97;case
78:return 98;case
79:return 99;case
80:return cA;case
81:return cm;case
82:return cX;case
83:return b8;case
84:return ci;case
85:return cl;case
86:return a2;case
87:return hn;case
88:return a3;case
89:return cr;case
90:return au;case
91:return hP;case
92:return io;case
93:return ip;case
94:return kl;case
95:return ke;case
96:return jf;case
97:return e4;case
98:return kv;case
99:return aP;case
100:return hm;case
101:return D;case
102:return Ql;case
103:return aC;case
104:return a7;case
105:return Qb;case
106:return Ff;case
107:return wq;default:return Qx}switch(b){case
0:return 4;case
1:return 8;case
2:return 15;case
3:return 16;case
4:return 17;case
5:return 18;case
6:return 19;case
7:return 20;case
8:return 21;case
9:return 22;case
10:return 23;case
11:return 24;case
12:return 25;case
13:return 26;case
14:return 27;case
15:return 28;case
16:return 29;case
17:return 30;case
18:return 31;case
19:return 32;case
20:return 33;case
21:return 34;case
22:return 35;case
23:return 36;case
24:return 37;case
25:return 39;case
26:return 40;case
27:return 41;case
28:return 42;case
29:return 43;case
30:return 45;case
31:return 46;case
32:return 47;case
33:return 48;case
34:return 51;case
35:return 52;case
36:return 53;case
37:return 54;case
38:return 55;case
39:return 56;case
40:return 57;case
41:return 58;case
42:return 59;case
43:return 60;case
44:return 61;case
45:return 62;case
46:return 63;case
47:return 64;case
48:return 65;case
49:return 66;case
50:return 67;case
51:return 68;case
52:return 69;case
53:return 70;default:return 71}}else
switch(a[0]){case
0:return 0;case
1:return 1;case
2:return 2;case
3:return 3;case
4:return 5;case
5:return 6;case
6:return 7;case
7:return 9;case
8:return 10;case
9:return 11;case
10:return 12;case
11:return 13;case
12:return 14;case
13:return 38;case
14:return 44;case
15:return 49;case
16:return 50;case
17:return 75;case
18:return 79;case
19:return 95;case
20:return hl;case
21:return je;case
22:return eV;default:return kG}}var
bA=m(a);return g8(m(b),bA)});var
a8r=[aQ,a8q,hu(0)],hA=[aQ,a_0,hu(0)];function
a8s(a){if(typeof
a==="number"){var
h=a;if(55<=h)switch(h){case
55:return a9l;case
56:return a9m;case
57:return a9n;case
58:return a9o;case
59:return a9p;case
60:return a9q;case
61:return Z(a9s,a9r);case
62:return Z(a9u,a9t);case
63:return Z(a9w,a9v);case
64:return a9x;case
65:return a9y;case
66:return a9z;case
67:return a9A;case
68:return a9B;case
69:return a9C;case
70:return a9D;case
71:return a9E;case
72:return a9F;case
73:return a9G;case
74:return a9H;case
75:return a9I;case
76:return a9J;case
77:return a9K;case
78:return a9L;case
79:return a9M;case
80:return a9N;case
81:return a9O;case
82:return Z(a9Q,a9P);case
83:return a9R;case
84:return a9S;case
85:return a9T;case
86:return a9U;case
87:return a9V;case
88:return a9W;case
89:return a9X;case
90:return a9Y;case
91:return a9Z;case
92:return a90;case
93:return a91;case
94:return Z(a93,a92);case
95:return a94;case
96:return a95;case
97:return a96;case
98:return a97;case
99:return a98;case
100:return a99;case
101:return a9_;case
102:return a9$;case
103:return a_a;case
104:return a_b;case
105:return a_c;case
106:return a_d;case
107:return a_e;default:return a_f}switch(h){case
0:return a8t;case
1:return a8u;case
2:return a8v;case
3:return a8w;case
4:return a8x;case
5:return a8y;case
6:return a8z;case
7:return a8A;case
8:return a8B;case
9:return a8C;case
10:return a8D;case
11:return a8E;case
12:return a8F;case
13:return a8G;case
14:return a8H;case
15:return a8I;case
16:return a8J;case
17:return a8K;case
18:return a8L;case
19:return a8M;case
20:return a8N;case
21:return a8O;case
22:return a8P;case
23:return a8Q;case
24:return a8R;case
25:return a8S;case
26:return a8T;case
27:return a8U;case
28:return a8V;case
29:return a8W;case
30:return a8X;case
31:return Z(a8Z,a8Y);case
32:return a80;case
33:return a81;case
34:return a82;case
35:return a83;case
36:return a84;case
37:return a85;case
38:return a86;case
39:return a87;case
40:return a88;case
41:return a89;case
42:return a8_;case
43:return a8$;case
44:return a9a;case
45:return a9b;case
46:return a9c;case
47:return a9d;case
48:return a9e;case
49:return a9f;case
50:return a9g;case
51:return a9h;case
52:return a9i;case
53:return a9j;default:return a9k}}else
switch(a[0]){case
0:var
l=a[2],u=a[1];return A(aH(a_g),l,l,u);case
1:var
v=a[1],w=a[2];return d(aH(a_h),w,v);case
2:var
x=a[1];return b(aH(a_i),x);case
3:var
m=a[2],y=a[1],n=b(aH(a_j),y);if(m){var
z=m[1];return d(aH(a_k),z,n)}return b(aH(a_l),n);case
4:var
o=a[1];return d(aH(a_m),o,o);case
5:var
f=a[3],p=a[2],g=a[1];if(p){var
q=p[1];if(3<=q)return d(aH(a_n),f,g);switch(q){case
0:var
c=a8m;break;case
1:var
c=a8n;break;case
2:var
c=a8o;break;default:var
c=a8p}return j(aH(a_o),g,c,f,c)}return d(aH(a_p),f,g);case
6:var
r=a[2],e=g7(r);if(0===b9(e))var
k=e;else{var
i=GT(e);aG(i,0,GQ(bL(e,0)));var
k=i}var
t=bE(k),B=a[1];return A(aH(a_q),r,t,B);case
7:return a[1]?a_r:a_s;case
8:var
C=a[1],D=a[2];return d(aH(a_t),D,C);case
9:var
E=a[1];return b(aH(a_u),E);case
10:var
F=a[1];return b(aH(a_v),F);case
11:var
G=a[2],H=a[1];return d(aH(a_w),H,G);case
12:var
I=a[2],J=a[1];return d(aH(a_x),J,I);case
13:return Z(a_z,Z(a[1],a_y));case
14:var
K=a[1]?a_A:a_C;return b(aH(a_B),K);case
15:return Z(a_E,Z(a[1],a_D));case
16:var
L=Z(a_G,Z(a[2],a_F));return Z(a[1],L);case
17:return Z(a_H,a[1]);case
18:return a[1]?Z(a_J,a_I):Z(a_L,a_K);case
19:var
M=a[1];return b(aH(a_M),M);case
20:return Z(a_O,Z(a[1],a_N));case
21:var
s=a[1],N=a[2]?a_P:a_W,O=a[4]?Z(a_Q,s):s,P=a[3]?a_R:a_V;return Z(a_U,Z(N,Z(P,Z(a_T,Z(O,a_S)))));case
22:return Z(a_Y,Z(a[1],a_X));default:var
Q=a[1];return b(aH(a_Z),Q)}}var
Ny=0,Nz=0,NA=0,NB=0,NC=0,ND=0,NE=0,NF=0,NG=0,NH=0;function
k(a){if(a[3]===a[2])return-1;var
b=a[1][1+a[3]];a[3]=a[3]+1|0;if(10===b){if(0!==a[5])a[5]=a[5]+1|0;a[4]=a[3]}return b}function
v(a,b){a[9]=a[3];a[10]=a[4];a[11]=a[5];a[12]=b;return 0}function
aq(a){a[6]=a[3];a[7]=a[4];a[8]=a[5];return v(a,-1)}function
l(a){a[3]=a[9];a[4]=a[10];a[5]=a[11];return a[12]}function
iI(a){a[3]=a[6];a[4]=a[7];a[5]=a[8];return 0}function
uD(b,a){b[6]=a;return 0}function
mV(a){return a[3]-a[6]|0}function
jL(a){var
b=a[3]-a[6]|0,c=a[6],d=a[1];if(0<=c&&0<=b&&!((d.length-1-b|0)<c))return bGG(d,c,b);return bv(TQ)}function
NI(a){var
b=a[6];return bb(a[1],b)[1+b]}function
jM(i,h,g,c){var
a=0,f=g,e=h;for(;;){if(0<f){var
b=i[1+e];if(0<=b){if(aC<b)if(RF<b)if(o4<b){if(oy<b)throw hA;aG(c,a,i_|b>>>18|0);aG(c,a+1|0,a7|(b>>>12|0)&63);aG(c,a+2|0,a7|(b>>>6|0)&63);aG(c,a+3|0,a7|b&63);var
d=a+4|0}else{aG(c,a,jg|b>>>12|0);aG(c,a+1|0,a7|(b>>>6|0)&63);aG(c,a+2|0,a7|b&63);var
d=a+3|0}else{aG(c,a,i3|b>>>6|0);aG(c,a+1|0,a7|b&63);var
d=a+2|0}else{aG(c,a,b);var
d=a+1|0}var
a=d,f=f-1|0,e=e+1|0;continue}throw hA}return a}}function
NJ(c){var
i=ah(c),e=jm(i,0),d=0,a=0;for(;;){if(a<i){var
b=K(c,a),h=0;if(i3<=b)if(i_<=b)if(aQ<=b)h=1;else{var
j=K(c,a+1|0),k=K(c,a+2|0),l=K(c,a+3|0),m=2!==(j>>>6|0)?1:0;if(m)var
n=m;else
var
v=2!==(k>>>6|0)?1:0,n=v||(2!==(l>>>6|0)?1:0);if(n)throw hA;var
o=(b&7)<<18|(j&63)<<12|(k&63)<<6|l&63;if(oy<o)throw hA;e[1+d]=o;var
f=a+4|0}else
if(jg<=b){var
p=K(c,a+1|0),q=K(c,a+2|0),g=(b&15)<<12|(p&63)<<6|q&63,w=2!==(p>>>6|0)?1:0,r=w||(2!==(q>>>6|0)?1:0);if(r)var
s=r;else
var
t=55296<=g?1:0,s=t?g<=57343?1:0:t;if(s)throw hA;e[1+d]=g;var
f=a+3|0}else{var
u=K(c,a+1|0);if(2!==(u>>>6|0))throw hA;e[1+d]=(b&31)<<6|u&63;var
f=a+2|0}else
if(a7<=b)h=1;else{e[1+d]=b;var
f=a+1|0}if(h)throw hA;var
d=d+1|0,a=f;continue}return[0,e,d,NH,NG,NF,NE,ND,NC,NB,NA,Nz,Ny]}}function
jN(b,f,a){var
c=b[6]+f|0,d=aW(a*4|0),e=b[1];if((c+a|0)<=e.length-1)return iy(d,0,jM(e,c,a,d));throw[0,ap,a_1]}function
X(a){var
b=a[6],c=a[3]-b|0,d=aW(c*4|0);return iy(d,0,jM(a[1],b,c,d))}function
jO(a,e){var
b=a[6],c=a[3]-b|0,d=aW(c*4|0);return rp(e,d,0,jM(a[1],b,c,d))}function
uE(a){var
b=a.length-1,c=aW(b*4|0);return iy(c,0,jM(a,0,b,c))}function
NK(a,b){a[3]=a[3]-b|0;return 0}var
NL=0;function
a_3(c,b,a){return[0,c,b,a_4,0,a,NL,a_2]}function
NM(b){var
a=b[2];return[0,b[1],[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12]],b[3],b[4],b[5],b[6],b[7]]}function
NN(a){return a[3][1]}function
mW(b,a){return b!==a[4]?[0,a[1],a[2],a[3],b,a[5],a[6],a[7]]:a}var
uF=function
c(a,b){return c.fun(a,b)},NO=function
c(a,b){return c.fun(a,b)},uG=function
c(a,b){return c.fun(a,b)},uH=function
c(a,b){return c.fun(a,b)},NP=function
c(a,b){return c.fun(a,b)};h(uF,function(c,a){if(typeof
c==="number"){var
d=c;if(61<=d)if(92<=d)switch(d){case
92:if(typeof
a==="number"&&92===a)return 1;break;case
93:if(typeof
a==="number"&&93===a)return 1;break;case
94:if(typeof
a==="number"&&94===a)return 1;break;case
95:if(typeof
a==="number"&&95===a)return 1;break;case
96:if(typeof
a==="number"&&96===a)return 1;break;case
97:if(typeof
a==="number"&&97===a)return 1;break;case
98:if(typeof
a==="number"&&98===a)return 1;break;case
99:if(typeof
a==="number"&&99===a)return 1;break;case
100:if(typeof
a==="number"&&cA===a)return 1;break;case
101:if(typeof
a==="number"&&cm===a)return 1;break;case
102:if(typeof
a==="number"&&cX===a)return 1;break;case
103:if(typeof
a==="number"&&b8===a)return 1;break;case
104:if(typeof
a==="number"&&ci===a)return 1;break;case
105:if(typeof
a==="number"&&cl===a)return 1;break;case
106:if(typeof
a==="number"&&a2===a)return 1;break;case
107:if(typeof
a==="number"&&hn===a)return 1;break;case
108:if(typeof
a==="number"&&hl===a)return 1;break;case
109:if(typeof
a==="number"&&je===a)return 1;break;case
110:if(typeof
a==="number"&&a3===a)return 1;break;case
111:if(typeof
a==="number"&&eV===a)return 1;break;case
112:if(typeof
a==="number"&&cr===a)return 1;break;case
113:if(typeof
a==="number"&&au===a)return 1;break;case
114:if(typeof
a==="number"&&hP===a)return 1;break;case
115:if(typeof
a==="number"&&io===a)return 1;break;case
116:if(typeof
a==="number"&&ip===a)return 1;break;case
117:if(typeof
a==="number"&&kl===a)return 1;break;case
118:if(typeof
a==="number"&&ke===a)return 1;break;case
119:if(typeof
a==="number"&&jf===a)return 1;break;case
120:if(typeof
a==="number"&&e4===a)return 1;break;default:if(typeof
a==="number"&&kv<=a)return 1}else
switch(d){case
61:if(typeof
a==="number"&&61===a)return 1;break;case
62:if(typeof
a==="number"&&62===a)return 1;break;case
63:if(typeof
a==="number"&&63===a)return 1;break;case
64:if(typeof
a==="number"&&64===a)return 1;break;case
65:if(typeof
a==="number"&&65===a)return 1;break;case
66:if(typeof
a==="number"&&66===a)return 1;break;case
67:if(typeof
a==="number"&&67===a)return 1;break;case
68:if(typeof
a==="number"&&68===a)return 1;break;case
69:if(typeof
a==="number"&&69===a)return 1;break;case
70:if(typeof
a==="number"&&70===a)return 1;break;case
71:if(typeof
a==="number"&&71===a)return 1;break;case
72:if(typeof
a==="number"&&72===a)return 1;break;case
73:if(typeof
a==="number"&&73===a)return 1;break;case
74:if(typeof
a==="number"&&74===a)return 1;break;case
75:if(typeof
a==="number"&&75===a)return 1;break;case
76:if(typeof
a==="number"&&76===a)return 1;break;case
77:if(typeof
a==="number"&&77===a)return 1;break;case
78:if(typeof
a==="number"&&78===a)return 1;break;case
79:if(typeof
a==="number"&&79===a)return 1;break;case
80:if(typeof
a==="number"&&80===a)return 1;break;case
81:if(typeof
a==="number"&&81===a)return 1;break;case
82:if(typeof
a==="number"&&82===a)return 1;break;case
83:if(typeof
a==="number"&&83===a)return 1;break;case
84:if(typeof
a==="number"&&84===a)return 1;break;case
85:if(typeof
a==="number"&&85===a)return 1;break;case
86:if(typeof
a==="number"&&86===a)return 1;break;case
87:if(typeof
a==="number"&&87===a)return 1;break;case
88:if(typeof
a==="number"&&88===a)return 1;break;case
89:if(typeof
a==="number"&&89===a)return 1;break;case
90:if(typeof
a==="number"&&90===a)return 1;break;default:if(typeof
a==="number"&&91===a)return 1}else
if(31<=d)switch(d){case
31:if(typeof
a==="number"&&31===a)return 1;break;case
32:if(typeof
a==="number"&&32===a)return 1;break;case
33:if(typeof
a==="number"&&33===a)return 1;break;case
34:if(typeof
a==="number"&&34===a)return 1;break;case
35:if(typeof
a==="number"&&35===a)return 1;break;case
36:if(typeof
a==="number"&&36===a)return 1;break;case
37:if(typeof
a==="number"&&37===a)return 1;break;case
38:if(typeof
a==="number"&&38===a)return 1;break;case
39:if(typeof
a==="number"&&39===a)return 1;break;case
40:if(typeof
a==="number"&&40===a)return 1;break;case
41:if(typeof
a==="number"&&41===a)return 1;break;case
42:if(typeof
a==="number"&&42===a)return 1;break;case
43:if(typeof
a==="number"&&43===a)return 1;break;case
44:if(typeof
a==="number"&&44===a)return 1;break;case
45:if(typeof
a==="number"&&45===a)return 1;break;case
46:if(typeof
a==="number"&&46===a)return 1;break;case
47:if(typeof
a==="number"&&47===a)return 1;break;case
48:if(typeof
a==="number"&&48===a)return 1;break;case
49:if(typeof
a==="number"&&49===a)return 1;break;case
50:if(typeof
a==="number"&&50===a)return 1;break;case
51:if(typeof
a==="number"&&51===a)return 1;break;case
52:if(typeof
a==="number"&&52===a)return 1;break;case
53:if(typeof
a==="number"&&53===a)return 1;break;case
54:if(typeof
a==="number"&&54===a)return 1;break;case
55:if(typeof
a==="number"&&55===a)return 1;break;case
56:if(typeof
a==="number"&&56===a)return 1;break;case
57:if(typeof
a==="number"&&57===a)return 1;break;case
58:if(typeof
a==="number"&&58===a)return 1;break;case
59:if(typeof
a==="number"&&59===a)return 1;break;default:if(typeof
a==="number"&&60===a)return 1}else
switch(d){case
0:if(typeof
a==="number"&&!a)return 1;break;case
1:if(typeof
a==="number"&&1===a)return 1;break;case
2:if(typeof
a==="number"&&2===a)return 1;break;case
3:if(typeof
a==="number"&&3===a)return 1;break;case
4:if(typeof
a==="number"&&4===a)return 1;break;case
5:if(typeof
a==="number"&&5===a)return 1;break;case
6:if(typeof
a==="number"&&6===a)return 1;break;case
7:if(typeof
a==="number"&&7===a)return 1;break;case
8:if(typeof
a==="number"&&8===a)return 1;break;case
9:if(typeof
a==="number"&&9===a)return 1;break;case
10:if(typeof
a==="number"&&10===a)return 1;break;case
11:if(typeof
a==="number"&&11===a)return 1;break;case
12:if(typeof
a==="number"&&12===a)return 1;break;case
13:if(typeof
a==="number"&&13===a)return 1;break;case
14:if(typeof
a==="number"&&14===a)return 1;break;case
15:if(typeof
a==="number"&&15===a)return 1;break;case
16:if(typeof
a==="number"&&16===a)return 1;break;case
17:if(typeof
a==="number"&&17===a)return 1;break;case
18:if(typeof
a==="number"&&18===a)return 1;break;case
19:if(typeof
a==="number"&&19===a)return 1;break;case
20:if(typeof
a==="number"&&20===a)return 1;break;case
21:if(typeof
a==="number"&&21===a)return 1;break;case
22:if(typeof
a==="number"&&22===a)return 1;break;case
23:if(typeof
a==="number"&&23===a)return 1;break;case
24:if(typeof
a==="number"&&24===a)return 1;break;case
25:if(typeof
a==="number"&&25===a)return 1;break;case
26:if(typeof
a==="number"&&26===a)return 1;break;case
27:if(typeof
a==="number"&&27===a)return 1;break;case
28:if(typeof
a==="number"&&28===a)return 1;break;case
29:if(typeof
a==="number"&&29===a)return 1;break;default:if(typeof
a==="number"&&30===a)return 1}}else
switch(c[0]){case
0:if(typeof
a!=="number"&&0===a[0]){var
A=a[1],j=b(b(uG,c[1]),A),B=j?ay(c[2],a[2]):j;return B}break;case
1:if(typeof
a!=="number"&&1===a[0]){var
C=a[1],k=b(b(uH,c[1]),C),D=k?ay(c[2],a[2]):k;return D}break;case
2:if(typeof
a!=="number"&&2===a[0]){var
e=a[1],f=c[1],v=iG(f[1],e[1]),l=v?ay(f[2],e[2]):v,m=l?ay(f[3],e[3]):l,E=m?f[4]===e[4]?1:0:m;return E}break;case
3:if(typeof
a!=="number"&&3===a[0]){var
g=a[1],h=c[1],w=iG(h[1],g[1]);if(w)var
F=g[2],i=b(b(NP,h[2]),F);else
var
i=w;var
G=i?h[3]===g[3]?1:0:i;return G}break;case
4:if(typeof
a!=="number"&&4===a[0]){var
x=iG(c[1],a[1]),n=x?ay(c[2],a[2]):x,H=n?ay(c[3],a[3]):n;return H}break;case
5:if(typeof
a!=="number"&&5===a[0]){var
y=iG(c[1],a[1]),o=y?ay(c[2],a[2]):y,I=o?ay(c[3],a[3]):o;return I}break;case
6:if(typeof
a!=="number"&&6===a[0])return ay(c[1],a[1]);break;case
7:if(typeof
a!=="number"&&7===a[0]){var
p=ay(c[1],a[1]);return p?iG(c[2],a[2]):p}break;case
8:if(typeof
a!=="number"&&8===a[0]){var
z=iG(c[1],a[1]),q=z?ay(c[2],a[2]):z,J=q?ay(c[3],a[3]):q;return J}break;case
9:if(typeof
a!=="number"&&9===a[0]){var
K=a[1];return b(b(NO,c[1]),K)}break;case
10:if(typeof
a!=="number"&&10===a[0]){var
L=a[1],r=b(b(uG,c[1]),L),s=r?c[2]==a[2]?1:0:r,M=s?ay(c[3],a[3]):s;return M}break;default:if(typeof
a!=="number"&&11===a[0]){var
N=a[1],t=b(b(uH,c[1]),N),u=t?c[2]==a[2]?1:0:t,O=u?ay(c[3],a[3]):u;return O}}return 0});h(NO,function(b,a){if(b){if(a)return 1}else
if(!a)return 1;return 0});h(uG,function(b,a){switch(b){case
0:if(!a)return 1;break;case
1:if(1===a)return 1;break;case
2:if(2===a)return 1;break;case
3:if(3===a)return 1;break;default:if(4<=a)return 1}return 0});h(uH,function(b,a){switch(b){case
0:if(!a)return 1;break;case
1:if(1===a)return 1;break;default:if(2<=a)return 1}return 0});h(NP,function(b,a){var
c=ay(b[1],a[1]),d=c?ay(b[2],a[2]):c,e=d?ay(b[3],a[3]):d;return e});function
NQ(b){if(typeof
b==="number"){var
a=b;if(61<=a){if(92<=a)switch(a){case
92:return bav;case
93:return baw;case
94:return bax;case
95:return bay;case
96:return baz;case
97:return baA;case
98:return baB;case
99:return baC;case
100:return baD;case
101:return baE;case
102:return baF;case
103:return baG;case
104:return baH;case
105:return baI;case
106:return baJ;case
107:return baK;case
108:return baL;case
109:return baM;case
110:return baN;case
111:return baO;case
112:return baP;case
113:return baQ;case
114:return baR;case
115:return baS;case
116:return baT;case
117:return baU;case
118:return baV;case
119:return baW;case
120:return baX;default:return baY}switch(a){case
61:return a$2;case
62:return a$3;case
63:return a$4;case
64:return a$5;case
65:return a$6;case
66:return a$7;case
67:return a$8;case
68:return a$9;case
69:return a$_;case
70:return a$$;case
71:return baa;case
72:return bab;case
73:return bac;case
74:return bad;case
75:return bae;case
76:return baf;case
77:return bag;case
78:return bah;case
79:return bai;case
80:return baj;case
81:return bak;case
82:return bal;case
83:return bam;case
84:return ban;case
85:return bao;case
86:return bap;case
87:return baq;case
88:return bar;case
89:return bas;case
90:return bat;default:return bau}}if(31<=a)switch(a){case
31:return a$y;case
32:return a$z;case
33:return a$A;case
34:return a$B;case
35:return a$C;case
36:return a$D;case
37:return a$E;case
38:return a$F;case
39:return a$G;case
40:return a$H;case
41:return a$I;case
42:return a$J;case
43:return a$K;case
44:return a$L;case
45:return a$M;case
46:return a$N;case
47:return a$O;case
48:return a$P;case
49:return a$Q;case
50:return a$R;case
51:return a$S;case
52:return a$T;case
53:return a$U;case
54:return a$V;case
55:return a$W;case
56:return a$X;case
57:return a$Y;case
58:return a$Z;case
59:return a$0;default:return a$1}switch(a){case
0:return a_5;case
1:return a_6;case
2:return a_7;case
3:return a_8;case
4:return a_9;case
5:return a__;case
6:return a_$;case
7:return a$a;case
8:return a$b;case
9:return a$c;case
10:return a$d;case
11:return a$e;case
12:return a$f;case
13:return a$g;case
14:return a$h;case
15:return a$i;case
16:return a$j;case
17:return a$k;case
18:return a$l;case
19:return a$m;case
20:return a$n;case
21:return a$o;case
22:return a$p;case
23:return a$q;case
24:return a$r;case
25:return a$s;case
26:return a$t;case
27:return a$u;case
28:return a$v;case
29:return a$w;default:return a$x}}else
switch(b[0]){case
0:return baZ;case
1:return ba0;case
2:return ba1;case
3:return ba2;case
4:return ba3;case
5:return ba4;case
6:return ba5;case
7:return ba6;case
8:return ba7;case
9:return ba8;case
10:return ba9;default:return ba_}}function
uI(a){if(typeof
a==="number"){var
b=a;if(61<=b){if(92<=b)switch(b){case
92:return bcB;case
93:return bcC;case
94:return bcD;case
95:return bcE;case
96:return bcF;case
97:return bcG;case
98:return bcH;case
99:return bcI;case
100:return bcJ;case
101:return bcK;case
102:return bcL;case
103:return bcM;case
104:return bcN;case
105:return bcO;case
106:return bcP;case
107:return bcQ;case
108:return bcR;case
109:return bcS;case
110:return bcT;case
111:return bcU;case
112:return bcV;case
113:return bcW;case
114:return bcX;case
115:return bcY;case
116:return bcZ;case
117:return bc0;case
118:return bc1;case
119:return bc2;case
120:return bc3;default:return bc4}switch(b){case
61:return bb8;case
62:return bb9;case
63:return bb_;case
64:return bb$;case
65:return bca;case
66:return bcb;case
67:return bcc;case
68:return bcd;case
69:return bce;case
70:return bcf;case
71:return bcg;case
72:return bch;case
73:return bci;case
74:return bcj;case
75:return bck;case
76:return bcl;case
77:return bcm;case
78:return bcn;case
79:return bco;case
80:return bcp;case
81:return bcq;case
82:return bcr;case
83:return bcs;case
84:return bct;case
85:return bcu;case
86:return bcv;case
87:return bcw;case
88:return bcx;case
89:return bcy;case
90:return bcz;default:return bcA}}if(31<=b)switch(b){case
31:return bbE;case
32:return bbF;case
33:return bbG;case
34:return bbH;case
35:return bbI;case
36:return bbJ;case
37:return bbK;case
38:return bbL;case
39:return bbM;case
40:return bbN;case
41:return bbO;case
42:return bbP;case
43:return bbQ;case
44:return bbR;case
45:return bbS;case
46:return bbT;case
47:return bbU;case
48:return bbV;case
49:return bbW;case
50:return bbX;case
51:return bbY;case
52:return bbZ;case
53:return bb0;case
54:return bb1;case
55:return bb2;case
56:return bb3;case
57:return bb4;case
58:return bb5;case
59:return bb6;default:return bb7}switch(b){case
0:return ba$;case
1:return bba;case
2:return bbb;case
3:return bbc;case
4:return bbd;case
5:return bbe;case
6:return bbf;case
7:return bbg;case
8:return bbh;case
9:return bbi;case
10:return bbj;case
11:return bbk;case
12:return bbl;case
13:return bbm;case
14:return bbn;case
15:return bbo;case
16:return bbp;case
17:return bbq;case
18:return bbr;case
19:return bbs;case
20:return bbt;case
21:return bbu;case
22:return bbv;case
23:return bbw;case
24:return bbx;case
25:return bby;case
26:return bbz;case
27:return bbA;case
28:return bbB;case
29:return bbC;default:return bbD}}else
switch(a[0]){case
2:return a[1][3];case
3:return a[1][2][3];case
5:var
c=Z(bc5,a[3]);return Z(bc6,Z(a[2],c));case
9:return a[1]?bc7:bc8;case
0:case
1:return a[2];case
6:case
7:return a[1];default:return a[3]}}function
jP(a){return b(aH(bc9),a)}function
uJ(d,c){var
f=d?d[1]:d,e=0;if(typeof
c==="number")if(au===c)var
b=bda,a=bdb;else
e=1;else
switch(c[0]){case
3:var
b=bdi,a=bdj;break;case
5:var
b=bdm,a=bdn;break;case
6:case
9:e=1;break;case
0:case
10:var
b=bdc,a=bdd;break;case
1:case
11:var
b=bde,a=bdf;break;case
2:case
8:var
b=bdg,a=bdh;break;default:var
b=bdk,a=bdl}if(e)var
b=bc_,a=jP(uI(c));return f?Z(b,Z(bc$,a)):a}function
uM(a){return 45<a?46<a?-1:0:-1}function
c8(a){if(8<a){if(iY<a){if(g3<a){if(ds<a)return-1;if(dy<a){var
b=a<=e9?1:0,e=b?-1:b;return e}if(gA<a){if(e3<a){if(fK<a){var
c=a<=fr?1:0,f=c?-1:c;return f}return 0}return-1}if(fp<a){var
d=a<=gx?1:0,g=d?-1:d;return g}return 0}return-1}return K(bdp,a-9|0)-1|0}return-1}function
ak(a){return 47<a?57<a?-1:0:-1}function
as(a){return 47<a?cX<a?-1:K(ber,a+a6|0)-1|0:-1}function
cD(a){return 47<a?a3<a?-1:K(bei,a+a6|0)-1|0:-1}function
iJ(a){return 35<a?aP<a?-1:K(bdO,a+bi|0)-1|0:-1}function
mX(a){return 87<a?e4<a?-1:K(uL,a-88|0)-1|0:-1}function
mY(a){return 45<a?57<a?-1:K(bes,a+ir|0)-1|0:-1}function
NR(a){return 35<a?aP<a?-1:K(bdP,a+bi|0)-1|0:-1}function
h4(a){return 47<a?D<a?-1:K(bef,a+a6|0)-1|0:-1}function
iK(a){return 35<a?aP<a?-1:K(bdQ,a+bi|0)-1|0:-1}function
h5(a){if(8<a){if(iY<a){if(g3<a){if(ds<a)return-1;if(dy<a){var
b=a<=e9?1:0,e=b?-1:b;return e}if(gA<a){if(e3<a){if(fK<a){var
c=a<=fr?1:0,f=c?-1:c;return f}return 0}return-1}if(fp<a){var
d=a<=gx?1:0,g=d?-1:d;return g}return 0}return-1}return K(bdq,a-9|0)-1|0}return-1}function
mZ(a){return 45<a?cm<a?-1:K(bdE,a+ir|0)-1|0:-1}function
NS(a){return 35<a?aP<a?-1:K(bdR,a+bi|0)-1|0:-1}function
m0(a){return 47<a?95<a?-1:K(beF,a+a6|0)-1|0:-1}function
m1(a){return 47<a?a3<a?-1:K(beH,a+a6|0)-1|0:-1}function
m2(a){return 47<a?a3<a?-1:K(bej,a+a6|0)-1|0:-1}function
m3(a){return 35<a?aP<a?-1:K(bdS,a+bi|0)-1|0:-1}function
m4(a){if(8<a){if(iY<a){if(g3<a){if(ds<a)return-1;if(dy<a){var
b=a<=e9?1:0,e=b?-1:b;return e}if(gA<a){if(e3<a){if(fK<a){var
c=a<=fr?1:0,f=c?-1:c;return f}return 0}return-1}if(fp<a){var
d=a<=gx?1:0,g=d?-1:d;return g}return 0}return-1}return K(bdr,a-9|0)-1|0}return-1}function
m5(a){return 44<a?57<a?-1:K(bdx,a+i8|0)-1|0:-1}function
c9(a){return 47<a?49<a?-1:0:-1}function
m6(a){return 47<a?95<a?-1:K(bdy,a+a6|0)-1|0:-1}function
h6(a){return 47<a?57<a?-1:K(beG,a+a6|0)-1|0:-1}function
m7(a){return 35<a?aP<a?-1:K(bdT,a+bi|0)-1|0:-1}function
NT(a){return hP<a?io<a?-1:0:-1}function
cP(a){return 60<a?61<a?-1:0:-1}function
NU(a){if(-1<a){if(aP<a){if(hm<a){if(bC<a){var
b=a<=bq?1:0,c=b?-1:b;return c}return 0}return-1}return K(bdK,a)-1|0}return-1}function
iL(a){return 47<a?a3<a?-1:K(bek,a+a6|0)-1|0:-1}function
m8(a){return 47<a?a3<a?-1:K(beq,a+a6|0)-1|0:-1}function
uN(a){return 60<a?62<a?-1:K(uK,a+wE|0)-1|0:-1}function
m9(a){return 65<a?98<a?-1:K(uL,a-66|0)-1|0:-1}function
a0(a){return 35<a?aP<a?-1:K(bdU,a+bi|0)-1|0:-1}function
m_(a){return io<a?ip<a?-1:0:-1}function
bH(a){return 47<a?55<a?-1:0:-1}function
uO(a){return je<a?a3<a?-1:0:-1}function
m$(a){return a3<a?eV<a?-1:0:-1}function
jQ(a){return 98<a?99<a?-1:0:-1}function
hB(a){return 47<a?48<a?-1:0:-1}function
jR(a){if(8<a){if(iY<a){if(g3<a){if(ds<a)return-1;if(dy<a){var
b=a<=e9?1:0,e=b?-1:b;return e}if(gA<a){if(e3<a){if(fK<a){var
c=a<=fr?1:0,f=c?-1:c;return f}return 0}return-1}if(fp<a){var
d=a<=gx?1:0,g=d?-1:d;return g}return 0}return-1}return K(bds,a-9|0)-1|0}return-1}function
na(a){return 45<a?cm<a?-1:K(bdz,a+ir|0)-1|0:-1}function
nb(a){return 78<a?eV<a?-1:K(uL,a-79|0)-1|0:-1}function
NV(a){return 41<a?42<a?-1:0:-1}function
NW(a){return 35<a?aP<a?-1:K(bdV,a+bi|0)-1|0:-1}function
nc(a){return 47<a?cm<a?-1:K(beg,a+a6|0)-1|0:-1}function
hC(a){return 35<a?aP<a?-1:K(bdW,a+bi|0)-1|0:-1}function
NX(a){return 41<a?61<a?-1:K(beo,a+Ds|0)-1|0:-1}function
h7(a){return 44<a?48<a?-1:K(beb,a+i8|0)-1|0:-1}function
NY(a){return 44<a?45<a?-1:0:-1}function
NZ(a){return ci<a?cl<a?-1:0:-1}function
nd(a){return hn<a?hl<a?-1:0:-1}function
N0(a){return 99<a?cA<a?-1:0:-1}function
ne(a){return 47<a?cX<a?-1:K(bet,a+a6|0)-1|0:-1}function
nf(a){return au<a?hP<a?-1:0:-1}function
h8(a){return 45<a?57<a?-1:K(bew,a+ir|0)-1|0:-1}function
N1(a){return 35<a?aP<a?-1:K(bdX,a+bi|0)-1|0:-1}function
h9(a){return 47<a?hm<a?-1:K(beI,a+a6|0)-1|0:-1}function
uP(a){return 35<a?aP<a?-1:K(bdY,a+bi|0)-1|0:-1}function
cd(a){return 9<a?10<a?-1:0:-1}function
N2(a){return 35<a?aP<a?-1:K(bdZ,a+bi|0)-1|0:-1}function
N3(a){return 96<a?97<a?-1:0:-1}function
c_(a){return 35<a?aP<a?-1:K(bd0,a+bi|0)-1|0:-1}function
ng(a){return 35<a?aP<a?-1:K(bd1,a+bi|0)-1|0:-1}function
hD(a){return 47<a?95<a?-1:K(bel,a+a6|0)-1|0:-1}function
N4(a){return 35<a?aP<a?-1:K(bd2,a+bi|0)-1|0:-1}function
jS(a){return cA<a?cm<a?-1:0:-1}function
N5(a){if(8<a){if(iY<a){if(g3<a){if(ds<a)return-1;if(dy<a){var
b=a<=e9?1:0,e=b?-1:b;return e}if(gA<a){if(e3<a){if(fK<a){var
c=a<=fr?1:0,f=c?-1:c;return f}return 0}return-1}if(fp<a){var
d=a<=gx?1:0,g=d?-1:d;return g}return 0}return-1}return K(bdu,a-9|0)-1|0}return-1}function
N6(a){return 35<a?aP<a?-1:K(bex,a+bi|0)-1|0:-1}function
nh(a){return 41<a?47<a?-1:K(bd_,a+Ds|0)-1|0:-1}function
ni(a){return 35<a?aP<a?-1:K(bd3,a+bi|0)-1|0:-1}function
N7(a){return 35<a?aP<a?-1:K(bd4,a+bi|0)-1|0:-1}function
N8(a){return ke<a?jf<a?-1:0:-1}function
nj(a){return 35<a?aP<a?-1:K(bd5,a+bi|0)-1|0:-1}function
bO(a){return 47<a?cm<a?-1:K(beh,a+a6|0)-1|0:-1}function
nk(a){return 42<a?57<a?-1:K(bdI,a+yf|0)-1|0:-1}function
c$(a){return 45<a?95<a?-1:K(bdN,a+ir|0)-1|0:-1}function
hE(a){return ip<a?kl<a?-1:0:-1}function
N9(a){return 46<a?47<a?-1:0:-1}function
N_(a){return 57<a?58<a?-1:0:-1}function
ao(a){return 35<a?aP<a?-1:K(bd6,a+bi|0)-1|0:-1}function
N$(a){for(;;){aq(a);var
c=k(a),d=aP<c?1:K(beB,c+1|0)-1|0;if(3<d>>>0)var
b=l(a);else
switch(d){case
0:var
b=1;break;case
1:var
b=2;break;case
2:var
b=0;break;default:v(a,2);if(0===hE(k(a))){var
e=h9(k(a));if(0===e)if(0===as(k(a))&&0===as(k(a)))var
f=0!==as(k(a))?1:0,b=f?l(a):f;else
var
b=l(a);else
if(1===e&&0===as(k(a)))for(;;){var
g=h4(k(a));if(0===g)continue;var
h=1!==g?1:0,b=h?l(a):h;break}else
var
b=l(a)}else
var
b=l(a)}if(2<b>>>0)throw[0,ap,beM];switch(b){case
0:continue;case
1:return 1;default:if(uC(NI(a)))continue;NK(a,1);return 0}}}function
nl(a,b){var
c=b-a[3][2]|0;return[0,NN(a),c]}function
jT(a,c,b){var
d=nl(a,b),e=nl(a,c);return[0,a[1],e,d]}function
bz(b,a){return nl(b,a[6])}function
b2(b,a){return nl(b,a[3])}function
aE(b,a){return jT(b,a[6],a[3])}function
Oa(d,a){var
c=0;if(typeof
a==="number")c=1;else
switch(a[0]){case
2:var
b=a[1][1];break;case
3:return a[1][1];case
4:var
b=a[1];break;case
7:var
b=a[2];break;case
5:case
8:return a[1];default:c=1}return c?aE(d,d[2]):b}function
bn(a,c,b){return[0,a[1],a[2],a[3],a[4],a[5],[0,[0,c,b],a[6]],a[7]]}function
Ob(c,b,a){return bn(c,b,[10,jP(a)])}function
uQ(d,c,b,a){return bn(d,c,[12,b,a])}function
cE(b,a){return bn(b,a,beO)}function
bP(a,b){var
c=b[3],d=[0,NN(a)+1|0,c];return[0,a[1],a[2],d,a[4],a[5],a[6],a[7]]}function
Oc(a){var
b=ah(a);if(0!==b&&a3===aU(a,b-1|0))return bZ(a,0,b-1|0);return a}function
cF(a,f,e,d,c){var
b=[0,a[1],f,e],g=aZ(d),h=c?0:1;return[0,b,[0,h,g,a[7][3][1]<b[2][1]?1:0]]}function
da(d,c){if(45===aU(c,0))var
a=bZ(c,1,ah(c)-1|0),e=1;else
var
a=c,e=0;switch(d){case
1:try{var
h=jl(jk(Z(beR,a))),b=h}catch(c){c=aS(c);if(c[1]!==b_)throw c;var
b=V(Z(beQ,a))}break;case
0:case
3:try{var
g=jl(jk(a)),b=g}catch(c){c=aS(c);if(c[1]!==b_)throw c;var
b=V(Z(beP,a))}break;default:try{var
i=kL(a),b=i}catch(c){c=aS(c);if(c[1]!==b_)throw c;var
b=V(Z(beS,a))}}var
f=e?-b:b;return[10,d,f,c]}function
cQ(d,a){if(45===aU(a,0))var
b=bZ(a,1,ah(a)-1|0),e=1;else
var
b=a,e=0;if(2<=d){var
f=Oc(b);try{var
k=kL(f),g=k}catch(a){a=aS(a);if(a[1]!==b_)throw a;var
g=V(Z(beT,f))}var
c=g}else{var
h=Oc(b);try{var
l=jl(jk(h)),i=l}catch(a){a=aS(a);if(a[1]!==b_)throw a;var
i=V(Z(beU,h))}var
c=i}var
j=e?-c:c;return[11,d,j,a]}function
Od(a,c,b){return uC(b)?a:bn(a,c,37)}function
Oe(e,c,a,b,d){var
f=jT(e,c+a[6]|0,c+a[3]|0);return[0,f,jN(a,b,(mV(a)-b|0)-d|0)]}function
Of(z,h){var
A=z[2][6],a=[0,h,h.length-1,NH,NG,NF,NE,ND,NC,NB,NA,Nz,Ny],e=aD(h.length-1),c=z;for(;;){aq(a);var
o=k(a),p=92<o?1:K(bed,o+1|0)-1|0;if(2<p>>>0)var
b=l(a);else
switch(p){case
0:var
b=2;break;case
1:for(;;){v(a,3);var
f=k(a);if(-1<f)if(91<f)var
q=f<=92?1:0,g=q?-1:q;else
var
g=0;else
var
g=-1;if(0===g)continue;var
b=l(a);break}break;default:v(a,3);if(0===hE(k(a))){var
r=h9(k(a));if(0===r)if(0===as(k(a))&&0===as(k(a)))var
s=0!==as(k(a))?1:0,b=s?l(a):s;else
var
b=l(a);else
if(1===r&&0===as(k(a)))for(;;){var
t=h4(k(a));if(0===t)continue;var
b=1===t?1:l(a);break}else
var
b=l(a)}else
var
b=l(a)}if(3<b>>>0)return V(beV);switch(b){case
0:var
u=Oe(c,A,a,2,0),w=u[1],d=c3(Z(beW,u[2])),i=0<=d?1:0,j=i?d<=55295?1:0:i;if(j)var
m=j;else
var
n=57344<=d?1:0,m=n?d<=oy?1:0:n;var
B=m?Od(c,w,d):bn(c,w,37);hZ(e,d);var
c=B;continue;case
1:var
x=Oe(c,A,a,3,1),y=c3(Z(beX,x[2])),C=Od(c,x[1],y);hZ(e,y);var
c=C;continue;case
2:return[0,c,aZ(e)];default:jO(a,e);continue}}}function
aV(b,a,c){var
e=cE(b,aE(b,a));iI(a);return d(c,e,a)}function
h_(r,h,a){var
b=r;for(;;){aq(a);var
e=k(a);if(-1<e)if(42<e)var
j=e<=bq?1:0,g=j?bC<e?1:0:j;else
var
g=K(bdv,e)-1|0;else
var
g=-1;if(3<g>>>0)var
d=l(a);else
switch(g){case
0:for(;;){v(a,3);var
c=k(a);if(-1<c)if(41<c)if(42<c)if(bC<c)var
m=c<=bq?1:0,f=m?-1:m;else
var
f=0;else
var
f=-1;else
var
f=K(bev,c)-1|0;else
var
f=-1;if(0===f)continue;var
d=l(a);break}break;case
1:var
d=0;break;case
2:v(a,0);var
n=0!==cd(k(a))?1:0,d=n?l(a):n;break;default:v(a,3);var
i=k(a),o=44<i?47<i?-1:K(beD,i+i8|0)-1|0:-1,d=0===o?0===N9(k(a))?2:l(a):1===o?1:l(a)}if(3<d>>>0){var
p=cE(b,aE(b,a));return[0,p,b2(p,a)]}switch(d){case
0:var
s=bP(b,a);jO(a,h);var
b=s;continue;case
1:var
q=b[4]?uQ(b,aE(b,a),beZ,beY):b;return[0,q,b2(q,a)];case
2:if(b[4])return[0,b,b2(b,a)];an(h,be0);continue;default:jO(a,h);continue}}}function
iM(e,j,a){for(;;){aq(a);var
f=k(a),g=13<f?bq<f?1:bC<f?2:1:K(bd9,f+1|0)-1|0;if(3<g>>>0)var
c=l(a);else
switch(g){case
0:var
c=0;break;case
1:for(;;){v(a,2);var
b=k(a);if(-1<b)if(12<b)if(13<b)if(bC<b)var
h=b<=bq?1:0,d=h?-1:h;else
var
d=0;else
var
d=-1;else
var
d=K(bdo,b)-1|0;else
var
d=-1;if(0===d)continue;var
c=l(a);break}break;case
2:var
c=1;break;default:v(a,1);var
c=0===cd(k(a))?1:l(a)}if(2<c>>>0)return V(be1);switch(c){case
0:return[0,e,b2(e,a)];case
1:var
i=b2(e,a),m=bP(e,a),n=mV(a);return[0,m,[0,i[1],i[2]-n|0]];default:jO(a,j);continue}}}function
Og(b,a){function
i(a){v(a,3);return 0===bH(k(a))?2:l(a)}aq(a);var
d=k(a),j=e4<d?bq<d?1:bC<d?2:1:K(bdG,d+1|0)-1|0;if(14<j>>>0)var
c=l(a);else
switch(j){case
1:var
c=16;break;case
2:var
c=15;break;case
3:v(a,15);var
c=0===cd(k(a))?15:l(a);break;case
4:v(a,4);var
c=0===bH(k(a))?i(a):l(a);break;case
5:v(a,11);var
c=0===bH(k(a))?i(a):l(a);break;case
7:var
c=5;break;case
8:var
c=6;break;case
9:var
c=7;break;case
10:var
c=8;break;case
11:var
c=9;break;case
12:v(a,14);var
m=h9(k(a));if(0===m)var
c=0===as(k(a))?0===as(k(a))?0===as(k(a))?12:l(a):l(a):l(a);else
if(1===m&&0===as(k(a)))for(;;){var
n=h4(k(a));if(0===n)continue;var
c=1===n?13:l(a);break}else
var
c=l(a);break;case
13:var
c=10;break;case
14:v(a,14);var
c=0===as(k(a))?0===as(k(a))?1:l(a):l(a);break;default:var
c=0}if(16<c>>>0)return V(be2);switch(c){case
1:var
o=X(a);return[0,b,o,[0,c3(Z(be3,o))],0];case
2:var
f=X(a),e=c3(Z(be4,f));return om<=e?[0,b,f,[0,e>>>3|0,48+(e&7)|0],1]:[0,b,f,[0,e],1];case
3:var
p=X(a);return[0,b,p,[0,c3(Z(be5,p))],1];case
4:return[0,b,be6,[0,0],0];case
5:return[0,b,be7,[0,8],0];case
6:return[0,b,be8,[0,12],0];case
7:return[0,b,be9,[0,10],0];case
8:return[0,b,be_,[0,13],0];case
9:return[0,b,be$,[0,9],0];case
10:return[0,b,bfa,[0,11],0];case
11:var
q=X(a);return[0,b,q,[0,c3(Z(bfb,q))],1];case
12:var
g=X(a);return[0,b,g,[0,c3(Z(bfc,bZ(g,1,ah(g)-1|0)))],0];case
13:var
h=X(a),r=c3(Z(bfd,bZ(h,2,ah(h)-3|0))),t=oy<r?cE(b,aE(b,a)):b;return[0,t,h,[0,r],0];case
14:var
u=X(a),w=jL(a);return[0,cE(b,aE(b,a)),u,w,0];case
15:var
x=X(a);return[0,bP(b,a),x,[0],0];default:var
s=X(a);return[0,b,s,jL(a),0]}}function
Oh(A,z,e,d,y,a){var
b=A,f=y;for(;;){aq(a);var
q=k(a),r=92<q?1:K(bec,q+1|0)-1|0;if(4<r>>>0)var
c=l(a);else
switch(r){case
0:var
c=3;break;case
1:for(;;){v(a,4);var
g=k(a);if(-1<g)if(91<g)var
s=g<=92?1:0,j=s?-1:s;else
var
j=K(bdB,g)-1|0;else
var
j=-1;if(0===j)continue;var
c=l(a);break}break;case
2:var
c=2;break;case
3:var
c=0;break;default:var
c=1}if(4<c>>>0)return V(bfe);switch(c){case
0:var
m=X(a);an(d,m);if(ay(z,m))return[0,b,b2(b,a),f];an(e,m);continue;case
1:an(d,bff);var
h=Og(b,a),B=h[4],C=B||f;an(d,h[2]);var
D=h[3];GX(function(a){return hZ(e,a)},D);var
b=h[1],f=C;continue;case
2:var
t=X(a);an(d,t);var
u=bP(cE(b,aE(b,a)),a);an(e,t);return[0,u,b2(u,a),f];case
3:var
w=X(a);an(d,w);var
x=cE(b,aE(b,a));an(e,w);return[0,x,b2(x,a),f];default:var
n=a[6],o=a[3]-n|0,i=aW(o*4|0),p=jM(a[1],n,o,i);rp(d,i,0,p);rp(e,i,0,p);continue}}}function
Oi(s,f,e,d,a){var
b=s;for(;;){aq(a);var
m=k(a),n=96<m?1:K(ben,m+1|0)-1|0;if(6<n>>>0)var
c=l(a);else
switch(n){case
0:var
c=0;break;case
1:for(;;){v(a,6);var
g=k(a);if(-1<g)if(95<g)var
o=g<=96?1:0,h=o?-1:o;else
var
h=K(bdA,g)-1|0;else
var
h=-1;if(0===h)continue;var
c=l(a);break}break;case
2:var
c=5;break;case
3:v(a,5);var
c=0===cd(k(a))?4:l(a);break;case
4:v(a,6);var
p=k(a),t=aP<p?hm<p?-1:0:-1,c=0===t?2:l(a);break;case
5:var
c=3;break;default:var
c=1}if(6<c>>>0)return V(bfg);switch(c){case
0:return[0,cE(b,aE(b,a)),1];case
1:cO(d,96);return[0,b,1];case
2:an(d,bfh);return[0,b,0];case
3:cO(e,92);cO(d,92);var
i=Og(b,a),q=i[2];an(e,q);an(d,q);var
u=i[3];GX(function(a){return hZ(f,a)},u);var
b=i[1];continue;case
4:an(e,bfi);an(d,bfj);an(f,bfk);var
b=bP(b,a);continue;case
5:var
r=X(a);an(e,r);an(d,r);cO(f,10);var
b=bP(b,a);continue;default:var
j=X(a);an(e,j);an(d,j);an(f,j);continue}}}function
bfl(a,b){function
d(a){for(;;){v(a,33);if(0===ao(k(a)))continue;return l(a)}}function
i(a){v(a,32);var
b=a0(k(a));if(0===b)for(;;){v(a,30);if(0===ao(k(a)))continue;return l(a)}return 1===b?d(a):l(a)}function
f(a){v(a,31);var
b=a0(k(a));if(0===b)for(;;){v(a,29);if(0===ao(k(a)))continue;return l(a)}return 1===b?d(a):l(a)}function
h(a){v(a,34);var
b=iK(k(a));if(2<b>>>0)return l(a);switch(b){case
0:return d(a);case
1:for(;;){v(a,34);var
c=c_(k(a));if(3<c>>>0)return l(a);switch(c){case
0:return d(a);case
1:continue;case
2:a:for(;;){if(0===ak(k(a)))for(;;){v(a,34);var
e=c_(k(a));if(3<e>>>0)return l(a);switch(e){case
0:return d(a);case
1:continue;case
2:continue a;default:return f(a)}}return l(a)}default:return f(a)}}default:return f(a)}}function
L(a){b:for(;;){if(0===ak(k(a)))for(;;){v(a,34);var
b=N4(k(a));if(4<b>>>0)return l(a);switch(b){case
0:return d(a);case
1:return h(a);case
2:continue;case
3:continue b;default:return i(a)}}return l(a)}}function
J(a){for(;;){v(a,23);if(0===ao(k(a)))continue;return l(a)}}function
I(a){for(;;){v(a,23);if(0===ao(k(a)))continue;return l(a)}}function
H(a){for(;;){v(a,15);if(0===ao(k(a)))continue;return l(a)}}function
G(a){for(;;){v(a,15);if(0===ao(k(a)))continue;return l(a)}}function
F(a){for(;;){v(a,11);if(0===ao(k(a)))continue;return l(a)}}function
E(a){for(;;){v(a,11);if(0===ao(k(a)))continue;return l(a)}}function
D(a){for(;;){v(a,17);if(0===ao(k(a)))continue;return l(a)}}function
C(a){for(;;){v(a,17);if(0===ao(k(a)))continue;return l(a)}}function
B(a){for(;;){v(a,19);if(0===ao(k(a)))continue;return l(a)}}function
m(a){for(;;){v(a,27);if(0===ao(k(a)))continue;return l(a)}}function
y(a){v(a,26);var
b=a0(k(a));if(0===b)for(;;){v(a,25);if(0===ao(k(a)))continue;return l(a)}return 1===b?m(a):l(a)}function
g(a){for(;;){v(a,27);if(0===ao(k(a)))continue;return l(a)}}function
j(a){v(a,26);var
b=a0(k(a));if(0===b)for(;;){v(a,25);if(0===ao(k(a)))continue;return l(a)}return 1===b?g(a):l(a)}function
x(a){b:for(;;){if(0===ak(k(a)))for(;;){v(a,28);var
b=c_(k(a));if(3<b>>>0)return l(a);switch(b){case
0:return g(a);case
1:continue;case
2:continue b;default:return j(a)}}return l(a)}}function
e(a){v(a,33);var
b=N6(k(a));if(3<b>>>0)return l(a);switch(b){case
0:return d(a);case
1:var
c=h6(k(a));if(0===c)for(;;){v(a,28);var
e=iK(k(a));if(2<e>>>0)return l(a);switch(e){case
0:return g(a);case
1:continue;default:return j(a)}}if(1===c)for(;;){v(a,28);var
f=c_(k(a));if(3<f>>>0)return l(a);switch(f){case
0:return g(a);case
1:continue;case
2:return x(a);default:return j(a)}}return l(a);case
2:for(;;){v(a,28);var
h=iK(k(a));if(2<h>>>0)return l(a);switch(h){case
0:return m(a);case
1:continue;default:return y(a)}}default:for(;;){v(a,28);var
i=c_(k(a));if(3<i>>>0)return l(a);switch(i){case
0:return m(a);case
1:continue;case
2:return x(a);default:return y(a)}}}}function
n(a){v(a,34);var
b=NW(k(a));if(3<b>>>0)return l(a);switch(b){case
0:return d(a);case
1:for(;;){v(a,34);var
c=hC(k(a));if(4<c>>>0)return l(a);switch(c){case
0:return d(a);case
1:continue;case
2:return e(a);case
3:a:for(;;){if(0===ak(k(a)))for(;;){v(a,34);var
g=hC(k(a));if(4<g>>>0)return l(a);switch(g){case
0:return d(a);case
1:continue;case
2:return e(a);case
3:continue a;default:return f(a)}}return l(a)}default:return f(a)}}case
2:return e(a);default:return f(a)}}function
A(a){return 0===nd(k(a))?0===m$(k(a))?0===N8(k(a))?0===NY(k(a))?0===NZ(k(a))?0===uO(k(a))?0===jQ(k(a))?0===nd(k(a))?0===hE(k(a))?0===N0(k(a))?0===jS(k(a))?3:l(a):l(a):l(a):l(a):l(a):l(a):l(a):l(a):l(a):l(a):l(a)}function
z(a){v(a,3);return 0===N_(k(a))?3:l(a)}function
aA(b){var
a=k(b),r=g3<a?Ct<a?-1:CC<a?nW<a?Fg<a?B_<a?x2<a?1:8:CP<a?Fa<a?wo<a?1:8:vT<a?1:8:za<a?AM<a?1:8:A1<a?1:8:oD<a?q0<a?pC<a?pR<a?pG<a?o1<a?yM<a?1:8:vv<a?1:8:Do<a?ww<a?1:8:Fi<a?1:8:nV<a?qI<a?BD<a?1:8:pd<a?1:8:qC<a?D_<a?1:8:FA<a?1:8:p4<a?DX<a?oX<a?Cz<a?1:8:z3<a?1:8:pl<a?qd<a?1:8:CV<a?1:8:qE<a?os<a?pD<a?1:8:oA<a?1:8:nG<a?ph<a?1:8:q4<a?1:8:wP<a?p2<a?oH<a?Ep<a?qO<a?1:8:qJ<a?1:8:qZ<a?Ej<a?1:8:xX<a?1:8:ps<a?qQ<a?pM<a?1:8:n7<a?1:8:BQ<a?qF<a?1:8:oN<a?1:8:n$<a?p1<a?oc<a?nY<a?1:8:px<a?1:8:pA<a?wn<a?1:8:DT<a?1:8:oZ<a?EU<a?pb<a?1:8:o9<a?1:8:nR<a?zl<a?1:8:BJ<a?1:8:Fs<a?xl<a?FB<a?CE<a?v1<a?Fu<a?1:8:vq<a?1:8:At<a?EQ<a?1:8:Ab<a?1:8:Ai<a?zk<a?zP<a?1:8:w0<a?1:8:F$<a?Gk<a?1:8:zN<a?1:8:zd<a?Fe<a?F8<a?Cy<a?1:8:yx<a?1:8:yL<a?nB<a?1:8:Bf<a?1:8:AG<a?yp<a?vi<a?1:8:1:8:pB<a?oI<a?ql<a?nZ<a?E6<a?1:8:Fh<a?1:8:p7<a?wY<a?1:8:x$<a?1:8:oY<a?of<a?wz<a?1:8:wg<a?1:8:qT<a?Bk<a?1:8:x_<a?1:8:nH<a?ok<a?pF<a?zz<a?1:8:w2<a?1:8:Dt<a?Aq<a?1:8:D$<a?1:8:pf<a?F0<a?D9<a?1:8:oQ<a?1:8:nP<a?vQ<a?1:8:E4<a?1:8:v7<a?pc<a?z8<a?ov<a?oj<a?nI<a?p9<a?yn<a?1:8:CT<a?1:8:xA<a?Ez<a?1:8:wD<a?1:8:qe<a?oS<a?xt<a?1:8:wV<a?1:8:qK<a?q3<a?1:8:Di<a?1:8:nU<a?zE<a?E8<a?y_<a?1:8:Ee<a?1:8:wI<a?n0<a?1:8:z7<a?1:8:yd<a?qh<a?EB<a?1:8:Av<a?1:8:A6<a?Eq<a?1:8:Bn<a?1:8:DL<a?Go<a?El<a?C$<a?A7<a?1:8:FP<a?1:8:Af<a?zD<a?1:8:DG<a?1:8:D6<a?AY<a?vF<a?1:8:yk<a?1:8:EX<a?v6<a?1:8:zu<a?1:8:vL<a?w8<a?xM<a?Fq<a?1:8:zn<a?1:8:Bz<a?xh<a?1:8:yK<a?1:8:wJ<a?pz<a?oJ<a?1:8:Bm<a?1:8:F1<a?Ei<a?1:8:BO<a?1:8:A3<a?Fx<a?wG<a?zW<a?vw<a?wr<a?1:8:DY<a?1:8:Fw<a?yo<a?1:8:wi<a?1:8:xy<a?BT<a?AZ<a?1:8:EL<a?1:8:CS<a?Ak<a?1:8:vG<a?1:8:v5<a?wx<a?wp<a?yv<a?1:8:FG<a?1:8:Gj<a?Cp<a?1:8:wa<a?1:8:z1<a?D2<a?yr<a?1:8:EH<a?1:8:E5<a?Bt<a?1:8:Bo<a?1:8:oo<a?qv<a?Ef<a?AX<a?BX<a?1:8:vo<a?1:8:B8<a?Fv<a?1:8:EA<a?1:8:v0<a?oC<a?xn<a?1:8:v8<a?1:8:BP<a?vX<a?1:8:Ce<a?1:8:Gm<a?xm<a?pH<a?Ey<a?1:8:Ad<a?1:8:ze<a?C1<a?1:8:vr<a?1:8:B6<a?oO<a?Gc<a?1:8:yE<a?1:8:wc<a?B2<a?1:8:qX<a?1:8:E0<a?w6<a?z5<a?yR<a?DQ<a?BI<a?z$<a?1:8:pO<a?1:8:zR<a?FO<a?1:8:xg<a?1:8:pm<a?Dc<a?n6<a?1:8:n1<a?1:8:Fk<a?Cc<a?1:8:wt<a?1:8:Au<a?xd<a?D8<a?zb<a?1:8:xw<a?1:8:CA<a?vy<a?1:8:A_<a?1:8:BY<a?D0<a?DD<a?1:8:vj<a?1:8:EN<a?vt<a?1:8:BW<a?1:8:vA<a?yz<a?zH<a?Ap<a?Dw<a?1:8:y6<a?1:8:A2<a?EG<a?1:8:vp<a?1:8:Ch<a?v2<a?wv<a?1:8:Bh<a?1:8:As<a?qP<a?1:8:zy<a?1:8:xP<a?Dy<a?vM<a?De<a?1:8:zK<a?1:8:oM<a?ow<a?1:8:FR<a?1:8:ox<a?zc<a?F7<a?1:8:xj<a?1:8:wQ<a?zs<a?1:8:yA<a?1:8:pW<a?Gl<a?qY<a?Ev<a?Ae<a?BM<a?1:8:oB<a?1:8:wT<a?DP<a?1:8:zV<a?1:8:o0<a?qM<a?wf<a?1:8:zU<a?1:8:FH<a?yG<a?1:8:Dr<a?1:8:pX<a?DR<a?nO<a?ya<a?1:8:vu<a?1:8:qL<a?w_<a?1:8:E$<a?1:8:oV<a?nD<a?wZ<a?1:8:o8<a?1:8:xb<a?wb<a?1:8:AT<a?1:8:FX<a?vI<a?pZ<a?yb<a?Cx<a?1:8:qy<a?1:8:DN<a?vl<a?1:8:xx<a?1:8:zt<a?wX<a?yP<a?1:8:pq<a?1:8:Cl<a?zX<a?1:8:oU<a?1:8:CH<a?wk<a?F9<a?oq<a?1:8:C2<a?1:8:Ex<a?zZ<a?1:8:E1<a?1:8:qq<a?yO<a?Cq<a?1:8:Cd<a?1:8:EO<a?AQ<a?1:8:AJ<a?1:8:FS<a?zJ<a?CG<a?qc<a?FM<a?Bv<a?Eu<a?Df<a?v9<a?1:8:yw<a?1:8:wO<a?Eb<a?1:8:qB<a?1:8:AI<a?zQ<a?Be<a?1:8:C0<a?1:8:FQ<a?xQ<a?1:8:EY<a?1:8:AL<a?yN<a?BA<a?zv<a?1:8:BB<a?1:8:zT<a?xH<a?1:8:BE<a?1:8:zp<a?EZ<a?CQ<a?1:8:EE<a?1:8:AP<a?v3<a?1:8:z2<a?1:8:E3<a?n4<a?AR<a?wR<a?wN<a?1:8:DF<a?1:8:vN<a?Dm<a?1:8:AN<a?1:8:AO<a?or<a?FF<a?1:8:vR<a?1:8:Aa<a?p8<a?1:8:FK<a?1:8:pS<a?Az<a?CW<a?C8<a?1:8:Bj<a?1:8:z_<a?Fz<a?1:8:F4<a?1:8:Am<a?EJ<a?Cj<a?1:8:vV<a?1:8:wA<a?w$<a?1:8:y1<a?1:8:Ah<a?xo<a?Gn<a?oa<a?Bi<a?pt<a?1:8:xU<a?1:8:pe<a?yi<a?1:8:nC<a?1:8:A$<a?E7<a?F3<a?1:8:yl<a?1:8:zF<a?vW<a?1:8:zA<a?1:8:w5<a?yg<a?vn<a?FY<a?1:8:Eg<a?1:8:Bw<a?CO<a?1:8:yC<a?1:8:yV<a?Dh<a?zx<a?1:8:xC<a?1:8:yW<a?yS<a?1:8:Bb<a?1:8:EW<a?B4<a?D7<a?CK<a?F5<a?1:8:xI<a?1:8:wB<a?Fm<a?1:8:F_<a?1:8:vm<a?wK<a?yY<a?1:8:yI<a?1:8:Gd<a?Cn<a?1:8:1:v_<a?qm<a?FJ<a?8:x0<a?1:8:wh<a?w1<a?1:8:xq<a?1:8:wy<a?vS<a?yH<a?1:8:vK<a?1:8:x7<a?1:8:qG<a?CY<a?Fr<a?xT<a?yt<a?8:C4<a?v$<a?1:8:wm<a?1:8:An<a?DJ<a?yh<a?1:8:xW<a?1:8:zM<a?xK<a?1:8:Er<a?1:8:qb<a?qS<a?pv<a?Gb<a?1:8:BL<a?1:8:pP<a?A9<a?1:8:z0<a?1:8:CJ<a?o4<a?wl<a?1:8:Dq<a?1:8:EM<a?CI<a?1:8:B$<a?1:8:Ck<a?Gg<a?Dv<a?wH<a?wW<a?1:8:1:8:Cr<a?8:od<a?Ec<a?1:8:EI<a?1:8:DS<a?qz<a?e9<a?ds<a?1:2:AV<a?1:8:zY<a?vY<a?1:8:BN<a?1:8:vC<a?E2<a?C5<a?1:8:y3<a?1:8:vZ<a?zS<a?1:8:vz<a?1:8:AU<a?FI<a?ot<a?pg<a?nT<a?xJ<a?1:8:Br<a?1:8:qo<a?pu<a?1:8:Dg<a?1:8:Bg<a?p$<a?Ft<a?1:8:zI<a?1:8:yX<a?qA<a?1:8:xY<a?1:8:FC<a?ER<a?FU<a?BK<a?1:8:Ax<a?1:8:xe<a?z6<a?1:8:wS<a?1:8:xz<a?yc<a?Bu<a?1:8:DE<a?1:8:x8<a?1:8:xv<a?qp<a?pN<a?Fd<a?1:8:pk<a?8:y2<a?1:8:En<a?qi<a?Bq<a?1:8:xL<a?1:8:CF<a?C9<a?1:8:DI<a?1:8:xu<a?BZ<a?v4<a?vE<a?1:8:1:Ar<a?8:Dj<a?1:8:Eo<a?xE<a?1:8:y0<a?yQ<a?1:8:yU<a?1:8:Da<a?pY<a?Gh<a?Al<a?vO<a?FT<a?yD<a?w9<a?1:8:yq<a?1:8:xO<a?Du<a?1:8:xr<a?1:8:Bp<a?vh<a?ou<a?1:8:1:8:Bl<a?CR<a?wF<a?x3<a?1:8:BV<a?1:8:nK<a?CD<a?1:8:Ca<a?1:8:Fl<a?Fo<a?1:8:Dd<a?DV<a?1:8:n9<a?1:8:zh<a?D1<a?wd<a?Dp<a?CZ<a?1:8:vs<a?1:8:Gf<a?wL<a?1:8:Aw<a?1:8:Dk<a?o_<a?x5<a?1:8:n2<a?1:8:Ci<a?ye<a?1:8:EK<a?1:8:Ao<a?AK<a?B1<a?By<a?1:8:C6<a?1:8:vD<a?xp<a?1:8:Ba<a?1:8:wC<a?DH<a?1:8:8:FE<a?C7<a?zw<a?CL<a?8:x1<a?yF<a?1:8:xS<a?1:8:Fb<a?xs<a?AA<a?1:8:1:8:zr<a?DZ<a?B0<a?1:8:8:Cs<a?Bc<a?Ag<a?1:8:1:zi<a?8:1:FZ<a?E9<a?nS<a?8:Cw<a?1:8:vB<a?CM<a?D3<a?1:8:AC<a?1:8:xV<a?1:8:Ek<a?BF<a?CU<a?1:8:ES<a?1:8:xf<a?zL<a?8:F6<a?1:8:yj<a?wU<a?1:8:AF<a?1:8:BR<a?B7<a?D4<a?oi<a?Ga<a?n8<a?yy<a?1:8:zm<a?1:8:we<a?1:8:xa<a?pJ<a?Gq<a?1:8:1:8:ED<a?FN<a?AB<a?Dx<a?1:8:1:8:w4<a?nX<a?xD<a?1:8:Bx<a?1:8:BG<a?1:8:o2<a?pU<a?fr<a?vx<a?8:dy<a?1:2:oG<a?Dl<a?1:8:zO<a?1:8:pQ<a?po<a?EC<a?1:8:y9<a?1:8:qN<a?Gp<a?1:8:Fy<a?1:8:EV<a?Fc<a?qW<a?zq<a?1:8:yu<a?1:8:qf<a?Em<a?1:8:q2<a?1:8:A0<a?Cg<a?DM<a?1:8:qr<a?1:8:qV<a?qD<a?1:8:EF<a?1:8:o7<a?B3<a?Cf<a?CB<a?y7<a?Ay<a?1:8:zg<a?1:8:wM<a?1:8:FV<a?DO<a?8:1:8:A5<a?Fp<a?yZ<a?o$<a?1:8:DC<a?1:8:w3<a?Gi<a?1:8:1:8:wu<a?DU<a?qn<a?p_<a?o6<a?1:8:n3<a?1:8:DB<a?pa<a?1:8:1:on<a?EP<a?8:qk<a?1:8:Bs<a?x9<a?1:8:oR<a?1:8:xi<a?DK<a?vU<a?qx<a?1:8:D5<a?1:8:Dn<a?oT<a?1:8:pn<a?1:8:gx<a?e3<a?fK<a?1:2:gA<a?1:2:bC<a?bq<a?1:3:fp<a?1:2:K(bd7,a+1|0)-1|0;if(36<r>>>0)return l(b);switch(r){case
0:return 98;case
1:return 99;case
2:v(b,1);if(0===c8(k(b)))for(;;){v(b,1);if(0===c8(k(b)))continue;return l(b)}return l(b);case
3:return 0;case
4:v(b,0);var
s=0!==cd(k(b))?1:0;return s?l(b):s;case
5:v(b,88);return 0===cP(k(b))?(v(b,58),0===cP(k(b))?54:l(b)):l(b);case
6:return 7;case
7:v(b,95);var
t=k(b),aD=32<t?33<t?-1:0:-1;return 0===aD?6:l(b);case
8:return 97;case
9:v(b,84);return 0===cP(k(b))?71:l(b);case
10:v(b,86);var
c=k(b),u=37<c?61<c?-1:K(beJ,c-38|0)-1|0:-1;return 0===u?(v(b,51),0===cP(k(b))?76:l(b)):1===u?72:l(b);case
11:return 38;case
12:return 39;case
13:v(b,82);var
w=NX(k(b));if(2<w>>>0)return l(b);switch(w){case
0:v(b,83);return 0===cP(k(b))?70:l(b);case
1:return 4;default:return 69}case
14:v(b,80);var
g=k(b),x=42<g?61<g?-1:K(beK,g+yf|0)-1|0:-1;return 0===x?59:1===x?67:l(b);case
15:return 45;case
16:v(b,81);var
j=k(b),y=44<j?61<j?-1:K(bdF,j+i8|0)-1|0:-1;return 0===y?60:1===y?68:l(b);case
17:v(b,43);var
M=h8(k(b));if(0===M)return 0===uM(k(b))?42:l(b);if(1===M)for(;;){v(b,34);var
N=hC(k(b));if(4<N>>>0)return l(b);switch(N){case
0:return d(b);case
1:continue;case
2:return e(b);case
3:a:for(;;){if(0===ak(k(b)))for(;;){v(b,34);var
O=hC(k(b));if(4<O>>>0)return l(b);switch(O){case
0:return d(b);case
1:continue;case
2:return e(b);case
3:continue a;default:return f(b)}}return l(b)}default:return f(b)}}return l(b);case
18:v(b,93);var
P=NX(k(b));if(2<P>>>0)return l(b);switch(P){case
0:v(b,2);var
Q=m4(k(b));if(2<Q>>>0)return l(b);switch(Q){case
0:for(;;){var
R=m4(k(b));if(2<R>>>0)return l(b);switch(R){case
0:continue;case
1:return z(b);default:return A(b)}}case
1:return z(b);default:return A(b)}case
1:return 5;default:return 92}case
19:v(b,34);var
S=uP(k(b));if(8<S>>>0)return l(b);switch(S){case
0:return d(b);case
1:return n(b);case
2:for(;;){v(b,20);var
T=N7(k(b));if(4<T>>>0)return l(b);switch(T){case
0:return B(b);case
1:return h(b);case
2:continue;case
3:for(;;){v(b,18);var
U=m3(k(b));if(3<U>>>0)return l(b);switch(U){case
0:return C(b);case
1:return h(b);case
2:continue;default:v(b,17);var
V=a0(k(b));if(0===V)for(;;){v(b,17);if(0===ao(k(b)))continue;return l(b)}return 1===V?C(b):l(b)}}default:v(b,19);var
W=a0(k(b));if(0===W)for(;;){v(b,19);if(0===ao(k(b)))continue;return l(b)}return 1===W?B(b):l(b)}}case
3:for(;;){v(b,18);var
X=m3(k(b));if(3<X>>>0)return l(b);switch(X){case
0:return D(b);case
1:return h(b);case
2:continue;default:v(b,17);var
Y=a0(k(b));if(0===Y)for(;;){v(b,17);if(0===ao(k(b)))continue;return l(b)}return 1===Y?D(b):l(b)}}case
4:v(b,33);var
Z=N1(k(b));if(0===Z)return d(b);if(1===Z)for(;;){v(b,12);var
_=ni(k(b));if(3<_>>>0)return l(b);switch(_){case
0:return E(b);case
1:continue;case
2:a:for(;;){if(0===c9(k(b)))for(;;){v(b,12);var
$=ni(k(b));if(3<$>>>0)return l(b);switch($){case
0:return F(b);case
1:continue;case
2:continue a;default:v(b,10);var
aa=a0(k(b));if(0===aa)for(;;){v(b,9);if(0===ao(k(b)))continue;return l(b)}return 1===aa?F(b):l(b)}}return l(b)}default:v(b,10);var
ab=a0(k(b));if(0===ab)for(;;){v(b,9);if(0===ao(k(b)))continue;return l(b)}return 1===ab?E(b):l(b)}}return l(b);case
5:return e(b);case
6:v(b,33);var
ac=N2(k(b));if(0===ac)return d(b);if(1===ac)for(;;){v(b,16);var
ad=ng(k(b));if(3<ad>>>0)return l(b);switch(ad){case
0:return G(b);case
1:continue;case
2:a:for(;;){if(0===bH(k(b)))for(;;){v(b,16);var
ae=ng(k(b));if(3<ae>>>0)return l(b);switch(ae){case
0:return H(b);case
1:continue;case
2:continue a;default:v(b,14);var
af=a0(k(b));if(0===af)for(;;){v(b,13);if(0===ao(k(b)))continue;return l(b)}return 1===af?H(b):l(b)}}return l(b)}default:v(b,14);var
ag=a0(k(b));if(0===ag)for(;;){v(b,13);if(0===ao(k(b)))continue;return l(b)}return 1===ag?G(b):l(b)}}return l(b);case
7:v(b,33);var
ah=NR(k(b));if(0===ah)return d(b);if(1===ah)for(;;){v(b,24);var
ai=nj(k(b));if(3<ai>>>0)return l(b);switch(ai){case
0:return I(b);case
1:continue;case
2:a:for(;;){if(0===as(k(b)))for(;;){v(b,24);var
aj=nj(k(b));if(3<aj>>>0)return l(b);switch(aj){case
0:return J(b);case
1:continue;case
2:continue a;default:v(b,22);var
al=a0(k(b));if(0===al)for(;;){v(b,21);if(0===ao(k(b)))continue;return l(b)}return 1===al?J(b):l(b)}}return l(b)}default:v(b,22);var
am=a0(k(b));if(0===am)for(;;){v(b,21);if(0===ao(k(b)))continue;return l(b)}return 1===am?I(b):l(b)}}return l(b);default:return i(b)}case
20:v(b,34);var
an=m7(k(b));if(5<an>>>0)return l(b);switch(an){case
0:return d(b);case
1:return n(b);case
2:for(;;){v(b,34);var
ap=m7(k(b));if(5<ap>>>0)return l(b);switch(ap){case
0:return d(b);case
1:return n(b);case
2:continue;case
3:return e(b);case
4:return L(b);default:return i(b)}}case
3:return e(b);case
4:return L(b);default:return i(b)}case
21:return 46;case
22:return 44;case
23:v(b,78);var
m=k(b),aq=59<m?61<m?-1:K(uK,m-60|0)-1|0:-1;return 0===aq?(v(b,62),0===cP(k(b))?61:l(b)):1===aq?55:l(b);case
24:v(b,90);var
ar=uN(k(b));return 0===ar?(v(b,57),0===cP(k(b))?53:l(b)):1===ar?91:l(b);case
25:v(b,79);var
at=uN(k(b));if(0===at)return 56;if(1===at){v(b,66);var
au=uN(k(b));return 0===au?63:1===au?(v(b,65),0===cP(k(b))?64:l(b)):l(b)}return l(b);case
26:v(b,50);var
o=k(b),av=45<o?63<o?-1:K(bdw,o+ir|0)-1|0:-1;return 0===av?(v(b,48),0===ak(k(b))?47:l(b)):1===av?(v(b,49),0===cP(k(b))?75:l(b)):l(b);case
27:v(b,94);var
aw=k(b),aE=63<aw?64<aw?-1:0:-1;if(0===aE){var
p=k(b),ax=96<p?cl<p?-1:K(bem,p+pE|0)-1|0:-1;if(0===ax){if(0===NT(k(b))){var
ay=k(b),aF=e4<ay?kv<ay?-1:0:-1;if(0===aF){if(0===uO(k(b))){if(0===jQ(k(b))){var
az=k(b),aG=72<az?73<az?-1:0:-1;return 0===aG?0===m_(k(b))?0===jS(k(b))?0===nf(k(b))?0===N3(k(b))?0===m_(k(b))?0===m$(k(b))?0===nf(k(b))?35:l(b):l(b):l(b):l(b):l(b):l(b):l(b):l(b)}return l(b)}return l(b)}return l(b)}return l(b)}return 1===ax?0===m_(k(b))?0===jS(k(b))?0===nf(k(b))?0===N3(k(b))?0===m_(k(b))?0===m$(k(b))?0===nf(k(b))?35:l(b):l(b):l(b):l(b):l(b):l(b):l(b):l(b)}return l(b);case
28:return 40;case
29:v(b,96);if(0===hE(k(b))){var
aA=h9(k(b));if(0===aA)return 0===as(k(b))?0===as(k(b))?0===as(k(b))?97:l(b):l(b):l(b);if(1===aA){if(0===as(k(b)))for(;;){var
aB=h4(k(b));if(0===aB)continue;return 1===aB?97:l(b)}return l(b)}return l(b)}return l(b);case
30:return 41;case
31:v(b,87);return 0===cP(k(b))?74:l(b);case
32:return 8;case
33:return 36;case
34:v(b,85);var
q=k(b),aC=60<q?kG<q?-1:K(beL,q+wE|0)-1|0:-1;return 0===aC?73:1===aC?(v(b,52),0===cP(k(b))?77:l(b)):l(b);case
35:return 37;default:return 89}}aq(b);var
M=aA(b);if(99<M>>>0)return V(bfm);var
w=M;if(50<=w)switch(w){case
50:return[0,a,85];case
51:return[0,a,88];case
52:return[0,a,87];case
53:return[0,a,94];case
54:return[0,a,95];case
55:return[0,a,96];case
56:return[0,a,97];case
57:return[0,a,92];case
58:return[0,a,93];case
59:return[0,a,eV];case
60:return[0,a,cr];case
61:return[0,a,69];case
62:return[0,a,cA];case
63:return[0,a,68];case
64:return[0,a,67];case
65:return[0,a,cX];case
66:return[0,a,cm];case
67:return[0,a,78];case
68:return[0,a,77];case
69:return[0,a,75];case
70:return[0,a,76];case
71:return[0,a,73];case
72:return[0,a,72];case
73:return[0,a,71];case
74:return[0,a,70];case
75:return[0,a,79];case
76:return[0,a,80];case
77:return[0,a,81];case
78:return[0,a,98];case
79:return[0,a,99];case
80:return[0,a,b8];case
81:return[0,a,ci];case
82:return[0,a,a2];case
83:return[0,a,hn];case
84:return[0,a,hl];case
85:return[0,a,89];case
86:return[0,a,91];case
87:return[0,a,90];case
88:return[0,a,je];case
89:return[0,a,a3];case
90:return[0,a,82];case
91:return[0,a,11];case
92:return[0,a,74];case
93:return[0,a,cl];case
94:return[0,a,13];case
95:return[0,a,14];case
96:return[2,cE(a,aE(a,b))];case
97:var
aj=b[6];N$(b);var
a1=jT(a,aj,b[3]);uD(b,aj);var
al=jL(b),am=Of(a,al),c=am[2],ap=Y(c,bfF);if(0<=ap){if(!(0<ap))return[0,a,18];var
ar=Y(c,bfG);if(0<=ar){if(!(0<ar))return[0,a,51];var
at=Y(c,bfH);if(0<=at){if(!(0<at))return[0,a,46];if(!p(c,bfI))return[0,a,24];if(!p(c,bfJ))return[0,a,47];if(!p(c,bfK))return[0,a,25];if(!p(c,bfL))return[0,a,26];if(!p(c,bfM))return[0,a,58]}else{if(!p(c,bfN))return[0,a,20];if(!p(c,bfO))return[0,a,21];if(!p(c,bfP))return[0,a,22];if(!p(c,bfQ))return[0,a,31];if(!p(c,bfR))return[0,a,23];if(!p(c,bfS))return[0,a,61]}}else{var
av=Y(c,bfT);if(0<=av){if(!(0<av))return[0,a,54];if(!p(c,bfU))return[0,a,55];if(!p(c,bfV))return[0,a,56];if(!p(c,bfW))return[0,a,57];if(!p(c,bfX))return[0,a,19];if(!p(c,bfY))return[0,a,42]}else{if(!p(c,bfZ))return[0,a,53];if(!p(c,bf0))return[0,a,28];if(!p(c,bf1))return[0,a,44];if(!p(c,bf2))return[0,a,29];if(!p(c,bf3))return[0,a,63];if(!p(c,bf4))return[0,a,62]}}}else{var
aw=Y(c,bf5);if(0<=aw){if(!(0<aw))return[0,a,37];var
ax=Y(c,bf6);if(0<=ax){if(!(0<ax))return[0,a,39];if(!p(c,bf7))return[0,a,15];if(!p(c,bf8))return[0,a,16];if(!p(c,bf9))return[0,a,52];if(!p(c,bf_))return[0,a,50];if(!p(c,bf$))return[0,a,17]}else{if(!p(c,bga))return[0,a,43];if(!p(c,bgb))return[0,a,48];if(!p(c,bgc))return[0,a,49];if(!p(c,bgd))return[0,a,41];if(!p(c,bge))return[0,a,30];if(!p(c,bgf))return[0,a,38]}}else{var
az=Y(c,bgg);if(0<=az){if(!(0<az))return[0,a,27];if(!p(c,bgh))return[0,a,35];if(!p(c,bgi))return[0,a,59];if(!p(c,bgj))return[0,a,60];if(!p(c,bgk))return[0,a,36];if(!p(c,bgl))return[0,a,45]}else{if(!p(c,bgm))return[0,a,64];if(!p(c,bgn))return[0,a,65];if(!p(c,bgo))return[0,a,32];if(!p(c,bgp))return[0,a,33];if(!p(c,bgq))return[0,a,34];if(!p(c,bgr))return[0,a,40]}}}var
a4=[4,a1,c,uE(al)];return[0,am[1],a4];case
98:var
a5=a[4]?bn(a,aE(a,b),6):a;return[0,a5,au];default:var
a7=cE(a,aE(a,b));return[0,a7,[6,X(b)]]}switch(w){case
0:return[2,bP(a,b)];case
1:return[2,a];case
2:var
aB=bz(a,b),N=aD(aC),O=h_(a,N,b),P=O[1];return[1,P,cF(P,aB,O[2],N,1)];case
3:var
o=X(b);if(a[5]){var
aF=a[4]?Ob(a,aE(a,b),o):a,Q=mW(1,aF),R=mV(b);if(ay(jN(b,R-1|0,1),bfn)&&p(jN(b,R-2|0,1),bfo))return[0,Q,86];return[2,Q]}var
aG=bz(a,b),q=aD(aC);an(q,bZ(o,2,ah(o)-2|0));var
S=h_(a,q,b),T=S[1];return[1,T,cF(T,aG,S[2],q,1)];case
4:if(a[4])return[2,mW(0,a)];iI(b);aq(b);var
U=0!==NV(k(b))?1:0,aH=U?l(b):U;return 0===aH?[0,a,a2]:V(bfp);case
5:var
aI=bz(a,b),W=aD(aC),Z=iM(a,W,b),_=Z[1];return[1,_,cF(_,aI,Z[2],W,0)];case
6:return 0===b[6]?[2,iM(a,aD(aC),b)[1]]:[0,a,bfq];case
7:var
$=X(b),aJ=bz(a,b),aa=aD(aC),r=aD(aC);an(r,$);var
s=Oh(a,$,aa,r,0,b),ab=s[1],aK=[0,ab[1],aJ,s[2]],aL=s[3],aM=aZ(r);return[0,ab,[2,[0,aK,aZ(aa),aM,aL]]];case
8:var
ac=aD(aC),ad=aD(aC),t=aD(aC);jO(b,t);var
aN=bz(a,b),ae=Oi(a,ac,ad,t,b),u=ae[1],aO=b2(u,b),aP=[0,u[1],aN,aO],aQ=ae[2],aR=aZ(t),aS=aZ(ad);return[0,u,[3,[0,aP,[0,aZ(ac),aS,aR],aQ]]];case
9:return aV(a,b,function(f,a){aq(a);if(0===hB(k(a))&&0===m9(k(a))&&0===c9(k(a)))for(;;){var
d=m1(k(a));if(2<d>>>0)var
b=l(a);else
switch(d){case
0:continue;case
1:a:for(;;){if(0===c9(k(a)))for(;;){var
e=m1(k(a));if(2<e>>>0)var
c=l(a);else
switch(e){case
0:continue;case
1:continue a;default:var
c=0}break}else
var
c=l(a);var
b=c;break}break;default:var
b=0}break}else
var
b=l(a);return 0===b?[0,f,[1,0,X(a)]]:V(bfr)});case
10:return[0,a,[1,0,X(b)]];case
11:return aV(a,b,function(f,a){aq(a);if(0===hB(k(a))&&0===m9(k(a))&&0===c9(k(a)))for(;;){v(a,0);var
c=m0(k(a));if(0===c)continue;if(1===c)a:for(;;){if(0===c9(k(a)))for(;;){v(a,0);var
e=m0(k(a));if(0===e)continue;if(1===e)continue a;var
d=l(a);break}else
var
d=l(a);var
b=d;break}else
var
b=l(a);break}else
var
b=l(a);return 0===b?[0,f,[0,0,X(a)]]:V(bfs)});case
12:return[0,a,[0,0,X(b)]];case
13:return aV(a,b,function(f,a){aq(a);if(0===hB(k(a))&&0===nb(k(a))&&0===bH(k(a)))for(;;){var
d=m8(k(a));if(2<d>>>0)var
b=l(a);else
switch(d){case
0:continue;case
1:a:for(;;){if(0===bH(k(a)))for(;;){var
e=m8(k(a));if(2<e>>>0)var
c=l(a);else
switch(e){case
0:continue;case
1:continue a;default:var
c=0}break}else
var
c=l(a);var
b=c;break}break;default:var
b=0}break}else
var
b=l(a);return 0===b?[0,f,[1,1,X(a)]]:V(bft)});case
14:return[0,a,[1,1,X(b)]];case
15:return aV(a,b,function(f,a){aq(a);if(0===hB(k(a))&&0===nb(k(a))&&0===bH(k(a)))for(;;){v(a,0);var
c=m6(k(a));if(0===c)continue;if(1===c)a:for(;;){if(0===bH(k(a)))for(;;){v(a,0);var
e=m6(k(a));if(0===e)continue;if(1===e)continue a;var
d=l(a);break}else
var
d=l(a);var
b=d;break}else
var
b=l(a);break}else
var
b=l(a);return 0===b?[0,f,[0,3,X(a)]]:V(bfu)});case
16:return[0,a,[0,3,X(b)]];case
17:return aV(a,b,function(e,a){aq(a);if(0===hB(k(a)))for(;;){var
b=k(a),d=47<b?57<b?-1:K(bey,b+a6|0)-1|0:-1;if(0===d)continue;if(1===d)for(;;){v(a,0);if(0===ak(k(a)))continue;var
c=l(a);break}else
var
c=l(a);break}else
var
c=l(a);return 0===c?[0,e,[0,2,X(a)]]:V(bfv)});case
18:return[0,a,[0,2,X(b)]];case
19:return aV(a,b,function(c,a){aq(a);if(0===hB(k(a))&&0===bH(k(a)))for(;;){v(a,0);if(0===bH(k(a)))continue;var
b=l(a);break}else
var
b=l(a);return 0===b?[0,c,[0,1,X(a)]]:V(bfw)});case
20:return[0,a,[0,1,X(b)]];case
21:return aV(a,b,function(f,a){aq(a);if(0===hB(k(a))&&0===mX(k(a))&&0===as(k(a)))for(;;){var
d=m2(k(a));if(2<d>>>0)var
b=l(a);else
switch(d){case
0:continue;case
1:a:for(;;){if(0===as(k(a)))for(;;){var
e=m2(k(a));if(2<e>>>0)var
c=l(a);else
switch(e){case
0:continue;case
1:continue a;default:var
c=0}break}else
var
c=l(a);var
b=c;break}break;default:var
b=0}break}else
var
b=l(a);return 0===b?[0,f,[1,2,X(a)]]:V(bfx)});case
23:return aV(a,b,function(f,a){aq(a);if(0===hB(k(a))&&0===mX(k(a))&&0===as(k(a)))for(;;){v(a,0);var
c=ne(k(a));if(0===c)continue;if(1===c)a:for(;;){if(0===as(k(a)))for(;;){v(a,0);var
e=ne(k(a));if(0===e)continue;if(1===e)continue a;var
d=l(a);break}else
var
d=l(a);var
b=d;break}else
var
b=l(a);break}else
var
b=l(a);return 0===b?[0,f,[0,4,X(a)]]:V(bfy)});case
25:return aV(a,b,function(e,a){function
g(a){for(;;){var
b=cD(k(a));if(2<b>>>0)return l(a);switch(b){case
0:continue;case
1:a:for(;;){if(0===ak(k(a)))for(;;){var
c=cD(k(a));if(2<c>>>0)return l(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}return l(a)}default:return 0}}}function
f(a){for(;;){var
b=iL(k(a));if(0===b)continue;var
c=1!==b?1:0;return c?l(a):c}}function
c(a){var
b=nk(k(a));if(2<b>>>0)return l(a);switch(b){case
0:var
c=h6(k(a));return 0===c?f(a):1===c?g(a):l(a);case
1:return f(a);default:return g(a)}}function
h(a){var
b=nc(k(a));if(0===b)for(;;){var
d=bO(k(a));if(2<d>>>0)return l(a);switch(d){case
0:continue;case
1:return c(a);default:a:for(;;){if(0===ak(k(a)))for(;;){var
e=bO(k(a));if(2<e>>>0)return l(a);switch(e){case
0:continue;case
1:return c(a);default:continue a}}return l(a)}}}return 1===b?c(a):l(a)}aq(a);var
i=mY(k(a));if(2<i>>>0)var
b=l(a);else
switch(i){case
0:if(0===ak(k(a)))for(;;){var
j=bO(k(a));if(2<j>>>0)var
b=l(a);else
switch(j){case
0:continue;case
1:var
b=c(a);break;default:a:for(;;){if(0===ak(k(a)))for(;;){var
m=bO(k(a));if(2<m>>>0)var
d=l(a);else
switch(m){case
0:continue;case
1:var
d=c(a);break;default:continue a}break}else
var
d=l(a);var
b=d;break}}break}else
var
b=l(a);break;case
1:var
n=mZ(k(a)),b=0===n?h(a):1===n?c(a):l(a);break;default:for(;;){var
o=na(k(a));if(2<o>>>0)var
b=l(a);else
switch(o){case
0:var
b=h(a);break;case
1:continue;default:var
b=c(a)}break}}if(0===b){var
p=bn(e,aE(e,a),23);return[0,p,[1,2,X(a)]]}return V(bfz)});case
26:var
aT=bn(a,aE(a,b),23);return[0,aT,[1,2,X(b)]];case
27:return aV(a,b,function(o,a){function
f(a){for(;;){v(a,0);var
b=hD(k(a));if(0===b)continue;if(1===b)a:for(;;){if(0===ak(k(a)))for(;;){v(a,0);var
c=hD(k(a));if(0===c)continue;if(1===c)continue a;return l(a)}return l(a)}return l(a)}}function
e(a){for(;;){v(a,0);if(0===ak(k(a)))continue;return l(a)}}function
c(a){var
b=nk(k(a));if(2<b>>>0)return l(a);switch(b){case
0:var
c=h6(k(a));return 0===c?e(a):1===c?f(a):l(a);case
1:return e(a);default:return f(a)}}function
g(a){var
b=nc(k(a));if(0===b)for(;;){var
d=bO(k(a));if(2<d>>>0)return l(a);switch(d){case
0:continue;case
1:return c(a);default:a:for(;;){if(0===ak(k(a)))for(;;){var
e=bO(k(a));if(2<e>>>0)return l(a);switch(e){case
0:continue;case
1:return c(a);default:continue a}}return l(a)}}}return 1===b?c(a):l(a)}aq(a);var
h=mY(k(a));if(2<h>>>0)var
b=l(a);else
switch(h){case
0:if(0===ak(k(a)))for(;;){var
i=bO(k(a));if(2<i>>>0)var
b=l(a);else
switch(i){case
0:continue;case
1:var
b=c(a);break;default:a:for(;;){if(0===ak(k(a)))for(;;){var
j=bO(k(a));if(2<j>>>0)var
d=l(a);else
switch(j){case
0:continue;case
1:var
d=c(a);break;default:continue a}break}else
var
d=l(a);var
b=d;break}}break}else
var
b=l(a);break;case
1:var
m=mZ(k(a)),b=0===m?g(a):1===m?c(a):l(a);break;default:for(;;){var
n=na(k(a));if(2<n>>>0)var
b=l(a);else
switch(n){case
0:var
b=g(a);break;case
1:continue;default:var
b=c(a)}break}}return 0===b?[0,o,[0,4,X(a)]]:V(bfA)});case
29:return aV(a,b,function(e,a){function
f(a){for(;;){var
b=cD(k(a));if(2<b>>>0)return l(a);switch(b){case
0:continue;case
1:a:for(;;){if(0===ak(k(a)))for(;;){var
c=cD(k(a));if(2<c>>>0)return l(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}return l(a)}default:return 0}}}function
c(a){var
b=iL(k(a));if(0===b)return f(a);var
c=1!==b?1:0;return c?l(a):c}aq(a);var
g=mY(k(a));if(2<g>>>0)var
b=l(a);else
switch(g){case
0:var
b=0===ak(k(a))?f(a):l(a);break;case
1:for(;;){var
h=h8(k(a));if(0===h)var
b=c(a);else{if(1===h)continue;var
b=l(a)}break}break;default:for(;;){var
i=c$(k(a));if(2<i>>>0)var
b=l(a);else
switch(i){case
0:var
b=c(a);break;case
1:continue;default:a:for(;;){if(0===ak(k(a)))for(;;){var
j=c$(k(a));if(2<j>>>0)var
d=l(a);else
switch(j){case
0:var
d=c(a);break;case
1:continue;default:continue a}break}else
var
d=l(a);var
b=d;break}}break}}if(0===b){var
m=bn(e,aE(e,a),22);return[0,m,[1,2,X(a)]]}return V(bfB)});case
30:return aV(a,b,function(i,a){aq(a);var
d=h6(k(a));if(0===d)for(;;){var
e=iL(k(a));if(0===e)continue;var
f=1!==e?1:0,b=f?l(a):f;break}else
if(1===d)for(;;){var
g=cD(k(a));if(2<g>>>0)var
b=l(a);else
switch(g){case
0:continue;case
1:a:for(;;){if(0===ak(k(a)))for(;;){var
h=cD(k(a));if(2<h>>>0)var
c=l(a);else
switch(h){case
0:continue;case
1:continue a;default:var
c=0}break}else
var
c=l(a);var
b=c;break}break;default:var
b=0}break}else
var
b=l(a);return 0===b?[0,i,[1,2,X(a)]]:V(bfC)});case
31:var
aU=bn(a,aE(a,b),22);return[0,aU,[1,2,X(b)]];case
33:return aV(a,b,function(j,a){function
e(a){for(;;){v(a,0);var
b=hD(k(a));if(0===b)continue;if(1===b)a:for(;;){if(0===ak(k(a)))for(;;){v(a,0);var
c=hD(k(a));if(0===c)continue;if(1===c)continue a;return l(a)}return l(a)}return l(a)}}function
c(a){v(a,0);return 0===ak(k(a))?e(a):l(a)}aq(a);var
f=mY(k(a));if(2<f>>>0)var
b=l(a);else
switch(f){case
0:var
b=0===ak(k(a))?e(a):l(a);break;case
1:for(;;){v(a,0);var
g=h8(k(a));if(0===g)var
b=c(a);else{if(1===g)continue;var
b=l(a)}break}break;default:for(;;){v(a,0);var
h=c$(k(a));if(2<h>>>0)var
b=l(a);else
switch(h){case
0:var
b=c(a);break;case
1:continue;default:a:for(;;){if(0===ak(k(a)))for(;;){v(a,0);var
i=c$(k(a));if(2<i>>>0)var
d=l(a);else
switch(i){case
0:var
d=c(a);break;case
1:continue;default:continue a}break}else
var
d=l(a);var
b=d;break}}break}}return 0===b?[0,j,[0,4,X(a)]]:V(bfD)});case
35:var
aW=aE(a,b),af=X(b);return[0,a,[4,aW,af,af]];case
36:return[0,a,0];case
37:return[0,a,1];case
38:return[0,a,4];case
39:return[0,a,5];case
40:return[0,a,6];case
41:return[0,a,7];case
42:return[0,a,12];case
43:return[0,a,10];case
44:return[0,a,8];case
45:return[0,a,9];case
46:return[0,a,86];case
47:iI(b);aq(b);var
ag=k(b),aX=62<ag?63<ag?-1:0:-1,ai=0!==aX?1:0,aY=ai?l(b):ai;return 0===aY?[0,a,85]:V(bfE);case
48:return[0,a,83];case
49:return[0,a,84];case
22:case
32:return[0,a,[1,2,X(b)]];default:return[0,a,[0,4,X(b)]]}}function
bgu(z,e,a){var
b=z;b:for(;;){aq(a);var
n=k(a),u=92<n?bq<n?1:bC<n?2:1:K(bee,n+1|0)-1|0;if(6<u>>>0)var
c=l(a);else
switch(u){case
0:var
c=0;break;case
1:for(;;){v(a,7);var
g=k(a);if(-1<g)if(90<g)if(92<g)if(bC<g)var
w=g<=bq?1:0,i=w?-1:w;else
var
i=0;else
var
i=-1;else
var
i=K(beE,g)-1|0;else
var
i=-1;if(0===i)continue;var
c=l(a);break}break;case
2:var
c=6;break;case
3:v(a,6);var
c=0===cd(k(a))?6:l(a);break;case
4:v(a,4);if(0===NS(k(a)))for(;;){v(a,3);if(0===NS(k(a)))continue;var
c=l(a);break}else
var
c=l(a);break;case
5:var
c=5;break;default:v(a,7);var
j=k(a);if(-1<j)if(13<j)var
x=j<=bq?1:0,o=x?bC<j?1:0:x;else
var
o=K(bdL,j)-1|0;else
var
o=-1;if(2<o>>>0)var
c=l(a);else
switch(o){case
0:var
c=2;break;case
1:var
c=1;break;default:v(a,1);var
c=0===cd(k(a))?1:l(a)}}if(7<c>>>0)return V(bgv);switch(c){case
0:return[0,bn(b,aE(b,a),25),bgw];case
1:return[0,bP(bn(b,aE(b,a),25),a),bgx];case
3:var
y=X(a);return[0,b,bZ(y,1,ah(y)-1|0)];case
4:return[0,b,bgy];case
5:cO(e,91);for(;;){aq(a);var
m=k(a),r=93<m?bq<m?1:bC<m?2:1:K(bdM,m+1|0)-1|0;if(5<r>>>0)var
d=l(a);else
switch(r){case
0:var
d=0;break;case
1:for(;;){v(a,5);var
f=k(a);if(-1<f)if(91<f)if(93<f)if(bC<f)var
s=f<=bq?1:0,h=s?-1:s;else
var
h=0;else
var
h=-1;else
var
h=K(bdC,f)-1|0;else
var
h=-1;if(0===h)continue;var
d=l(a);break}break;case
2:var
d=4;break;case
3:v(a,4);var
d=0===cd(k(a))?4:l(a);break;case
4:v(a,5);var
q=k(a),t=91<q?93<q?-1:K(uK,q-92|0)-1|0:-1,d=0===t?1:1===t?2:l(a);break;default:var
d=3}if(5<d>>>0)var
p=V(bgs);else
switch(d){case
0:var
p=b;break;case
1:an(e,bgt);continue;case
2:cO(e,92);cO(e,93);continue;case
3:cO(e,93);var
p=b;break;case
4:var
p=bP(bn(b,aE(b,a),25),a);break;default:an(e,X(a));continue}var
b=p;continue b}case
6:return[0,bP(bn(b,aE(b,a),25),a),bgz];default:an(e,X(a));continue}}}function
bgA(c,a){aq(a);var
b=k(a),f=g3<b?fr<b?e9<b?ds<b?1:2:dy<b?1:2:gx<b?e3<b?fK<b?1:2:gA<b?1:2:bC<b?bq<b?1:3:fp<b?1:2:K(bd8,b+1|0)-1|0;if(5<f>>>0)var
d=l(a);else
switch(f){case
0:var
d=0;break;case
1:var
d=6;break;case
2:v(a,2);if(0===c8(k(a)))for(;;){v(a,2);if(0===c8(k(a)))continue;var
d=l(a);break}else
var
d=l(a);break;case
3:var
d=1;break;case
4:v(a,1);var
d=0===cd(k(a))?1:l(a);break;default:v(a,5);var
g=nh(k(a)),d=0===g?4:1===g?3:l(a)}if(6<d>>>0)return V(bgB);switch(d){case
0:return[0,c,au];case
1:return[2,bP(c,a)];case
2:return[2,c];case
3:var
r=bz(c,a),h=aD(aC),i=iM(c,h,a),j=i[1];return[1,j,cF(j,r,i[2],h,0)];case
4:var
s=bz(c,a),m=aD(aC),n=h_(c,m,a),o=n[1];return[1,o,cF(o,s,n[2],m,1)];case
5:var
t=bz(c,a),p=aD(aC),q=bgu(c,p,a),e=q[1],u=b2(e,a),w=[0,e[1],t,u],x=q[2];return[0,e,[5,w,aZ(p),x]];default:var
y=cE(c,aE(c,a));return[0,y,[6,X(a)]]}}function
uR(bD,bB,G,H,b){var
z=bD;for(;;){var
aO=function(a){for(;;){v(a,6);if(0===NU(k(a)))continue;return l(a)}};aq(b);var
R=k(b),aQ=D<R?bq<R?1:bC<R?2:1:K(bdD,R+1|0)-1|0;if(6<aQ>>>0)var
c=l(b);else
switch(aQ){case
0:var
c=1;break;case
1:var
c=aO(b);break;case
2:var
c=2;break;case
3:v(b,2);var
c=0===cd(k(b))?2:l(b);break;case
4:var
c=0;break;case
5:v(b,6);var
T=k(b),aR=34<T?aP<T?-1:K(bep,T-35|0)-1|0:-1;if(0===aR){var
U=k(b),aS=47<U?e4<U?-1:K(bez,U+a6|0)-1|0:-1;if(0===aS)for(;;){var
W=k(b),aT=47<W?59<W?-1:K(bdJ,W+a6|0)-1|0:-1;if(0===aT)continue;var
c=1===aT?4:l(b);break}else
if(1===aS&&0===as(k(b)))for(;;){var
_=k(b),aU=47<_?cX<_?-1:K(beu,_+a6|0)-1|0:-1;if(0===aU)continue;var
c=1===aU?3:l(b);break}else
var
c=l(b)}else
if(1===aR&&0===ao(k(b))){var
aV=iJ(k(b));if(0===aV){var
aW=iJ(k(b));if(0===aW){var
aX=iJ(k(b));if(0===aX){var
aY=iJ(k(b));if(0===aY){var
aZ=iJ(k(b));if(0===aZ){var
a0=iJ(k(b));if(0===a0)var
a1=k(b),bE=58<a1?59<a1?-1:0:-1,c=0===bE?5:l(b);else
var
c=1===a0?5:l(b)}else
var
c=1===aZ?5:l(b)}else
var
c=1===aY?5:l(b)}else
var
c=1===aX?5:l(b)}else
var
c=1===aW?5:l(b)}else
var
c=1===aV?5:l(b)}else
var
c=l(b);break;default:v(b,0);var
c=0===NU(k(b))?aO(b):l(b)}if(6<c>>>0)return V(bgC);switch(c){case
0:var
F=X(b),aw=0;switch(bB){case
0:if(!p(F,bgD))aw=1;break;case
1:if(!p(F,bgE))aw=1;break;default:var
bA=0;if(p(F,bgF)){if(!p(F,bgG))return uQ(z,aE(z,b),bgM,bgL);if(p(F,bgH)){if(!p(F,bgI))return uQ(z,aE(z,b),bgK,bgJ);bA=1}}if(!bA){iI(b);return z}}if(aw)return z;an(H,F);an(G,F);continue;case
1:return cE(z,aE(z,b));case
2:var
a2=X(b);an(H,a2);an(G,a2);var
z=bP(z,b);continue;case
3:var
$=X(b),bF=bZ($,3,ah($)-4|0);an(H,$);hZ(G,c3(Z(bgN,bF)));continue;case
4:var
aa=X(b),bG=bZ(aa,2,ah(aa)-3|0);an(H,aa);hZ(G,c3(bG));continue;case
5:var
ab=X(b),a=bZ(ab,1,ah(ab)-2|0);an(H,ab);var
a3=Y(a,bgO),S=0;if(0<=a3)if(0<a3){var
a4=Y(a,bgP),d=0;if(0<=a4)if(0<a4){var
a5=Y(a,bgQ),A=0;if(0<=a5)if(0<a5){var
a7=Y(a,bgR),I=0;if(0<=a7)if(0<a7){var
a8=Y(a,bgS),ax=0;if(0<=a8)if(0<a8)if(p(a,bgT))if(p(a,bgU))if(p(a,bgV))if(p(a,bgW))if(p(a,bgX))if(p(a,bgY)){d=1;A=1;I=1;ax=1}else
var
x=bg1;else
var
x=bg2;else
var
x=bg3;else
var
x=bg4;else
var
x=bg5;else
var
x=bg6;else
var
x=bg7;else
if(p(a,bg8))if(p(a,bg9))if(p(a,bg_))if(p(a,bg$))if(p(a,bha))if(p(a,bhb))if(p(a,bhc)){d=1;A=1;I=1;ax=1}else
var
x=bhd;else
var
x=bhe;else
var
x=bhf;else
var
x=bhg;else
var
x=bhh;else
var
x=bhi;else
var
x=bhj;if(!ax)var
ac=x}else
var
ac=bhk;else{var
a_=Y(a,bhl),ay=0;if(0<=a_)if(0<a_)if(p(a,bhm))if(p(a,bhn))if(p(a,bho))if(p(a,bhp))if(p(a,bhq))if(p(a,bhr))if(p(a,bhs)){d=1;A=1;I=1;ay=1}else
var
f=bht;else
var
f=bhu;else
var
f=bhv;else
var
f=bhw;else
var
f=bhx;else
var
f=bhy;else
var
f=bhz;else
var
f=bhA;else
if(p(a,bhB))if(p(a,bhC))if(p(a,bhD))if(p(a,bhE))if(p(a,bhF))if(p(a,bhG))if(p(a,bhH)){d=1;A=1;I=1;ay=1}else
var
f=bhI;else
var
f=bhJ;else
var
f=bhK;else
var
f=bhL;else
var
f=bhM;else
var
f=bhN;else
var
f=bhO;if(!ay)var
ac=f}if(!I)var
ad=ac}else
var
ad=bhP;else{var
a$=Y(a,bhQ),J=0;if(0<=a$)if(0<a$){var
ba=Y(a,bhR),az=0;if(0<=ba)if(0<ba)if(p(a,bhS))if(p(a,bhT))if(p(a,bhU))if(p(a,bhV))if(p(a,bhW))if(p(a,bhX))if(p(a,bhY)){d=1;A=1;J=1;az=1}else
var
g=bhZ;else
var
g=bh0;else
var
g=bh1;else
var
g=bh2;else
var
g=bh3;else
var
g=bh4;else
var
g=bh5;else
var
g=bh6;else
if(p(a,bh7))if(p(a,bh8))if(p(a,bh9))if(p(a,bh_))if(p(a,bh$))if(p(a,bia))if(p(a,bib)){d=1;A=1;J=1;az=1}else
var
g=bic;else
var
g=bid;else
var
g=bie;else
var
g=bif;else
var
g=big;else
var
g=bih;else
var
g=bii;if(!az)var
ag=g}else
var
ag=bij;else{var
bb=Y(a,bik),aA=0;if(0<=bb)if(0<bb)if(p(a,bil))if(p(a,bim))if(p(a,bin))if(p(a,bio))if(p(a,bip))if(p(a,biq))if(p(a,bir)){d=1;A=1;J=1;aA=1}else
var
h=bis;else
var
h=bit;else
var
h=biu;else
var
h=biv;else
var
h=biw;else
var
h=bix;else
var
h=biy;else
var
h=biz;else
if(p(a,biA))if(p(a,biB))if(p(a,biC))if(p(a,biD))if(p(a,biE))if(p(a,biF))if(p(a,biG)){d=1;A=1;J=1;aA=1}else
var
h=biH;else
var
h=biI;else
var
h=biJ;else
var
h=biK;else
var
h=biL;else
var
h=biM;else
var
h=biN;if(!aA)var
ag=h}if(!J)var
ad=ag}if(!A)var
ae=ad}else
var
ae=biO;else{var
bc=Y(a,biP),B=0;if(0<=bc)if(0<bc){var
bd=Y(a,biQ),L=0;if(0<=bd)if(0<bd){var
be=Y(a,biR),aB=0;if(0<=be)if(0<be)if(p(a,biS))if(p(a,biT))if(p(a,biU))if(p(a,biV))if(p(a,biW))if(p(a,biX))if(p(a,biY)){d=1;B=1;L=1;aB=1}else
var
i=biZ;else
var
i=bi0;else
var
i=bi1;else
var
i=bi2;else
var
i=bi3;else
var
i=bi4;else
var
i=bi5;else
var
i=bi6;else
if(p(a,bi7))if(p(a,bi8))if(p(a,bi9))if(p(a,bi_))if(p(a,bi$))if(p(a,bja))if(p(a,bjb)){d=1;B=1;L=1;aB=1}else
var
i=bjc;else
var
i=bjd;else
var
i=bje;else
var
i=bjf;else
var
i=bjg;else
var
i=bjh;else
var
i=bji;if(!aB)var
ai=i}else
var
ai=bjj;else{var
bf=Y(a,bjk),aC=0;if(0<=bf)if(0<bf)if(p(a,bjl))if(p(a,bjm))if(p(a,bjn))if(p(a,bjo))if(p(a,bjp))if(p(a,bjq))if(p(a,bjr)){d=1;B=1;L=1;aC=1}else
var
j=bjs;else
var
j=bjt;else
var
j=bju;else
var
j=bjv;else
var
j=bjw;else
var
j=bjx;else
var
j=bjy;else
var
j=bjz;else
if(p(a,bjA))if(p(a,bjB))if(p(a,bjC))if(p(a,bjD))if(p(a,bjE))if(p(a,bjF))if(p(a,bjG)){d=1;B=1;L=1;aC=1}else
var
j=bjH;else
var
j=bjI;else
var
j=bjJ;else
var
j=bjK;else
var
j=bjL;else
var
j=bjM;else
var
j=bjN;if(!aC)var
ai=j}if(!L)var
aj=ai}else
var
aj=bjO;else{var
bg=Y(a,bjP),M=0;if(0<=bg)if(0<bg){var
bh=Y(a,bjQ),aD=0;if(0<=bh)if(0<bh)if(p(a,bjR))if(p(a,bjS))if(p(a,bjT))if(p(a,bjU))if(p(a,bjV))if(p(a,bjW))if(p(a,bjX)){d=1;B=1;M=1;aD=1}else
var
m=bjY;else
var
m=bjZ;else
var
m=bj0;else
var
m=bj1;else
var
m=bj2;else
var
m=bj3;else
var
m=bj4;else
var
m=bj5;else
if(p(a,bj6))if(p(a,bj7))if(p(a,bj8))if(p(a,bj9))if(p(a,bj_))if(p(a,bj$))if(p(a,bka)){d=1;B=1;M=1;aD=1}else
var
m=bkb;else
var
m=bkc;else
var
m=bkd;else
var
m=bke;else
var
m=bkf;else
var
m=bkg;else
var
m=bkh;if(!aD)var
ak=m}else
var
ak=bki;else{var
bi=Y(a,bkj),aF=0;if(0<=bi)if(0<bi)if(p(a,bkk))if(p(a,bkl))if(p(a,bkm))if(p(a,bkn))if(p(a,bko))if(p(a,bkp))if(p(a,bkq)){d=1;B=1;M=1;aF=1}else
var
n=bkr;else
var
n=bks;else
var
n=bkt;else
var
n=bku;else
var
n=bkv;else
var
n=bkw;else
var
n=bkx;else
var
n=bky;else
if(p(a,bkz))if(p(a,bkA))if(p(a,bkB))if(p(a,bkC))if(p(a,bkD))if(p(a,bkE))if(p(a,bkF)){d=1;B=1;M=1;aF=1}else
var
n=bkG;else
var
n=bkH;else
var
n=bkI;else
var
n=bkJ;else
var
n=bkK;else
var
n=bkL;else
var
n=bkM;if(!aF)var
ak=n}if(!M)var
aj=ak}if(!B)var
ae=aj}if(!d){var
af=ae;S=1}}else{var
af=bkN;S=1}else{var
bj=Y(a,bkO),e=0;if(0<=bj)if(0<bj){var
bk=Y(a,bkP),C=0;if(0<=bk)if(0<bk){var
bl=Y(a,bkQ),N=0;if(0<=bl)if(0<bl){var
bm=Y(a,bkR),aG=0;if(0<=bm)if(0<bm)if(p(a,bkS))if(p(a,bkT))if(p(a,bkU))if(p(a,bkV))if(p(a,bkW))if(p(a,bkX)){e=1;C=1;N=1;aG=1}else
var
y=bkY;else
var
y=bkZ;else
var
y=bk0;else
var
y=bk1;else
var
y=bk2;else
var
y=bk3;else
var
y=bk4;else
if(p(a,bk5))if(p(a,bk6))if(p(a,bk7))if(p(a,bk8))if(p(a,bk9))if(p(a,bk_))if(p(a,bk$)){e=1;C=1;N=1;aG=1}else
var
y=bla;else
var
y=blb;else
var
y=blc;else
var
y=bld;else
var
y=ble;else
var
y=blf;else
var
y=blg;if(!aG)var
al=y}else
var
al=blh;else{var
bn=Y(a,bli),aH=0;if(0<=bn)if(0<bn)if(p(a,blj))if(p(a,blk))if(p(a,bll))if(p(a,blm))if(p(a,bln))if(p(a,blo))if(p(a,blp)){e=1;C=1;N=1;aH=1}else
var
o=blq;else
var
o=blr;else
var
o=bls;else
var
o=blt;else
var
o=blu;else
var
o=blv;else
var
o=blw;else
var
o=blx;else
if(p(a,bly))if(p(a,blz))if(p(a,blA))if(p(a,blB))if(p(a,blC))if(p(a,blD))if(p(a,blE)){e=1;C=1;N=1;aH=1}else
var
o=blF;else
var
o=blG;else
var
o=blH;else
var
o=blI;else
var
o=blJ;else
var
o=blK;else
var
o=blL;if(!aH)var
al=o}if(!N)var
am=al}else
var
am=blM;else{var
bo=Y(a,blN),O=0;if(0<=bo)if(0<bo){var
bp=Y(a,blO),aI=0;if(0<=bp)if(0<bp)if(p(a,blP))if(p(a,blQ))if(p(a,blR))if(p(a,blS))if(p(a,blT))if(p(a,blU))if(p(a,blV)){e=1;C=1;O=1;aI=1}else
var
q=blW;else
var
q=blX;else
var
q=blY;else
var
q=blZ;else
var
q=bl0;else
var
q=bl1;else
var
q=bl2;else
var
q=bl3;else
if(p(a,bl4))if(p(a,bl5))if(p(a,bl6))if(p(a,bl7))if(p(a,bl8))if(p(a,bl9))if(p(a,bl_)){e=1;C=1;O=1;aI=1}else
var
q=bl$;else
var
q=bma;else
var
q=bmb;else
var
q=bmc;else
var
q=bmd;else
var
q=bme;else
var
q=bmf;if(!aI)var
ar=q}else
var
ar=bmg;else{var
br=Y(a,bmh),aJ=0;if(0<=br)if(0<br)if(p(a,bmi))if(p(a,bmj))if(p(a,bmk))if(p(a,bml))if(p(a,bmm))if(p(a,bmn))if(p(a,bmo)){e=1;C=1;O=1;aJ=1}else
var
r=bmp;else
var
r=bmq;else
var
r=bmr;else
var
r=bms;else
var
r=bmt;else
var
r=bmu;else
var
r=bmv;else
var
r=bmw;else
if(p(a,bmx))if(p(a,bmy))if(p(a,bmz))if(p(a,bmA))if(p(a,bmB))if(p(a,bmC))if(p(a,bmD)){e=1;C=1;O=1;aJ=1}else
var
r=bmE;else
var
r=bmF;else
var
r=bmG;else
var
r=bmH;else
var
r=bmI;else
var
r=bmJ;else
var
r=bmK;if(!aJ)var
ar=r}if(!O)var
am=ar}if(!C)var
ap=am}else
var
ap=bmL;else{var
bs=Y(a,bmM),E=0;if(0<=bs)if(0<bs){var
bt=Y(a,bmN),P=0;if(0<=bt)if(0<bt){var
bu=Y(a,bmO),aK=0;if(0<=bu)if(0<bu)if(p(a,bmP))if(p(a,bmQ))if(p(a,bmR))if(p(a,bmS))if(p(a,bmT))if(p(a,bmU))if(p(a,bmV)){e=1;E=1;P=1;aK=1}else
var
s=bmW;else
var
s=bmX;else
var
s=bmY;else
var
s=bmZ;else
var
s=bm0;else
var
s=bm1;else
var
s=bm2;else
var
s=bm3;else
if(p(a,bm4))if(p(a,bm5))if(p(a,bm6))if(p(a,bm7))if(p(a,bm8))if(p(a,bm9))if(p(a,bm_)){e=1;E=1;P=1;aK=1}else
var
s=bm$;else
var
s=bna;else
var
s=bnb;else
var
s=bnc;else
var
s=bnd;else
var
s=bne;else
var
s=bnf;if(!aK)var
at=s}else
var
at=bng;else{var
bv=Y(a,bnh),aL=0;if(0<=bv)if(0<bv)if(p(a,bni))if(p(a,bnj))if(p(a,bnk))if(p(a,bnl))if(p(a,bnm))if(p(a,bnn))if(p(a,bno)){e=1;E=1;P=1;aL=1}else
var
t=bnp;else
var
t=bnq;else
var
t=bnr;else
var
t=bns;else
var
t=bnt;else
var
t=bnu;else
var
t=bnv;else
var
t=bnw;else
if(p(a,bnx))if(p(a,bny))if(p(a,bnz))if(p(a,bnA))if(p(a,bnB))if(p(a,bnC))if(p(a,bnD)){e=1;E=1;P=1;aL=1}else
var
t=bnE;else
var
t=bnF;else
var
t=bnG;else
var
t=bnH;else
var
t=bnI;else
var
t=bnJ;else
var
t=bnK;if(!aL)var
at=t}if(!P)var
au=at}else
var
au=bnL;else{var
bw=Y(a,bnM),Q=0;if(0<=bw)if(0<bw){var
bx=Y(a,bnN),aM=0;if(0<=bx)if(0<bx)if(p(a,bnO))if(p(a,bnP))if(p(a,bnQ))if(p(a,bnR))if(p(a,bnS))if(p(a,bnT))if(p(a,bnU)){e=1;E=1;Q=1;aM=1}else
var
u=bnV;else
var
u=bnW;else
var
u=bnX;else
var
u=bnY;else
var
u=bnZ;else
var
u=bn0;else
var
u=bn1;else
var
u=bn2;else
if(p(a,bn3))if(p(a,bn4))if(p(a,bn5))if(p(a,bn6))if(p(a,bn7))if(p(a,bn8))if(p(a,bn9)){e=1;E=1;Q=1;aM=1}else
var
u=bn_;else
var
u=bn$;else
var
u=boa;else
var
u=bob;else
var
u=boc;else
var
u=bod;else
var
u=boe;if(!aM)var
av=u}else
var
av=bof;else{var
by=Y(a,bog),aN=0;if(0<=by)if(0<by)if(p(a,boh))if(p(a,boi))if(p(a,boj))if(p(a,bok))if(p(a,bol))if(p(a,bom))if(p(a,bon)){e=1;E=1;Q=1;aN=1}else
var
w=boo;else
var
w=bop;else
var
w=boq;else
var
w=bor;else
var
w=bos;else
var
w=bot;else
var
w=bou;else
var
w=bov;else
if(p(a,bow))if(p(a,box))if(p(a,boy))if(p(a,boz))if(p(a,boA))if(p(a,boB))if(p(a,boC)){e=1;E=1;Q=1;aN=1}else
var
w=boD;else
var
w=boE;else
var
w=boF;else
var
w=boG;else
var
w=boH;else
var
w=boI;else
var
w=boJ;if(!aN)var
av=w}if(!Q)var
au=av}if(!E)var
ap=au}if(!e){var
af=ap;S=1}}var
a9=S?af:0;if(a9)hZ(G,a9[1]);else
an(G,Z(bg0,Z(a,bgZ)));continue;default:var
bz=X(b);an(H,bz);an(G,bz);continue}}}function
boK(b,a){function
y(b){var
a=k(b),c=g3<a?Ct<a?-1:CC<a?nW<a?Fg<a?B_<a?x2<a?1:6:CP<a?Fa<a?wo<a?1:6:vT<a?1:6:za<a?AM<a?1:6:A1<a?1:6:oD<a?q0<a?pC<a?pR<a?pG<a?o1<a?yM<a?1:6:vv<a?1:6:Do<a?ww<a?1:6:Fi<a?1:6:nV<a?qI<a?BD<a?1:6:pd<a?1:6:qC<a?D_<a?1:6:FA<a?1:6:p4<a?DX<a?oX<a?Cz<a?1:6:z3<a?1:6:pl<a?qd<a?1:6:CV<a?1:6:qE<a?os<a?pD<a?1:6:oA<a?1:6:nG<a?ph<a?1:6:q4<a?1:6:wP<a?p2<a?oH<a?Ep<a?qO<a?1:6:qJ<a?1:6:qZ<a?Ej<a?1:6:xX<a?1:6:ps<a?qQ<a?pM<a?1:6:n7<a?1:6:BQ<a?qF<a?1:6:oN<a?1:6:n$<a?p1<a?oc<a?nY<a?1:6:px<a?1:6:pA<a?wn<a?1:6:DT<a?1:6:oZ<a?EU<a?pb<a?1:6:o9<a?1:6:nR<a?zl<a?1:6:BJ<a?1:6:Fs<a?xl<a?FB<a?CE<a?v1<a?Fu<a?1:6:vq<a?1:6:At<a?EQ<a?1:6:Ab<a?1:6:Ai<a?zk<a?zP<a?1:6:w0<a?1:6:F$<a?Gk<a?1:6:zN<a?1:6:zd<a?Fe<a?F8<a?Cy<a?1:6:yx<a?1:6:yL<a?nB<a?1:6:Bf<a?1:6:AG<a?yp<a?vi<a?1:6:1:6:pB<a?oI<a?ql<a?nZ<a?E6<a?1:6:Fh<a?1:6:p7<a?wY<a?1:6:x$<a?1:6:oY<a?of<a?wz<a?1:6:wg<a?1:6:qT<a?Bk<a?1:6:x_<a?1:6:nH<a?ok<a?pF<a?zz<a?1:6:w2<a?1:6:Dt<a?Aq<a?1:6:D$<a?1:6:pf<a?F0<a?D9<a?1:6:oQ<a?1:6:nP<a?vQ<a?1:6:E4<a?1:6:v7<a?pc<a?z8<a?ov<a?oj<a?nI<a?p9<a?yn<a?1:6:CT<a?1:6:xA<a?Ez<a?1:6:wD<a?1:6:qe<a?oS<a?xt<a?1:6:wV<a?1:6:qK<a?q3<a?1:6:Di<a?1:6:nU<a?zE<a?E8<a?y_<a?1:6:Ee<a?1:6:wI<a?n0<a?1:6:z7<a?1:6:yd<a?qh<a?EB<a?1:6:Av<a?1:6:A6<a?Eq<a?1:6:Bn<a?1:6:DL<a?Go<a?El<a?C$<a?A7<a?1:6:FP<a?1:6:Af<a?zD<a?1:6:DG<a?1:6:D6<a?AY<a?vF<a?1:6:yk<a?1:6:EX<a?v6<a?1:6:zu<a?1:6:vL<a?w8<a?xM<a?Fq<a?1:6:zn<a?1:6:Bz<a?xh<a?1:6:yK<a?1:6:wJ<a?pz<a?oJ<a?1:6:Bm<a?1:6:F1<a?Ei<a?1:6:BO<a?1:6:A3<a?Fx<a?wG<a?zW<a?vw<a?wr<a?1:6:DY<a?1:6:Fw<a?yo<a?1:6:wi<a?1:6:xy<a?BT<a?AZ<a?1:6:EL<a?1:6:CS<a?Ak<a?1:6:vG<a?1:6:v5<a?wx<a?wp<a?yv<a?1:6:FG<a?1:6:Gj<a?Cp<a?1:6:wa<a?1:6:z1<a?D2<a?yr<a?1:6:EH<a?1:6:E5<a?Bt<a?1:6:Bo<a?1:6:oo<a?qv<a?Ef<a?AX<a?BX<a?1:6:vo<a?1:6:B8<a?Fv<a?1:6:EA<a?1:6:v0<a?oC<a?xn<a?1:6:v8<a?1:6:BP<a?vX<a?1:6:Ce<a?1:6:Gm<a?xm<a?pH<a?Ey<a?1:6:Ad<a?1:6:ze<a?C1<a?1:6:vr<a?1:6:B6<a?oO<a?Gc<a?1:6:yE<a?1:6:wc<a?B2<a?1:6:qX<a?1:6:E0<a?w6<a?z5<a?yR<a?DQ<a?BI<a?z$<a?1:6:pO<a?1:6:zR<a?FO<a?1:6:xg<a?1:6:pm<a?Dc<a?n6<a?1:6:n1<a?1:6:Fk<a?Cc<a?1:6:wt<a?1:6:Au<a?xd<a?D8<a?zb<a?1:6:xw<a?1:6:CA<a?vy<a?1:6:A_<a?1:6:BY<a?D0<a?DD<a?1:6:vj<a?1:6:EN<a?vt<a?1:6:BW<a?1:6:vA<a?yz<a?zH<a?Ap<a?Dw<a?1:6:y6<a?1:6:A2<a?EG<a?1:6:vp<a?1:6:Ch<a?v2<a?wv<a?1:6:Bh<a?1:6:As<a?qP<a?1:6:zy<a?1:6:xP<a?Dy<a?vM<a?De<a?1:6:zK<a?1:6:oM<a?ow<a?1:6:FR<a?1:6:ox<a?zc<a?F7<a?1:6:xj<a?1:6:wQ<a?zs<a?1:6:yA<a?1:6:pW<a?Gl<a?qY<a?Ev<a?Ae<a?BM<a?1:6:oB<a?1:6:wT<a?DP<a?1:6:zV<a?1:6:o0<a?qM<a?wf<a?1:6:zU<a?1:6:FH<a?yG<a?1:6:Dr<a?1:6:pX<a?DR<a?nO<a?ya<a?1:6:vu<a?1:6:qL<a?w_<a?1:6:E$<a?1:6:oV<a?nD<a?wZ<a?1:6:o8<a?1:6:xb<a?wb<a?1:6:AT<a?1:6:FX<a?vI<a?pZ<a?yb<a?Cx<a?1:6:qy<a?1:6:DN<a?vl<a?1:6:xx<a?1:6:zt<a?wX<a?yP<a?1:6:pq<a?1:6:Cl<a?zX<a?1:6:oU<a?1:6:CH<a?wk<a?F9<a?oq<a?1:6:C2<a?1:6:Ex<a?zZ<a?1:6:E1<a?1:6:qq<a?yO<a?Cq<a?1:6:Cd<a?1:6:EO<a?AQ<a?1:6:AJ<a?1:6:FS<a?zJ<a?CG<a?qc<a?FM<a?Bv<a?Eu<a?Df<a?v9<a?1:6:yw<a?1:6:wO<a?Eb<a?1:6:qB<a?1:6:AI<a?zQ<a?Be<a?1:6:C0<a?1:6:FQ<a?xQ<a?1:6:EY<a?1:6:AL<a?yN<a?BA<a?zv<a?1:6:BB<a?1:6:zT<a?xH<a?1:6:BE<a?1:6:zp<a?EZ<a?CQ<a?1:6:EE<a?1:6:AP<a?v3<a?1:6:z2<a?1:6:E3<a?n4<a?AR<a?wR<a?wN<a?1:6:DF<a?1:6:vN<a?Dm<a?1:6:AN<a?1:6:AO<a?or<a?FF<a?1:6:vR<a?1:6:Aa<a?p8<a?1:6:FK<a?1:6:pS<a?Az<a?CW<a?C8<a?1:6:Bj<a?1:6:z_<a?Fz<a?1:6:F4<a?1:6:Am<a?EJ<a?Cj<a?1:6:vV<a?1:6:wA<a?w$<a?1:6:y1<a?1:6:Ah<a?xo<a?Gn<a?oa<a?Bi<a?pt<a?1:6:xU<a?1:6:pe<a?yi<a?1:6:nC<a?1:6:A$<a?E7<a?F3<a?1:6:yl<a?1:6:zF<a?vW<a?1:6:zA<a?1:6:w5<a?yg<a?vn<a?FY<a?1:6:Eg<a?1:6:Bw<a?CO<a?1:6:yC<a?1:6:yV<a?Dh<a?zx<a?1:6:xC<a?1:6:yW<a?yS<a?1:6:Bb<a?1:6:EW<a?B4<a?D7<a?CK<a?F5<a?1:6:xI<a?1:6:wB<a?Fm<a?1:6:F_<a?1:6:vm<a?wK<a?yY<a?1:6:yI<a?1:6:Gd<a?Cn<a?1:6:1:v_<a?qm<a?FJ<a?6:x0<a?1:6:wh<a?w1<a?1:6:xq<a?1:6:wy<a?vS<a?yH<a?1:6:vK<a?1:6:x7<a?1:6:qG<a?CY<a?Fr<a?xT<a?yt<a?6:C4<a?v$<a?1:6:wm<a?1:6:An<a?DJ<a?yh<a?1:6:xW<a?1:6:zM<a?xK<a?1:6:Er<a?1:6:qb<a?qS<a?pv<a?Gb<a?1:6:BL<a?1:6:pP<a?A9<a?1:6:z0<a?1:6:CJ<a?o4<a?wl<a?1:6:Dq<a?1:6:EM<a?CI<a?1:6:B$<a?1:6:Ck<a?Gg<a?Dv<a?wH<a?wW<a?1:6:1:6:Cr<a?6:od<a?Ec<a?1:6:EI<a?1:6:DS<a?qz<a?e9<a?ds<a?1:2:AV<a?1:6:zY<a?vY<a?1:6:BN<a?1:6:vC<a?E2<a?C5<a?1:6:y3<a?1:6:vZ<a?zS<a?1:6:vz<a?1:6:AU<a?FI<a?ot<a?pg<a?nT<a?xJ<a?1:6:Br<a?1:6:qo<a?pu<a?1:6:Dg<a?1:6:Bg<a?p$<a?Ft<a?1:6:zI<a?1:6:yX<a?qA<a?1:6:xY<a?1:6:FC<a?ER<a?FU<a?BK<a?1:6:Ax<a?1:6:xe<a?z6<a?1:6:wS<a?1:6:xz<a?yc<a?Bu<a?1:6:DE<a?1:6:x8<a?1:6:xv<a?qp<a?pN<a?Fd<a?1:6:pk<a?6:y2<a?1:6:En<a?qi<a?Bq<a?1:6:xL<a?1:6:CF<a?C9<a?1:6:DI<a?1:6:xu<a?BZ<a?v4<a?vE<a?1:6:1:Ar<a?6:Dj<a?1:6:Eo<a?xE<a?1:6:y0<a?yQ<a?1:6:yU<a?1:6:Da<a?pY<a?Gh<a?Al<a?vO<a?FT<a?yD<a?w9<a?1:6:yq<a?1:6:xO<a?Du<a?1:6:xr<a?1:6:Bp<a?vh<a?ou<a?1:6:1:6:Bl<a?CR<a?wF<a?x3<a?1:6:BV<a?1:6:nK<a?CD<a?1:6:Ca<a?1:6:Fl<a?Fo<a?1:6:Dd<a?DV<a?1:6:n9<a?1:6:zh<a?D1<a?wd<a?Dp<a?CZ<a?1:6:vs<a?1:6:Gf<a?wL<a?1:6:Aw<a?1:6:Dk<a?o_<a?x5<a?1:6:n2<a?1:6:Ci<a?ye<a?1:6:EK<a?1:6:Ao<a?AK<a?B1<a?By<a?1:6:C6<a?1:6:vD<a?xp<a?1:6:Ba<a?1:6:wC<a?DH<a?1:6:6:FE<a?C7<a?zw<a?CL<a?6:x1<a?yF<a?1:6:xS<a?1:6:Fb<a?xs<a?AA<a?1:6:1:6:zr<a?DZ<a?B0<a?1:6:6:Cs<a?Bc<a?Ag<a?1:6:1:zi<a?6:1:FZ<a?E9<a?nS<a?6:Cw<a?1:6:vB<a?CM<a?D3<a?1:6:AC<a?1:6:xV<a?1:6:Ek<a?BF<a?CU<a?1:6:ES<a?1:6:xf<a?zL<a?6:F6<a?1:6:yj<a?wU<a?1:6:AF<a?1:6:BR<a?B7<a?D4<a?oi<a?Ga<a?n8<a?yy<a?1:6:zm<a?1:6:we<a?1:6:xa<a?pJ<a?Gq<a?1:6:1:6:ED<a?FN<a?AB<a?Dx<a?1:6:1:6:w4<a?nX<a?xD<a?1:6:Bx<a?1:6:BG<a?1:6:o2<a?pU<a?fr<a?vx<a?6:dy<a?1:2:oG<a?Dl<a?1:6:zO<a?1:6:pQ<a?po<a?EC<a?1:6:y9<a?1:6:qN<a?Gp<a?1:6:Fy<a?1:6:EV<a?Fc<a?qW<a?zq<a?1:6:yu<a?1:6:qf<a?Em<a?1:6:q2<a?1:6:A0<a?Cg<a?DM<a?1:6:qr<a?1:6:qV<a?qD<a?1:6:EF<a?1:6:o7<a?B3<a?Cf<a?CB<a?y7<a?Ay<a?1:6:zg<a?1:6:wM<a?1:6:FV<a?DO<a?6:1:6:A5<a?Fp<a?yZ<a?o$<a?1:6:DC<a?1:6:w3<a?Gi<a?1:6:1:6:wu<a?DU<a?qn<a?p_<a?o6<a?1:6:n3<a?1:6:DB<a?pa<a?1:6:1:on<a?EP<a?6:qk<a?1:6:Bs<a?x9<a?1:6:oR<a?1:6:xi<a?DK<a?vU<a?qx<a?1:6:D5<a?1:6:Dn<a?oT<a?1:6:pn<a?1:6:gx<a?e3<a?fK<a?1:2:gA<a?1:2:bC<a?bq<a?1:3:fp<a?1:2:K(bea,a+1|0)-1|0;if(14<c>>>0)return l(b);switch(c){case
0:return 0;case
1:return 14;case
2:v(b,2);if(0===c8(k(b)))for(;;){v(b,2);if(0===c8(k(b)))continue;return l(b)}return l(b);case
3:return 1;case
4:v(b,1);return 0===cd(k(b))?1:l(b);case
5:return 12;case
6:return 13;case
7:return 10;case
8:v(b,6);var
d=nh(k(b));return 0===d?4:1===d?3:l(b);case
9:return 9;case
10:return 5;case
11:return 11;case
12:return 7;case
13:v(b,14);if(0===hE(k(b))){var
e=h9(k(b));if(0===e)return 0===as(k(b))?0===as(k(b))?0===as(k(b))?13:l(b):l(b):l(b);if(1===e){if(0===as(k(b)))for(;;){var
f=h4(k(b));if(0===f)continue;return 1===f?13:l(b)}return l(b)}return l(b)}return l(b);default:return 8}}aq(a);var
o=y(a);if(14<o>>>0)return V(boL);switch(o){case
0:return[0,b,au];case
1:return[2,bP(b,a)];case
2:return[2,b];case
3:var
z=bz(b,a),p=aD(aC),q=iM(b,p,a),r=q[1];return[1,r,cF(r,z,q[2],p,0)];case
4:var
A=bz(b,a),s=aD(aC),t=h_(b,s,a),u=t[1];return[1,u,cF(u,A,t[2],s,1)];case
5:return[0,b,98];case
6:return[0,b,cl];case
7:return[0,b,99];case
8:return[0,b,0];case
9:return[0,b,86];case
10:return[0,b,10];case
11:return[0,b,82];case
12:var
e=X(a),B=bz(b,a),w=aD(aC),d=aD(aC);an(d,e);var
C=ay(e,boM)?0:1,f=uR(b,C,w,d,a),D=b2(f,a);an(d,e);var
E=aZ(w),F=aZ(d);return[0,f,[8,[0,f[1],B,D],E,F]];case
13:var
x=a[6];for(;;){aq(a);var
g=k(a),h=aP<g?1:K(beC,g+1|0)-1|0;if(3<h>>>0)var
c=l(a);else
switch(h){case
0:var
c=1;break;case
1:var
c=2;break;case
2:var
c=0;break;default:v(a,2);if(0===hE(k(a))){var
i=h9(k(a));if(0===i)if(0===as(k(a))&&0===as(k(a)))var
j=0!==as(k(a))?1:0,c=j?l(a):j;else
var
c=l(a);else
if(1===i&&0===as(k(a)))for(;;){var
m=h4(k(a));if(0===m)continue;var
n=1!==m?1:0,c=n?l(a):n;break}else
var
c=l(a)}else
var
c=l(a)}if(2<c>>>0)throw[0,ap,beN];switch(c){case
0:continue;case
1:break;default:if(uC(NI(a)))continue;NK(a,1)}var
G=a[3];uD(a,x);var
H=jL(a),I=jT(b,x,G);return[0,b,[7,uE(H),I]]}default:return[0,b,[6,X(a)]]}}function
boN(c,a){aq(a);var
b=k(a);if(-1<b)if(g3<b)if(fr<b)if(e9<b)var
h=b<=ds?1:0,d=h?1:h;else
var
i=b<=dy?1:0,d=i?1:i;else
if(gx<b)if(e3<b)var
j=b<=fK?1:0,d=j?1:j;else
var
m=b<=gA?1:0,d=m?1:m;else
if(bC<b)var
n=b<=bq?1:0,d=n?2:n;else
var
o=b<=fp?1:0,d=o?1:o;else
var
d=K(bdH,b)-1|0;else
var
d=-1;if(5<d>>>0)var
e=l(a);else
switch(d){case
0:var
e=5;break;case
1:v(a,1);if(0===c8(k(a)))for(;;){v(a,1);if(0===c8(k(a)))continue;var
e=l(a);break}else
var
e=l(a);break;case
2:var
e=0;break;case
3:v(a,0);var
p=0!==cd(k(a))?1:0,e=p?l(a):p;break;case
4:v(a,5);var
q=nh(k(a)),e=0===q?3:1===q?2:l(a);break;default:var
e=4}if(5<e>>>0)return V(boO);switch(e){case
0:return[2,bP(c,a)];case
1:return[2,c];case
2:var
C=bz(c,a),r=aD(aC),s=iM(c,r,a),t=s[1];return[1,t,cF(t,C,s[2],r,0)];case
3:var
D=bz(c,a),u=aD(aC),w=h_(c,u,a),x=w[1];return[1,x,cF(x,D,w[2],u,1)];case
4:var
E=bz(c,a),y=aD(aC),z=aD(aC),f=aD(aC);an(f,boP);var
A=Oi(c,y,z,f,a),g=A[1],F=b2(g,a),G=[0,g[1],E,F],H=A[2],I=aZ(f),J=aZ(z);return[0,g,[3,[0,G,[0,aZ(y),J,I],H]]];default:var
B=cE(c,aE(c,a));return[0,B,[3,[0,aE(B,a),boQ,1]]]}}function
boR(a,b){function
S(a){return 0===nd(k(a))?0===m$(k(a))?0===N8(k(a))?0===NY(k(a))?0===NZ(k(a))?0===uO(k(a))?0===jQ(k(a))?0===nd(k(a))?0===hE(k(a))?0===N0(k(a))?0===jS(k(a))?3:l(a):l(a):l(a):l(a):l(a):l(a):l(a):l(a):l(a):l(a):l(a)}function
R(a){v(a,3);return 0===N_(k(a))?3:l(a)}function
c(a){for(;;){v(a,29);if(0===ao(k(a)))continue;return l(a)}}function
h(a){v(a,28);var
b=a0(k(a));if(0===b)for(;;){v(a,26);if(0===ao(k(a)))continue;return l(a)}return 1===b?c(a):l(a)}function
g(a){v(a,27);var
b=a0(k(a));if(0===b)for(;;){v(a,25);if(0===ao(k(a)))continue;return l(a)}return 1===b?c(a):l(a)}function
m(a){v(a,30);var
b=iK(k(a));if(2<b>>>0)return l(a);switch(b){case
0:return c(a);case
1:for(;;){v(a,30);var
d=c_(k(a));if(3<d>>>0)return l(a);switch(d){case
0:return c(a);case
1:continue;case
2:a:for(;;){if(0===ak(k(a)))for(;;){v(a,30);var
e=c_(k(a));if(3<e>>>0)return l(a);switch(e){case
0:return c(a);case
1:continue;case
2:continue a;default:return g(a)}}return l(a)}default:return g(a)}}default:return g(a)}}function
Q(a){b:for(;;){if(0===ak(k(a)))for(;;){v(a,30);var
b=N4(k(a));if(4<b>>>0)return l(a);switch(b){case
0:return c(a);case
1:return m(a);case
2:continue;case
3:continue b;default:return h(a)}}return l(a)}}function
o(a){for(;;){v(a,23);if(0===ao(k(a)))continue;return l(a)}}function
A(a){v(a,22);var
b=a0(k(a));if(0===b)for(;;){v(a,21);if(0===ao(k(a)))continue;return l(a)}return 1===b?o(a):l(a)}function
i(a){for(;;){v(a,23);if(0===ao(k(a)))continue;return l(a)}}function
n(a){v(a,22);var
b=a0(k(a));if(0===b)for(;;){v(a,21);if(0===ao(k(a)))continue;return l(a)}return 1===b?i(a):l(a)}function
z(a){b:for(;;){if(0===ak(k(a)))for(;;){v(a,24);var
b=c_(k(a));if(3<b>>>0)return l(a);switch(b){case
0:return i(a);case
1:continue;case
2:continue b;default:return n(a)}}return l(a)}}function
f(a){v(a,29);var
b=N6(k(a));if(3<b>>>0)return l(a);switch(b){case
0:return c(a);case
1:var
d=h6(k(a));if(0===d)for(;;){v(a,24);var
e=iK(k(a));if(2<e>>>0)return l(a);switch(e){case
0:return i(a);case
1:continue;default:return n(a)}}if(1===d)for(;;){v(a,24);var
f=c_(k(a));if(3<f>>>0)return l(a);switch(f){case
0:return i(a);case
1:continue;case
2:return z(a);default:return n(a)}}return l(a);case
2:for(;;){v(a,24);var
g=iK(k(a));if(2<g>>>0)return l(a);switch(g){case
0:return o(a);case
1:continue;default:return A(a)}}default:for(;;){v(a,24);var
h=c_(k(a));if(3<h>>>0)return l(a);switch(h){case
0:return o(a);case
1:continue;case
2:return z(a);default:return A(a)}}}}function
j(a){v(a,30);var
b=NW(k(a));if(3<b>>>0)return l(a);switch(b){case
0:return c(a);case
1:for(;;){v(a,30);var
d=hC(k(a));if(4<d>>>0)return l(a);switch(d){case
0:return c(a);case
1:continue;case
2:return f(a);case
3:a:for(;;){if(0===ak(k(a)))for(;;){v(a,30);var
e=hC(k(a));if(4<e>>>0)return l(a);switch(e){case
0:return c(a);case
1:continue;case
2:return f(a);case
3:continue a;default:return g(a)}}return l(a)}default:return g(a)}}case
2:return f(a);default:return g(a)}}function
r(a){for(;;){v(a,30);var
b=m7(k(a));if(5<b>>>0)return l(a);switch(b){case
0:return c(a);case
1:return j(a);case
2:continue;case
3:return f(a);case
4:return Q(a);default:return h(a)}}}function
P(a){for(;;){v(a,19);if(0===ao(k(a)))continue;return l(a)}}function
O(a){for(;;){v(a,19);if(0===ao(k(a)))continue;return l(a)}}function
N(a){v(a,29);var
b=NR(k(a));if(0===b)return c(a);if(1===b)for(;;){v(a,20);var
d=nj(k(a));if(3<d>>>0)return l(a);switch(d){case
0:return O(a);case
1:continue;case
2:a:for(;;){if(0===as(k(a)))for(;;){v(a,20);var
e=nj(k(a));if(3<e>>>0)return l(a);switch(e){case
0:return P(a);case
1:continue;case
2:continue a;default:v(a,18);var
f=a0(k(a));if(0===f)for(;;){v(a,17);if(0===ao(k(a)))continue;return l(a)}return 1===f?P(a):l(a)}}return l(a)}default:v(a,18);var
g=a0(k(a));if(0===g)for(;;){v(a,17);if(0===ao(k(a)))continue;return l(a)}return 1===g?O(a):l(a)}}return l(a)}function
M(a){for(;;){v(a,13);if(0===ao(k(a)))continue;return l(a)}}function
L(a){for(;;){v(a,13);if(0===ao(k(a)))continue;return l(a)}}function
J(a){v(a,29);var
b=N2(k(a));if(0===b)return c(a);if(1===b)for(;;){v(a,14);var
d=ng(k(a));if(3<d>>>0)return l(a);switch(d){case
0:return L(a);case
1:continue;case
2:a:for(;;){if(0===bH(k(a)))for(;;){v(a,14);var
e=ng(k(a));if(3<e>>>0)return l(a);switch(e){case
0:return M(a);case
1:continue;case
2:continue a;default:v(a,12);var
f=a0(k(a));if(0===f)for(;;){v(a,11);if(0===ao(k(a)))continue;return l(a)}return 1===f?M(a):l(a)}}return l(a)}default:v(a,12);var
g=a0(k(a));if(0===g)for(;;){v(a,11);if(0===ao(k(a)))continue;return l(a)}return 1===g?L(a):l(a)}}return l(a)}function
I(a){for(;;){v(a,9);if(0===ao(k(a)))continue;return l(a)}}function
H(a){for(;;){v(a,9);if(0===ao(k(a)))continue;return l(a)}}function
G(a){v(a,29);var
b=N1(k(a));if(0===b)return c(a);if(1===b)for(;;){v(a,10);var
d=ni(k(a));if(3<d>>>0)return l(a);switch(d){case
0:return H(a);case
1:continue;case
2:a:for(;;){if(0===c9(k(a)))for(;;){v(a,10);var
e=ni(k(a));if(3<e>>>0)return l(a);switch(e){case
0:return I(a);case
1:continue;case
2:continue a;default:v(a,8);var
f=a0(k(a));if(0===f)for(;;){v(a,7);if(0===ao(k(a)))continue;return l(a)}return 1===f?I(a):l(a)}}return l(a)}default:v(a,8);var
g=a0(k(a));if(0===g)for(;;){v(a,7);if(0===ao(k(a)))continue;return l(a)}return 1===g?H(a):l(a)}}return l(a)}function
F(a){for(;;){v(a,30);var
b=m3(k(a));if(3<b>>>0)return l(a);switch(b){case
0:return c(a);case
1:return m(a);case
2:continue;default:return h(a)}}}function
q(a){for(;;){v(a,15);if(0===ao(k(a)))continue;return l(a)}}function
E(a){v(a,15);var
b=a0(k(a));if(0===b)for(;;){v(a,15);if(0===ao(k(a)))continue;return l(a)}return 1===b?q(a):l(a)}function
C(a){for(;;){v(a,16);var
b=N7(k(a));if(4<b>>>0)return l(a);switch(b){case
0:return q(a);case
1:return m(a);case
2:continue;case
3:for(;;){v(a,15);var
c=m3(k(a));if(3<c>>>0)return l(a);switch(c){case
0:return q(a);case
1:return m(a);case
2:continue;default:return E(a)}}default:return E(a)}}}function
B(a){v(a,30);var
b=uP(k(a));if(8<b>>>0)return l(a);switch(b){case
0:return c(a);case
1:return j(a);case
2:return C(a);case
3:return F(a);case
4:return G(a);case
5:return f(a);case
6:return J(a);case
7:return N(a);default:return h(a)}}function
y(a){for(;;){v(a,30);var
b=hC(k(a));if(4<b>>>0)return l(a);switch(b){case
0:return c(a);case
1:continue;case
2:return f(a);case
3:a:for(;;){if(0===ak(k(a)))for(;;){v(a,30);var
d=hC(k(a));if(4<d>>>0)return l(a);switch(d){case
0:return c(a);case
1:continue;case
2:return f(a);case
3:continue a;default:return g(a)}}return l(a)}default:return g(a)}}}function
x(a){return 0===ak(k(a))?y(a):l(a)}function
at(b){var
a=k(b),d=g3<a?Ct<a?-1:CC<a?nW<a?Fg<a?B_<a?x2<a?1:6:CP<a?Fa<a?wo<a?1:6:vT<a?1:6:za<a?AM<a?1:6:A1<a?1:6:oD<a?q0<a?pC<a?pR<a?pG<a?o1<a?yM<a?1:6:vv<a?1:6:Do<a?ww<a?1:6:Fi<a?1:6:nV<a?qI<a?BD<a?1:6:pd<a?1:6:qC<a?D_<a?1:6:FA<a?1:6:p4<a?DX<a?oX<a?Cz<a?1:6:z3<a?1:6:pl<a?qd<a?1:6:CV<a?1:6:qE<a?os<a?pD<a?1:6:oA<a?1:6:nG<a?ph<a?1:6:q4<a?1:6:wP<a?p2<a?oH<a?Ep<a?qO<a?1:6:qJ<a?1:6:qZ<a?Ej<a?1:6:xX<a?1:6:ps<a?qQ<a?pM<a?1:6:n7<a?1:6:BQ<a?qF<a?1:6:oN<a?1:6:n$<a?p1<a?oc<a?nY<a?1:6:px<a?1:6:pA<a?wn<a?1:6:DT<a?1:6:oZ<a?EU<a?pb<a?1:6:o9<a?1:6:nR<a?zl<a?1:6:BJ<a?1:6:Fs<a?xl<a?FB<a?CE<a?v1<a?Fu<a?1:6:vq<a?1:6:At<a?EQ<a?1:6:Ab<a?1:6:Ai<a?zk<a?zP<a?1:6:w0<a?1:6:F$<a?Gk<a?1:6:zN<a?1:6:zd<a?Fe<a?F8<a?Cy<a?1:6:yx<a?1:6:yL<a?nB<a?1:6:Bf<a?1:6:AG<a?yp<a?vi<a?1:6:1:6:pB<a?oI<a?ql<a?nZ<a?E6<a?1:6:Fh<a?1:6:p7<a?wY<a?1:6:x$<a?1:6:oY<a?of<a?wz<a?1:6:wg<a?1:6:qT<a?Bk<a?1:6:x_<a?1:6:nH<a?ok<a?pF<a?zz<a?1:6:w2<a?1:6:Dt<a?Aq<a?1:6:D$<a?1:6:pf<a?F0<a?D9<a?1:6:oQ<a?1:6:nP<a?vQ<a?1:6:E4<a?1:6:v7<a?pc<a?z8<a?ov<a?oj<a?nI<a?p9<a?yn<a?1:6:CT<a?1:6:xA<a?Ez<a?1:6:wD<a?1:6:qe<a?oS<a?xt<a?1:6:wV<a?1:6:qK<a?q3<a?1:6:Di<a?1:6:nU<a?zE<a?E8<a?y_<a?1:6:Ee<a?1:6:wI<a?n0<a?1:6:z7<a?1:6:yd<a?qh<a?EB<a?1:6:Av<a?1:6:A6<a?Eq<a?1:6:Bn<a?1:6:DL<a?Go<a?El<a?C$<a?A7<a?1:6:FP<a?1:6:Af<a?zD<a?1:6:DG<a?1:6:D6<a?AY<a?vF<a?1:6:yk<a?1:6:EX<a?v6<a?1:6:zu<a?1:6:vL<a?w8<a?xM<a?Fq<a?1:6:zn<a?1:6:Bz<a?xh<a?1:6:yK<a?1:6:wJ<a?pz<a?oJ<a?1:6:Bm<a?1:6:F1<a?Ei<a?1:6:BO<a?1:6:A3<a?Fx<a?wG<a?zW<a?vw<a?wr<a?1:6:DY<a?1:6:Fw<a?yo<a?1:6:wi<a?1:6:xy<a?BT<a?AZ<a?1:6:EL<a?1:6:CS<a?Ak<a?1:6:vG<a?1:6:v5<a?wx<a?wp<a?yv<a?1:6:FG<a?1:6:Gj<a?Cp<a?1:6:wa<a?1:6:z1<a?D2<a?yr<a?1:6:EH<a?1:6:E5<a?Bt<a?1:6:Bo<a?1:6:oo<a?qv<a?Ef<a?AX<a?BX<a?1:6:vo<a?1:6:B8<a?Fv<a?1:6:EA<a?1:6:v0<a?oC<a?xn<a?1:6:v8<a?1:6:BP<a?vX<a?1:6:Ce<a?1:6:Gm<a?xm<a?pH<a?Ey<a?1:6:Ad<a?1:6:ze<a?C1<a?1:6:vr<a?1:6:B6<a?oO<a?Gc<a?1:6:yE<a?1:6:wc<a?B2<a?1:6:qX<a?1:6:E0<a?w6<a?z5<a?yR<a?DQ<a?BI<a?z$<a?1:6:pO<a?1:6:zR<a?FO<a?1:6:xg<a?1:6:pm<a?Dc<a?n6<a?1:6:n1<a?1:6:Fk<a?Cc<a?1:6:wt<a?1:6:Au<a?xd<a?D8<a?zb<a?1:6:xw<a?1:6:CA<a?vy<a?1:6:A_<a?1:6:BY<a?D0<a?DD<a?1:6:vj<a?1:6:EN<a?vt<a?1:6:BW<a?1:6:vA<a?yz<a?zH<a?Ap<a?Dw<a?1:6:y6<a?1:6:A2<a?EG<a?1:6:vp<a?1:6:Ch<a?v2<a?wv<a?1:6:Bh<a?1:6:As<a?qP<a?1:6:zy<a?1:6:xP<a?Dy<a?vM<a?De<a?1:6:zK<a?1:6:oM<a?ow<a?1:6:FR<a?1:6:ox<a?zc<a?F7<a?1:6:xj<a?1:6:wQ<a?zs<a?1:6:yA<a?1:6:pW<a?Gl<a?qY<a?Ev<a?Ae<a?BM<a?1:6:oB<a?1:6:wT<a?DP<a?1:6:zV<a?1:6:o0<a?qM<a?wf<a?1:6:zU<a?1:6:FH<a?yG<a?1:6:Dr<a?1:6:pX<a?DR<a?nO<a?ya<a?1:6:vu<a?1:6:qL<a?w_<a?1:6:E$<a?1:6:oV<a?nD<a?wZ<a?1:6:o8<a?1:6:xb<a?wb<a?1:6:AT<a?1:6:FX<a?vI<a?pZ<a?yb<a?Cx<a?1:6:qy<a?1:6:DN<a?vl<a?1:6:xx<a?1:6:zt<a?wX<a?yP<a?1:6:pq<a?1:6:Cl<a?zX<a?1:6:oU<a?1:6:CH<a?wk<a?F9<a?oq<a?1:6:C2<a?1:6:Ex<a?zZ<a?1:6:E1<a?1:6:qq<a?yO<a?Cq<a?1:6:Cd<a?1:6:EO<a?AQ<a?1:6:AJ<a?1:6:FS<a?zJ<a?CG<a?qc<a?FM<a?Bv<a?Eu<a?Df<a?v9<a?1:6:yw<a?1:6:wO<a?Eb<a?1:6:qB<a?1:6:AI<a?zQ<a?Be<a?1:6:C0<a?1:6:FQ<a?xQ<a?1:6:EY<a?1:6:AL<a?yN<a?BA<a?zv<a?1:6:BB<a?1:6:zT<a?xH<a?1:6:BE<a?1:6:zp<a?EZ<a?CQ<a?1:6:EE<a?1:6:AP<a?v3<a?1:6:z2<a?1:6:E3<a?n4<a?AR<a?wR<a?wN<a?1:6:DF<a?1:6:vN<a?Dm<a?1:6:AN<a?1:6:AO<a?or<a?FF<a?1:6:vR<a?1:6:Aa<a?p8<a?1:6:FK<a?1:6:pS<a?Az<a?CW<a?C8<a?1:6:Bj<a?1:6:z_<a?Fz<a?1:6:F4<a?1:6:Am<a?EJ<a?Cj<a?1:6:vV<a?1:6:wA<a?w$<a?1:6:y1<a?1:6:Ah<a?xo<a?Gn<a?oa<a?Bi<a?pt<a?1:6:xU<a?1:6:pe<a?yi<a?1:6:nC<a?1:6:A$<a?E7<a?F3<a?1:6:yl<a?1:6:zF<a?vW<a?1:6:zA<a?1:6:w5<a?yg<a?vn<a?FY<a?1:6:Eg<a?1:6:Bw<a?CO<a?1:6:yC<a?1:6:yV<a?Dh<a?zx<a?1:6:xC<a?1:6:yW<a?yS<a?1:6:Bb<a?1:6:EW<a?B4<a?D7<a?CK<a?F5<a?1:6:xI<a?1:6:wB<a?Fm<a?1:6:F_<a?1:6:vm<a?wK<a?yY<a?1:6:yI<a?1:6:Gd<a?Cn<a?1:6:1:v_<a?qm<a?FJ<a?6:x0<a?1:6:wh<a?w1<a?1:6:xq<a?1:6:wy<a?vS<a?yH<a?1:6:vK<a?1:6:x7<a?1:6:qG<a?CY<a?Fr<a?xT<a?yt<a?6:C4<a?v$<a?1:6:wm<a?1:6:An<a?DJ<a?yh<a?1:6:xW<a?1:6:zM<a?xK<a?1:6:Er<a?1:6:qb<a?qS<a?pv<a?Gb<a?1:6:BL<a?1:6:pP<a?A9<a?1:6:z0<a?1:6:CJ<a?o4<a?wl<a?1:6:Dq<a?1:6:EM<a?CI<a?1:6:B$<a?1:6:Ck<a?Gg<a?Dv<a?wH<a?wW<a?1:6:1:6:Cr<a?6:od<a?Ec<a?1:6:EI<a?1:6:DS<a?qz<a?e9<a?ds<a?1:2:AV<a?1:6:zY<a?vY<a?1:6:BN<a?1:6:vC<a?E2<a?C5<a?1:6:y3<a?1:6:vZ<a?zS<a?1:6:vz<a?1:6:AU<a?FI<a?ot<a?pg<a?nT<a?xJ<a?1:6:Br<a?1:6:qo<a?pu<a?1:6:Dg<a?1:6:Bg<a?p$<a?Ft<a?1:6:zI<a?1:6:yX<a?qA<a?1:6:xY<a?1:6:FC<a?ER<a?FU<a?BK<a?1:6:Ax<a?1:6:xe<a?z6<a?1:6:wS<a?1:6:xz<a?yc<a?Bu<a?1:6:DE<a?1:6:x8<a?1:6:xv<a?qp<a?pN<a?Fd<a?1:6:pk<a?6:y2<a?1:6:En<a?qi<a?Bq<a?1:6:xL<a?1:6:CF<a?C9<a?1:6:DI<a?1:6:xu<a?BZ<a?v4<a?vE<a?1:6:1:Ar<a?6:Dj<a?1:6:Eo<a?xE<a?1:6:y0<a?yQ<a?1:6:yU<a?1:6:Da<a?pY<a?Gh<a?Al<a?vO<a?FT<a?yD<a?w9<a?1:6:yq<a?1:6:xO<a?Du<a?1:6:xr<a?1:6:Bp<a?vh<a?ou<a?1:6:1:6:Bl<a?CR<a?wF<a?x3<a?1:6:BV<a?1:6:nK<a?CD<a?1:6:Ca<a?1:6:Fl<a?Fo<a?1:6:Dd<a?DV<a?1:6:n9<a?1:6:zh<a?D1<a?wd<a?Dp<a?CZ<a?1:6:vs<a?1:6:Gf<a?wL<a?1:6:Aw<a?1:6:Dk<a?o_<a?x5<a?1:6:n2<a?1:6:Ci<a?ye<a?1:6:EK<a?1:6:Ao<a?AK<a?B1<a?By<a?1:6:C6<a?1:6:vD<a?xp<a?1:6:Ba<a?1:6:wC<a?DH<a?1:6:6:FE<a?C7<a?zw<a?CL<a?6:x1<a?yF<a?1:6:xS<a?1:6:Fb<a?xs<a?AA<a?1:6:1:6:zr<a?DZ<a?B0<a?1:6:6:Cs<a?Bc<a?Ag<a?1:6:1:zi<a?6:1:FZ<a?E9<a?nS<a?6:Cw<a?1:6:vB<a?CM<a?D3<a?1:6:AC<a?1:6:xV<a?1:6:Ek<a?BF<a?CU<a?1:6:ES<a?1:6:xf<a?zL<a?6:F6<a?1:6:yj<a?wU<a?1:6:AF<a?1:6:BR<a?B7<a?D4<a?oi<a?Ga<a?n8<a?yy<a?1:6:zm<a?1:6:we<a?1:6:xa<a?pJ<a?Gq<a?1:6:1:6:ED<a?FN<a?AB<a?Dx<a?1:6:1:6:w4<a?nX<a?xD<a?1:6:Bx<a?1:6:BG<a?1:6:o2<a?pU<a?fr<a?vx<a?6:dy<a?1:2:oG<a?Dl<a?1:6:zO<a?1:6:pQ<a?po<a?EC<a?1:6:y9<a?1:6:qN<a?Gp<a?1:6:Fy<a?1:6:EV<a?Fc<a?qW<a?zq<a?1:6:yu<a?1:6:qf<a?Em<a?1:6:q2<a?1:6:A0<a?Cg<a?DM<a?1:6:qr<a?1:6:qV<a?qD<a?1:6:EF<a?1:6:o7<a?B3<a?Cf<a?CB<a?y7<a?Ay<a?1:6:zg<a?1:6:wM<a?1:6:FV<a?DO<a?6:1:6:A5<a?Fp<a?yZ<a?o$<a?1:6:DC<a?1:6:w3<a?Gi<a?1:6:1:6:wu<a?DU<a?qn<a?p_<a?o6<a?1:6:n3<a?1:6:DB<a?pa<a?1:6:1:on<a?EP<a?6:qk<a?1:6:Bs<a?x9<a?1:6:oR<a?1:6:xi<a?DK<a?vU<a?qx<a?1:6:D5<a?1:6:Dn<a?oT<a?1:6:pn<a?1:6:gx<a?e3<a?fK<a?1:2:gA<a?1:2:bC<a?bq<a?1:3:fp<a?1:2:K(bd$,a+1|0)-1|0;if(30<d>>>0)return l(b);switch(d){case
0:return 62;case
1:return 63;case
2:v(b,1);if(0===c8(k(b)))for(;;){v(b,1);if(0===c8(k(b)))continue;return l(b)}return l(b);case
3:return 0;case
4:v(b,0);var
e=0!==cd(k(b))?1:0;return e?l(b):e;case
5:return 6;case
6:return 61;case
7:v(b,63);if(0===jQ(k(b))){var
g=k(b),I=b8<g?ci<g?-1:0:-1;if(0===I){if(0===jS(k(b))){if(0===jQ(k(b))){var
i=k(b),L=a2<i?hn<i?-1:0:-1;return 0===L?0===NT(k(b))?31:l(b):l(b)}return l(b)}return l(b)}return l(b)}return l(b);case
8:return 56;case
9:return 38;case
10:return 39;case
11:v(b,53);return 0===N9(k(b))?4:l(b);case
12:return 59;case
13:return 43;case
14:v(b,60);var
m=jR(k(b));if(3<m>>>0)return l(b);switch(m){case
0:for(;;){var
n=jR(k(b));if(3<n>>>0)return l(b);switch(n){case
0:continue;case
1:return x(b);case
2:return B(b);default:return r(b)}}case
1:return x(b);case
2:return B(b);default:return r(b)}case
15:v(b,41);var
o=h8(k(b));return 0===o?0===uM(k(b))?40:l(b):1===o?y(b):l(b);case
16:v(b,63);var
p=nh(k(b));if(0===p){v(b,2);var
q=m4(k(b));if(2<q>>>0)return l(b);switch(q){case
0:for(;;){var
s=m4(k(b));if(2<s>>>0)return l(b);switch(s){case
0:continue;case
1:return R(b);default:return S(b)}}case
1:return R(b);default:return S(b)}}return 1===p?5:l(b);case
17:v(b,30);var
t=uP(k(b));if(8<t>>>0)return l(b);switch(t){case
0:return c(b);case
1:return j(b);case
2:return C(b);case
3:return F(b);case
4:return G(b);case
5:return f(b);case
6:return J(b);case
7:return N(b);default:return h(b)}case
18:v(b,30);var
u=m7(k(b));if(5<u>>>0)return l(b);switch(u){case
0:return c(b);case
1:return j(b);case
2:return r(b);case
3:return f(b);case
4:return Q(b);default:return h(b)}case
19:return 44;case
20:return 42;case
21:return 49;case
22:v(b,51);var
w=k(b),M=61<w?62<w?-1:0:-1;return 0===M?57:l(b);case
23:return 50;case
24:v(b,46);return 0===uM(k(b))?45:l(b);case
25:return 32;case
26:v(b,63);if(0===hE(k(b))){var
z=h9(k(b));if(0===z)return 0===as(k(b))?0===as(k(b))?0===as(k(b))?61:l(b):l(b):l(b);if(1===z){if(0===as(k(b)))for(;;){var
A=h4(k(b));if(0===A)continue;return 1===A?61:l(b)}return l(b)}return l(b)}return l(b);case
27:return 33;case
28:v(b,34);var
E=k(b),O=hm<E?kG<E?-1:0:-1;return 0===O?36:l(b);case
29:v(b,55);var
H=k(b),P=kG<H?D<H?-1:0:-1;return 0===P?37:l(b);default:return 35}}aq(b);var
T=at(b);if(63<T>>>0)return V(boS);var
w=T;if(32<=w)switch(w){case
34:return[0,a,0];case
35:return[0,a,1];case
36:return[0,a,2];case
37:return[0,a,3];case
38:return[0,a,4];case
39:return[0,a,5];case
40:return[0,a,12];case
41:return[0,a,10];case
42:return[0,a,8];case
43:return[0,a,9];case
45:return[0,a,83];case
49:return[0,a,98];case
50:return[0,a,99];case
53:return[0,a,a2];case
55:return[0,a,89];case
56:return[0,a,91];case
57:return[0,a,11];case
59:return[0,a,b8];case
60:return[0,a,ci];case
61:var
al=b[6];N$(b);var
aM=jT(a,al,b[3]);uD(b,al);var
am=jL(b),ap=Of(a,am),d=ap[2],e=ap[1],ar=Y(d,bo8);if(0<=ar){if(!(0<ar))return[0,e,io];if(!p(d,bo9))return[0,e,29];if(!p(d,bo_))return[0,e,kl];if(!p(d,bo$))return[0,e,42];if(!p(d,bpa))return[0,e,jf];if(!p(d,bpb))return[0,e,kv];if(!p(d,bpc))return[0,e,31];if(!p(d,bpd))return[0,e,46];if(!p(d,bpe))return[0,e,e4]}else{if(!p(d,bpf))return[0,e,hP];if(!p(d,bpg))return[0,e,ke];if(!p(d,bph))return[0,e,bpo];if(!p(d,bpi))return[0,e,bpn];if(!p(d,bpj))return[0,e,ip];if(!p(d,bpk))return[0,e,41];if(!p(d,bpl))return[0,e,30];if(!p(d,bpm))return[0,e,53]}return[0,e,[4,aM,d,uE(am)]];case
62:var
aN=a[4]?bn(a,aE(a,b),6):a;return[0,aN,au];case
63:return[0,a,[6,X(b)]];case
32:case
47:return[0,a,6];case
33:case
48:return[0,a,7];case
44:case
54:return[0,a,86];case
46:case
52:return[0,a,85];default:return[0,a,82]}switch(w){case
0:return[2,bP(a,b)];case
1:return[2,a];case
2:var
av=bz(a,b),U=aD(aC),W=h_(a,U,b),Z=W[1];return[1,Z,cF(Z,av,W[2],U,1)];case
3:var
_=X(b);if(a[5]){var
aw=a[4]?Ob(a,aE(a,b),_):a,$=mW(1,aw),aa=mV(b);if(ay(jN(b,aa-1|0,1),boT)&&p(jN(b,aa-2|0,1),boU))return[0,$,86];return[2,$]}var
ax=bz(a,b),s=aD(aC);an(s,_);var
ab=h_(a,s,b),ac=ab[1];return[1,ac,cF(ac,ax,ab[2],s,1)];case
4:if(a[4])return[2,mW(0,a)];iI(b);aq(b);var
ad=0!==NV(k(b))?1:0,az=ad?l(b):ad;return 0===az?[0,a,a2]:V(boV);case
5:var
aA=bz(a,b),ae=aD(aC),af=iM(a,ae,b),ag=af[1];return[1,ag,cF(ag,aA,af[2],ae,0)];case
6:var
ah=X(b),aB=bz(a,b),ai=aD(aC),t=aD(aC);an(t,ah);var
u=Oh(a,ah,ai,t,0,b),aj=u[1],aF=[0,aj[1],aB,u[2]],aG=u[3],aH=aZ(t);return[0,aj,[2,[0,aF,aZ(ai),aH,aG]]];case
7:return aV(a,b,function(f,a){function
b(a){if(0===m9(k(a))){if(0===c9(k(a)))for(;;){var
b=m1(k(a));if(2<b>>>0)return l(a);switch(b){case
0:continue;case
1:a:for(;;){if(0===c9(k(a)))for(;;){var
c=m1(k(a));if(2<c>>>0)return l(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}return l(a)}default:return 0}}return l(a)}return l(a)}aq(a);var
c=h7(k(a));if(0===c)for(;;){var
d=h5(k(a));if(0===d)continue;var
e=1===d?b(a):l(a);break}else
var
e=1===c?b(a):l(a);return 0===e?[0,f,cQ(0,X(a))]:V(boW)});case
8:return[0,a,cQ(0,X(b))];case
9:return aV(a,b,function(f,a){function
b(a){if(0===m9(k(a))){if(0===c9(k(a)))for(;;){v(a,0);var
b=m0(k(a));if(0===b)continue;if(1===b)a:for(;;){if(0===c9(k(a)))for(;;){v(a,0);var
c=m0(k(a));if(0===c)continue;if(1===c)continue a;return l(a)}return l(a)}return l(a)}return l(a)}return l(a)}aq(a);var
c=h7(k(a));if(0===c)for(;;){var
d=h5(k(a));if(0===d)continue;var
e=1===d?b(a):l(a);break}else
var
e=1===c?b(a):l(a);return 0===e?[0,f,da(0,X(a))]:V(boX)});case
10:return[0,a,da(0,X(b))];case
11:return aV(a,b,function(f,a){function
b(a){if(0===nb(k(a))){if(0===bH(k(a)))for(;;){var
b=m8(k(a));if(2<b>>>0)return l(a);switch(b){case
0:continue;case
1:a:for(;;){if(0===bH(k(a)))for(;;){var
c=m8(k(a));if(2<c>>>0)return l(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}return l(a)}default:return 0}}return l(a)}return l(a)}aq(a);var
c=h7(k(a));if(0===c)for(;;){var
d=h5(k(a));if(0===d)continue;var
e=1===d?b(a):l(a);break}else
var
e=1===c?b(a):l(a);return 0===e?[0,f,cQ(1,X(a))]:V(boY)});case
12:return[0,a,cQ(1,X(b))];case
13:return aV(a,b,function(f,a){function
b(a){if(0===nb(k(a))){if(0===bH(k(a)))for(;;){v(a,0);var
b=m6(k(a));if(0===b)continue;if(1===b)a:for(;;){if(0===bH(k(a)))for(;;){v(a,0);var
c=m6(k(a));if(0===c)continue;if(1===c)continue a;return l(a)}return l(a)}return l(a)}return l(a)}return l(a)}aq(a);var
c=h7(k(a));if(0===c)for(;;){var
d=h5(k(a));if(0===d)continue;var
e=1===d?b(a):l(a);break}else
var
e=1===c?b(a):l(a);return 0===e?[0,f,da(3,X(a))]:V(boZ)});case
14:return[0,a,da(3,X(b))];case
15:return aV(a,b,function(f,a){function
b(a){if(0===bH(k(a)))for(;;){v(a,0);if(0===bH(k(a)))continue;return l(a)}return l(a)}aq(a);var
c=h7(k(a));if(0===c)for(;;){var
d=h5(k(a));if(0===d)continue;var
e=1===d?b(a):l(a);break}else
var
e=1===c?b(a):l(a);return 0===e?[0,f,da(1,X(a))]:V(bo0)});case
16:return[0,a,da(1,X(b))];case
17:return aV(a,b,function(f,a){function
b(a){if(0===mX(k(a))){if(0===as(k(a)))for(;;){var
b=m2(k(a));if(2<b>>>0)return l(a);switch(b){case
0:continue;case
1:a:for(;;){if(0===as(k(a)))for(;;){var
c=m2(k(a));if(2<c>>>0)return l(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}return l(a)}default:return 0}}return l(a)}return l(a)}aq(a);var
c=h7(k(a));if(0===c)for(;;){var
d=h5(k(a));if(0===d)continue;var
e=1===d?b(a):l(a);break}else
var
e=1===c?b(a):l(a);return 0===e?[0,f,cQ(2,X(a))]:V(bo1)});case
19:return aV(a,b,function(f,a){function
b(a){if(0===mX(k(a))){if(0===as(k(a)))for(;;){v(a,0);var
b=ne(k(a));if(0===b)continue;if(1===b)a:for(;;){if(0===as(k(a)))for(;;){v(a,0);var
c=ne(k(a));if(0===c)continue;if(1===c)continue a;return l(a)}return l(a)}return l(a)}return l(a)}return l(a)}aq(a);var
c=h7(k(a));if(0===c)for(;;){var
d=h5(k(a));if(0===d)continue;var
e=1===d?b(a):l(a);break}else
var
e=1===c?b(a):l(a);return 0===e?[0,f,da(4,X(a))]:V(bo2)});case
21:return aV(a,b,function(d,a){function
g(a){for(;;){var
b=cD(k(a));if(2<b>>>0)return l(a);switch(b){case
0:continue;case
1:a:for(;;){if(0===ak(k(a)))for(;;){var
c=cD(k(a));if(2<c>>>0)return l(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}return l(a)}default:return 0}}}function
f(a){for(;;){var
b=iL(k(a));if(0===b)continue;var
c=1!==b?1:0;return c?l(a):c}}function
c(a){var
b=nk(k(a));if(2<b>>>0)return l(a);switch(b){case
0:var
c=h6(k(a));return 0===c?f(a):1===c?g(a):l(a);case
1:return f(a);default:return g(a)}}function
e(a){if(0===ak(k(a)))for(;;){var
b=bO(k(a));if(2<b>>>0)return l(a);switch(b){case
0:continue;case
1:return c(a);default:a:for(;;){if(0===ak(k(a)))for(;;){var
d=bO(k(a));if(2<d>>>0)return l(a);switch(d){case
0:continue;case
1:return c(a);default:continue a}}return l(a)}}}return l(a)}function
i(a){var
b=nc(k(a));if(0===b)for(;;){var
d=bO(k(a));if(2<d>>>0)return l(a);switch(d){case
0:continue;case
1:return c(a);default:a:for(;;){if(0===ak(k(a)))for(;;){var
e=bO(k(a));if(2<e>>>0)return l(a);switch(e){case
0:continue;case
1:return c(a);default:continue a}}return l(a)}}}return 1===b?c(a):l(a)}function
h(a){var
b=mZ(k(a));return 0===b?i(a):1===b?c(a):l(a)}function
j(a){for(;;){var
b=na(k(a));if(2<b>>>0)return l(a);switch(b){case
0:return i(a);case
1:continue;default:return c(a)}}}aq(a);var
m=m5(k(a));if(3<m>>>0)var
b=l(a);else
switch(m){case
0:for(;;){var
n=jR(k(a));if(3<n>>>0)var
b=l(a);else
switch(n){case
0:continue;case
1:var
b=e(a);break;case
2:var
b=h(a);break;default:var
b=j(a)}break}break;case
1:var
b=e(a);break;case
2:var
b=h(a);break;default:var
b=j(a)}if(0===b){var
o=X(a),p=bn(d,aE(d,a),23);return[0,p,cQ(2,o)]}return V(bo3)});case
22:var
aI=X(b),aJ=bn(a,aE(a,b),23);return[0,aJ,cQ(2,aI)];case
23:return aV(a,b,function(n,a){function
f(a){for(;;){v(a,0);var
b=hD(k(a));if(0===b)continue;if(1===b)a:for(;;){if(0===ak(k(a)))for(;;){v(a,0);var
c=hD(k(a));if(0===c)continue;if(1===c)continue a;return l(a)}return l(a)}return l(a)}}function
e(a){for(;;){v(a,0);if(0===ak(k(a)))continue;return l(a)}}function
c(a){var
b=nk(k(a));if(2<b>>>0)return l(a);switch(b){case
0:var
c=h6(k(a));return 0===c?e(a):1===c?f(a):l(a);case
1:return e(a);default:return f(a)}}function
d(a){if(0===ak(k(a)))for(;;){var
b=bO(k(a));if(2<b>>>0)return l(a);switch(b){case
0:continue;case
1:return c(a);default:a:for(;;){if(0===ak(k(a)))for(;;){var
d=bO(k(a));if(2<d>>>0)return l(a);switch(d){case
0:continue;case
1:return c(a);default:continue a}}return l(a)}}}return l(a)}function
h(a){var
b=nc(k(a));if(0===b)for(;;){var
d=bO(k(a));if(2<d>>>0)return l(a);switch(d){case
0:continue;case
1:return c(a);default:a:for(;;){if(0===ak(k(a)))for(;;){var
e=bO(k(a));if(2<e>>>0)return l(a);switch(e){case
0:continue;case
1:return c(a);default:continue a}}return l(a)}}}return 1===b?c(a):l(a)}function
g(a){var
b=mZ(k(a));return 0===b?h(a):1===b?c(a):l(a)}function
i(a){for(;;){var
b=na(k(a));if(2<b>>>0)return l(a);switch(b){case
0:return h(a);case
1:continue;default:return c(a)}}}aq(a);var
j=m5(k(a));if(3<j>>>0)var
b=l(a);else
switch(j){case
0:for(;;){var
m=jR(k(a));if(3<m>>>0)var
b=l(a);else
switch(m){case
0:continue;case
1:var
b=d(a);break;case
2:var
b=g(a);break;default:var
b=i(a)}break}break;case
1:var
b=d(a);break;case
2:var
b=g(a);break;default:var
b=i(a)}return 0===b?[0,n,da(4,X(a))]:V(bo4)});case
25:return aV(a,b,function(d,a){function
f(a){for(;;){var
b=cD(k(a));if(2<b>>>0)return l(a);switch(b){case
0:continue;case
1:a:for(;;){if(0===ak(k(a)))for(;;){var
c=cD(k(a));if(2<c>>>0)return l(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}return l(a)}default:return 0}}}function
e(a){return 0===ak(k(a))?f(a):l(a)}function
c(a){var
b=iL(k(a));if(0===b)return f(a);var
c=1!==b?1:0;return c?l(a):c}function
g(a){for(;;){var
b=h8(k(a));if(0===b)return c(a);if(1===b)continue;return l(a)}}function
h(a){for(;;){var
b=c$(k(a));if(2<b>>>0)return l(a);switch(b){case
0:return c(a);case
1:continue;default:a:for(;;){if(0===ak(k(a)))for(;;){var
d=c$(k(a));if(2<d>>>0)return l(a);switch(d){case
0:return c(a);case
1:continue;default:continue a}}return l(a)}}}}aq(a);var
i=m5(k(a));if(3<i>>>0)var
b=l(a);else
switch(i){case
0:for(;;){var
j=jR(k(a));if(3<j>>>0)var
b=l(a);else
switch(j){case
0:continue;case
1:var
b=e(a);break;case
2:var
b=g(a);break;default:var
b=h(a)}break}break;case
1:var
b=e(a);break;case
2:var
b=g(a);break;default:var
b=h(a)}if(0===b){var
m=X(a),n=bn(d,aE(d,a),22);return[0,n,cQ(2,m)]}return V(bo5)});case
26:return aV(a,b,function(h,a){function
d(a){for(;;){var
b=iL(k(a));if(0===b)continue;var
c=1!==b?1:0;return c?l(a):c}}function
e(a){for(;;){var
b=cD(k(a));if(2<b>>>0)return l(a);switch(b){case
0:continue;case
1:a:for(;;){if(0===ak(k(a)))for(;;){var
c=cD(k(a));if(2<c>>>0)return l(a);switch(c){case
0:continue;case
1:continue a;default:return 0}}return l(a)}default:return 0}}}aq(a);var
c=k(a),f=44<c?57<c?-1:K(bdt,c+i8|0)-1|0:-1;if(2<f>>>0)var
b=l(a);else
switch(f){case
0:for(;;){var
g=N5(k(a));if(2<g>>>0)var
b=l(a);else
switch(g){case
0:continue;case
1:var
b=d(a);break;default:var
b=e(a)}break}break;case
1:var
b=d(a);break;default:var
b=e(a)}return 0===b?[0,h,cQ(2,X(a))]:V(bo6)});case
27:var
aK=X(b),aL=bn(a,aE(a,b),22);return[0,aL,cQ(2,aK)];case
29:return aV(a,b,function(r,a){function
f(a){for(;;){v(a,0);var
b=hD(k(a));if(0===b)continue;if(1===b)a:for(;;){if(0===ak(k(a)))for(;;){v(a,0);var
c=hD(k(a));if(0===c)continue;if(1===c)continue a;return l(a)}return l(a)}return l(a)}}function
c(a){v(a,0);return 0===ak(k(a))?f(a):l(a)}aq(a);var
g=m5(k(a));if(3<g>>>0)var
b=l(a);else
switch(g){case
0:for(;;){var
h=N5(k(a));if(2<h>>>0)var
b=l(a);else
switch(h){case
0:continue;case
1:for(;;){v(a,0);var
i=h8(k(a)),j=0!==i?1:0;if(j){if(1===i)continue;var
b=l(a)}else
var
b=j;break}break;default:for(;;){v(a,0);var
m=c$(k(a));if(2<m>>>0)var
b=l(a);else
switch(m){case
0:var
b=0;break;case
1:continue;default:c:for(;;){if(0===ak(k(a)))for(;;){v(a,0);var
n=c$(k(a));if(2<n>>>0)var
d=l(a);else
switch(n){case
0:var
d=0;break;case
1:continue;default:continue c}break}else
var
d=l(a);var
b=d;break}}break}}break}break;case
1:var
b=0===ak(k(a))?f(a):l(a);break;case
2:for(;;){v(a,0);var
o=h8(k(a));if(0===o)var
b=c(a);else{if(1===o)continue;var
b=l(a)}break}break;default:for(;;){v(a,0);var
p=c$(k(a));if(2<p>>>0)var
b=l(a);else
switch(p){case
0:var
b=c(a);break;case
1:continue;default:a:for(;;){if(0===ak(k(a)))for(;;){v(a,0);var
q=c$(k(a));if(2<q>>>0)var
e=l(a);else
switch(q){case
0:var
e=c(a);break;case
1:continue;default:continue a}break}else
var
e=l(a);var
b=e;break}}break}}return 0===b?[0,r,da(4,X(a))]:V(bo7)});case
31:return[0,a,66];case
18:case
28:return[0,a,cQ(2,X(b))];default:return[0,a,da(4,X(b))]}}function
jU(l){return function(n){var
f=0,e=n;for(;;){var
b=d(l,e,e[2]);switch(b[0]){case
0:var
h=b[2],a=b[1],g=Oa(a,h),i=0===f?0:U(f),j=a[6];if(0===j)return[0,[0,a[1],a[2],a[3],a[4],a[5],a[6],g],[0,h,g,0,i]];var
m=[0,h,g,U(j),i];return[0,[0,a[1],a[2],a[3],a[4],a[5],NL,g],m];case
1:var
k=b[2],c=b[1],f=[0,k,f],e=[0,c[1],c[2],c[3],c[4],c[5],c[6],k[1]];continue;default:var
e=b[1];continue}}}}var
bpq=jU(bgA),bpr=jU(boK),bps=jU(boN),bpt=jU(boR),bpu=jU(bfl),bA=uB([0,GW]);function
jV(b,a){return[0,0,0,a,NM(b)]}function
nm(h){var
c=h[4];switch(h[3]){case
0:var
g=b(bpu,c);break;case
1:var
g=b(bpt,c);break;case
2:var
g=b(bpr,c);break;case
3:var
r=b2(c,c[2]),i=aD(aC),j=aD(aC),a=c[2];aq(a);var
m=k(a),s=hm<m?bq<m?1:bC<m?2:1:K(beA,m+1|0)-1|0;if(5<s>>>0)var
e=l(a);else
switch(s){case
0:var
e=1;break;case
1:var
e=4;break;case
2:var
e=0;break;case
3:v(a,0);var
t=0!==cd(k(a))?1:0,e=t?l(a):t;break;case
4:var
e=2;break;default:var
e=3}if(4<e>>>0)var
f=V(bpp);else
switch(e){case
0:var
x=X(a);an(j,x);an(i,x);var
o=uR(bP(c,a),2,i,j,a),B=b2(o,a),C=aZ(i),D=aZ(j),f=[0,o,[8,[0,o[1],r,B],C,D]];break;case
1:var
f=[0,c,au];break;case
2:var
f=[0,c,98];break;case
3:var
f=[0,c,0];break;default:iI(a);var
p=uR(c,2,i,j,a),E=b2(p,a),F=aZ(i),G=aZ(j),f=[0,p,[8,[0,p[1],r,E],F,G]]}var
n=f[2],d=f[1],u=Oa(d,n),w=d[6];if(0===w)var
z=[0,d,[0,n,u,0,0]];else
var
A=[0,n,u,U(w),0],z=[0,[0,d[1],d[2],d[3],d[4],d[5],0,d[7]],A];var
g=z;break;case
4:var
g=b(bps,c);break;default:var
g=b(bpq,c)}var
y=g[1],H=NM(y),q=[0,H,g[2]];h[4]=y;if(h[1])h[2]=[0,q];else
h[1]=[0,q];return q}function
Oj(a){var
b=a[1];return b?b[1][2]:nm(a)[2]}function
bpv(c,a,b,i){var
j=c?c[1]:c,e=a?a[1]:a;try{var
m=0,n=NJ(i),g=m,f=n}catch(a){a=aS(a);if(a!==hA)throw a;var
k=[0,[0,[0,b,Nm[2],Nm[3]],86],0],g=k,f=NJ(bpw)}var
d=e?e[1]:iN,h=a_3(b,f,d[4]),l=[0,jV(h,0)];return[0,[0,g],[0,0],bA[1],[0,0],d[5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,[0,bpy],[0,h],l,[0,j],d,b,[0,0],[0,bpx]]}function
iO(a){return js(a[23][1])}function
a_(a){return a[27][4]}function
Q(a,c){var
e=c[2];a[1][1]=[0,[0,c[1],e],a[1][1]];var
b=a[22];return b?d(b[1],a,e):b}function
jW(b,a){b[30][1]=a;return 0}function
hF(d,c){if(0===d)return Oj(c[25][1]);if(1===d){var
a=c[25][1];if(!a[1])nm(a);var
b=a[2];return b?b[1][2]:nm(a)[2]}throw[0,ap,bpB]}function
hf(b,a){return b===a[5]?a:[0,a[1],a[2],a[3],a[4],b,a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
uS(b,a){return b===a[17]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],b,a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
Ok(b,a){return b===a[18]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],b,a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
Ol(b,a){return b===a[19]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],b,a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
iP(b,a){return b===a[21]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],b,a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
nn(b,a){return b===a[14]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],b,a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
jX(b,a){return b===a[8]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],b,a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
jY(b,a){return b===a[12]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],b,a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
iQ(b,a){return b===a[15]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],b,a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
Om(b,a){return b===a[6]?a:[0,a[1],a[2],a[3],a[4],a[5],b,a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
On(b,a){return b===a[7]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],b,a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
uT(b,a){return b===a[13]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],b,a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
no(b,a){return[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],[0,b],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
uU(a){function
b(b){return Q(a,b)}return function(a){return bw(b,a)}}function
iR(b){var
a=b[4][1],c=a?[0,a[1][2]]:a;return c}function
Oo(b){var
a=b[4][1],c=a?[0,a[1][1]]:a;return c}function
Op(a){return[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],0,a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
Oq(a,d,c,b){return[0,a[1],a[2],bA[1],a[4],a[5],0,0,0,0,0,1,a[12],a[13],a[14],a[15],a[16],c,d,a[19],b,a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]]}function
Or(a){var
c=Y(a,bpC),b=0;if(0<=c){if(0<c){var
d=Y(a,bpD);if(0<=d){if(0<d&&p(a,bpE)&&p(a,bpF)&&p(a,bpG)&&p(a,bpH)&&p(a,bpI)&&p(a,bpJ)&&p(a,bpK))b=1}else
if(p(a,bpL)&&p(a,bpM)&&p(a,bpN)&&p(a,bpO)&&p(a,bpP)&&p(a,bpQ)&&p(a,bpR)&&p(a,bpS))b=1}}else{var
e=Y(a,bpT);if(0<=e){if(0<e&&p(a,bpU)&&p(a,bpV)&&p(a,bpW)&&p(a,bpX)&&p(a,bpY)&&p(a,bpZ)&&p(a,bp0)&&p(a,bp1))b=1}else
if(p(a,bp2)&&p(a,bp3)&&p(a,bp4)&&p(a,bp5)&&p(a,bp6)&&p(a,bp7)&&p(a,bp8)&&p(a,bp9))b=1}return b?0:1}function
np(a){return p(a,bp_)?0:1}function
uV(a){if(typeof
a==="number"){if(48===a)return 1}else
if(4===a[0]&&np(a[3]))return 1;return 0}function
iS(a){if(p(a,bp$)&&p(a,bqa)&&p(a,bqb)&&p(a,bqc)&&p(a,bqd)&&p(a,bqe)&&p(a,bqf)&&p(a,bqg))return 0;return 1}function
uW(a){if(typeof
a==="number")switch(a){case
42:case
52:case
53:case
54:case
55:case
56:case
57:case
58:return 1}else
if(4===a[0]&&iS(a[3]))return 1;return 0}function
hG(a){if(p(a,bqh)&&p(a,bqi))return 0;return 1}function
Os(a){if(typeof
a!=="number"&&4===a[0]&&hG(a[3]))return 1;return 0}function
uX(a){var
c=Or(a);if(c)var
b=c;else{var
d=np(a);if(d)var
b=d;else{if(p(a,bqj)&&p(a,bqk)&&p(a,bql))return 0;var
b=1}}return b}function
bqm(a){var
f=0;if(typeof
a==="number")switch(a){case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:case
26:case
27:case
32:case
33:case
34:case
35:case
36:case
37:case
38:case
39:case
40:case
41:case
43:case
44:case
45:case
46:case
47:case
49:case
50:case
51:case
58:case
59:case
65:var
b=1;f=1;break}else
if(4===a[0]&&Or(a[3])){var
b=1;f=1}if(!f)var
b=0;if(b)var
d=b;else{var
g=uV(a);if(g)var
d=g;else{var
c=0;if(typeof
a==="number")switch(a){case
29:case
30:case
31:break;default:c=1}else
if(4===a[0]){var
e=a[3];if(p(e,bqn)&&p(e,bqo)&&p(e,bqp))c=1}else
c=1;if(c)return 0;var
d=1}}return d}function
Ot(a){var
c=Y(a,bqq),b=0;if(0<=c){if(0<c&&p(a,bqr)&&p(a,bqs)&&p(a,bqt)&&p(a,bqu)&&p(a,bqv)&&p(a,bqw)&&p(a,bqx)&&p(a,bqy))b=1}else
if(p(a,bqz)&&p(a,bqA)&&p(a,bqB)&&p(a,bqC)&&p(a,bqD)&&p(a,bqE)&&p(a,bqF)&&p(a,bqG))b=1;return b?0:1}function
aA(b,a){return hF(b,a)[1]}function
jZ(b,a){return hF(b,a)[2]}function
s(a){return aA(0,a)}function
_(a){return jZ(0,a)}function
h$(c){var
b=iR(c),a=b?b[1]:V(bqH);return[0,a[1],a[3],a[3]]}function
uY(a){return hF(0,a)[3]}function
E(c){var
a=hF(0,c)[4];return a?b(ju(function(a){return hd(c[30][1],a[1][2])<=0?1:0}),a):a}function
Ou(b){var
a=hF(0,b)[4];for(;;){if(a){var
d=a[2],c=hd(a[1][1][2],b[30][1])<0?1:0;if(c)return c;var
a=d;continue}return 0}}function
j0(b,a){var
c=0<b?[0,jZ(b-1|0,a)]:iR(a);if(c)var
e=c[1][2][1],d=e<jZ(b,a)[2][1]?1:0;else
var
d=c;return d}function
bQ(a){return j0(0,a)}function
Ov(c,b){var
d=aA(c,b);if(typeof
d==="number"){var
a=d-2|0;if(a3<a>>>0){if(!(cr<a+1>>>0))return 1}else{var
e=6!==a?1:0;if(!e)return e}}return j0(c,b)}function
iT(a){return Ov(0,a)}function
nq(d,c){var
a=aA(d,c);if(uW(a))return 1;if(uV(a))return 1;if(Os(a))return 1;var
b=0;if(typeof
a==="number")switch(a){case
14:case
28:case
60:case
61:case
62:case
63:case
64:case
65:b=1;break}else
if(4===a[0])b=1;return b?1:0}function
Ow(c,b){var
d=iO(b);if(1===d){var
e=aA(c,b);if(typeof
e!=="number"&&4===e[0])return 1;return 0}if(d)return 0;var
a=aA(c,b);if(typeof
a==="number")switch(a){case
42:case
46:case
47:return 0;case
15:case
16:case
17:case
18:case
19:case
20:case
21:case
22:case
23:case
24:case
25:case
26:case
27:case
28:case
29:case
30:case
31:case
32:case
33:case
34:case
35:case
36:case
37:case
38:case
39:case
40:case
41:case
43:case
44:case
45:case
48:case
49:case
50:case
51:case
52:case
53:case
54:case
55:case
56:case
57:case
58:case
59:case
60:case
61:case
62:case
63:case
64:case
65:case
114:case
115:case
116:case
117:case
118:case
119:case
120:case
121:break;default:return 0}else
switch(a[0]){case
4:if(Ot(a[3]))return 0;break;case
9:case
10:case
11:break;default:return 0}return 1}function
ia(a){return nq(0,a)}function
hH(a){var
c=15===s(a)?1:0;if(c)var
b=c;else{var
d=64===s(a)?1:0;if(d){var
e=15===aA(1,a)?1:0;if(e)var
f=jZ(1,a)[2][1],b=_(a)[3][1]===f?1:0;else
var
b=e}else
var
b=d}return b}function
j1(c){var
a=s(c);if(typeof
a==="number"){var
b=0;if(13===a||40===a)b=1;if(b)return 1}return 0}function
aa(a,b){return Q(a,[0,_(a),b])}function
Ox(b,a){if(uV(a))return 2;if(uW(a))return 55;var
c=uJ(0,a);return b?[11,c,b[1]]:[10,c]}function
aR(c,a){var
d=uY(a);b(uU(a),d);return aa(a,Ox(c,s(a)))}function
nr(a){function
b(b){return Q(a,[0,b[1],76])}return function(a){return bw(b,a)}}function
Oy(b,a){var
c=b[6]?A(aH(bqI),a,a,a):bqJ;return aR([0,c],b)}function
cG(a,c){var
b=a[5];return b?aa(a,c):b}function
ce(b,a){var
c=b[5];return c?Q(b,[0,a[1],a[2]]):c}function
ib(a,b){return Q(a,[0,b,[18,a[5]]])}function
R(a){var
f=a[26][1];if(f){var
g=iO(a),h=s(a),i=[0,_(a),h,g];b(f[1],i)}var
e=a[25][1],d=e[1],j=d?d[1][1]:nm(e)[1];a[24][1]=j;var
k=uY(a);b(uU(a),k);var
l=a[2][1],m=c6(hF(0,a)[4],l);a[2][1]=m;var
n=[0,hF(0,a)];a[4][1]=n;var
c=a[25][1];return c[2]?(c[1]=c[2],c[2]=0,0):(Oj(c),c[1]=0,0)}function
a$(a,c){var
b=d(uF,s(a),c);if(b)R(a);return b}function
bI(a,b){a[23][1]=[0,b,a[23][1]];var
c=iO(a),d=jV(a[24][1],c);a[25][1]=d;return 0}function
b3(a){var
b=a[23][1],c=b?b[2]:V(bqK);a[23][1]=c;var
d=iO(a),e=jV(a[24][1],d);a[25][1]=e;return 0}function
W(a){var
c=_(a);if(9===s(a)&&j0(1,a)){var
d=E(a),e=hF(1,a)[4],f=ai(d,b(ju(function(a){return a[1][2][1]<=c[3][1]?1:0}),e));jW(a,[0,c[3][1]+1|0,0]);return f}var
g=E(a);jW(a,c[3]);return g}function
hI(a){var
c=a[4][1];if(c){var
d=c[1][2],f=E(a),g=b(ju(function(a){return a[1][2][1]<=d[3][1]?1:0}),f);jW(a,[0,d[3][1]+1|0,0]);var
e=g}else
var
e=c;return e}function
ic(b,a){return aR([0,uJ(bqO,a)],b)}function
w(a,b){if(1-d(uF,s(a),b))ic(a,b);return R(a)}function
Oz(b,a){var
c=a$(b,a);if(1-c)ic(b,a);return c}function
j2(a,d){var
c=s(a),e=0;if(typeof
c!=="number"&&4===c[0]&&ay(c[3],d))e=1;if(!e)aR([0,b(aH(bqP),d)],a);return R(a)}var
hJ=[aQ,bqQ,hu(0)];function
bqR(a){var
b=a[26][1];if(b){var
c=GY(0),e=[0,function(a){return rn(a,c)}];a[26][1]=e;var
d=[0,[0,b[1],c]]}else
var
d=b;return[0,a[1][1],a[2][1],a[4][1],a[23][1],a[24][1],a[30][1],d]}function
OA(d,i,c){if(c){var
e=c[1],f=e[1];i[26][1]=[0,f];if(d){var
a=e[2][2];for(;;){if(a){var
h=a[2];b(f,a[1]);var
a=h;continue}return 0}}var
g=d}else
var
g=c;return g}function
bqS(a,b){OA(0,a,b[7]);a[1][1]=b[1];a[2][1]=b[2];a[4][1]=b[3];a[23][1]=b[4];a[24][1]=b[5];a[30][1]=b[6];var
c=iO(a),d=jV(a[24][1],c);a[25][1]=d;return 0}function
bqT(c,b,a){OA(1,c,b[7]);return[0,a]}function
uZ(a,d){var
c=bqR(a);try{var
e=bqT(a,c,b(d,a));return e}catch(b){b=aS(b);if(b===hJ)return bqS(a,c);throw b}}function
OB(d,c,b){var
a=uZ(d,b);return a?a[1]:c}function
j3(f,a){var
c=U(a);if(c){var
d=c[1],e=b(f,d);return d===e?a:U([0,e,c[2]])}return a}var
OE=k1(bqX,function(f){var
j=rJ(f,bqW),a=rH(f,bqV),k=a[22],g=a[26],c=a[35],l=a[77],h=a[Ph],e=a[A8],m=a[nA],n=a[vJ],o=a[xR],i=a[y$],p=a[6],q=a[7],r=a[10],s=a[17],t=a[21],u=a[27],v=a[33],w=a[36],x=a[46],y=a[51],z=a[89],A=a[92],B=a[97],C=a[99],D=a[cA],E=a[au],F=a[jf],G=a[Ff],H=a[wq],I=a[RO],J=a[Se],K=a[QK],L=a[QA],M=a[Db],N=a[zf],P=a[Ew],Q=a[qg],R=a[w7],S=a[ys],T=a[CN],U=a[y5],V=a[yT],W=a[nN],X=a[Ed],Y=a[p0],Z=a[kd],_=rL(f,0,0,OC,uu,1)[1];function
$(c,j,a){var
g=a[2],f=g[2],h=g[1],i=a[1];if(f){var
k=function(a){return[0,i,[0,h,[0,a]]]},l=f[1];return O(b(c[1][1+e],c),l,a,k)}function
m(a){return[0,i,[0,a,f]]}return O(d(c[1][1+p],c,j),h,a,m)}function
aa(a,n,e){var
l=e[2],f=e[1],h=f[3],i=f[2];if(h)var
k=j3(b(a[1][1+g],a),h),j=i;else
var
k=0,j=d(a[1][1+g],a,i);var
m=d(a[1][1+c],a,l);if(i===j&&h===k&&l===m)return e;return[0,[0,f[1],j,k],m]}function
ab(d,a){var
e=a[2],f=e[1],g=a[1];function
h(a){return[0,g,[0,f,a]]}var
i=e[2];return O(b(d[1][1+c],d),i,a,h)}function
ac(d,g,a){function
e(b){return[0,a[1],a[2],b]}var
f=a[3];return O(b(d[1][1+c],d),f,a,e)}function
ad(d,a){function
e(b){return[0,a[1],b]}var
f=a[2];return O(b(d[1][1+c],d),f,a,e)}function
af(d,g,a){function
e(b){return[0,a[1],a[2],b]}var
f=a[3];return O(b(d[1][1+c],d),f,a,e)}function
ag(a,k,f){var
g=f[2],h=f[1],i=j3(b(a[1][1+e],a),h),j=d(a[1][1+c],a,g);if(h===i&&g===j)return f;return[0,i,j]}function
ah(d,a){var
e=a[2],f=e[1],g=a[1];function
h(a){return[0,g,[0,f,a]]}var
i=e[2];return O(b(d[1][1+c],d),i,a,h)}function
ai(d,g,a){function
e(b){return[0,a[1],a[2],a[3],b]}var
f=a[4];return O(b(d[1][1+c],d),f,a,e)}function
aj(d,g,a){function
e(b){return[0,a[1],b]}var
f=a[2];return O(b(d[1][1+c],d),f,a,e)}function
ak(b,i,a){var
e=a[3],f=a[2],g=d(b[1][1+B],b,f),h=d(b[1][1+c],b,e);if(f===g&&e===h)return a;return[0,a[1],g,h]}function
al(f,q,a){var
h=a[4],j=a[3],k=a[2],l=a[1],g=d(f[1][1+c],f,h);if(j){var
m=ae(b(f[1][1+i],f),j);if(j===m&&h===g)return a;return[0,a[1],a[2],m,g]}if(k){var
n=ae(b(f[1][1+o],f),k);if(k===n&&h===g)return a;return[0,a[1],n,a[3],g]}var
p=d(f[1][1+e],f,l);if(l===p&&h===g)return a;return[0,p,a[2],a[3],g]}function
am(b,j,a){var
f=a[4],g=a[3],h=d(b[1][1+e],b,g),i=d(b[1][1+c],b,f);if(g===h&&f===i)return a;return[0,a[1],a[2],h,i]}function
an(d,g,a){function
e(b){return[0,a[1],a[2],a[3],b]}var
f=a[4];return O(b(d[1][1+c],d),f,a,e)}function
ao(d,g,a){function
e(b){return[0,a[1],a[2],a[3],b]}var
f=a[4];return O(b(d[1][1+c],d),f,a,e)}function
ap(a,n,e){var
l=e[2],f=e[1],h=f[3],i=f[2];if(h)var
k=j3(b(a[1][1+g],a),h),j=i;else
var
k=0,j=d(a[1][1+g],a,i);var
m=d(a[1][1+c],a,l);if(i===j&&h===k&&l===m)return e;return[0,[0,f[1],j,k],m]}function
aq(e,j,a){var
f=a[3],g=a[1],h=bf(b(e[1][1+l],e),g),i=d(e[1][1+c],e,f);if(g===h&&f===i)return a;return[0,h,a[2],i]}function
ar(d,g,a){function
e(b){return[0,a[1],b]}var
f=a[2];return O(b(d[1][1+c],d),f,a,e)}function
as(c,a){if(0===a[0]){var
j=function(a){return[0,a]},k=a[1];return O(b(c[1][1+h],c),k,a,j)}var
e=a[1],f=e[2],g=f[2],i=d(c[1][1+h],c,g);return g===i?a:[1,[0,e[1],[0,f[1],i]]]}function
at(b,j,a){var
e=a[4],f=a[3],h=d(b[1][1+g],b,f),i=d(b[1][1+c],b,e);if(f===h&&e===i)return a;return[0,a[1],a[2],h,i]}function
av(e,d){var
a=d[2],f=d[1];function
g(b){return[0,f,[0,a[1],a[2],a[3],b]]}var
h=a[4];return O(b(e[1][1+c],e),h,[0,f,a],g)}function
aw(b,i,a){var
e=a[9],f=a[3],g=d(b[1][1+M],b,f),h=d(b[1][1+c],b,e);if(f===g&&e===h)return a;return[0,a[1],a[2],g,a[4],a[5],a[6],a[7],a[8],h,a[10]]}function
ax(b,j,a){var
f=a[4],g=a[3],h=d(b[1][1+e],b,g),i=d(b[1][1+c],b,f);if(g===h&&f===i)return a;return[0,a[1],a[2],h,i]}function
ay(d,a){var
e=a[2],f=e[1],g=a[1];function
h(a){return[0,g,[0,f,a]]}var
i=e[2];return O(b(d[1][1+c],d),i,a,h)}function
az(c,a){var
e=a[2],d=e[2],f=e[1],g=a[1];if(0===d){var
i=function(a){return[0,g,[0,a,d]]};return O(b(c[1][1+h],c),f,a,i)}function
j(a){return[0,g,[0,f,a]]}var
l=b(c[1][1+k],c);return O(function(a){return ae(l,a)},d,a,j)}function
aA(c,a){var
d=a[2],e=d[2],f=a[1];function
g(a){return[0,f,[0,a,e]]}var
h=d[1],i=b(c[1][1+m],c);return O(function(a){return j3(i,a)},h,a,g)}function
aB(c,j,a){var
d=a[2];if(0===d){var
f=function(b){return[0,b,a[2],a[3]]},g=a[1];return O(b(c[1][1+e],c),g,a,f)}function
h(b){return[0,a[1],b,a[3]]}var
i=b(c[1][1+k],c);return O(function(a){return ae(i,a)},d,a,h)}function
aC(d,a){var
e=a[2],f=e[1],g=a[1];function
h(a){return[0,g,[0,f,a]]}var
i=e[2];return O(b(d[1][1+c],d),i,a,h)}function
aD(b,i,a){var
e=a[7],f=a[2],g=d(b[1][1+n],b,f),h=d(b[1][1+c],b,e);if(f===g&&e===h)return a;return[0,a[1],g,a[3],a[4],a[5],a[6],h]}function
aE(d,a){var
e=a[2],f=e[1],g=a[1];function
h(a){return[0,g,[0,f,a]]}var
i=e[2];return O(b(d[1][1+c],d),i,a,h)}function
aF(d,a){var
e=a[2],f=e[1],g=a[1];function
h(a){return[0,g,[0,f,a]]}var
i=e[2];return O(b(d[1][1+c],d),i,a,h)}function
aG(b,j,a){var
e=a[4],f=a[3],g=d(b[1][1+i],b,f),h=d(b[1][1+c],b,e);if(f===g&&e===h)return a;return[0,a[1],a[2],g,h]}function
aH(d,g,a){function
e(b){return[0,a[1],b]}var
f=a[2];return O(b(d[1][1+c],d),f,a,e)}function
aI(b,j,a){var
f=a[4],g=a[3],h=d(b[1][1+e],b,g),i=d(b[1][1+c],b,f);if(g===h&&f===i)return a;return[0,a[1],a[2],h,i]}function
aJ(b,j,a){var
f=a[4],g=a[3],h=d(b[1][1+e],b,g),i=d(b[1][1+c],b,f);if(g===h&&f===i)return a;return[0,a[1],a[2],h,i]}function
aK(d,a){function
e(b){return[0,a[1],b]}var
f=a[2];return O(b(d[1][1+c],d),f,a,e)}function
aL(d,g,a){function
e(b){return[0,a[1],b]}var
f=a[2];return O(b(d[1][1+c],d),f,a,e)}rN(f,[0,w,function(e,a){var
c=a[2],d=b(ju(function(a){return hd(a[1][2],e[1+j])<0?1:0}),c),f=c5(d);return c5(c)===f?a:[0,a[1],d,a[3]]},Z,aL,Y,aK,X,aJ,W,aI,V,aH,U,aG,i,aF,o,aE,T,aD,n,aC,S,aB,R,aA,m,az,Q,ay,P,ax,N,aw,L,av,K,at,J,as,I,ar,H,aq,G,ap,F,ao,E,an,D,am,A,al,C,ak,z,aj,l,ai,y,ah,x,ag,v,af,u,ad,t,ac,s,ab,r,aa,q,$]);return function(e,c,d){var
a=k2(c,f);a[1+j]=d;b(_,a);return rM(c,a,f)}});function
ns(a){var
b=iR(a);if(b)var
e=b[1],f=Ou(a)?(jW(a,e[3]),[0,d(OE[1],0,e[3])]):0,c=f;else
var
c=b;return[0,0,function(a,b){return c?d(b,c[1],a):a}]}function
j4(a){var
e=iR(a);if(e){var
f=e[1];if(Ou(a)){jW(a,f[3]);var
g=hI(a),b=[0,d(OE[1],0,[0,f[3][1]+1|0,0])],c=g}else
var
b=0,c=hI(a)}else
var
b=0,c=0;return[0,c,function(a,c){return b?d(c,b[1],a):a}]}function
a5(a){return bQ(a)?j4(a):ns(a)}function
hg(b,a){var
c=a5(b);function
e(a,b){return d(ag(a,i9,29),a,b)}return d(c[2],a,e)}function
cv(c,a){if(a)var
e=a5(c),f=function(a,b){return d(ag(a,zj,32),a,b)},b=[0,d(e[2],a[1],f)];else
var
b=a;return b}function
iU(b,a){var
c=a5(b);function
e(a,b){return d(ag(a,-983660142,34),a,b)}return d(c[2],a,e)}function
j5(b,a){var
c=a5(b);function
e(a,b){return d(ag(a,-455772979,35),a,b)}return d(c[2],a,e)}function
OF(c,a){if(a)var
e=a5(c),f=function(a,b){return d(ag(a,QB,36),a,b)},b=[0,d(e[2],a[1],f)];else
var
b=a;return b}function
cR(b,a){var
c=a5(b);function
e(a,b){return d(ag(a,Rd,37),a,b)}return d(c[2],a,e)}function
OG(c,a){var
e=a5(c);function
f(a,c){var
d=b(ag(a,QL,39),a);return j3(function(a){return bf(d,a)},c)}return d(e[2],a,f)}function
OH(b,a){var
c=a5(b);function
e(a,b){return d(ag(a,-21476009,40),a,b)}return d(c[2],a,e)}function
bqY(I,H){var
a=I[2];function
c(a){return b1(a,H)}switch(a[0]){case
0:var
J=a[1],O=uw(J[2],H),b=[0,[0,J[1],O]];break;case
1:var
K=a[1],P=c(K[2]),b=[1,[0,K[1],P]];break;case
2:var
e=a[1],Q=c(e[7]),b=[2,[0,e[1],e[2],e[3],e[4],e[5],e[6],Q]];break;case
3:var
L=a[1],R=c(L[2]),b=[3,[0,L[1],R]];break;case
4:var
b=[4,[0,c(a[1][1])]];break;case
5:var
f=a[1],S=c(f[7]),b=[5,[0,f[1],f[2],f[3],f[4],f[5],f[6],S]];break;case
6:var
g=a[1],T=c(g[5]),b=[6,[0,g[1],g[2],g[3],g[4],T]];break;case
7:var
q=a[1],U=c(q[4]),b=[7,[0,q[1],q[2],q[3],U]];break;case
8:var
h=a[1],V=c(h[5]),b=[8,[0,h[1],h[2],h[3],h[4],V]];break;case
9:var
r=a[1],W=c(r[4]),b=[9,[0,r[1],r[2],r[3],W]];break;case
10:var
M=a[1],X=c(M[2]),b=[10,[0,M[1],X]];break;case
11:var
s=a[1],Y=c(s[4]),b=[11,[0,s[1],s[2],s[3],Y]];break;case
12:var
i=a[1],Z=c(i[5]),b=[12,[0,i[1],i[2],i[3],i[4],Z]];break;case
13:var
x=a[1],_=c(x[3]),b=[13,[0,x[1],x[2],_]];break;case
14:var
y=a[1],$=c(y[3]),b=[14,[0,y[1],y[2],$]];break;case
15:var
b=[15,[0,c(a[1][1])]];break;case
16:var
z=a[1],aa=c(z[3]),b=[16,[0,z[1],z[2],aa]];break;case
17:var
A=a[1],ab=c(A[3]),b=[17,[0,A[1],A[2],ab]];break;case
18:var
j=a[1],ac=c(j[5]),b=[18,[0,j[1],j[2],j[3],j[4],ac]];break;case
19:var
B=a[1],ad=c(B[3]),b=[19,[0,B[1],B[2],ad]];break;case
20:var
k=a[1],ae=c(k[5]),b=[20,[0,k[1],k[2],k[3],k[4],ae]];break;case
21:var
l=a[1],af=c(l[5]),b=[21,[0,l[1],l[2],l[3],l[4],af]];break;case
22:var
m=a[1],ag=c(m[5]),b=[22,[0,m[1],m[2],m[3],m[4],ag]];break;case
23:var
d=a[1],ah=d[10],ai=c(d[9]),b=[23,[0,d[1],d[2],d[3],d[4],d[5],d[6],d[7],d[8],ai,ah]];break;case
24:var
t=a[1],aj=c(t[4]),b=[24,[0,t[1],t[2],t[3],aj]];break;case
25:var
n=a[1],ak=c(n[5]),b=[25,[0,n[1],n[2],n[3],n[4],ak]];break;case
26:var
o=a[1],al=c(o[5]),b=[26,[0,o[1],o[2],o[3],o[4],al]];break;case
27:var
C=a[1],am=c(C[3]),b=[27,[0,C[1],C[2],am]];break;case
28:var
D=a[1],an=D[3],ao=c(D[2]),b=[28,[0,D[1],ao,an]];break;case
29:var
u=a[1],ap=u[4],aq=c(u[3]),b=[29,[0,u[1],u[2],aq,ap]];break;case
30:var
N=a[1],ar=c(N[2]),b=[30,[0,N[1],ar]];break;case
31:var
v=a[1],as=c(v[4]),b=[31,[0,v[1],v[2],v[3],as]];break;case
32:var
w=a[1],at=c(w[4]),b=[32,[0,w[1],w[2],w[3],at]];break;case
33:var
p=a[1],au=c(p[5]),b=[33,[0,p[1],p[2],p[3],p[4],au]];break;case
34:var
E=a[1],av=c(E[3]),b=[34,[0,E[1],E[2],av]];break;case
35:var
F=a[1],aw=c(F[3]),b=[35,[0,F[1],F[2],aw]];break;default:var
G=a[1],ax=c(G[3]),b=[36,[0,G[1],G[2],ax]]}return[0,I[1],b]}k1(bq0,function(e){var
j=rJ(e,bqZ),l=rK(bqU),i=l.length-1,m=OD.length-1,a=jm(i+m|0,0),n=i-1|0,t=0;if(!(n<0)){var
c=t;for(;;){var
x=jC(e,bb(l,c)[1+c]);bb(a,c)[1+c]=x;var
y=c+1|0;if(n!==c){var
c=y;continue}break}}var
o=m-1|0,u=0;if(!(o<0)){var
f=u;for(;;){var
p=f+i|0,v=rJ(e,bb(OD,f)[1+f]);bb(a,p)[1+p]=v;var
w=f+1|0;if(o!==f){var
f=w;continue}break}}var
q=a[4],r=a[5],s=a[nJ],k=a[nA],g=a[iX],h=a[C3],z=a[38],A=a[y8],B=a[x4],C=rL(e,0,0,OC,uu,1)[1];function
D(b,c,a){d(b[1][1+s],b,a[2]);return a}function
E(b,a){d(b[1][1+k],b,a);return a}function
F(a,b){var
c=b[1],d=a[1+h];if(d){var
e=hd(d[1][1][2],c[2])<0?1:0,g=e?(a[1+h]=[0,b],0):e;return g}var
f=0<=hd(c[2],a[1+j][3])?1:0,i=f?(a[1+h]=[0,b],0):f;return i}function
G(a,b){var
c=b[1],d=a[1+g];if(d){var
e=hd(c[2],d[1][1][2])<0?1:0,h=e?(a[1+g]=[0,b],0):e;return h}var
f=hd(c[2],a[1+j][2])<0?1:0,i=f?(a[1+g]=[0,b],0):f;return i}function
H(b,a){return a?d(b[1][1+k],b,a[1]):a}function
I(a,c){var
d=c[1];bw(b(a[1][1+r],a),d);var
e=c[2];return bw(b(a[1][1+q],a),e)}rN(e,[0,A,function(a){return[0,a[1+g],a[1+h]]},k,I,s,H,r,G,q,F,z,E,B,D]);return function(f,c,d){var
a=k2(c,e);a[1+j]=d;b(C,a);a[1+g]=0;a[1+h]=0;return rM(c,a,e)}});function
OI(a){return 3===a?2:4<=a?1:1}function
u0(g,h,c){if(c){var
a=c[1],f=0;if(8232===a||bq===a)f=1;else
if(10===a)var
b=6;else
if(13===a)var
b=5;else
if(Cv<=a)var
b=3;else
if(xN<=a)var
b=2;else
var
e=a7<=a?1:0,b=e?1:e;if(f)var
b=7;var
d=b}else
var
d=4;return[0,d,g]}var
bq3=[aQ,bq2,hu(0)];function
OJ(c,b,e,d){try{var
a=bb(c,b)[1+b];return a}catch(a){a=aS(a);if(a[1]===rf)throw[0,bq3,e,A(aH(bq4),d,b,c.length-1)];throw a}}function
nt(b,a){if(0===a[1]&&0===a[2])return 0;var
c=OJ(b,a[1]-1|0,a,bq5);return OJ(c,a[2],a,bq6)}var
bAN=Y;function
bAO(b,a){return d(c(b),bAP,a)}b(uB([0,bAN])[33],bAO);function
OK(c){var
b=s(c),d=0;if(typeof
b==="number")switch(b){case
15:var
a=bAS;break;case
16:var
a=bAT;break;case
17:var
a=bAU;break;case
18:var
a=bAV;break;case
19:var
a=bAW;break;case
20:var
a=bAX;break;case
21:var
a=bAY;break;case
22:var
a=bAZ;break;case
23:var
a=bA0;break;case
24:var
a=bA1;break;case
25:var
a=bA2;break;case
26:var
a=bA3;break;case
27:var
a=bA4;break;case
28:var
a=bA5;break;case
29:var
a=bA6;break;case
30:var
a=bA7;break;case
31:var
a=bA8;break;case
32:var
a=bA9;break;case
33:var
a=bA_;break;case
34:var
a=bA$;break;case
35:var
a=bBa;break;case
36:var
a=bBb;break;case
37:var
a=bBc;break;case
38:var
a=bBd;break;case
39:var
a=bBe;break;case
40:var
a=bBf;break;case
41:var
a=bBg;break;case
42:var
a=bBh;break;case
43:var
a=bBi;break;case
44:var
a=bBj;break;case
45:var
a=bBk;break;case
46:var
a=bBl;break;case
47:var
a=bBm;break;case
48:var
a=bBn;break;case
49:var
a=bBo;break;case
50:var
a=bBp;break;case
51:var
a=bBq;break;case
52:var
a=bBr;break;case
53:var
a=bBs;break;case
54:var
a=bBt;break;case
55:var
a=bBu;break;case
56:var
a=bBv;break;case
57:var
a=bBw;break;case
58:var
a=bBx;break;case
59:var
a=bBy;break;case
60:var
a=bBz;break;case
61:var
a=bBA;break;case
62:var
a=bBB;break;case
63:var
a=bBC;break;case
64:var
a=bBD;break;case
65:var
a=bBE;break;case
114:var
a=bBF;break;case
115:var
a=bBG;break;case
116:var
a=bBH;break;case
117:var
a=bBI;break;case
118:var
a=bBJ;break;case
119:var
a=bBK;break;case
120:var
a=bBL;break;case
121:var
a=bBM;break;default:d=1}else
switch(b[0]){case
4:var
a=b[2];break;case
9:var
a=b[1]?bBN:bBO;break;default:d=1}if(d){aR(bAQ,c);var
a=bAR}R(c);return a}function
cf(a){var
b=_(a),c=E(a),d=OK(a);return[0,b,[0,d,C([0,c],[0,W(a)],0)]]}function
OL(a){var
c=_(a),i=E(a);w(a,14);var
d=_(a),j=OK(a),k=C([0,i],[0,W(a)],0),e=aM(c,d),f=d[2],g=c[3],b=g[1]===f[1]?1:0,h=b?g[2]===f[2]?1:0:b;if(1-h)Q(a,[0,e,cm]);return[0,e,[0,j,k]]}function
id(h){var
d=h[2],e=0===d[3]?1:0;if(e){var
a=d[2];for(;;){if(a){var
c=a[1][2],f=0,g=a[2];if(2===c[1][2][0]&&!c[2]){var
b=1;f=1}if(!f)var
b=0;if(b){var
a=g;continue}return b}return 1}}return e}function
j6(d){var
a=d;for(;;){var
b=a[2];if(27===b[0]){var
c=b[1][2];if(23===c[2][0])return 1;var
a=c;continue}return 0}}function
B(c,f,a){var
d=c?c[1]:_(a),g=b(f,a),e=iR(a),h=e?aM(d,e[1]):d;return[0,h,g]}function
u1(e,d,c){var
a=B(e,d,c),b=a[2];return[0,[0,a[1],b[1]],b[2]]}function
bBX(q){function
P(a){var
c=_(a),b=s(a);if(typeof
b==="number"){if(b8===b){var
d=E(a);R(a);return[0,[0,c,[0,0,C([0,d],0,0)]]]}if(ci===b){var
e=E(a);R(a);return[0,[0,c,[0,1,C([0,e],0,0)]]]}}return 0}var
c=function
b(a){return b.fun(a)},g=function
b(a){return b.fun(a)},S=function
b(a){return b.fun(a)},z=function
d(a,b,c){return d.fun(a,b,c)},D=function
b(a){return b.fun(a)},F=function
d(a,b,c){return d.fun(a,b,c)},G=function
b(a){return b.fun(a)},H=function
c(a,b){return c.fun(a,b)},I=function
b(a){return b.fun(a)},T=function
b(a){return b.fun(a)},o=function
d(a,b,c){return d.fun(a,b,c)},r=function
e(a,b,c,d){return e.fun(a,b,c,d)},X=function
b(a){return b.fun(a)},Y=function
c(a,b){return c.fun(a,b)},J=function
b(a){return b.fun(a)},Z=function
b(a){return b.fun(a)},$=function
b(a){return b.fun(a)},ab=function
b(a){return b.fun(a)},ac=function
b(a){return b.fun(a)},ad=function
b(a){return b.fun(a)},i=function
c(a,b){return c.fun(a,b)},ae=function
b(a){return b.fun(a)},f=function
b(a){return b.fun(a)},t=function
b(a){return b.fun(a)},af=function
b(a){return b.fun(a)},ah=function
b(a){return b.fun(a)},aj=function
b(a){return b.fun(a)},ak=function
b(a){return b.fun(a)},u=function
e(a,b,c,d){return e.fun(a,b,c,d)},v=function
e(a,b,c,d){return e.fun(a,b,c,d)},K=function
b(a){return b.fun(a)},e=function
b(a){return b.fun(a)},al=function
b(a){return b.fun(a)},k=function
b(a){return b.fun(a)},L=function
b(a){return b.fun(a)},x=function
b(a){return b.fun(a)},M=function
c(a,b){return c.fun(a,b)},am=function
c(a,b){return c.fun(a,b)},N=function
b(a){return b.fun(a)},an=function
d(a,b,c){return d.fun(a,b,c)};h(c,function(a){return b(S,a)});h(g,function(a){if(1-a_(a))aa(a,12);return B(0,function(a){w(a,86);return b(c,a)},a)});h(S,function(a){var
c=89===s(a)?1:0;if(c){var
e=E(a);R(a);var
d=e}else
var
d=c;return A(z,a,[0,d],b(D,a))});h(z,function(d,c,a){var
h=c?c[1]:c;if(89===s(d)){var
i=[0,a,0],e=function(e){var
a=i;for(;;){var
f=s(e);if(typeof
f==="number"&&89===f){w(e,89);var
a=[0,b(D,e),a];continue}var
c=U(a);if(c){var
d=c[2];if(d){var
g=C([0,h],0,0);return[19,[0,[0,c[1],d[1],d[2]],g]]}}throw[0,ap,bBY]}};return B([0,a[1]],e,d)}return a});h(D,function(a){var
c=91===s(a)?1:0;if(c){var
e=E(a);R(a);var
d=e}else
var
d=c;return A(F,a,[0,d],b(G,a))});h(F,function(d,c,a){var
h=c?c[1]:c;if(91===s(d)){var
i=[0,a,0],e=function(e){var
a=i;for(;;){var
f=s(e);if(typeof
f==="number"&&91===f){w(e,91);var
a=[0,b(G,e),a];continue}var
c=U(a);if(c){var
d=c[2];if(d){var
g=C([0,h],0,0);return[20,[0,[0,c[1],d[1],d[2]],g]]}}throw[0,ap,bBZ]}};return B([0,a[1]],e,d)}return a});h(G,function(a){return d(H,a,b(I,a))});h(H,function(a,c){var
e=s(a);if(typeof
e==="number"&&11===e&&!a[15]){var
b=d(i,a,c);return j(u,a,b[1],0,[0,b[1],[0,0,[0,b,0],0,0]])}return c});h(I,function(a){var
c=s(a);if(typeof
c==="number"&&85===c)return B(0,function(a){var
c=E(a);w(a,85);var
d=C([0,c],0,0);return[11,[0,b(I,a),d]]},a);return b(T,a)});h(T,function(a){return A(o,0,a,b($,a))});h(o,function(d,a,b){var
e=d?d[1]:d;if(bQ(a))return b;var
c=s(a);if(typeof
c==="number"){if(6===c){R(a);return j(r,e,0,a,b)}if(10===c){var
f=aA(1,a);if(typeof
f==="number"&&6===f){aa(a,bB0);w(a,10);w(a,6);return j(r,e,0,a,b)}aa(a,bB1);return b}if(83===c){R(a);if(6!==s(a))aa(a,30);w(a,6);return j(r,1,1,a,b)}}return b});h(r,function(f,e,a,d){function
g(a){if(!e&&a$(a,7))return[15,[0,d,C(0,[0,W(a)],0)]];var
h=b(c,a);w(a,7);var
g=[0,d,h,C(0,[0,W(a)],0)];return f?[18,[0,g,e]]:[17,g]}return A(o,[0,f],a,B([0,d[1]],g,a))});h(X,function(a){return d(Y,a,d(q[13],0,a))});h(Y,function(b,f){var
a=[0,f[1],[0,f]];for(;;){var
c=a[2];if(10===s(b)&&nq(1,b)){var
g=function(b){return function(a){w(a,10);return[0,b,cf(a)]}}(c),d=B([0,a[1]],g,b),e=d[1],a=[0,e,[1,[0,e,d[2]]]];continue}return c}});h(J,function(a){var
c=s(a);if(typeof
c==="number"){if(4===c){R(a);var
d=b(J,a);w(a,5);return d}}else
if(4===c[0])return[0,b(X,a)];aa(a,51);return 0});h(Z,function(a){return B(0,function(a){var
d=E(a);w(a,46);var
c=b(J,a);if(c){var
e=C([0,d],0,0);return[21,[0,c[1],e]]}return bB2},a)});h($,function(a){var
d=_(a),c=s(a),f=0;if(typeof
c==="number")switch(c){case
4:return b(aj,a);case
6:return b(ad,a);case
46:return b(Z,a);case
53:return B(0,function(a){var
d=E(a);w(a,53);var
c=b(K,a),e=C([0,d],0,0);return[14,[0,c[2],c[1],e]]},a);case
98:return b(ak,a);case
106:var
y=E(a);w(a,a2);return[0,d,[10,C([0,y],[0,W(a)],0)]];case
42:f=1;break;case
0:case
2:var
g=j(v,0,1,1,a);return[0,g[1],[13,g[2]]];case
30:case
31:var
u=E(a);w(a,c);return[0,d,[26,[0,31===c?1:0,C([0,u],[0,W(a)],0)]]]}else
switch(c[0]){case
2:var
e=c[1],k=e[4],l=e[3],m=e[2],n=e[1];if(k)cG(a,45);var
z=E(a);w(a,[2,[0,n,m,l,k]]);return[0,n,[23,[0,m,l,C([0,z],[0,W(a)],0)]]];case
10:var
o=c[3],p=c[2],q=c[1],A=E(a);w(a,[10,q,p,o]);var
D=W(a);if(1===q)cG(a,45);return[0,d,[24,[0,p,o,C([0,A],[0,D],0)]]];case
11:var
r=c[3],t=c[2],F=E(a);w(a,[11,c[1],t,r]);return[0,d,[25,[0,t,r,C([0,F],[0,W(a)],0)]]];case
4:f=1;break}if(f){var
i=b(x,a);return[0,i[1],[16,i[2]]]}var
h=b(ac,a);return h?[0,d,h[1]]:(aR(bB3,a),[0,d,bB4])});h(ab,function(a){var
b=0;if(typeof
a==="number")switch(a){case
29:case
114:case
115:case
116:case
117:case
118:case
119:case
120:case
121:b=1;break}else
if(9===a[0])b=1;return b?1:0});h(ac,function(a){var
b=E(a),c=s(a);if(typeof
c==="number")switch(c){case
29:R(a);return[0,[4,C([0,b],[0,W(a)],0)]];case
114:R(a);return[0,[0,C([0,b],[0,W(a)],0)]];case
115:R(a);return[0,[1,C([0,b],[0,W(a)],0)]];case
116:R(a);return[0,[2,C([0,b],[0,W(a)],0)]];case
117:R(a);return[0,[5,C([0,b],[0,W(a)],0)]];case
118:R(a);return[0,[6,C([0,b],[0,W(a)],0)]];case
119:R(a);return[0,[7,C([0,b],[0,W(a)],0)]];case
120:R(a);return[0,[3,C([0,b],[0,W(a)],0)]];case
121:R(a);return[0,[9,C([0,b],[0,W(a)],0)]]}else
if(9===c[0]){R(a);return[0,[8,C([0,b],[0,W(a)],0)]]}return 0});h(ad,function(a){return B(0,function(a){var
j=E(a);w(a,6);var
d=iQ(0,a),e=0;for(;;){var
f=s(d);if(typeof
f==="number"){var
g=0;if(7===f||au===f)g=1;if(g){var
h=U(e);w(a,7);return[22,[0,h,C([0,j],[0,W(a)],0)]]}}var
i=[0,b(c,d),e];if(7!==s(d))w(d,9);var
e=i;continue}},a)});h(i,function(b,a){return[0,a[1],[0,0,a,0]]});h(ae,function(a){return B(0,function(a){bI(a,0);var
e=d(q[13],0,a);b3(a);if(1-a_(a))aa(a,12);var
f=a$(a,85);w(a,86);return[0,[0,e],b(c,a),f]},a)});function
ao(a){var
e=aA(1,a);if(typeof
e==="number"&&!(1<e+kn>>>0))return b(ae,a);return d(i,a,b(c,a))}h(f,function(a){var
n=0;return function(o){var
e=n,d=o;for(;;){var
c=s(a);if(typeof
c==="number")switch(c){case
5:case
12:case
113:var
f=12===c?1:0,j=f?[0,B(0,function(a){var
b=E(a);w(a,12);var
c=C([0,b],0,0);return[0,ao(a),c]},a)]:f;return[0,e,U(d),j,0]}else
if(4===c[0]&&!p(c[3],bB5)){var
h=0;if(86===aA(1,a)||85===aA(1,a))h=1;if(h){var
k=0!==e?1:0,l=k||(0!==d?1:0);if(l)aa(a,b8);var
m=B(0,function(a){var
c=E(a);R(a);if(85===s(a))aa(a,ci);var
d=C([0,c],0,0);return[0,b(g,a),d]},a);if(5!==s(a))w(a,9);var
e=[0,m];continue}}var
i=[0,ao(a),d];if(5!==s(a))w(a,9);var
d=i;continue}}});h(t,function(a){return B(0,function(a){var
c=E(a);w(a,4);var
b=d(f,a,0),e=E(a);w(a,5);var
g=bg([0,c],[0,W(a)],e,0);return[0,b[1],b[2],b[3],g]},a)});h(af,function(a){var
q=E(a);w(a,4);var
g=iQ(0,a),j=s(g),h=0;if(typeof
j==="number")switch(j){case
5:var
e=bB6;break;case
42:h=2;break;case
12:case
113:var
e=[0,d(f,g,0)];break;default:h=1}else
if(4===j[0])h=2;else
h=1;switch(h){case
1:if(b(ab,j)){var
r=aA(1,g),x=0;if(typeof
r==="number"&&!(1<r+kn>>>0)){var
t=[0,d(f,g,0)];x=1}if(!x)var
t=[1,b(c,g)];var
e=t}else
var
e=[1,b(c,g)];break;case
2:var
e=b(ah,g);break}if(0===e[0])var
k=e;else{var
m=e[1];if(a[15])var
v=e;else{var
n=s(a),p=0;if(typeof
n==="number")if(5===n)var
o=11===aA(1,a)?[0,d(f,a,[0,d(i,a,m),0])]:[1,m];else
if(9===n){w(a,9);var
o=[0,d(f,a,[0,d(i,a,m),0])]}else
p=1;else
p=1;if(p)var
o=e;var
v=o}var
k=v}var
y=E(a);w(a,5);var
u=W(a);if(0===k[0]){var
l=k[1],z=bg([0,q],[0,u],y,0);return[0,[0,l[1],l[2],l[3],z]]}return[1,A(an,k[1],q,u)]});h(ah,function(a){var
c=aA(1,a);if(typeof
c==="number"&&!(1<c+kn>>>0))return[0,d(f,a,0)];return[1,A(z,a,0,A(F,a,0,d(H,a,A(o,0,a,d(am,a,b(e,a))))))]});h(aj,function(a){var
d=_(a),c=B(0,af,a),b=c[2];return 0===b[0]?j(u,a,d,0,[0,c[1],b[1]]):b[1]});h(ak,function(a){var
c=_(a),d=cv(a,b(k,a));return j(u,a,c,d,b(t,a))});h(u,function(f,a,e,d){return B([0,a],function(a){w(a,11);return[12,[0,e,d,b(c,a),0]]},f)});function
y(e,a,d){return B([0,a],function(a){var
e=b(t,a);w(a,86);return[0,d,e,b(c,a),0]},e)}function
l(c,a){var
b=s(a);if(typeof
b==="number"&&!(10<=b))switch(b){case
1:if(!c)return 0;break;case
3:if(c)return 0;break;case
8:case
9:return R(a)}return ic(a,9)}function
m(b,a){return a?Q(b,[0,a[1][1],7]):a}function
n(b,a){return a?Q(b,[0,a[1],9]):a}function
aq(a,aq,ao,an,am,al,ak,aj,i){var
t=ao,r=an,h=am,g=al,f=ak,e=aj;for(;;){var
j=s(a);if(typeof
j==="number")switch(j){case
6:n(a,f);var
ad=aA(1,a);if(typeof
ad==="number"&&6===ad){m(a,h);return[4,B([0,i],function(a){var
p=ai(e,E(a));w(a,6);w(a,6);var
q=cf(a);w(a,7);w(a,7);var
d=s(a),n=0;if(typeof
d==="number"){var
o=0;if(4!==d&&98!==d)o=1;if(!o){var
f=y(a,i,cv(a,b(k,a))),m=0,l=[0,f[1],[12,f[2]]],j=1,h=0;n=1}}if(!n){var
r=a$(a,85),t=W(a);w(a,86);var
m=t,l=b(c,a),j=0,h=r}return[0,q,l,h,0!==g?1:0,j,C([0,p],[0,m],0)]},a)]}return[2,B([0,i],function(a){var
i=ai(e,E(a));w(a,6);var
d=86===aA(1,a)?1:0;if(d){var
j=cf(a);w(a,86);var
f=[0,j]}else
var
f=d;var
k=b(c,a);w(a,7);var
l=W(a);w(a,86);var
m=b(c,a);return[0,f,k,m,0!==g?1:0,h,C([0,i],[0,l],0)]},a)];case
42:if(t){if(0===h){var
ax=[0,_(a)],az=ai(e,E(a));R(a);var
t=0,r=0,g=ax,e=az;continue}throw[0,ap,bCg]}break;case
103:case
104:if(0===h){var
t=0,r=0,h=P(a);continue}break;case
4:case
98:n(a,f);m(a,h);return[3,B([0,i],function(a){var
c=_(a),d=y(a,c,cv(a,b(k,a)));return[0,d,0!==g?1:0,C([0,e],0,0)]},a)]}else
if(4===j[0]&&!p(j[3],bCh)&&r){if(0===h){var
aB=[0,_(a)],aC=ai(e,E(a));R(a);var
t=0,r=0,f=aB,e=aC;continue}throw[0,ap,bCi]}var
J=0;if(g){var
M=g[1];if(f)return V(bB9);if(typeof
j==="number"&&!(1<j+kn>>>0)){var
o=[0,M,[1,c7(C([0,e],0,0),[0,M,bCe])]],z=0,x=f,v=0;J=1}}else
if(f){var
ac=f[1];if(typeof
j==="number"&&!(1<j+kn>>>0)){var
o=[0,ac,[1,c7(C([0,e],0,0),[0,ac,bCf])]],z=0,x=0,v=g;J=1}}if(!J){var
N=function(a){bI(a,0);var
b=d(q[20],0,a);b3(a);return b},ar=E(a),D=N(a),O=D[1],l=D[2],A=0;if(1===l[0]){var
H=l[1][2][1],ae=0;if(p(H,bCb)&&p(H,bCc)){A=1;ae=1}if(!ae){var
Z=s(a),K=0;if(typeof
Z==="number"){var
I=Z-5|0;if(92<I>>>0){if(!(94<I+1>>>0)){n(a,f);m(a,h);var
S=l;A=2;K=1}}else
if(!(1<I+RG>>>0)){var
o=[0,O,l],z=e,x=f,v=g;K=1}}if(!K){cR(a,l);var
$=N(a),ab=ay(H,bCd),aw=ai(e,ar);n(a,f);m(a,h);return[0,B([0,i],function(a){var
b=$[1],o=cR(a,$[2]),c=y(a,i,0),f=c[2][2];if(ab){var
d=f[2],j=0;if(d[1]){Q(a,[0,b,cl]);j=1}else{var
k=0;if(!d[2]&&!d[3]){j=1;k=1}if(!k)Q(a,[0,b,80])}}else{var
e=f[2],l=0;if(e[1]){Q(a,[0,b,a2]);l=1}else{var
h=e[2],m=0;if(e[3])Q(a,[0,b,81]);else{var
n=0;if(h&&!h[2])n=1;if(!n){Q(a,[0,b,81]);m=1}}if(!m)l=1}}var
p=C([0,aw],0,0),q=0,r=0,s=0,t=0!==g?1:0,u=0,v=ab?[1,c]:[2,c];return[0,o,v,u,t,s,r,q,p]},a)]}}}else
A=1;var
L=0;switch(A){case
1:var
u=D[2],F=s(a),af=0;if(typeof
F==="number"){var
ag=0;if(4!==F&&98!==F)ag=1;if(!ag){n(a,f);m(a,h);var
S=u;L=1;af=1}}if(!af){var
X=0!==g?1:0,aD=0;if(1===u[0]){var
Y=u[1],G=Y[2][1],aE=0;if(aq){var
ah=0;if(!ay(bB_,G)&&(!X||!ay(bB$,G)))ah=1;if(!ah){Q(a,[0,Y[1],[21,G,X,0,0]]);aD=1;aE=1}}}var
o=[0,O,u],z=e,x=f,v=g}break;case
0:break;default:L=1}if(L){var
as=cR(a,S),T=y(a,i,cv(a,b(k,a))),U=[0,T[1],[12,T[2]]],at=[0,as,[0,U],0,0!==g?1:0,0,1,0,C([0,e],0,0)];return[0,[0,U[1],at]]}}var
au=o[2],av=o[1];if(1-a_(a))aa(a,12);return[0,B([0,i],function(a){var
d=a$(a,85),e=Oz(a,86)?b(c,a):[0,av,bCa];return[0,au,[0,e],d,0!==v?1:0,0!==x?1:0,0,h,C([0,z],0,0)]},a)]}}h(v,function(o,a,r,e){var
d=a?2===s(e)?1:0:a,z=a?1-d:a;return B(0,function(j){var
G=E(j),H=d?2:d;w(j,H);var
a=iQ(0,j),m=bCj;for(;;){var
g=m[3],h=m[2],e=m[1];if(o&&r)throw[0,ap,bB7];if(z&&!r)throw[0,ap,bB8];var
i=_(a),n=s(a);if(typeof
n==="number"){var
k=0;if(13<=n){if(au===n){var
f=[0,U(e),h,g];k=1}}else
if(n)switch(n-1|0){case
0:if(!d){var
f=[0,U(e),h,g];k=1}break;case
2:if(d){var
f=[0,U(e),h,g];k=1}break;case
11:if(!r){R(a);var
q=s(a);if(typeof
q==="number"&&!(10<=q))switch(q){case
1:case
3:case
8:case
9:Q(a,[0,i,20]);l(d,a);continue}var
F=uY(a);b(uU(a),F);Q(a,[0,i,17]);R(a);l(d,a);continue}var
v=E(a);R(a);var
p=s(a),t=0;if(typeof
p==="number"&&!(10<=p))switch(p){case
1:case
3:case
8:case
9:l(d,a);var
x=s(a),u=0;if(typeof
x==="number"){var
y=x-1|0;if(!(2<y>>>0))switch(y){case
0:if(z){var
f=[0,U(e),1,v];k=1;t=1;u=1}break;case
1:break;default:Q(a,[0,i,19]);var
f=[0,U(e),h,g];k=1;t=1;u=1}}if(!u){Q(a,[0,i,18]);continue}break}if(!t){var
D=[1,B([0,i],function(e){return function(a){var
d=C([0,e],0,0);return[0,b(c,a),d]}}(v),a)];l(d,a);var
m=[0,[0,D,e],h,g];continue}break}if(k){var
I=E(j),J=ai(f[3],I),K=d?3:1;w(j,K);var
L=bg([0,G],[0,W(j)],J,0);return[0,d,f[2],f[1],L]}}var
A=aq(a,o,o,o,0,0,0,0,i);l(d,a);var
m=[0,[0,A,e],h,g];continue}},e)});h(K,function(a){var
f=41===s(a)?1:0;if(f){w(a,41);var
c=0;for(;;){var
d=[0,b(x,a),c],e=s(a);if(typeof
e==="number"&&9===e){w(a,9);var
c=d;continue}var
g=OG(a,U(d));break}}else
var
g=f;return[0,g,j(v,0,0,0,a)]});h(e,function(a){var
b=cf(a),c=b[2],d=c[1],e=b[1];if(Ot(d))Q(a,[0,e,3]);return[0,e,[0,d,c[2]]]});h(al,function(a){return B(0,function(a){var
c=b(e,a),d=86===s(a)?[1,b(g,a)]:[0,h$(a)];return[0,c,d]},a)});h(k,function(a){var
d=98===s(a)?1:0;if(d){if(1-a_(a))aa(a,12);var
e=[0,B(0,function(a){var
m=E(a);w(a,98);var
h=0,g=0;for(;;){var
i=B(0,function(i){return function(a){var
k=P(a),d=b(al,a),e=d[2],f=s(a),j=0;if(typeof
f==="number"&&82===f){R(a);var
h=1,g=[0,b(c,a)];j=1}if(!j){if(i)Q(a,[0,d[1],77]);var
h=i,g=0}return[0,k,e[1],e[2],g,h]}}(h),a),d=i[2],e=[0,[0,i[1],[0,d[2],d[3],d[1],d[4]]],g],f=s(a),k=0;if(typeof
f==="number"){var
l=0;if(99!==f&&au!==f)l=1;if(!l){var
j=U(e);k=1}}if(!k){w(a,9);if(99!==s(a)){var
h=d[5],g=e;continue}var
j=U(e)}var
n=E(a);w(a,99);return[0,j,bg([0,m],[0,W(a)],n,0)]}},a)]}else
var
e=d;return e});h(L,function(a){var
d=98===s(a)?1:0,e=d?[0,B(0,function(f){var
j=E(f);w(f,98);var
a=iQ(0,f),d=0;for(;;){var
e=s(a);if(typeof
e==="number"){var
g=0;if(99===e||au===e)g=1;if(g){var
h=U(d),k=E(a);w(a,99);return[0,h,bg([0,j],[0,W(a)],k,0)]}}var
i=[0,b(c,a),d];if(99!==s(a))w(a,9);var
d=i;continue}},a)]:d;return e});h(x,function(a){return d(M,a,b(e,a))});h(M,function(a,g){function
c(a){var
c=[0,g[1],[0,g]];for(;;){var
f=c[2],k=c[1];if(10===s(a)&&Ow(1,a)){var
h=B([0,k],function(c){return function(a){w(a,10);return[0,c,b(e,a)]}}(f),a),i=h[1],c=[0,i,[1,[0,i,h[2]]]];continue}if(98===s(a))var
l=a5(a),m=function(a,b){return d(ag(a,-860373976,79),a,b)},j=d(l[2],f,m);else
var
j=f;return[0,j,b(L,a),0]}}return B([0,g[1]],c,a)});h(am,function(c,b){var
a=d(M,c,b);return[0,a[1],[16,a[2]]]});h(N,function(a){var
c=s(a);if(typeof
c==="number"&&86===c)return[1,b(g,a)];return[0,h$(a)]});h(an,function(o,n,m){var
a=o[2];function
c(a){return b1(a,C([0,n],[0,m],0))}switch(a[0]){case
0:var
b=[0,c(a[1])];break;case
1:var
b=[1,c(a[1])];break;case
2:var
b=[2,c(a[1])];break;case
3:var
b=[3,c(a[1])];break;case
4:var
b=[4,c(a[1])];break;case
5:var
b=[5,c(a[1])];break;case
6:var
b=[6,c(a[1])];break;case
7:var
b=[7,c(a[1])];break;case
8:var
b=[8,c(a[1])];break;case
9:var
b=[9,c(a[1])];break;case
10:var
b=[10,c(a[1])];break;case
11:var
p=a[1],x=c(p[2]),b=[11,[0,p[1],x]];break;case
12:var
d=a[1],y=c(d[4]),b=[12,[0,d[1],d[2],d[3],y]];break;case
13:var
e=a[1],z=C([0,n],[0,m],0),A=uw(e[4],z),b=[13,[0,e[1],e[2],e[3],A]];break;case
14:var
f=a[1],B=c(f[3]),b=[14,[0,f[1],f[2],B]];break;case
15:var
q=a[1],D=c(q[2]),b=[15,[0,q[1],D]];break;case
16:var
g=a[1],E=c(g[3]),b=[16,[0,g[1],g[2],E]];break;case
17:var
h=a[1],F=c(h[3]),b=[17,[0,h[1],h[2],F]];break;case
18:var
r=a[1],i=r[1],G=r[2],H=c(i[3]),b=[18,[0,[0,i[1],i[2],H],G]];break;case
19:var
s=a[1],I=c(s[2]),b=[19,[0,s[1],I]];break;case
20:var
t=a[1],J=c(t[2]),b=[20,[0,t[1],J]];break;case
21:var
u=a[1],K=c(u[2]),b=[21,[0,u[1],K]];break;case
22:var
v=a[1],L=c(v[2]),b=[22,[0,v[1],L]];break;case
23:var
j=a[1],M=c(j[3]),b=[23,[0,j[1],j[2],M]];break;case
24:var
k=a[1],N=c(k[3]),b=[24,[0,k[1],k[2],N]];break;case
25:var
l=a[1],O=c(l[3]),b=[25,[0,l[1],l[2],O]];break;default:var
w=a[1],P=c(w[2]),b=[26,[0,w[1],P]]}return[0,o[1],b]});function
ar(a){var
c=E(a);w(a,66);if(4===s(a)){var
d=ai(c,E(a));w(a,4);bI(a,0);var
e=b(q[9],a);b3(a);w(a,5);return[0,[0,e],C([0,d],[0,W(a)],0)]}return[0,0,C([0,c],[0,W(a)],0)]}var
as=0;function
O(c){var
a=iQ(0,c),b=s(a);if(typeof
b==="number"&&66===b)return[0,B(as,ar,a)];return 0}function
at(a){var
c=s(a),d=aA(1,a);if(typeof
c==="number"&&86===c){if(typeof
d==="number"&&66===d){w(a,86);var
f=O(a);return[0,[0,h$(a)],f]}var
e=b(N,a),g=66===s(a)?iU(a,e):e;return[0,g,O(a)]}return[0,[0,h$(a)],0]}function
a(d,c){var
a=hf(1,c);bI(a,1);var
e=b(d,a);b3(a);return e}function
av(b){return a(c,b)}function
aw(b){return a(e,b)}function
ax(b){return a(k,b)}function
az(b){return a(L,b)}function
aB(c,b){return a(A(v,c,0,0),b)}function
aC(b){return a(K,b)}function
aD(b){return a(t,b)}function
aE(b){return a(g,b)}function
aF(b){return a(N,b)}function
aG(b){return a(O,b)}function
aH(b){return a(at,b)}return[0,av,aw,ax,az,function(b){return a(x,b)},aB,aC,aD,aE,aF,aG,aH]}function
bCq(f){function
a(b,a){if(0===a[0])return a[1];var
c=a[2][1];bw(function(a){return Q(b,a)},c);return a[1]}function
c(g,e,c){var
i=g?g[1]:26;if(0===c[0])var
a=c[1];else{var
j=c[2][2];bw(function(a){return Q(e,a)},j);var
a=c[1]}if(1-b(f[23],a))Q(e,[0,a[1],i]);var
h=a[2],k=0;if(10===h[0]&&hG(h[1][2][1])){ce(e,[0,a[1],52]);k=1}return d(f[19],e,a)}function
e(b,a){return[0,[0,b,a[1]],[0,b,a[2]]]}function
g(b,a){var
c=c6(b[2],a[2]);return[0,c6(b[1],a[1]),c]}return[0,a,c,bCr,e,g,function(a){var
b=U(a[2]);return[0,U(a[1]),b]}]}function
bD3(e){function
d(a){var
d=s(a);if(typeof
d==="number"){var
b=d-99|0,c=0;if(6<b>>>0){if(14===b)c=1}else
if(4<b-1>>>0)c=1;if(c)return W(a)}var
e=bQ(a);return e?hI(a):e}function
m(a){var
f=E(a);bI(a,0);var
c=B(0,function(a){w(a,0);w(a,12);var
c=b(e[10],a);w(a,1);return c},a);b3(a);var
g=C([0,f],[0,d(a)],0);return[0,c[1],[0,c[2],g]]}function
g(a){return 1===s(a)?0:[0,b(e[7],a)]}function
n(a){var
c=E(a);bI(a,0);var
b=B(0,function(a){w(a,0);var
b=g(a);w(a,1);return b},a);b3(a);var
e=bg([0,c],[0,d(a)],0,0);return[0,b[1],[0,b[2],e]]}function
o(a){bI(a,0);var
c=B(0,function(a){w(a,0);var
c=s(a),h=0;if(typeof
c==="number"&&12===c){var
i=E(a);w(a,12);var
j=b(e[10],a),d=[3,[0,j,C([0,i],0,0)]];h=1}if(!h)var
f=g(a),k=f?0:E(a),d=[2,[0,f,bg(0,0,k,0)]];w(a,1);return d},a);b3(a);return[0,c[1],c[2]]}function
c(a){var
k=_(a),b=s(a),i=0;if(typeof
b!=="number"&&7===b[0]){var
f=b[1];i=1}if(!i){aR(bD4,a);var
f=bD5}var
l=E(a);R(a);var
g=s(a),j=0;if(typeof
g==="number"){var
c=g+PB|0,e=0;if(72<c>>>0){if(76!==c)e=1}else
if(!(70<c-1>>>0))e=1;if(!e){var
h=W(a);j=1}}if(!j)var
h=d(a);return[0,k,[0,f,C([0,l],[0,h],0)]]}function
j(a){var
d=aA(1,a);if(typeof
d==="number"){if(10===d){var
b=B(0,function(a){var
b=[0,c(a)];w(a,10);return[0,b,c(a)]},a);for(;;){var
e=s(a);if(typeof
e==="number"&&10===e){var
f=function(b){return function(a){w(a,10);return[0,[1,b],c(a)]}}(b),b=B([0,b[1]],f,a);continue}return[2,b]}}if(86===d)return[1,B(0,function(a){var
b=c(a);w(a,86);return[0,b,c(a)]},a)]}return[0,c(a)]}function
q(a){return B(0,function(a){var
g=aA(1,a),o=0;if(typeof
g==="number"&&86===g){var
h=[1,B(0,function(a){var
b=c(a);w(a,86);return[0,b,c(a)]},a)];o=1}if(!o)var
h=[0,c(a)];var
i=s(a),p=0;if(typeof
i==="number"&&82===i){w(a,82);var
q=E(a),b=s(a),f=0;if(typeof
b==="number")if(0===b){var
j=n(a),k=j[2],l=j[1];if(!k[1])Q(a,[0,l,56]);var
e=[0,[1,l,k]]}else
f=1;else
if(8===b[0]){w(a,b);var
r=[0,b[2]],t=C([0,q],[0,d(a)],0),e=[0,[0,b[1],[0,r,b[3],t]]]}else
f=1;if(f){aa(a,57);var
e=[0,[0,_(a),[0,bD7,bD6,0]]]}var
m=e;p=1}if(!p)var
m=0;return[0,h,m]},a)}function
v(a){return B(0,function(a){w(a,98);var
d=s(a);if(typeof
d==="number"){if(99===d){R(a);return bD9}}else
if(7===d[0]){var
b=0,g=j(a);for(;;){var
c=s(a);if(typeof
c==="number"){if(0===c){var
b=[0,[1,m(a)],b];continue}}else
if(7===c[0]){var
b=[0,[0,q(a)],b];continue}var
f=U(b),e=[0,ik,[0,g,a$(a,cl),f]];return a$(a,99)?[0,e]:(ic(a,99),[1,e])}}ic(a,99);return bD8},a)}function
x(a){return B(0,function(a){w(a,98);w(a,cl);var
b=s(a);if(typeof
b==="number"){if(99===b){R(a);return c0}}else
if(7===b[0]){var
c=j(a);Oz(a,99);return[0,ik,[0,c]]}ic(a,99);return c0},a)}var
k=function
b(a){return b.fun(a)},f=function
b(a){return b.fun(a)},l=function
b(a){return b.fun(a)};h(k,function(c){var
a=s(c);if(typeof
a==="number"){if(0===a)return o(c)}else
if(8===a[0]){w(c,a);return[0,a[1],[4,[0,a[2],a[3]]]]}var
e=b(l,c),d=e[2],f=e[1];return c0<=d[1]?[0,f,[1,d[2]]]:[0,f,[0,d[2]]]});function
i(a){switch(a[0]){case
0:return a[1][2][1];case
1:var
c=a[1][2],e=Z(bD_,c[2][2][1]);return Z(c[1][2][1],e);default:var
d=a[1][2],b=d[1],f=0===b[0]?b[1][2][1]:i([2,b[1]]);return Z(f,Z(bD$,d[2][2][1]))}}h(f,function(a){var
H=E(a),d=v(a);b3(a);var
I=d[2];if(0===I[0])var
J=I[1],at=typeof
J==="number"?0:J[2][2],K=at;else
var
K=1;if(K)var
av=QT,c=av,n=B(0,function(a){return 0},a);else{bI(a,3);var
G=_(a),e=0;for(;;){var
g=iR(a),h=s(a),q=0;if(typeof
h==="number"){var
ae=0;if(98===h){bI(a,2);var
w=s(a),j=aA(1,a),af=0;if(typeof
w==="number"&&98===w&&typeof
j==="number"){var
ag=0;if(cl!==j&&au!==j)ag=1;if(!ag){var
y=x(a),z=y[2],A=y[1],ap=typeof
z==="number"?[0,c0,A]:[0,ik,[0,A,z[2]]],r=a[23][1],ah=0;if(r){var
t=r[2];if(t){var
u=t[2];ah=1}}if(!ah)var
u=V(bqL);a[23][1]=u;var
an=iO(a),ao=jV(a[24][1],an);a[25][1]=ao;var
m=[0,U(e),g,ap];af=1}}if(!af){var
D=b(f,a),l=D[2],F=D[1],aq=c0<=l[1]?[0,F,[1,l[2]]]:[0,F,[0,l[2]]],e=[0,aq,e];continue}}else
if(au===h){aR(0,a);var
m=[0,U(e),g,QT]}else{q=1;ae=1}if(!ae)var
ar=g?g[1]:G,as=aM(G,ar),c=m[3],n=[0,as,m[1]]}else
q=1;if(q){var
e=[0,b(k,a),e];continue}break}}var
L=W(a),ai=0;if(typeof
c!=="number"){var
T=c[1],aj=0;if(ik===T){var
X=c[2],Y=d[2];if(0===Y[0]){var
Z=Y[1];if(typeof
Z==="number")aa(a,bEa);else{var
ab=i(Z[2][1]);if(p(i(X[2][1]),ab))aa(a,[17,ab])}}var
$=X[1]}else
if(c0===T){var
ac=d[2];if(0===ac[0]){var
ad=ac[1];if(typeof
ad!=="number")aa(a,[17,i(ad[2][1])])}var
$=c[2]}else
aj=1;if(!aj){var
o=$;ai=1}}if(!ai)var
o=d[1];var
M=d[2][1],N=d[1];if(typeof
M==="number"){var
ak=0,aw=C([0,H],[0,L],0);if(typeof
c!=="number"){var
Q=c[1],al=0;if(ik===Q)var
R=c[2][1];else
if(c0===Q)var
R=c[2];else
al=1;if(!al){var
O=R;ak=1}}if(!ak)var
O=o;var
P=[0,c0,[0,N,O,n,aw]]}else{var
am=0,ax=C([0,H],[0,L],0);if(typeof
c!=="number"&&ik===c[1]){var
S=[0,c[2]];am=1}if(!am)var
S=0;var
P=[0,ik,[0,[0,N,M[2]],S,n,ax]]}return[0,aM(d[1],o),P]});h(l,function(a){bI(a,2);return b(f,a)});return[0,d,m,g,n,o,c,j,q,v,x,k,f,l]}function
cH(a){return typeof
a==="number"?0:0===a[0]?1:a[1]}function
bEb(b,a){return[0,b,a]}function
j7(c,b,a){return[1,2,b,a,c,0]}function
j8(c,b,a){return[1,2,c,b,0,a]}function
db(d,c,b,a){var
e=cH(d),f=cH(a),g=f<=e?e+1|0:f+1|0;return 1===g?[0,c,b]:[1,g,c,b,d,a]}function
u2(c,a){var
d=0!==a?1:0;if(d){if(1!==a){var
g=a>>>1|0,h=u2(c,g),i=b(c,0),j=u2(c,(a-g|0)-1|0),k=i[2],l=i[1];return[1,cH(h)+1|0,l,k,h,j]}var
e=b(c,0),f=[0,e[1],e[2]]}else
var
f=d;return f}function
nu(b,f,e,a){var
c=cH(b),d=cH(a),g=d<=c?c+1|0:d+1|0;return[1,g,f,e,b,a]}function
bo(b,f,e,a){var
i=cH(b),j=cH(a);if((j+2|0)<i){var
c=b[5],g=b[4],k=b[3],l=b[2],o=cH(c);if(o<=cH(g))return nu(g,l,k,db(c,f,e,a));var
p=db(c[5],f,e,a),q=c[3],r=c[2];return nu(db(g,l,k,c[4]),r,q,p)}if((i+2|0)<j){var
h=a[5],d=a[4],m=a[3],n=a[2],s=cH(d);if(s<=cH(h))return nu(db(b,f,e,d),n,m,h);var
t=db(d[5],n,m,h),u=d[3],v=d[2];return nu(db(b,f,e,d[4]),v,u,t)}return db(b,f,e,a)}var
bR=0;function
bEc(b){var
a=typeof
b==="number"?1:0,c=a?1:a;return c}function
hK(d,c){var
a=d,b=c;for(;;)if(typeof
a==="number")return b;else{if(0===a[0])return[0,a[1],a[2],bR,b];var
e=[0,a[2],a[3],a[5],b],a=a[4],b=e;continue}}function
OM(b){var
a=b;for(;;)if(typeof
a==="number")throw a4;else{if(0===a[0])return a;if(typeof
a[4]==="number")return[0,a[2],a[3]];var
a=a[4];continue}}function
ON(c){var
a=c;for(;;){var
b=a[4];if(typeof
b==="number")return[0,a[2],a[3]];else{if(0===b[0])return b;var
a=b;continue}}}function
OO(b){var
a=b;for(;;)if(typeof
a==="number")return 0;else{if(0===a[0])return[0,[0,a[1],a[2]]];if(typeof
a[4]==="number")return[0,[0,a[2],a[3]]];var
a=a[4];continue}}function
bEd(b){var
a=b;for(;;)if(typeof
a==="number")throw a4;else{if(0===a[0])return a;if(typeof
a[5]==="number")return[0,a[2],a[3]];var
a=a[5];continue}}function
bEe(b){var
a=b;for(;;)if(typeof
a==="number")return 0;else{if(0===a[0])return[0,[0,a[1],a[2]]];if(typeof
a[5]==="number")return[0,[0,a[2],a[3]]];var
a=a[5];continue}}function
u3(a){var
b=a[5],c=a[4],d=a[3],e=a[2];return typeof
c==="number"?b:0===c[0]?bo(0,e,d,b):bo(u3(c),e,d,b)}function
u4(b,a){if(typeof
a==="number")return b;else{if(0===a[0])return j7(b,a[1],a[2]);var
c=a[5],d=a[3],e=a[2];return bo(u4(b,a[4]),e,d,c)}}function
OP(c,b,a){if(typeof
a==="number")return[0,c,b];else{if(0===a[0])return j8(c,b,a);var
d=a[5],e=a[3],f=a[2];return bo(OP(c,b,a[4]),f,e,d)}}function
u5(b,a){if(typeof
a==="number")return b;else{if(0===a[0])return j8(a[1],a[2],b);var
c=u5(b,a[5]);return bo(a[4],a[2],a[3],c)}}function
OQ(c,b,a){if(typeof
a==="number")return[0,c,b];else{if(0===a[0])return j7(a,c,b);var
d=OQ(c,b,a[5]);return bo(a[4],a[2],a[3],d)}}function
OR(b,a){if(typeof
b==="number")return a;else
if(1===b[0]&&typeof
a!=="number"){if(0===a[0])return u5(a,b);var
c=ON(a),d=u3(a);return bo(b,c[1],c[2],d)}return typeof
a==="number"?b:u4(b,a)}function
cw(b,d,c,a){if(typeof
b==="number")return OP(d,c,a);else
if(0===b[0]){if(typeof
a!=="number"){if(0===a[0])return[1,2,d,c,b,a];if(3<a[1]){var
k=a[5],l=a[3],m=a[2];return bo(cw(b,d,c,a[4]),m,l,k)}return db(b,d,c,a)}}else{var
f=b[5],g=b[4],h=b[3],i=b[2],e=b[1];if(typeof
a!=="number"){if(0===a[0])return 3<e?bo(g,i,h,cw(f,d,c,a)):db(b,d,c,a);var
j=a[1];if((j+2|0)<e)return bo(g,i,h,cw(f,d,c,a));if((e+2|0)<j){var
n=a[5],o=a[3],p=a[2];return bo(cw(b,d,c,a[4]),p,o,n)}return db(b,d,c,a)}}return OQ(d,c,b)}function
nv(b,a){if(typeof
b==="number")return a;else
if(1===b[0]&&typeof
a!=="number"){if(0===a[0])return u5(a,b);var
c=ON(a),d=u3(a);return cw(b,c[1],c[2],d)}return typeof
a==="number"?b:u4(b,a)}function
j9(c,d,b,a){return b?cw(c,d,b[1],a):nv(c,a)}function
OS(b,c){var
a=c;for(;;)if(typeof
a==="number")return 0;else{if(0===a[0])return d(b,a[1],a[2]);OS(b,a[4]);d(b,a[2],a[3]);var
a=a[5];continue}}function
u6(c,a){if(typeof
a==="number")return 0;else{if(0===a[0]){var
d=b(c,a[2]);return[0,a[1],d]}var
e=u6(c,a[4]),f=b(c,a[3]),g=u6(c,a[5]);return[1,a[1],a[2],f,e,g]}}function
u7(b,a){if(typeof
a==="number")return 0;else{if(0===a[0]){var
c=a[1];return[0,c,d(b,c,a[2])]}var
e=a[2],f=u7(b,a[4]),g=d(b,e,a[3]),h=u7(b,a[5]);return[1,a[1],e,g,f,h]}}function
u8(c,e,d){var
a=e,b=d;for(;;)if(typeof
a==="number")return b;else{if(0===a[0])return A(c,a[1],a[2],b);var
f=u8(c,a[4],b),g=A(c,a[2],a[3],f),a=a[5],b=g;continue}}function
OT(d,c){var
b=d,a=c;for(;;)if(typeof
a==="number")return b;else{if(0===a[0])return[0,a[1],b];var
e=a[4],f=OT(b,a[5]),b=[0,a[2],f],a=e;continue}}function
OU(a){return OT(0,a)}function
OV(b,g){var
a=g;for(;;)if(typeof
a==="number")return 1;else{if(0===a[0])return d(b,a[1],a[2]);var
c=d(b,a[2],a[3]);if(c){var
e=OV(b,a[4]);if(e){var
a=a[5];continue}var
f=e}else
var
f=c;return f}}function
OW(b,g){var
a=g;for(;;)if(typeof
a==="number")return 0;else{if(0===a[0])return d(b,a[1],a[2]);var
c=d(b,a[2],a[3]);if(c)var
e=c;else{var
f=OW(b,a[4]);if(!f){var
a=a[5];continue}var
e=f}return e}}function
u9(b,a){if(typeof
a==="number")return 0;else{if(0===a[0])return d(b,a[1],a[2])?a:bR;var
f=a[5],g=a[4],h=a[3],i=a[2],c=u9(b,g),j=d(b,i,h),e=u9(b,f);if(j){if(g===c&&f===e)return a;return cw(c,i,h,e)}return nv(c,e)}}function
u_(a){if(typeof
a==="number")return 0;else{if(0===a[0])return 1;var
b=u_(a[5]);return(u_(a[4])+1|0)+b|0}}function
OX(d,c){var
b=d,a=c;for(;;)if(typeof
a==="number")return b;else{if(0===a[0])return[0,a,b];var
e=a[4],f=OX(b,a[5]),b=[0,[0,a[2],a[3]],f],a=e;continue}}function
bEf(a){return OX(0,a)}var
nw=function(a){function
i(e,c,b){if(typeof
b==="number")return[0,e,c];else{if(0===b[0]){var
k=b[1],l=d(a[1],e,k);return 0===l?b[2]===c?b:[0,k,c]:0<=l?j7(b,e,c):j8(e,c,b)}var
f=b[5],g=b[4],h=b[3],j=b[2],m=d(a[1],e,j);if(0===m)return h===c?b:[1,b[1],e,c,g,f];if(0<=m){var
n=i(e,c,f);return f===n?b:bo(g,j,h,n)}var
o=i(e,c,g);return g===o?b:bo(o,j,h,f)}}function
l(c,f){var
b=f;for(;;)if(typeof
b==="number")throw a4;else{if(0===b[0]){if(0===d(a[1],c,b[1]))return b[2];throw a4}var
e=d(a[1],c,b[2]);if(0===e)return b[3];var
g=0<=e?b[5]:b[4],b=g;continue}}function
m(c,g){var
b=g;for(;;)if(typeof
b==="number")return 0;else{if(0===b[0]){var
e=0===d(a[1],c,b[1])?1:0,h=e?[0,b[2]]:e;return h}var
f=d(a[1],c,b[2]);if(0===f)return[0,b[3]];var
i=0<=f?b[5]:b[4],b=i;continue}}function
n(c,g){var
b=g;for(;;)if(typeof
b==="number")return 0;else{if(0===b[0])return 0===d(a[1],c,b[1])?1:0;var
e=d(a[1],c,b[2]),f=0===e?1:0;if(f)return f;var
h=0<=e?b[5]:b[4],b=h;continue}}function
k(c,b){if(typeof
b==="number")return b;else{if(0===b[0])return 0===d(a[1],c,b[1])?bR:b;var
e=b[5],f=b[4],h=b[3],g=b[2],i=d(a[1],c,g);if(0===i)return OR(f,e);if(0<=i){var
j=k(c,e);return e===j?b:bo(f,g,h,j)}var
l=k(c,f);return f===l?b:bo(l,g,h,e)}}function
j(e,f,c){if(typeof
c==="number")return[0,e,b(f,0)];else{if(0===c[0]){var
l=c[2],m=c[1],n=d(a[1],e,m);if(0===n){var
o=b(f,[0,l]);return l===o?c:[0,m,o]}var
p=b(f,0);return 0<=n?j7(c,e,p):j8(e,p,c)}var
g=c[5],h=c[4],i=c[3],k=c[2],q=d(a[1],e,k);if(0===q){var
r=b(f,[0,i]);return i===r?c:[1,c[1],e,r,h,g]}if(0<=q){var
s=j(e,f,g);return g===s?c:bo(h,k,i,s)}var
t=j(e,f,h);return h===t?c:bo(t,k,i,g)}}function
g(e,f,c){if(typeof
c==="number"){var
k=b(f,0);return k?[0,e,k[1]]:k}else{if(0===c[0]){var
m=c[2],n=c[1],o=d(a[1],e,n);if(0===o){var
p=b(f,[0,m]);if(p){var
q=p[1];return m===q?c:[0,n,q]}return bR}var
r=b(f,0);if(r){var
s=r[1];return 0<=o?j7(c,e,s):j8(e,s,c)}return c}var
h=c[5],i=c[4],j=c[3],l=c[2],t=d(a[1],e,l);if(0===t){var
u=b(f,[0,j]);if(u){var
v=u[1];return j===v?c:[1,c[1],e,v,i,h]}return OR(i,h)}if(0<=t){var
w=g(e,f,h);return h===w?c:bo(i,l,j,w)}var
x=g(e,f,i);return i===x?c:bo(x,l,j,h)}}function
e(c,b){if(typeof
b==="number")return bEg;else{if(0===b[0]){var
l=d(a[1],c,b[1]);return 0===l?[0,bR,[0,b[2]],bR]:0<=l?[0,b,0,bR]:[0,bR,0,b]}var
f=b[5],g=b[4],h=b[3],i=b[2],m=d(a[1],c,i);if(0===m)return[0,g,[0,h],f];if(0<=m){var
j=e(c,f),n=j[3],o=j[2];return[0,cw(g,i,h,j[1]),o,n]}var
k=e(c,g),p=cw(k[3],i,h,f);return[0,k[1],k[2],p]}}function
f(b,c,a){if(typeof
c==="number"){if(typeof
a==="number")return 0;else
if(0===a[0]){var
l=a[1],m=A(b,l,0,[0,a[2]]);return m?[0,l,m[1]]:bR}}else
if(0===c[0]){var
n=c[2],d=c[1];if(typeof
a==="number"){var
o=A(b,d,[0,n],0);return o?[0,d,o[1]]:bR}else
if(0===a[0]){var
i=e(d,a),s=f(b,bR,i[3]),t=A(b,d,[0,n],i[2]);return j9(f(b,bR,i[1]),d,t,s)}}else{var
j=c[2],u=cH(a);if(u<=c[1]){var
k=e(j,a),v=f(b,c[5],k[3]),w=A(b,j,[0,c[3]],k[2]);return j9(f(b,c[4],k[1]),j,w,v)}var
p=0;if(typeof
a==="number"||1!==a[0])p=1;if(p)throw[0,ap,bEh]}var
g=a[2],h=e(g,c),q=f(b,h[3],a[5]),r=A(b,g,h[2],[0,a[3]]);return j9(f(b,h[1],a[4]),g,r,q)}function
h(c,b,a){var
x=0;if(typeof
b==="number"){var
k=a;x=1}else
if(1===b[0]){var
p=b[3],d=b[2];if(typeof
a!=="number"&&0!==a[0]){var
q=a[3],f=a[2];if(a[1]<=b[1]){var
i=e(d,a),r=i[2],s=h(c,b[4],i[1]),t=h(c,b[5],i[3]);return r?j9(s,d,A(c,d,p,r[1]),t):cw(s,d,p,t)}var
j=e(f,b),u=j[2],v=h(c,j[1],a[4]),w=h(c,j[3],a[5]);return u?j9(v,f,A(c,f,u[1],q),w):cw(v,f,q,w)}}if(!x)if(typeof
a==="number")var
k=b;else{if(0===a[0]){var
l=a[2],m=a[1];return g(m,function(a){return a?A(c,m,a[1],l):[0,l]},b)}var
n=b[2],o=b[1];return g(o,function(a){return a?A(c,o,n,a[1]):[0,n]},a)}return k}function
c(b,a){if(typeof
a==="number")return bEi;else{if(0===a[0])return d(b,a[1],a[2])?[0,a,bR]:[0,bR,a];var
e=a[3],f=a[2],g=c(b,a[4]),h=g[2],i=g[1],m=d(b,f,e),j=c(b,a[5]),k=j[2],l=j[1];if(m){var
n=nv(h,k);return[0,cw(i,f,e,l),n]}var
o=cw(h,f,e,k);return[0,nv(i,l),o]}}function
o(i,h,g){var
l=hK(g,0),c=hK(h,0),b=l;for(;;){if(c){if(b){var
e=d(a[1],c[1],b[1]);if(0===e){var
f=d(i,c[2],b[2]);if(0===f){var
j=hK(b[3],b[4]),c=hK(c[3],c[4]),b=j;continue}return f}return e}return 1}var
k=b?-1:b;return k}}function
p(j,i,h){var
l=hK(h,0),c=hK(i,0),b=l;for(;;){if(c){if(b){var
f=0===d(a[1],c[1],b[1])?1:0;if(f){var
g=d(j,c[2],b[2]);if(g){var
k=hK(b[3],b[4]),c=hK(c[3],c[4]),b=k;continue}var
e=g}else
var
e=f}else
var
e=b;return e}return b?0:1}}return[0,bR,bEc,n,i,g,j,bEb,k,f,h,o,p,OS,u8,OV,OW,u9,c,u_,bEf,OM,OO,bEd,bEe,OU,OU,function(e,l,a){var
f=[0,bR,0],c=u8(function(g,a,f){var
h=f[1],c=b(l,g),m=f[2],n=m||(c!==g?1:0);if(e)var
o=e[1],k=j(c,function(b){return b?d(o,b[1],a):a},h);else
var
k=i(c,a,h);return[0,k,n]},a,f);return c[2]?c[1]:a},OM,OO,e,l,m,u6,u7,u2]}([0,GW]);function
iV(a){return[0,h$(a)]}var
u$=uB([0,function(b,a){var
c=Nn(b[1],a[1]);return 0===c?d(Nx,b[2],a[2]):c}]);function
j_(e,a,c){var
b=c[2][1];return ay(b,bFx)?a:d(bA[3],b,a)?(Q(e,[0,c[1],[19,b]]),a):d(bA[4],b,a)}function
va(b,c){var
a=c[2];switch(a[0]){case
0:var
d=a[1][1];return T(function(b,a){var
c=0===a[0]?a[1][2][2]:a[1][2][1];return va(b,c)},b,d);case
1:var
e=a[1][1];return T(function(b,a){return 2===a[0]?b:va(b,a[1][2][1])},b,e);case
2:return[0,a[1][1],b];default:return V(bFy)}}var
S=bd(bFB,bFA),al=bBX(S),aB=function(e){var
H=[0,bBP,bA[1],0,0];function
f(c){var
a=s(c);if(typeof
a==="number"){var
b=0;if(8<=a){if(!(10<=a))b=1}else
if(1===a)b=1;if(b)return 1}return 0}function
Z(a){var
j=cf(a),g=s(a),o=0;if(typeof
g==="number"){var
p=0;if(82===g)w(a,82);else
if(86===g){aa(a,[4,j[2][1]]);w(a,86)}else
p=1;if(!p){var
c=_(a),h=E(a),b=s(a),i=0;if(typeof
b==="number")switch(b){case
30:case
31:R(a);var
q=W(a),r=f(a)?[1,c,[0,31===b?1:0,C([0,h],[0,q],0)]]:[0,c],d=r;break;default:i=1}else
switch(b[0]){case
0:var
l=b[2],t=A(S[24],a,b[1],l),u=W(a),v=f(a)?[2,c,[0,t,l,C([0,h],[0,u],0)]]:[0,c],d=v;break;case
2:var
e=b[1],m=e[1];if(e[4])cG(a,45);R(a);var
x=W(a);if(f(a))var
y=C([0,h],[0,x],0),n=[3,m,[0,e[2],e[3],y]];else
var
n=[0,m];var
d=n;break;default:i=1}if(i){R(a);var
d=[0,c]}var
k=d;o=1}}if(!o)var
k=0;return[0,j,k]}var
$=0;function
I(h,g,ab,a){var
b=ab;for(;;){var
y=s(a);if(typeof
y==="number"){var
o=y-2|0;if(a3<o>>>0){if(!(cr<o+1>>>0)){var
ad=b[4],ae=b[3],af=U(b[1][4]),ag=U(b[1][3]),ah=U(b[1][2]);return[0,[0,U(b[1][1]),ah,ag,af],ae,ad]}}else
if(10===o){var
N=_(a),ai=E(a);R(a);var
O=s(a),T=0;if(typeof
O==="number"){var
r=O-2|0,u=0;if(a3<r>>>0){if(cr<r+1>>>0)u=1}else
if(7===r){w(a,9);var
t=s(a),V=0;if(typeof
t==="number"){var
W=0;if(1!==t&&au!==t)W=1;if(!W){var
P=1;V=1}}if(!V)var
P=0;Q(a,[0,N,[7,P]])}else
u=1;if(!u)T=1}if(!T)Q(a,[0,N,bBR]);var
b=[0,b[1],b[2],1,ai];continue}}var
z=b[2],c=b[1],S=B($,Z,a),A=S[2],i=A[1],e=i[2][1];if(ay(e,bBQ))var
C=b;else{var
F=i[1],f=A[2],j=S[1],G=aU(e,0),H=97<=G?1:0,ac=H?G<=aP?1:0:H;if(ac)Q(a,[0,F,[6,h,e]]);if(d(bA[3],e,z))Q(a,[0,F,[1,h,e]]);var
l=b[4],m=b[3],n=d(bA[4],e,z),I=[0,b[1],n,m,l],q=function(d){return function(b,c){if(g&&g[1]!==b)return Q(a,[0,c,[5,h,g,d]]);return 0}}(e);if(typeof
f==="number"){var
v=0;if(g){var
J=g[1],X=0;if(1===J)Q(a,[0,j,[8,h,e]]);else
if(J){v=1;X=1}else
Q(a,[0,j,[0,h,e]]);if(!X)var
k=I}else
v=1;if(v)var
k=[0,[0,c[1],c[2],c[3],[0,[0,j,[0,i]],c[4]]],n,m,l]}else
switch(f[0]){case
0:Q(a,[0,f[1],[5,h,g,e]]);var
k=I;break;case
1:var
K=f[1];q(0,K);var
k=[0,[0,[0,[0,j,[0,i,[0,K,f[2]]]],c[1]],c[2],c[3],c[4]],n,m,l];break;case
2:var
L=f[1];q(1,L);var
k=[0,[0,c[1],[0,[0,j,[0,i,[0,L,f[2]]]],c[2]],c[3],c[4]],n,m,l];break;default:var
M=f[1];q(2,M);var
k=[0,[0,c[1],c[2],[0,[0,j,[0,i,[0,M,f[2]]]],c[3]],c[4]],n,m,l]}var
C=k}var
D=s(a),Y=0;if(typeof
D==="number"){var
p=D-2|0,x=0;if(a3<p>>>0){if(cr<p+1>>>0)x=1}else
if(6===p){aa(a,1);w(a,8)}else
x=1;if(!x)Y=1}if(!Y)w(a,9);var
b=C;continue}}function
o(a){var
c=E(a);w(a,48);var
b=d(S[13],0,a),e=b[2][1],O=b[1],f=B(0,function(a){var
x=a$(a,63);if(x){bI(a,1);var
g=s(a),k=0;if(typeof
g==="number")switch(g){case
117:var
f=bBT;break;case
119:var
f=bBU;break;case
121:var
f=bBV;break;default:k=1}else
switch(g[0]){case
4:aa(a,[3,e,[0,g[2]]]);var
f=0;break;case
9:if(g[1])var
f=bBW;else
k=1;break;default:k=1}if(k){aa(a,[3,e,0]);var
f=0}R(a);b3(a);var
h=f}else
var
h=x;var
y=0!==h?1:0,J=y?E(a):y;w(a,0);var
l=I(e,h,H,a),c=l[2],b=l[1],K=E(a),L=ai(l[3],K);w(a,1);var
m=s(a),u=0;if(typeof
m==="number"){var
C=0;if(1!==m&&au!==m){u=1;C=1}if(!C)var
z=W(a)}else
u=1;if(u)var
B=bQ(a),z=B?hI(a):B;var
d=bg([0,J],[0,z],L,0);if(h)switch(h[1]){case
0:return[0,[0,b[1],1,c,d]];case
1:return[1,[0,b[2],1,c,d]];case
2:var
j=b[4],i=b[3],n=1;break;default:return[3,[0,b[4],c,d]]}else{var
p=c5(b[1]),q=c5(b[2]),r=c5(b[3]),t=c5(b[4]),v=0;if(0===p&&0===q){var
D=0;if(0===r&&0===t){v=1;D=1}if(!D){var
j=b[4],i=b[3],n=0;v=2}}var
F=0;switch(v){case
0:if(0===q&&0===r&&t<=p){var
M=b[4];bw(function(b){return Q(a,[0,b[1],[0,e,b[2][1][2][1]]])},M);return[0,[0,b[1],0,c,d]]}if(0===p&&0===r&&t<=q){var
N=b[4];bw(function(b){return Q(a,[0,b[1],[8,e,b[2][1][2][1]]])},N);return[1,[0,b[2],0,c,d]]}Q(a,[0,O,[2,e]]);break;case
1:break;default:F=1}if(!F)return[2,[0,bBS,0,c,d]]}var
A=c5(i),o=c5(j);if(0===A)0===o;else{var
G=0;if(0!==o)if(A<o){bw(function(b){return Q(a,[0,b[1],[9,e]])},i);G=1}else
bw(function(b){return Q(a,[0,b[1],[9,e]])},j);if(!G)return[2,[0,[1,i],n,c,d]]}return[2,[0,[0,j],n,c,d]]},a);return[16,[0,b,f,C([0,c],0,0)]]}var
p=0;function
q(a){return B(p,o,a)}function
i(d,c){var
a=c[2][1],e=c[1],b=d[1];if(hG(a))ce(b,[0,e,41]);var
f=np(a),g=f||iS(a);if(g)ce(b,[0,e,55]);return[0,b,d[2]]}function
a(a,e){var
b=e[2];switch(b[0]){case
0:return T(r,a,b[1][1]);case
1:return T(t,a,b[1][1]);case
2:var
c=b[1][1],f=c[2][1],g=a[2],h=a[1];if(d(bA[3],f,g))Q(h,[0,c[1],42]);var
j=i([0,h,g],c),k=d(bA[4],f,j[2]);return[0,j[1],k];default:Q(a[1],[0,e[1],31]);return a}}function
r(c,b){if(0===b[0]){var
d=b[1][2],e=d[1],f=1===e[0]?i(c,e[1]):c;return a(f,d[2])}return a(c,b[1][2][1])}function
t(c,b){return 2===b[0]?c:a(c,b[1][2][1])}function
j(b,h,g,f){var
i=b[5],o=id(f),j=f[2],c=j[3],d=i?hf(0,b):hf(h,b),k=h||i||1-o;if(k){if(g){var
l=g[1],e=l[2][1],m=l[1];if(hG(e))ce(d,[0,m,44]);var
p=np(e),q=p||iS(e);if(q)ce(d,[0,m,55])}var
r=j[2],s=[0,d,bA[1]],t=T(function(c,b){return a(c,b[2][1])},s,r),u=c?(a(t,c[1][2][1]),0):c,n=u}else
var
n=k;return n}var
g=function
c(a,b){return c.fun(a,b)};function
u(a){if(21===s(a))aa(a,b8);var
e=d(S[18],a,41),c=82===s(a)?1:0,f=c?(w(a,82),[0,b(S[10],a)]):c;return[0,e,f]}var
v=0;h(g,function(a,f){var
b=s(a);if(typeof
b==="number"){var
c=b-5|0,e=0;if(7<c>>>0){if(hl===c)e=1}else
if(5<c-1>>>0)e=1;if(e){var
h=12===b?1:0;if(h)var
k=E(a),i=B(0,function(a){w(a,12);return d(S[18],a,41)},a),l=C([0,k],0,0),j=[0,[0,i[1],[0,i[2],l]]];else
var
j=h;if(5!==s(a))aa(a,64);return[0,U(f),j]}}var
m=B(v,u,a);if(5!==s(a))w(a,9);return d(g,a,[0,m,f])});function
k(o,n){function
a(p){var
a=uS(n,Ok(o,p)),q=1,c=1===a[10]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],q,a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]],r=E(c);w(c,4);var
h=a_(c),i=h?21===s(c)?1:0:h;if(i){var
t=E(c),j=B(0,function(a){w(a,21);return 86===s(a)?[0,b(e[9],a)]:(aa(a,cX),0)},c),f=j[2];if(f){if(9===s(c))R(c);var
u=C([0,t],0,0),k=[0,[0,j[1],[0,f[1],u]]]}else
var
k=f;var
l=k}else
var
l=i;var
m=d(g,c,0),v=E(c);w(c,5);var
x=bg([0,r],[0,W(c)],v,0);return[0,l,m[1],m[2],x]}var
c=0;return function(b){return B(c,a,b)}}function
l(g,f,e,c,b){var
h=Oq(g,f,e,b),a=d(S[16],c,h);return[0,[0,a[1]],a[2]]}function
x(a,h,g){var
e=_(a),c=s(a),d=0;if(typeof
c==="number")if(b8===c){var
i=E(a);R(a);var
b=[0,[0,e,[0,0,C([0,i],0,0)]]]}else
if(ci===c){var
j=E(a);R(a);var
b=[0,[0,e,[0,1,C([0,j],0,0)]]]}else
d=1;else
d=1;if(d)var
b=0;if(b){var
f=0;if(!h&&!g)f=1;if(!f){Q(a,[0,b[1][1],7]);return 0}}return b}function
m(a){if(a2===s(a)){var
b=E(a);R(a);return[0,1,b]}return bCk}function
n(a){if(64===s(a)&&!j0(1,a)){var
b=E(a);R(a);return[0,1,b]}return bCl}function
y(c){var
h=n(c),f=h[1],u=h[2],i=B(0,function(a){var
v=E(a);w(a,15);var
l=m(a),n=l[1],x=jt([0,u,[0,v,[0,l[2],0]]]),y=a[7],c=s(a),j=0;if(y&&typeof
c==="number")if(4===c){var
h=0,g=0;j=1}else
if(98===c){var
A=cv(a,b(e[3],a)),B=4===s(a)?0:[0,hg(a,d(S[13],bCm,a))],h=B,g=A;j=1}if(!j)var
C=ia(a)?hg(a,d(S[13],bCn,a)):(Oy(a,bCo),[0,_(a),bCp]),h=[0,C],g=cv(a,b(e[3],a));var
o=b(k(f,n),a),z=86===s(a)?o:j5(a,o),p=b(e[12],a),i=p[2],q=p[1];if(i)var
t=OF(a,i),r=q;else
var
t=i,r=iU(a,q);return[0,n,g,h,z,r,t,x]},c),a=i[2],g=a[4],o=a[3],p=a[1],q=l(c,f,p,0,id(g));j(c,q[2],o,g);var
r=i[1],t=C([0,a[7]],0,0);return[23,[0,o,g,q[1],f,p,a[6],a[5],a[2],t,r]]}var
z=0;function
D(a){return B(z,y,a)}function
c(l,a){var
m=E(a);w(a,l);var
e=0,c=0;for(;;){var
f=B(0,function(a){var
c=d(S[18],a,40);if(a$(a,82))var
f=0,e=[0,b(S[10],a)];else
if(2===c[2][0])var
f=0,e=0;else
var
f=[0,[0,c[1],59]],e=0;return[0,[0,c,e],f]},a),g=f[2],h=g[2],i=[0,[0,f[1],g[1]],e],j=h?[0,h[1],c]:c;if(a$(a,9)){var
e=i,c=j;continue}var
k=U(j);return[0,U(i),m,k]}}var
F=24;function
G(a){return c(F,a)}function
J(d){var
a=c(27,nn(1,d)),b=a[1],e=a[3],f=U(T(function(b,a){return a[2][2]?b:[0,[0,a[1],58],b]},e,b));return[0,b,a[2],f]}return[0,n,m,x,k,l,j,function(a){return c(28,nn(1,a))},J,G,D,q]}(al),nx=bCq(S),cx=function(f){function
as(f){var
b=f[2];switch(b[0]){case
17:var
a=b[1],c=a[1][2][1];if(p(c,bCs)){if(!p(c,bCt)){var
d=p(a[2][2][1],bCu);if(!d)return d}}else{var
e=p(a[2][2][1],bCv);if(!e)return e}break;case
0:case
10:case
16:case
19:break;default:return 0}return 1}var
c=f[1],i=function
b(a){return b.fun(a)},e=function
b(a){return b.fun(a)},X=function
b(a){return b.fun(a)},l=function
b(a){return b.fun(a)},Y=function
b(a){return b.fun(a)},m=function
b(a){return b.fun(a)},$=function
b(a){return b.fun(a)},ab=function
b(a){return b.fun(a)},k=function
b(a){return b.fun(a)},n=function
b(a){return b.fun(a)},o=function
b(a){return b.fun(a)},q=function
b(a){return b.fun(a)},ac=function
b(a){return b.fun(a)},r=function
b(a){return b.fun(a)},ad=function
b(a){return b.fun(a)},t=function
b(a){return b.fun(a)},ae=function
b(a){return b.fun(a)},g=function
f(a,b,c,d,e){return f.fun(a,b,c,d,e)},u=function
e(a,b,c,d){return e.fun(a,b,c,d)},v=function
b(a){return b.fun(a)},x=function
b(a){return b.fun(a)},y=function
b(a){return b.fun(a)},z=function
f(a,b,c,d,e){return f.fun(a,b,c,d,e)},af=function
e(a,b,c,d){return e.fun(a,b,c,d)},D=function
b(a){return b.fun(a)},F=function
d(a,b,c){return d.fun(a,b,c)},a=function
b(a){return b.fun(a)},ai=function
d(a,b,c){return d.fun(a,b,c)},G=function
b(a){return b.fun(a)},aj=function
b(a){return b.fun(a)},H=function
c(a,b){return c.fun(a,b)},I=function
e(a,b,c,d){return e.fun(a,b,c,d)},ak=function
b(a){return b.fun(a)},J=function
d(a,b,c){return d.fun(a,b,c)},am=function
b(a){return b.fun(a)},an=function
b(a){return b.fun(a)},L=function
b(a){return b.fun(a)},M=function
d(a,b,c){return d.fun(a,b,c)},at=f[2];function
N(a){var
f=_(a),c=b(m,a),d=b(Y,a);if(d){var
g=d[1];return[0,B([0,f],function(a){var
d=A(at,0,a,c);return[2,[0,g,d,b(e,a),0]]},a)]}return c}function
av(c,a){if(typeof
a==="number"){var
b=55!==a?1:0;if(!b)return b}throw hJ}function
ao(i){var
a=no(av,i),b=N(a),c=s(a);if(typeof
c==="number"){if(11===c)throw hJ;if(86===c){var
d=Oo(a),h=0;if(d){var
e=d[1];if(typeof
e==="number"&&5===e){var
f=1;h=1}}if(!h)var
f=0;if(f)throw hJ}}if(ia(a)){if(0===b[0]){var
g=b[1][2];if(10===g[0]&&!p(g[1][2][1],bCw)&&!bQ(a))throw hJ}return b}return b}h(i,function(a){var
c=s(a),i=0,k=ia(a);if(typeof
c==="number"){var
d=0;if(22<=c){if(58===c){if(a[17])return[0,b(X,a)];d=1}else
if(98!==c)d=1}else
if(4!==c&&!(21<=c))d=1;if(!d)i=1}if(!i&&!k)return N(a);var
j=0;if(64===c&&a_(a)&&98===aA(1,a)){var
f=ao,e=L;j=1}if(!j)var
f=L,e=ao;var
g=uZ(a,e);if(g)return g[1];var
h=uZ(a,f);return h?h[1]:N(a)});h(e,function(a){return d(c,a,b(i,a))});h(X,function(a){return B(0,function(a){if(a[10])aa(a,91);var
l=E(a),m=_(a);w(a,58);var
n=_(a);if(iT(a))var
g=0,d=0;else{var
h=a$(a,a2),c=s(a),k=0;if(typeof
c==="number"){var
f=0;if(86!==c)if(10<=c)f=1;else
switch(c){case
0:case
2:case
3:case
4:case
6:f=1;break}if(!f){var
i=0;k=1}}if(!k)var
i=1;var
j=h||i,q=j?[0,b(e,a)]:j,g=h,d=q}var
o=d?0:W(a),p=aM(m,n);return[30,[0,d,C([0,l],[0,o],0),g,p]]},a)});h(l,function(f){var
b=f[2];switch(b[0]){case
17:var
a=b[1],c=a[1][2][1];if(p(c,bCx)){if(!p(c,bCy)){var
d=p(a[2][2][1],bCz);if(!d)return d}}else{var
e=p(a[2][2][1],bCA);if(!e)return e}break;case
10:case
16:break;default:return 0}return 1});h(Y,function(c){var
d=s(c),f=0;if(typeof
d==="number"){var
e=d-67|0;if(!(15<e>>>0)){switch(e){case
0:var
a=bCB;break;case
1:var
a=bCC;break;case
2:var
a=bCD;break;case
3:var
a=bCE;break;case
4:var
a=bCF;break;case
5:var
a=bCG;break;case
6:var
a=bCH;break;case
7:var
a=bCI;break;case
8:var
a=bCJ;break;case
9:var
a=bCK;break;case
10:var
a=bCL;break;case
11:var
a=bCM;break;case
12:var
a=bCN;break;case
13:var
a=bCO;break;case
14:var
a=bCP;break;default:var
a=bCQ}var
b=a;f=1}}if(!f)var
b=0;if(0!==b)R(c);return b});h(m,function(a){var
h=_(a),f=b(ab,a);if(85===s(a)){R(a);var
i=b(e,jY(0,a));w(a,86);var
g=B(0,e,a),j=aM(h,g[1]),k=g[2];return[0,[0,j,[7,[0,d(c,a,f),i,k,0]]]]}return f});h($,function(a){return d(c,a,b(m,a))});function
O(a,g,f,e,b){var
h=d(c,a,g);return[0,[0,b,[15,[0,e,h,d(c,a,f),0]]]]}function
T(t,a,r,q){var
e=t,c=r,b=q;for(;;){var
f=s(a);if(typeof
f==="number"&&84===f){if(1-e)aa(a,bCR);w(a,84);var
g=B(0,k,a),h=g[2],i=g[1],d=s(a),p=0;if(typeof
d==="number"&&!(1<d-87>>>0)){aa(a,[23,uI(d)]);var
n=P(a,h,i),o=aq(a,n[2],n[1]),l=o[2],j=o[1];p=1}if(!p)var
l=h,j=i;var
m=aM(b,j),e=1,c=O(a,c,l,2,m),b=m;continue}return[0,b,c]}}function
aq(a,j,i){var
c=j,b=i;for(;;){var
d=s(a);if(typeof
d==="number"&&87===d){R(a);var
e=B(0,k,a),f=P(a,e[2],e[1]),g=aM(b,f[1]),h=T(0,a,O(a,c,f[2],0,g),g),c=h[2],b=h[1];continue}return[0,b,c]}}function
P(a,i,h){var
c=i,b=h;for(;;){var
d=s(a);if(typeof
d==="number"&&88===d){R(a);var
e=B(0,k,a),f=aM(b,e[1]),g=T(0,a,O(a,c,e[2],1,f),f),c=g[2],b=g[1];continue}return[0,b,c]}}h(ab,function(a){var
b=B(0,k,a),c=b[2],d=b[1],e=s(a),h=0;if(typeof
e==="number"&&84===e){var
f=T(1,a,c,d);h=1}if(!h)var
g=P(a,c,d),f=aq(a,g[2],g[1]);return f[2]});function
ar(d,c,b,a){return[0,a,[3,[0,b,d,c,0]]]}h(k,function(e){var
j=0;b:for(;;){var
E=B(0,function(a){var
c=0!==b(n,a)?1:0;return[0,c,b(o,jY(0,a))]},e),F=E[2],g=F[2],w=E[1];if(98===s(e)){var
S=0;if(0===g[0]&&12===g[1][2][0])aa(e,63);else
S=1}var
G=s(e),K=0;if(typeof
G==="number"){var
k=G-17|0,x=0;if(1<k>>>0)if(72<=k)switch(k-72|0){case
0:var
a=bCS;break;case
1:var
a=bCT;break;case
2:var
a=bCU;break;case
3:var
a=bCV;break;case
4:var
a=bCW;break;case
5:var
a=bCX;break;case
6:var
a=bCY;break;case
7:var
a=bCZ;break;case
8:var
a=bC0;break;case
9:var
a=bC1;break;case
10:var
a=bC2;break;case
11:var
a=bC3;break;case
12:var
a=bC4;break;case
13:var
a=bC5;break;case
14:var
a=bC6;break;case
15:var
a=bC7;break;case
16:var
a=bC8;break;case
17:var
a=bC9;break;case
18:var
a=bC_;break;case
19:var
a=bC$;break;default:x=1}else
x=1;else
var
a=k?bDa:e[12]?0:bDb;if(!x){var
h=a;K=1}}if(!K)var
h=0;if(0!==h)R(e);if(!j&&!h)return g;if(h){var
H=h[1],I=H[1],J=F[1],O=J?14===I?1:0:J;if(O)Q(e,[0,w,27]);var
P=d(c,e,g),p=P,m=[0,I,H[2]],l=w,f=j;for(;;){var
q=m[2],y=m[1];if(f){var
r=f[1],z=r[2],t=z[2],L=0===t[0]?t[1]:t[1]-1|0;if(q[1]<=L){var
A=aM(r[3],l),M=ar(r[1],p,z[1],A),p=M,m=[0,y,q],l=A,f=f[2];continue}}var
j=[0,[0,p,[0,y,q],l],f];continue b}}var
u=d(c,e,g),C=w,i=j;for(;;){if(i){var
v=i[1],D=aM(v[3],C),N=i[2],u=ar(v[1],u,v[2][1],D),C=D,i=N;continue}return[0,u]}}});h(n,function(b){var
a=s(b);if(typeof
a==="number")if(48<=a){if(b8<=a){if(!(eV<=a))switch(a-103|0){case
0:return bDc;case
1:return bDd;case
6:return bDe;case
7:return bDf}}else
if(65===a&&b[18])return bDg}else
if(45<=a)switch(a+i8|0){case
0:return bDh;case
1:return bDi;default:return bDj}return 0});h(o,function(a){var
h=_(a),i=E(a),j=b(n,a);if(j){var
k=j[1];R(a);var
m=B(0,q,a),o=m[2],e=aM(h,m[1]),x=0;if(6===k){var
p=o[2],u=0;switch(p[0]){case
10:ce(a,[0,e,47]);break;case
16:if(1===p[1][2][0])Q(a,[0,e,88]);break;default:u=1}if(!u)x=1}return[0,[0,e,[28,[0,k,o,C([0,i],0,0)]]]]}var
f=s(a),g=0;if(typeof
f==="number")if(eV===f)var
c=bDk;else
if(cr===f)var
c=bDl;else
g=1;else
g=1;if(g)var
c=0;if(c){R(a);var
r=B(0,q,a),d=r[2];if(1-b(l,d))Q(a,[0,d[1],26]);var
t=d[2],y=0;if(10===t[0]&&hG(t[1][2][1])){cG(a,54);y=1}var
v=aM(h,r[1]),w=C([0,i],0,0);return[0,[0,v,[29,[0,c[1],d,1,w]]]]}return b(ac,a)});h(q,function(a){return d(c,a,b(o,a))});h(ac,function(a){var
g=b(r,a);if(bQ(a))return g;var
h=s(a),i=0;if(typeof
h==="number")if(eV===h)var
f=bDm;else
if(cr===h)var
f=bDn;else
i=1;else
i=1;if(i)var
f=0;if(f){var
e=d(c,a,g);if(1-b(l,e))Q(a,[0,e[1],26]);var
j=e[2],p=0;if(10===j[0]&&hG(j[1][2][1])){cG(a,53);p=1}var
k=_(a);R(a);var
m=W(a),n=aM(e[1],k),o=C(0,[0,m],0);return[0,[0,n,[29,[0,f[1],e,0,o]]]]}return g});h(r,function(a){var
k=_(a),l=1-a[16],m=0,c=0===a[16]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15],m,a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]],f=s(c),j=0;if(typeof
f==="number"){var
h=f-44|0;if(!(7<h>>>0)){var
e=0;switch(h){case
0:if(l)var
d=[0,b(v,c)];else
e=1;break;case
6:var
d=[0,b(ae,c)];break;case
7:var
d=[0,b(t,c)];break;default:e=1}if(!e){var
i=d;j=1}}}if(!j)var
i=hH(c)?[0,b(D,c)]:b(G,c);return b4(g,0,0,c,k,i)});h(ad,function(a){return d(c,a,b(r,a))});h(t,function(a){switch(a[21]){case
0:var
d=0,c=0;break;case
1:var
d=0,c=1;break;default:var
d=1,c=1}var
b=_(a),g=E(a);w(a,51);var
e=[0,b,[23,[0,C([0,g],[0,W(a)],0)]]],f=s(a);if(typeof
f==="number"&&!(11<=f))switch(f){case
4:var
h=d?e:(Q(a,[0,b,5]),[0,b,[10,c7(0,[0,b,bDq])]]);return j(u,bDp,a,b,h);case
6:case
10:var
i=c?e:(Q(a,[0,b,4]),[0,b,[10,c7(0,[0,b,bDs])]]);return j(u,bDr,a,b,i)}if(c)aR(bDo,a);else
Q(a,[0,b,4]);return e});h(ae,function(a){return B(0,function(a){var
c=E(a),d=_(a);w(a,50);if(a$(a,10)){var
f=c7(0,[0,d,bDt]),g=_(a);j2(a,bDu);var
h=c7(0,[0,g,bDv]);return[17,[0,f,h,C([0,c],[0,W(a)],0)]]}var
i=E(a);w(a,4);var
j=A(J,[0,i],0,b(e,jY(0,a)));w(a,5);return[11,[0,j,C([0,c],[0,W(a)],0)]]},a)});h(g,function(l,i,a,h,u){var
m=l?l[1]:1,j=i?i[1]:i,e=b4(z,[0,m],[0,j],a,h,u),n=Oo(a),t=0;if(n){var
o=n[1];if(typeof
o==="number"&&83===o){var
f=1;t=1}}if(!t)var
f=0;function
p(a){var
b=a5(a);function
f(a,b){return d(ag(a,c2,80),a,b)}var
g=d(c,a,e);return d(b[2],g,f)}function
q(o,a,n){var
c=b(y,a),d=c[1],e=aM(h,d),i=[0,n,o,[0,d,c[2]],0],l=0;if(!f&&!j){var
k=[4,i];l=1}if(!l)var
k=[20,[0,i,e,f]];var
p=j||f;return b4(g,[0,m],[0,p],a,h,[0,[0,e,k]])}if(a[13])return e;var
r=s(a);if(typeof
r==="number"){var
k=r-98|0;if(2<k>>>0){if(-94===k)return q(0,a,p(a))}else
if(1!==k&&a_(a)){var
v=no(function(b,a){throw hJ},a);return OB(v,e,function(a){var
c=p(a);return q(b(x,a),a,c)})}}return e});h(u,function(b,a,f,e){var
h=b?b[1]:1;return d(c,a,b4(g,[0,h],0,a,f,[0,e]))});h(v,function(a){return B(0,function(a){var
G=_(a),k=E(a);w(a,44);if(a[11]&&10===s(a)){var
H=W(a);R(a);var
l=c7(C([0,k],[0,H],0),[0,G,bDw]),c=s(a);if(typeof
c!=="number"&&4===c[0]&&!p(c[3],bDy))return[17,[0,l,d(S[13],0,a),0]];aR(bDx,a);R(a);return[10,l]}var
m=_(a),e=s(a),i=0;if(typeof
e==="number")if(44===e)var
f=b(v,a);else
if(51===e)var
f=b(t,uT(1,a));else
i=1;else
i=1;if(i)var
f=hH(a)?b(D,a):b(aj,a);var
n=j(af,bDz,uT(1,a),m,f),g=s(a),z=0;if(typeof
g!=="number"&&3===g[0]){var
h=j(I,a,m,n,g[1]);z=1}if(!z)var
h=n;var
A=0;if(4!==s(a)){var
B=0;if(a_(a)&&98===s(a))B=1;if(!B){var
o=h;A=1}}if(!A)var
J=a5(a),K=function(a,b){return d(ag(a,c2,81),a,b)},o=d(J[2],h,K);var
q=a_(a),L=q?OB(no(function(b,a){throw hJ},a),0,x):q,r=s(a),F=0;if(typeof
r==="number"&&4===r){var
u=[0,b(y,a)];F=1}if(!F)var
u=0;return[18,[0,o,L,u,C([0,k],0,0)]]},a)});function
aw(a){var
m=E(a);w(a,98);var
c=0;for(;;){var
d=s(a);if(typeof
d==="number"){var
g=0;if(99===d||au===d)g=1;if(g){var
i=U(c),n=E(a);w(a,99);var
o=4===s(a)?a5(a)[1]:W(a);return[0,i,bg([0,m],[0,o],n,0)]}}var
e=s(a),h=0;if(typeof
e!=="number"&&4===e[0]&&!p(e[2],bDA)){var
k=_(a),l=E(a);j2(a,bDB);var
f=[1,[0,k,[0,C([0,l],[0,W(a)],0)]]];h=1}if(!h)var
f=[0,b(al[1],a)];var
j=[0,f,c];if(99!==s(a))w(a,9);var
c=j;continue}}h(x,function(a){bI(a,1);var
b=98===s(a)?1:0,c=b?[0,B(0,aw,a)]:b;b3(a);return c});function
ax(a){var
c=E(a);w(a,12);var
d=b(e,a);return[0,d,C([0,c],0,0)]}h(y,function(a){return B(0,function(a){var
l=E(a);w(a,4);var
c=0;for(;;){var
d=s(a);if(typeof
d==="number"){var
h=0;if(5===d||au===d)h=1;if(h){var
j=U(c),m=E(a);w(a,5);return[0,j,bg([0,l],[0,W(a)],m,0)]}}var
f=s(a),i=0;if(typeof
f==="number"&&12===f){var
g=[1,B(0,ax,a)];i=1}if(!i)var
g=[0,b(e,a)];var
k=[0,g,c];if(5!==s(a))w(a,9);var
c=k;continue}},a)});h(z,function(y,n,a,f,e){var
o=y?y[1]:1,p=n?n[1]:n,i=s(a),h=0;if(typeof
i==="number")switch(i){case
6:R(a);var
k=0,z=[0,p];h=2;break;case
10:R(a);var
l=0,E=[0,p];h=1;break;case
83:if(1-o)aa(a,99);w(a,83);var
L=0,v=s(a);if(typeof
v==="number")switch(v){case
4:return e;case
6:R(a);var
k=bDE,z=bDF;h=2;L=1;break;case
98:if(a_(a))return e;break}else
if(3===v[0]){aa(a,cA);return e}if(!L){var
l=bDC,E=bDD;h=1}break}else
if(3===i[0]){if(p)aa(a,cA);var
ab=i[1];return b4(g,bDG,0,a,f,[0,j(I,a,f,d(c,a,e),ab)])}switch(h){case
0:return e;case
1:var
F=E[1],Y=l?l[1]:l,G=s(a),M=0;if(typeof
G==="number"&&14===G){var
q=OL(a),r=q[1],m=a[29][1],Z=q[2][1];if(m){var
x=m[1];a[29][1]=[0,[0,x[1],[0,[0,Z,r],x[2]]],m[2]]}else
Q(a,[0,r,89]);var
t=[1,q],H=r;M=1}if(!M)var
K=cf(a),t=[0,K],H=K[1];var
u=aM(f,H),ac=0;if(0===e[0]&&23===e[1][2][0]&&1===t[0]){Q(a,[0,u,90]);ac=1}var
J=[0,d(c,a,e),t,0],$=F?[21,[0,J,u,Y]]:[16,J];return b4(g,[0,o],[0,F],a,f,[0,[0,u,$]]);default:var
A=z[1],N=k?k[1]:k,O=uT(0,a),P=b(S[7],O),T=_(a);w(a,7);var
U=W(a),B=aM(f,T),V=C(0,[0,U],0),D=[0,d(c,a,e),[2,P],V],X=A?[21,[0,D,B,N]]:[16,D];return b4(g,[0,o],[0,A],a,f,[0,[0,B,X]])}});h(af,function(b,a,f,e){var
g=b?b[1]:1;return d(c,a,b4(z,[0,g],0,a,f,[0,e]))});h(D,function(a){return B(0,function(c){var
g=b(aB[1],c),e=g[1],v=g[2],h=B(0,function(a){var
x=E(a);w(a,15);var
h=b(aB[2],a),f=h[1],y=jt([0,v,[0,x,[0,h[2],0]]]);if(4===s(a))var
j=0,i=0;else{var
p=s(a),u=0;if(typeof
p==="number"){var
q=98!==p?1:0;if(!q){var
t=q;u=1}}if(!u)var
r=uS(f,Ok(e,a)),t=[0,hg(r,d(S[13],bDH,r))];var
j=cv(a,b(al[3],a)),i=t}var
c=iP(0,a),k=A(aB[4],e,f,c),z=86===s(c)?k:j5(c,k),l=b(al[12],c),g=l[2],m=l[1];if(g)var
o=OF(c,g),n=m;else
var
o=g,n=iU(c,m);return[0,i,z,f,o,n,j,y]},c),a=h[2],i=a[3],f=a[2],k=a[1],m=id(f),l=b4(aB[5],c,e,i,1,m);j(aB[6],c,l[2],k,f);var
n=h[1],o=C([0,a[7]],0,0);return[8,[0,k,f,l[1],e,i,a[4],a[5],a[6],o,n]]},a)});h(F,function(c,d,a){switch(d){case
1:cG(c,45);try{var
f=jl(jk(Z(bDK,a))),b=f}catch(c){c=aS(c);if(c[1]!==b_)throw c;var
b=V(Z(bDJ,a))}break;case
2:cG(c,46);try{var
g=kL(a),b=g}catch(c){c=aS(c);if(c[1]!==b_)throw c;var
b=V(Z(bDL,a))}break;case
4:try{var
h=kL(a),b=h}catch(c){c=aS(c);if(c[1]!==b_)throw c;var
b=V(Z(bDM,a))}break;default:try{var
e=jl(jk(a)),b=e}catch(c){c=aS(c);if(c[1]!==b_)throw c;var
b=V(Z(bDI,a))}}w(c,[0,d,a]);return b});h(a,function(a){var
b=ah(a);if(0!==b&&a3===aU(a,b-1|0))return bZ(a,0,b-1|0);return a});h(ai,function(j,d,c){if(2<=d){var
e=b(a,c);try{var
k=kL(e),f=k}catch(a){a=aS(a);if(a[1]!==b_)throw a;var
f=V(Z(bDN,e))}var
g=f}else{var
h=b(a,c);try{var
l=jl(jk(h)),i=l}catch(a){a=aS(a);if(a[1]!==b_)throw a;var
i=V(Z(bDO,h))}var
g=i}w(j,[1,d,c]);return g});h(G,function(a){var
f=_(a),e=E(a),c=s(a);if(typeof
c==="number")switch(c){case
0:var
h=b(S[12],a);return[1,[0,h[1],[19,h[2]]],h[3]];case
4:return[0,b(ak,a)];case
6:var
k=B(0,am,a),l=k[2];return[1,[0,k[1],[0,l[1]]],l[2]];case
21:R(a);return[0,[0,f,[26,[0,C([0,e],[0,W(a)],0)]]]];case
29:R(a);return[0,[0,f,[14,[0,0,bDQ,C([0,e],[0,W(a)],0)]]]];case
40:return[0,b(S[22],a)];case
98:var
n=b(S[17],a),i=n[2],t=n[1],u=c0<=i[1]?[13,i[2]]:[12,i[2]];return[0,[0,t,u]];case
30:case
31:R(a);var
m=31===c?1:0,r=m?bDR:bDS;return[0,[0,f,[14,[0,[1,m],r,C([0,e],[0,W(a)],0)]]]];case
74:case
105:return[0,b(an,a)]}else
switch(c[0]){case
0:var
o=c[2],v=[2,A(F,a,c[1],o)];return[0,[0,f,[14,[0,v,o,C([0,e],[0,W(a)],0)]]]];case
1:var
p=c[2],w=[3,A(ai,a,c[1],p)];return[0,[0,f,[14,[0,w,p,C([0,e],[0,W(a)],0)]]]];case
2:var
g=c[1];if(g[4])cG(a,45);R(a);var
x=[0,g[2]],y=C([0,e],[0,W(a)],0);return[0,[0,g[1],[14,[0,x,g[3],y]]]];case
3:var
q=d(H,a,c[1]);return[0,[0,q[1],[25,q[2]]]]}if(ia(a)){var
j=d(S[13],0,a);return[0,[0,j[1],[10,j]]]}aR(0,a);var
z=0;if(typeof
c!=="number"&&6===c[0]){R(a);z=1}return[0,[0,f,[14,[0,0,bDP,C([0,e],[0,0],0)]]]]});h(aj,function(a){return d(c,a,b(G,a))});h(H,function(a,c){var
q=c[3],r=c[2],j=c[1],H=E(a);w(a,[3,c]);var
t=[0,j,[0,[0,r[2],r[1]],q]];if(q)var
x=0,v=[0,t,0],u=j;else{var
e=[0,t,0],k=0;for(;;){var
f=b(S[7],a),g=[0,f,k],l=s(a),y=0;if(typeof
l==="number"&&1===l){bI(a,4);var
h=s(a),z=0;if(typeof
h!=="number"&&3===h[0]){var
i=h[1],m=i[3],n=i[2],o=i[1];R(a);var
A=[0,[0,n[2],n[1]],m];b3(a);var
p=[0,[0,o,A],e];if(!m){var
e=p,k=g;continue}var
B=U(g),d=[0,o,U(p),B];y=1;z=1}if(!z)throw[0,ap,bDT]}if(!y){aR(bDU,a);var
D=[0,f[1],bDV],F=U(g),G=U([0,D,e]),d=[0,f[1],G,F]}var
x=d[3],v=d[2],u=d[1];break}}var
I=W(a),J=aM(j,u);return[0,J,[0,v,x,C([0,H],[0,I],0)]]});h(I,function(a,i,h,g){var
c=a5(a);function
e(a,b){return d(ag(a,c2,30),a,b)}var
f=d(c[2],h,e),b=d(H,a,g);return[0,aM(i,b[1]),[24,[0,f,b,0]]]});h(ak,function(a){var
f=E(a),d=B(0,function(a){w(a,4);var
h=_(a),c=b(e,a),d=s(a),g=0;if(typeof
d==="number")if(9===d)var
f=[0,A(M,a,h,[0,c,0])];else
if(86===d)var
f=[1,[0,c,b(al[9],a),0]];else
g=1;else
g=1;if(g)var
f=[0,c];w(a,5);return f},a),c=d[2],g=W(a),h=0===c[0]?c[1]:[0,d[1],[27,c[1]]];return A(J,[0,f],[0,g],h)});h(J,function(s,r,E){var
a=E[2],F=s?s[1]:s,G=r?r[1]:r;function
c(a){return b1(a,C([0,F],[0,G],0))}function
H(a){return uw(a,C([0,F],[0,G],0))}switch(a[0]){case
0:var
I=a[1],O=H(I[2]),b=[0,[0,I[1],O]];break;case
1:var
d=a[1],P=d[10],Q=c(d[9]),b=[1,[0,d[1],d[2],d[3],d[4],d[5],d[6],d[7],d[8],Q,P]];break;case
2:var
g=a[1],R=c(g[4]),b=[2,[0,g[1],g[2],g[3],R]];break;case
3:var
h=a[1],S=c(h[4]),b=[3,[0,h[1],h[2],h[3],S]];break;case
4:var
i=a[1],T=c(i[4]),b=[4,[0,i[1],i[2],i[3],T]];break;case
5:var
f=a[1],U=c(f[7]),b=[5,[0,f[1],f[2],f[3],f[4],f[5],f[6],U]];break;case
7:var
j=a[1],V=c(j[4]),b=[7,[0,j[1],j[2],j[3],V]];break;case
8:var
e=a[1],W=e[10],X=c(e[9]),b=[8,[0,e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],X,W]];break;case
10:var
J=a[1],K=J[2],Y=c(K[2]),b=[10,[0,J[1],[0,K[1],Y]]];break;case
11:var
L=a[1],Z=c(L[2]),b=[11,[0,L[1],Z]];break;case
12:var
k=a[1],_=c(k[4]),b=[12,[0,k[1],k[2],k[3],_]];break;case
13:var
l=a[1],$=c(l[4]),b=[13,[0,l[1],l[2],l[3],$]];break;case
14:var
t=a[1],aa=c(t[3]),b=[14,[0,t[1],t[2],aa]];break;case
15:var
m=a[1],ab=c(m[4]),b=[15,[0,m[1],m[2],m[3],ab]];break;case
16:var
u=a[1],ac=c(u[3]),b=[16,[0,u[1],u[2],ac]];break;case
17:var
v=a[1],ad=c(v[3]),b=[17,[0,v[1],v[2],ad]];break;case
18:var
n=a[1],ae=c(n[4]),b=[18,[0,n[1],n[2],n[3],ae]];break;case
19:var
M=a[1],af=H(M[2]),b=[19,[0,M[1],af]];break;case
20:var
w=a[1],o=w[1],ag=w[3],ah=w[2],ai=c(o[4]),b=[20,[0,[0,o[1],o[2],o[3],ai],ah,ag]];break;case
21:var
x=a[1],y=x[1],aj=x[3],ak=x[2],al=c(y[3]),b=[21,[0,[0,y[1],y[2],al],ak,aj]];break;case
22:var
N=a[1],am=c(N[2]),b=[22,[0,N[1],am]];break;case
23:var
b=[23,[0,c(a[1][1])]];break;case
24:var
z=a[1],an=c(z[3]),b=[24,[0,z[1],z[2],an]];break;case
25:var
A=a[1],ao=c(A[3]),b=[25,[0,A[1],A[2],ao]];break;case
26:var
b=[26,[0,c(a[1][1])]];break;case
27:var
B=a[1],ap=c(B[3]),b=[27,[0,B[1],B[2],ap]];break;case
28:var
D=a[1],aq=c(D[3]),b=[28,[0,D[1],D[2],aq]];break;case
29:var
p=a[1],ar=c(p[4]),b=[29,[0,p[1],p[2],p[3],ar]];break;case
30:var
q=a[1],as=q[4],at=q[3],au=c(q[2]),b=[30,[0,q[1],au,at,as]];break;default:var
b=a}return[0,E[1],b]});h(am,function(a){var
F=E(a);w(a,6);var
c=[0,0,f[3]];for(;;){var
g=c[2],h=c[1],e=s(a);if(typeof
e==="number"){var
l=0;if(13<=e){if(au===e)l=1}else
if(7<=e)switch(e-7|0){case
2:var
y=_(a);R(a);var
c=[0,[0,[2,y],h],g];continue;case
5:var
z=E(a),o=B(0,function(c){R(c);var
a=b(i,c);return 0===a[0]?[0,a[1],f[3]]:[0,a[1],a[2]]},a),p=o[2],k=p[2],q=o[1],A=C([0,z],0,0),D=[1,[0,q,[0,p[1],A]]],r=7===s(a)?1:0,u=0;if(!r&&7===aA(1,a)){var
t=[0,k[1],[0,[0,q,65],k[2]]];u=1}if(!u)var
t=k;if(1-r)w(a,9);var
c=[0,[0,D,h],d(f[5],t,g)];continue;case
0:l=1;break}if(l){var
v=b(f[6],g),x=U(h),G=E(a);w(a,7);return[0,[0,x,bg([0,F],[0,W(a)],G,0)],v]}}var
j=b(i,a);if(0===j[0])var
n=f[3],m=j[1];else
var
n=j[2],m=j[1];if(7!==s(a))w(a,9);var
c=[0,[0,[0,m],h],d(f[5],n,g)];continue}});h(an,function(a){bI(a,5);var
t=_(a),u=E(a),d=s(a),o=0;if(typeof
d!=="number"&&5===d[0]){var
m=d[3],n=d[2];R(a);var
v=W(a),i=v,b=m,h=n,g=Z(bD1,Z(n,Z(bD0,m)));o=1}if(!o){aR(bDW,a);var
i=0,b=bDX,h=bDY,g=bDZ}b3(a);var
j=aD(ah(b)),e=ah(b)-1|0,q=0;if(!(e<0)){var
c=q;for(;;){var
f=K(b,c),k=f-100|0,w=0;if(!(21<k>>>0))switch(k){case
0:case
3:case
5:case
9:case
15:case
17:case
21:cO(j,f);w=1;break}var
r=c+1|0;if(e!==c){var
c=r;continue}break}}var
l=aZ(j);if(p(l,b))aa(a,[13,b]);return[0,t,[14,[0,[4,[0,h,l]],g,C([0,u],[0,i],0)]]]});function
ay(e,b){if(typeof
b==="number"){var
a=0;if(61<=b){var
c=b-64|0;if(27<c>>>0){if(43===c)a=1}else
if(25<c-1>>>0)a=1}else{var
d=b+Ds|0;if(17<d>>>0){if(-1<=d)a=1}else
if(13===d)a=1}if(a)return 0}throw hJ}function
az(a){var
c=s(a);if(typeof
c==="number"&&!c){var
e=d(S[16],1,a);return[0,[0,e[1]],e[2]]}return[0,[1,b(S[10],a)],0]}h(L,function(x){var
c=no(ay,x),y=_(c);if(11===aA(1,c))var
l=0,h=0;else
var
t=b(aB[1],c),l=t[2],h=t[1];var
m=B(0,function(a){var
e=cv(a,b(al[3],a));if(ia(a)&&0===e){var
f=d(S[13],bD2,a),c=f[1],h=[0,c,[0,[0,c,[2,[0,f,[0,h$(a)],0]]],0]];return[0,e,[0,c,[0,0,[0,h,0],0,0]],[0,[0,c[1],c[3],c[3]]],0]}var
i=A(aB[4],a[18],a[17],a),j=iQ(1,a),g=b(al[12],j);return[0,e,i,g[1],g[2]]},c),e=m[2],f=e[2],i=f[2],u=0;if(!i[1]){var
v=0;if(!i[3]&&i[2])v=1;if(!v){var
a=Op(c);u=1}}if(!u)var
a=c;var
g=f[2],n=g[1],k=n?(Q(a,[0,n[1][1],hn]),[0,f[1],[0,0,g[2],g[3],g[4]]]):f,z=id(k),o=bQ(a),D=o?11===s(a)?1:0:o;if(D)aa(a,60);w(a,11);var
p=Oq(Op(a),h,0,z),q=B(0,az,p),r=q[2];j(aB[6],p,r[2],0,k);var
E=aM(y,q[1]),F=m[1],G=C([0,l],0,0);return[0,[0,E,[1,[0,0,k,r[1],h,0,e[4],e[3],e[1],G,F]]]]});h(M,function(c,a,f){return B([0,a],function(c){var
a=f;for(;;){var
d=s(c);if(typeof
d==="number"&&9===d){R(c);var
a=[0,b(e,c),a];continue}return[22,[0,U(a),0]]}},c)});return[0,e,i,$,as,ad,F,M]}(nx),hL=function(c){function
f(a){var
c=E(a);R(a);var
e=C([0,c],0,0),f=b(cx[5],a),g=bQ(a)?j4(a):ns(a);function
h(a,b){return d(ag(a,c2,82),a,b)}return[0,d(g[2],f,h),e]}function
n(b){var
d=b[27][2];if(d){var
a=0;for(;;){var
c=s(b);if(typeof
c==="number"&&13===c){var
a=[0,B(0,f,b),a];continue}return U(a)}}return d}function
e(g,a){var
D=g?g[1]:g,k=E(a),c=s(a);if(typeof
c==="number")switch(c){case
6:var
m=B(0,function(a){var
c=E(a);w(a,6);var
d=jY(0,a),e=b(S[10],d);w(a,7);return[0,e,C([0,c],[0,W(a)],0)]},a),n=m[1];return[0,n,[3,[0,n,m[2]]]];case
14:if(D){var
h=OL(a),f=a[29][1],F=h[2][1];if(f){var
j=f[1],x=f[2],y=j[2],z=[0,[0,d(bA[4],F,j[1]),y],x];a[29][1]=z}else
V(bpA);return[0,h[1],[2,h]]}var
o=B(0,function(a){R(a);return[1,cf(a)]},a),p=o[1];Q(a,[0,p,89]);return[0,p,o[2]]}else
switch(c[0]){case
0:var
q=c[2],r=_(a),G=[2,A(cx[6],a,c[1],q)];return[0,r,[0,[0,r,[0,G,q,C([0,k],[0,W(a)],0)]]]];case
2:var
e=c[1],t=e[4],u=e[3],v=e[2],i=e[1];if(t)cG(a,45);w(a,[2,[0,i,v,u,t]]);return[0,i,[0,[0,i,[0,[0,v],u,C([0,k],[0,W(a)],0)]]]]}var
l=cf(a);return[0,l[1],[1,l]]}function
l(a,i,l){var
d=b(aB[2],a),g=d[1],k=d[2],h=e([0,i],a),c=h[1],f=0,m=cR(a,h[2]);return[0,m,B(0,function(m){var
a=iP(1,m),h=B(0,function(a){var
g=A(aB[4],0,0,a),m=0,e=86===s(a)?g:j5(a,g);if(l){var
f=e[2],i=0;if(f[1]){Q(a,[0,c,cl]);i=1}else{var
j=0;if(!f[2]&&!f[3]){i=1;j=1}if(!j)Q(a,[0,c,80])}}else{var
d=e[2];if(d[1])Q(a,[0,c,a2]);else{var
h=d[2],k=0;if(!h||h[2]||d[3])k=1;if(k)if(d[3])Q(a,[0,c,81]);else
Q(a,[0,c,81])}}return[0,m,e,iU(a,b(al[10],a))]},a),d=h[2],e=d[2],n=id(e),i=b4(aB[5],a,f,g,0,n);j(aB[6],a,i[2],0,e);var
o=h[1],p=C([0,k],0,0);return[0,0,e,i[1],f,g,0,d[3],d[1],p,o]},a)]}function
D(d){var
a=b(cx[2],d);return 0===a[0]?[0,a[1],c[3]]:[0,a[1],a[2]]}function
v(b,a){switch(a[0]){case
0:var
f=a[1],g=f[1];Q(b,[0,g,95]);return[0,g,[14,f[2]]];case
1:var
d=a[1],c=d[2][1],e=d[1],i=0;if(uX(c)&&p(c,bEj)&&p(c,bEk)){Q(b,[0,e,2]);i=1}if(!i&&iS(c))ce(b,[0,e,55]);return[0,e,[10,d]];case
2:return V(bEl);default:var
h=a[1][2][1];Q(b,[0,h[1],96]);return h}}function
x(f,c,i){function
a(k){var
a=iP(1,k),g=B(0,function(a){var
h=cv(a,b(al[3],a));if(f)if(c)var
e=1,d=1;else
var
e=a[18],d=0;else
if(c)var
e=0,d=1;else
var
e=0,d=0;var
g=A(aB[4],e,d,a),i=86===s(a)?g:j5(a,g);return[0,h,i,iU(a,b(al[10],a))]},a),d=g[2],e=d[2],l=id(e),h=b4(aB[5],a,f,c,0,l);j(aB[6],a,h[2],0,e);var
m=g[1],n=C([0,i],0,0);return[0,0,e,h[1],f,c,0,d[3],d[1],n,m]}var
d=0;return function(b){return B(d,a,b)}}function
y(a){w(a,86);return D(a)}function
o(h,g,e,j,i,m){var
a=B([0,g],function(a){if(!j&&!i){var
f=s(a);if(typeof
f==="number"){var
k=0;if(86<=f){if(98===f)k=1;else
if(!(87<=f)){var
l=y(a);return[0,[0,e,l[1],0],l[2]]}}else{if(82===f){if(1===e[0])var
h=e[1],t=_(a),u=function(a){var
c=E(a);w(a,82);var
e=W(a),f=d(S[19],a,[0,h[1],[10,h]]),g=b(S[10],a);return[2,[0,0,f,g,C([0,c],[0,e],0)]]},z=B([0,h[1]],u,a),g=[0,z,[0,[0,[0,t,[10,jP(bEm)]],0],0]];else
var
g=y(a);return[0,[0,e,g[1],1],g[2]]}if(!(10<=f))switch(f){case
4:k=1;break;case
1:case
9:var
A=[0,e,v(a,e),1];return[0,A,c[3]]}}if(k){var
p=cR(a,e),q=[1,p,b(x(j,i,m),a)];return[0,q,c[3]]}}var
r=[0,e,v(a,e),1];return[0,r,c[3]]}var
n=cR(a,e),o=[1,n,b(x(j,i,m),a)];return[0,o,c[3]]},h),f=a[2];return[0,[0,[0,a[1],f[1]]],f[2]]}function
g(a,ap,ao){var
r=ap,q=ao;for(;;){var
j=q[2],A=q[1],t=s(a);if(typeof
t==="number"){var
ac=0;if(1===t||au===t)ac=1;if(ac){var
aq=r?[0,j[1],[0,[0,r[1],98],j[2]]]:j,ar=b(c[6],aq);return[0,U(A),ar]}}if(12===s(a))var
as=E(a),F=B(0,function(a){w(a,12);return D(a)},a),G=F[2],at=G[2],av=C([0,as],0,0),u=[0,[1,[0,F[1],[0,G[1],av]]],at];else{var
i=_(a),f=aA(1,a),ad=0;if(typeof
f==="number"){var
k=0;if(86<=f){if(98!==f&&87<=f)k=1}else
if(82!==f)if(10<=f)k=1;else
switch(f){case
1:case
4:case
9:break;default:k=1}if(!k){var
M=0,x=0;ad=1}}if(!ad)var
ab=b(aB[1],a),M=ab[2],x=ab[1];var
N=b(aB[2],a),O=N[1],aw=ai(M,N[2]),y=s(a),ae=0;if(!x&&!O&&typeof
y!=="number"&&4===y[0]){var
Q=y[3],af=0;if(p(Q,bEn))if(p(Q,bEo))af=1;else{var
ax=E(a),S=e(0,a)[2],g=s(a),ag=0;if(typeof
g==="number"){var
m=0;if(86<=g){if(98!==g&&87<=g)m=1}else
if(82!==g)if(10<=g)m=1;else
switch(g){case
1:case
4:case
9:break;default:m=1}if(!m){var
T=o(a,i,S,0,0,0);ag=1}}if(!ag){cR(a,S);var
ay=c[3],W=B([0,i],function(a){return l(a,0,0)},a),X=W[2],az=C([0,ax],0,0),T=[0,[0,[0,W[1],[3,X[1],X[2],az]]],ay]}var
V=T}else{var
aC=E(a),Y=e(0,a)[2],h=s(a),ah=0;if(typeof
h==="number"){var
n=0;if(86<=h){if(98!==h&&87<=h)n=1}else
if(82!==h)if(10<=h)n=1;else
switch(h){case
1:case
4:case
9:break;default:n=1}if(!n){var
Z=o(a,i,Y,0,0,0);ah=1}}if(!ah){cR(a,Y);var
aD=c[3],$=B([0,i],function(a){return l(a,0,1)},a),aa=$[2],aE=C([0,aC],0,0),Z=[0,[0,[0,$[1],[2,aa[1],aa[2],aE]]],aD]}var
V=Z}if(!af){var
P=V;ae=1}}if(!ae)var
P=o(a,i,e(0,a)[2],x,O,aw);var
u=P}var
H=u[1],aj=0;if(1===H[0]&&9===s(a)){var
I=[0,_(a)];aj=1}if(!aj)var
I=0;var
J=d(c[5],u[2],j),K=s(a),ak=0;if(typeof
K==="number"){var
v=K-2|0,z=0;if(a3<v>>>0){if(cr<v+1>>>0)z=1}else
if(7===v)R(a);else
z=1;if(!z){var
L=J;ak=1}}if(!ak){var
al=uJ(bqN,9),am=Ox([0,al],s(a)),an=[0,_(a),am];a$(a,8);var
L=d(c[4],an,J)}var
r=I,q=[0,[0,H,A],L];continue}}function
h(d){var
a=B(0,function(a){var
d=E(a);w(a,0);var
b=g(a,0,[0,0,c[3]]),e=E(a);w(a,1);var
f=W(a),h=b[2],i=bg([0,d],[0,f],e,0);return[0,[0,b[1],i],h]},d),b=a[2];return[0,a[1],b[1],b[2]]}function
m(g,c,f,b){var
a=f[2][1],h=f[1];if(ay(a,bEp)){Q(g,[0,h,[21,a,0,Qa===b?1:0,1]]);return c}var
i=d(nw[32],a,c);if(i){var
j=i[1],e=0;if(E_===b){if(Aj===j)e=1}else
if(Aj===b&&E_===j)e=1;if(!e)Q(g,[0,h,[20,a]]);return A(nw[4],a,Pv,c)}return A(nw[4],a,b,c)}function
i(a,c){return B(0,function(a){var
i=c?E(a):c;w(a,52);var
e=0;for(;;){var
f=[0,B(0,function(a){var
c=b(al[2],a);if(98===s(a))var
f=a5(a),g=function(a,b){return d(ag(a,i9,83),a,b)},e=d(f[2],c,g);else
var
e=c;return[0,e,b(al[4],a)]},a),e],g=s(a);if(typeof
g==="number"&&9===g){w(a,9);var
e=f;continue}var
h=U(f);return[0,h,C([0,i],0,0)]}},a)}function
q(b,a){return a?Q(b,[0,a[1][1],7]):a}function
r(b,a){return a?Q(b,[0,a[1],68]):a}function
t(a,D,U,c,h,e,g,z,l,y){for(;;){var
E=s(a),O=0;if(typeof
E==="number"){var
m=E-1|0,k=0;if(7<m>>>0){var
F=m-81|0;if(4<F>>>0)k=1;else
switch(F){case
3:aR(0,a);R(a);continue;case
0:case
4:break;default:k=1}}else
if(!(5<m-1>>>0))k=1;if(!k&&!h&&!e)O=1}if(!O){var
n=s(a),w=0;if(typeof
n==="number"){var
P=0;if(4!==n&&98!==n){w=1;P=1}if(!P)var
G=0}else
w=1;if(w)var
N=iT(a),G=N?1:N;if(!G){r(a,z);q(a,l);var
T=0;if(!g){var
f=0;switch(c[0]){case
0:var
v=c[1][2][1],x=0;if(typeof
v!=="number"&&0===v[0])if(p(v[1],bEq)){f=1;x=1}else
x=1;if(!x)f=1;break;case
1:if(p(c[1][2][1],bEr))f=1;break;default:f=1}if(!f){var
u=iP(2,a),t=0;T=1}}if(!T)var
u=iP(1,a),t=1;var
V=cR(u,c),M=B(0,function(a){var
f=B(0,function(a){var
m=cv(a,b(al[3],a));if(h)if(e)var
d=1,c=1;else
var
d=a[18],c=0;else
if(e)var
d=0,c=1;else
var
d=0,c=0;var
i=A(aB[4],d,c,a),g=86===s(a)?i:j5(a,i),f=g[2],j=f[1],l=0;if(j&&0===t){Q(a,[0,j[1][1],hl]);var
k=[0,g[1],[0,0,f[2],f[3],f[4]]];l=1}if(!l)var
k=g;return[0,m,k,iU(a,b(al[10],a))]},a),c=f[2],d=c[2],i=id(d),g=b4(aB[5],a,h,e,0,i);j(aB[6],a,g[2],0,d);return[0,0,d,g[1],h,e,0,c[3],c[1],0,f[1]]},u),X=[0,t,V,M,g,U,C([0,y],0,0)];return[0,[0,aM(D,M[1]),X]]}}var
H=B([0,D],function(a){var
f=b(al[10],a),h=s(a);if(z){var
v=0;if(typeof
h==="number"&&82===h){aa(a,69);R(a);var
e=0}else
v=1;if(v)var
e=0}else{var
w=0;if(typeof
h==="number"&&82===h){R(a);var
G=iP(1,a),e=[0,b(S[7],G)]}else
w=1;if(w)var
e=1}var
j=s(a),p=0;if(typeof
j==="number"&&!(9<=j))switch(j){case
8:R(a);var
o=s(a),q=0;if(typeof
o==="number"){var
x=0;if(1!==o&&au!==o){q=1;x=1}if(!x)var
t=W(a)}else
q=1;if(q)var
u=bQ(a),t=u?hI(a):u;var
g=[0,c,f,e,t];p=1;break;case
4:case
6:aR(0,a);var
g=[0,c,f,e,0];p=1;break}if(!p){var
k=s(a),r=0;if(typeof
k==="number"){var
A=0;if(1!==k&&au!==k){r=1;A=1}if(!A)var
i=[0,0,function(a,b){return a}]}else
r=1;if(r)var
i=bQ(a)?j4(a):ns(a);if(typeof
e==="number")if(0===f[0])var
B=function(a,b){return d(ag(a,Rd,85),a,b)},n=e,m=f,l=d(i[2],c,B);else
var
E=function(a,b){return d(ag(a,B9,86),a,b)},n=e,m=[1,d(i[2],f[1],E)],l=c;else
var
F=function(a,b){return d(ag(a,c2,87),a,b)},n=[0,d(i[2],e[1],F)],m=f,l=c;var
g=[0,l,m,n,0]}var
D=C([0,y],[0,g[4]],0);return[0,g[1],g[2],g[3],D]},a),i=H[2],I=i[4],J=i[3],K=i[2],o=i[1],L=H[1];return 2===o[0]?[2,[0,L,[0,o[1],J,K,g,l,I]]]:[1,[0,L,[0,o,J,K,g,l,I]]]}}function
u(d,c){var
a=aA(d,c);if(typeof
a==="number"){var
b=0;if(86<=a){if(98===a||!(87<=a))b=1}else
if(82===a)b=1;else
if(!(9<=a))switch(a){case
1:case
4:case
8:b=1;break}if(b)return 1}return 0}var
k=0;function
z(a){return u(k,a)}function
$(a){var
h=_(a),i=n(a),v=s(a),T=0;if(typeof
v==="number"&&60===v&&!u(1,a)){var
ac=[0,_(a)],ad=E(a);R(a);var
w=ad,f=ac;T=1}if(!T)var
w=0,f=0;var
x=4!==aA(1,a)?1:0;if(x)var
y=98!==aA(1,a)?1:0,c=y?42===s(a)?1:0:y;else
var
c=x;if(c){var
V=E(a);R(a);var
D=V}else
var
D=c;var
F=64===s(a)?1:0;if(F)var
G=1-u(1,a),d=G?1-j0(1,a):G;else
var
d=F;if(d){var
W=E(a);R(a);var
H=W}else
var
H=d;var
I=b(aB[2],a),m=I[1],g=A(aB[3],a,d,m),U=0;if(!m&&g){var
S=b(aB[2],a),J=S[2],j=S[1];U=1}if(!U)var
J=I[2],j=m;var
k=jt([0,w,[0,D,[0,H,[0,J,0]]]]),o=s(a);if(!d&&!j&&typeof
o!=="number"&&4===o[0]){var
K=o[3];if(!p(K,bEt)){var
$=E(a),O=e(bEw,a)[2];if(z(a))return t(a,h,i,O,d,j,c,f,g,k);r(a,f);q(a,g);cR(a,O);var
aa=ai(k,$),P=B([0,h],function(a){return l(a,1,1)},a),Q=P[2],ab=C([0,aa],0,0);return[0,[0,P[1],[0,2,Q[1],Q[2],c,i,ab]]]}if(!p(K,bEu)){var
X=E(a),L=e(bEv,a)[2];if(z(a))return t(a,h,i,L,d,j,c,f,g,k);r(a,f);q(a,g);cR(a,L);var
Y=ai(k,X),M=B([0,h],function(a){return l(a,1,0)},a),N=M[2],Z=C([0,Y],0,0);return[0,[0,M[1],[0,3,N[1],N[2],c,i,Z]]]}}return t(a,h,i,e(bEs,a)[2],d,j,c,f,g,k)}function
a(e,y,x,af){var
z=e?e[1]:e,a=hf(1,y),D=ai(z,n(a)),F=E(a);w(a,40);var
j=nn(1,a),c=s(j),u=0;if(x&&typeof
c==="number"){var
h=0;if(52<=c){if(98!==c&&53<=c)h=1}else
if(41!==c&&c)h=1;if(!h){var
f=0;u=1}}if(!u)if(ia(a))var
L=d(S[13],0,j),M=a5(a),N=function(a,b){return d(ag(a,i9,90),a,b)},f=[0,d(M[2],L,N)];else{Oy(a,bEB);var
f=[0,[0,_(a),bEC]]}var
g=b(al[3],a);if(g)var
G=a5(a),H=function(a,b){return d(ag(a,zj,88),a,b)},k=[0,d(G[2],g[1],H)];else
var
k=g;var
I=E(a),l=a$(a,41);if(l)var
t=B(0,function(a){var
f=uS(0,a),c=b(cx[5],f);if(98===s(a))var
g=a5(a),h=function(a,b){return d(ag(a,c2,84),a,b)},e=d(g[2],c,h);else
var
e=c;var
i=b(al[4],a);return[0,e,i,C([0,I],0,0)]},a),o=t[1],J=a5(a),K=function(a,b){return A(ag(a,-663447790,89),a,o,b)},p=[0,[0,o,d(J[2],t[2],K)]];else
var
p=l;var
q=52===s(a)?1:0;if(q){if(1-a_(a))aa(a,16);var
r=[0,OH(a,i(a,1))]}else
var
r=q;var
v=B(0,function(a){var
ae=E(a);if(a$(a,0)){a[29][1]=[0,[0,bA[1],0],a[29][1]];var
e=0,c=nw[1],o=0;for(;;){var
B=s(a);if(typeof
B==="number"){var
p=B-2|0;if(a3<p>>>0){if(!(cr<p+1>>>0)){var
ad=U(o),x=function(c,a){return b(ju(function(a){return 1-d(bA[3],a[1],c)}),a)},k=a[29][1];if(k){var
n=k[1],y=n[1];if(k[2]){var
z=k[2],X=x(y,n[2]),A=js(z),Y=GR(z),Z=ai(A[2],X);a[29][1]=[0,[0,A[1],Z],Y]}else{var
_=x(y,n[2]);bw(function(b){return Q(a,[0,b[2],[22,b[1]]])},_);a[29][1]=0}}else
V(bpz);w(a,1);var
t=s(a),v=0;if(!af){var
S=0;if(typeof
t==="number"&&(1===t||au===t))S=1;if(!S){var
R=bQ(a);if(R){var
u=hI(a);v=1}else{var
u=R;v=1}}}if(!v)var
u=W(a);return[0,ad,C([0,ae],[0,u],0)]}}else
if(6===p){w(a,8);continue}}var
h=$(a);switch(h[0]){case
0:var
D=h[1],i=D[2];switch(i[1]){case
0:if(i[4])var
g=c,f=e;else{if(e)Q(a,[0,D[1],87]);var
g=c,f=1}break;case
1:var
F=i[2],aa=2===F[0]?m(a,c,F[1],Qa):c,g=aa,f=e;break;case
2:var
G=i[2],ab=2===G[0]?m(a,c,G[1],E_):c,g=ab,f=e;break;default:var
H=i[2],ac=2===H[0]?m(a,c,H[1],Aj):c,g=ac,f=e}break;case
1:var
I=h[1][2],J=I[4],q=I[1],j=0;switch(q[0]){case
0:var
K=q[1],r=K[2][1],T=0;if(typeof
r!=="number"&&0===r[0]){var
l=r[1],L=K[1];j=1;T=1}if(!T)j=2;break;case
1:var
P=q[1],l=P[2][1],L=P[1];j=1;break;case
2:V(bEz);break;default:j=2}switch(j){case
1:var
M=ay(l,bEx);if(M)var
N=M;else
var
O=ay(l,bEy),N=O?J:O;if(N)Q(a,[0,L,[21,l,J,0,0]]);break;case
2:break}var
g=c,f=e;break;default:var
g=m(a,c,h[1][2][1],Pv),f=e}var
e=f,c=g,o=[0,h,o];continue}}ic(a,0);return bEA},a);return[0,f,v,k,p,r,D,C([0,F],0,0)]}function
F(b,c){return B(0,function(b){return[2,a([0,c],b,b[7],0)]},b)}function
G(b){return[5,a(0,b,1,1)]}var
H=0;return[0,e,h,F,function(a){return B(H,G,a)},i,n]}(nx),aN=function(G){function
H(a){var
c=b(aB[10],a);if(a[5])ib(a,c[1]);else{var
d=c[2],g=0;if(23===d[0]){var
e=d[1],f=c[1],h=0;if(e[4])Q(a,[0,f,61]);else
if(e[5])Q(a,[0,f,62]);else{g=1;h=1}}else
g=1}return c}function
n(e,a,d){var
b=d[2][1],c=d[1];if(p(b,bEL)){if(p(b,bEM)){if(p(b,bEN)){if(iS(b))return ce(a,[0,c,55]);if(uX(b))return Q(a,[0,c,[10,jP(b)]]);if(e&&hG(b))return ce(a,[0,c,e[1]]);return 0}return a[17]?Q(a,[0,c,2]):ce(a,[0,c,55])}if(a[5])return ce(a,[0,c,55]);var
f=a[14];return f?Q(a,[0,c,[10,jP(b)]]):f}var
g=a[18];return g?Q(a,[0,c,2]):g}function
m(b,a){var
c=a[4],d=a[3],e=a[2],f=a[1];if(c)cG(b,45);var
g=E(b);w(b,[2,[0,f,e,d,c]]);return[0,f,[0,e,d,C([0,g],[0,W(b)],0)]]}function
c(e,d,a){var
h=e?e[1]:bEQ,i=d?d[1]:1,f=s(a);if(typeof
f==="number"){var
b=f-2|0;if(a3<b>>>0){if(!(cr<b+1>>>0)){var
j=function(a,b){return a};return[1,[0,W(a),j]]}}else
if(6===b){R(a);var
c=s(a);if(typeof
c==="number"){var
g=0;if(1===c||au===c)g=1;if(g)return[0,W(a)]}return bQ(a)?[0,hI(a)]:bEP}}if(bQ(a))return[1,j4(a)];if(i)aR([0,h],a);return bEO}function
e(a){var
b=s(a);if(typeof
b==="number"){var
c=0;if(1===b||au===b)c=1;if(c){var
d=function(a,b){return a};return[0,W(a),d]}}return bQ(a)?j4(a):ns(a)}function
a(h,g,e){var
b=c(0,0,g);if(0===b[0])return[0,b[1],e];var
a=U(e);if(a)var
i=function(a,b){return A(ag(a,634872468,91),a,h,b)},j=d(b[1][2],a[1],i),f=U([0,j,a[2]]);else
var
f=a;return[0,0,f]}var
I=function
b(a){return b.fun(a)},J=function
b(a){return b.fun(a)},K=function
b(a){return b.fun(a)},L=function
b(a){return b.fun(a)},M=function
b(a){return b.fun(a)},j=function
c(a,b){return c.fun(a,b)},N=function
b(a){return b.fun(a)},O=function
b(a){return b.fun(a)},k=function
d(a,b,c){return d.fun(a,b,c)},f=function
b(a){return b.fun(a)},P=function
b(a){return b.fun(a)},l=function
c(a,b){return c.fun(a,b)},T=function
b(a){return b.fun(a)},V=function
b(a){return b.fun(a)},o=function
c(a,b){return c.fun(a,b)},X=function
b(a){return b.fun(a)},q=function
c(a,b){return c.fun(a,b)},Y=function
b(a){return b.fun(a)},t=function
c(a,b){return c.fun(a,b)},g=function
b(a){return b.fun(a)},Z=function
c(a,b){return c.fun(a,b)},$=function
c(a,b){return c.fun(a,b)},u=function
c(a,b){return c.fun(a,b)},ab=function
b(a){return b.fun(a)},i=function
b(a){return b.fun(a)},r=function
d(a,b,c){return d.fun(a,b,c)},v=function
c(a,b){return c.fun(a,b)},ac=function
c(a,b){return c.fun(a,b)},x=function
b(a){return b.fun(a)};function
am(a){var
e=E(a);w(a,59);var
d=8===s(a)?1:0,f=d?W(a):d,b=c(0,0,a),g=0===b[0]?b[1]:b[1][1];return[4,[0,C([0,e],[0,ai(f,g)],0)]]}var
an=0;function
ao(a){return B(an,am,a)}function
aq(a){var
h=E(a);w(a,37);var
i=jX(1,a),d=b(S[2],i),f=1-a[5],j=f?j6(d):f;if(j)ib(a,d[1]);var
k=W(a);w(a,25);var
l=W(a);w(a,4);var
m=b(S[7],a);w(a,5);var
g=8===s(a)?1:0,n=g?W(a):g,e=c(0,bER,a),o=0===e[0]?ai(n,e[1]):e[1][1];return[14,[0,d,m,C([0,h],[0,ai(k,ai(l,o))],0)]]}var
ar=0;function
as(a){return B(ar,aq,a)}function
ad(e,d,b){var
a=b[2][1];if(a&&!a[1][2][2]){var
c=a[2];if(!c)return c}return Q(e,[0,b[1],d])}function
y(b,a){var
c=1-b[5],d=c?j6(a):c;return d?ib(b,a[1]):d}function
at(a){var
V=E(a);w(a,39);var
r=a[18],i=r?a$(a,65):r,W=ai(V,E(a));w(a,4);var
j=C([0,W],0,0),e=jY(1,a),f=s(e),h=0;if(typeof
f==="number")if(24<=f)if(29<=f)h=1;else
switch(f-24|0){case
0:var
O=B(0,aB[9],e),o=O[2],ac=C([0,o[2]],0,0),g=o[3],c=[0,[1,[0,O[1],[0,o[1],0,ac]]]];break;case
3:var
P=B(0,aB[8],e),p=P[2],ae=C([0,p[2]],0,0),g=p[3],c=[0,[1,[0,P[1],[0,p[1],2,ae]]]];break;case
4:var
R=B(0,aB[7],e),q=R[2],af=C([0,q[2]],0,0),g=q[3],c=[0,[1,[0,R[1],[0,q[1],1,af]]]];break;default:h=1}else
if(8===f)var
g=0,c=0;else
h=1;else
h=1;if(h)var
X=nn(1,e),g=0,c=[0,[0,b(S[8],X)]];var
k=s(a);if(typeof
k==="number"){if(17===k){if(c){var
l=c[1];if(0===l[0])var
t=[1,A(G[2],bES,a,l[1])];else{var
v=l[1];ad(a,28,v);var
t=[0,v]}if(i)w(a,63);else
w(a,17);var
Y=b(S[7],a);w(a,5);var
Z=jX(1,a),u=b(S[2],Z);y(a,u);return[21,[0,t,Y,u,0,j]]}throw[0,ap,bET]}if(63===k){if(c){var
m=c[1];if(0===m[0])var
x=[1,A(G[2],bEU,a,m[1])];else{var
D=m[1];ad(a,29,D);var
x=[0,D]}w(a,63);var
_=b(S[10],a);w(a,5);var
$=jX(1,a),z=b(S[2],$);y(a,z);return[22,[0,x,_,z,i,j]]}throw[0,ap,bEV]}}bw(function(b){return Q(a,b)},g);if(i)w(a,63);else
w(a,8);if(c)var
n=c[1],aa=0===n[0]?[0,[1,d(G[1],a,n[1])]]:[0,[0,n[1]]],F=aa;else
var
F=c;var
H=s(a),T=0;if(typeof
H==="number"){var
I=8!==H?1:0;if(!I){var
J=I;T=1}}if(!T)var
J=[0,b(S[7],a)];w(a,8);var
K=s(a),U=0;if(typeof
K==="number"){var
L=5!==K?1:0;if(!L){var
M=L;U=1}}if(!U)var
M=[0,b(S[7],a)];w(a,5);var
ab=jX(1,a),N=b(S[2],ab);y(a,N);return[20,[0,F,J,M,N,j]]}var
av=0;function
aw(a){return B(av,at,a)}function
ae(a){var
c=hH(a)?H(a):b(S[2],a),d=1-a[5],e=d?j6(c):d;if(e)ib(a,c[1]);return c}function
ax(a){var
b=E(a);w(a,43);var
c=ae(a);return[0,c,C([0,b],0,0)]}function
ay(a){var
d=E(a);w(a,16);var
e=ai(d,E(a));w(a,4);var
f=b(S[7],a);w(a,5);var
g=ae(a),c=43===s(a)?1:0,h=c?[0,B(0,ax,a)]:c;return[24,[0,f,g,h,C([0,e],0,0)]]}var
az=0;function
aC(a){return B(az,ay,a)}function
aD(a){if(1-a[11])aa(a,36);var
o=E(a),p=_(a);w(a,19);var
g=8===s(a)?1:0,h=g?W(a):g,m=0;if(8!==s(a)&&!iT(a)){var
e=[0,b(S[7],a)];m=1}if(!m)var
e=0;var
q=aM(p,_(a)),f=c(0,0,a),n=0;if(0===f[0])var
i=f[1];else{var
l=f[1];if(e){var
r=function(a,b){return d(ag(a,c2,92),a,b)},k=[0,d(l[2],e[1],r)],j=h;n=1}else
var
i=l[1]}if(!n)var
k=e,j=ai(h,i);return[28,[0,k,C([0,o],[0,j],0),q]]}var
aE=0;function
aF(a){return B(aE,aD,a)}function
aG(a){var
m=E(a);w(a,20);w(a,4);var
i=b(S[7],a);w(a,5);w(a,0);var
c=bEW;for(;;){var
g=c[2],f=s(a);if(typeof
f==="number"){var
j=0;if(1===f||au===f)j=1;if(j){var
k=U(g);w(a,1);var
n=e(a),o=i[1];return[29,[0,i,k,C([0,m],[0,n[1]],0),o]]}}var
l=c[1],h=u1(0,function(h){return function(a){var
j=E(a),f=s(a),i=0;if(typeof
f==="number"&&36===f){if(h)aa(a,32);w(a,36);var
g=W(a),c=0;i=1}if(!i){w(a,33);var
g=0,c=[0,b(S[7],a)]}var
k=h||(0===c?1:0);w(a,86);var
l=ai(g,e(a)[1]);function
m(c){if(typeof
c==="number"){var
a=c-1|0,b=0;if(32<a>>>0){if(35===a)b=1}else
if(30<a-1>>>0)b=1;if(b)return 1}return 0}var
n=1,o=1===a[9]?a:[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],n,a[10],a[11],a[12],a[13],a[14],a[15],a[16],a[17],a[18],a[19],a[20],a[21],a[22],a[23],a[24],a[25],a[26],a[27],a[28],a[29],a[30]],p=d(S[4],m,o);return[0,[0,c,p,C([0,j],[0,l],0)],k]}}(l),a),c=[0,h[2],[0,h[1],g]];continue}}var
aH=0;function
aI(a){return B(aH,aG,a)}function
aJ(a){var
i=E(a),j=_(a);w(a,22);if(bQ(a))Q(a,[0,j,21]);var
f=b(S[7],a),e=c(0,0,a);if(0===e[0])var
h=f,g=e[1];else
var
k=function(a,b){return d(ag(a,c2,93),a,b)},h=d(e[1][2],f,k),g=0;return[30,[0,h,C([0,i],[0,g],0)]]}var
aK=0;function
aL(a){return B(aK,aJ,a)}function
aN(a){var
r=E(a);w(a,23);var
h=b(S[15],a);if(34===s(a))var
p=a5(a),q=function(b,a){var
c=a[1];return[0,c,A(ag(b,o3,31),b,c,a[2])]},c=d(p[2],h,q);else
var
c=h;var
i=s(a),n=0;if(typeof
i==="number"&&34===i){var
f=[0,B(0,function(a){var
i=E(a);w(a,34);var
j=W(a),c=4===s(a)?1:0;if(c){w(a,4);var
k=[0,d(S[18],a,39)];w(a,5);var
f=k}else
var
f=c;var
g=b(S[15],a);if(38===s(a))var
h=g;else
var
l=e(a),m=function(b,a){var
c=a[1];return[0,c,A(ag(b,o3,94),b,c,a[2])]},h=d(l[2],g,m);return[0,f,h,C([0,i],[0,j],0)]},a)];n=1}if(!n)var
f=0;var
j=s(a),o=0;if(typeof
j==="number"&&38===j){w(a,38);var
k=b(S[15],a),l=k[1],t=e(a),u=function(a,b){return A(ag(a,o3,95),a,l,b)},g=[0,[0,l,d(t[2],k[2],u)]];o=1}if(!o)var
g=0;var
m=0===f?1:0,v=m?0===g?1:0:m;if(v)Q(a,[0,c[1],33]);return[31,[0,c,f,g,C([0,r],0,0)]]}var
aO=0;function
aP(a){return B(aO,aN,a)}function
aQ(c){var
d=b(aB[9],c),e=a(0,c,d[1]),f=0,g=d[3];bw(function(a){return Q(c,a)},g);var
h=C([0,d[2]],[0,e[1]],0);return[34,[0,e[2],f,h]]}var
aS=0;function
aT(a){return B(aS,aQ,a)}function
aV(c){var
d=b(aB[8],c),e=a(2,c,d[1]),f=2,g=d[3];bw(function(a){return Q(c,a)},g);var
h=C([0,d[2]],[0,e[1]],0);return[34,[0,e[2],f,h]]}var
aW=0;function
aX(a){return B(aW,aV,a)}function
aY(c){var
d=b(aB[7],c),e=a(1,c,d[1]),f=1,g=d[3];bw(function(a){return Q(c,a)},g);var
h=C([0,d[2]],[0,e[1]],0);return[34,[0,e[2],f,h]]}var
aZ=0;function
a0(a){return B(aZ,aY,a)}function
a1(a){var
e=E(a);w(a,25);var
f=ai(e,E(a));w(a,4);var
g=b(S[7],a);w(a,5);var
h=jX(1,a),c=b(S[2],h),d=1-a[5],i=d?j6(c):d;if(i)ib(a,c[1]);return[35,[0,g,c,C([0,f],0,0)]]}var
a4=0;function
a6(a){return B(a4,a1,a)}function
a7(a){var
W=E(a),e=b(S[7],a),i=s(a),j=e[2];if(10===j[0]&&typeof
i==="number"&&86===i){var
m=j[1],h=m[2][1];w(a,86);if(d(bA[3],h,a[3]))Q(a,[0,e[1],[16,bEY,h]]);var
n=a[30],o=a[29],p=a[28],q=a[27],r=a[26],t=a[25],u=a[24],v=a[23],x=a[22],y=a[21],z=a[20],A=a[19],B=a[18],D=a[17],F=a[16],G=a[15],I=a[14],J=a[13],K=a[12],L=a[11],M=a[10],N=a[9],O=a[8],P=a[7],R=a[6],T=a[5],U=a[4],V=d(bA[4],h,a[3]),f=[0,a[1],a[2],V,U,T,R,P,O,N,M,L,K,J,I,G,F,D,B,A,z,y,x,v,u,t,r,q,p,o,n],Y=hH(f)?H(f):b(S[2],f);return[27,[0,m,Y,C([0,W],0,0)]]}var
g=c(bEX,0,a);if(0===g[0])var
l=e,k=g[1];else
var
X=function(a,b){return d(ag(a,c2,96),a,b)},l=d(g[1][2],e,X),k=0;return[19,[0,l,0,C(0,[0,k],0)]]}var
a8=0;function
a9(a){return B(a8,a7,a)}function
ba(e){var
k=b(S[7],e),f=c(bEZ,0,e);if(0===f[0])var
g=k,l=f[1];else
var
u=function(a,b){return d(ag(a,c2,97),a,b)},g=d(f[1][2],k,u),l=0;var
m=e[19];if(m){var
n=g[2],j=0;if(14===n[0]){var
o=n[1],r=0,p=o[1];if(typeof
p!=="number"&&0===p[0]){var
a=o[2],q=1<ah(a)?1:0;if(q)var
s=aU(a,ah(a)-1|0),i=aU(a,0)===s?1:0;else
var
i=q;var
t=i?[0,bZ(a,1,ah(a)-2|0)]:i,h=t;r=1}if(!r)j=1}else
j=1;if(j)var
h=0}else
var
h=m;return[19,[0,g,h,C(0,[0,l],0)]]}var
bb=0;function
af(a){return B(bb,ba,a)}function
aj(a){var
b=s(a),d=0;if(typeof
b!=="number"&&4===b[0]&&!p(b[3],bE2)){R(a);var
c=s(a);if(typeof
c!=="number"&&2===c[0])return m(a,c[1]);aR(bE3,a);d=1}if(!d)aR(bE0,a);return[0,h$(a),bE1]}function
z(i,g,a){function
e(a){return i?b(al[2],a):d(S[13],0,a)}var
c=aA(1,a);if(typeof
c==="number")switch(c){case
1:case
9:case
113:return[0,e(a),0]}else
if(4===c[0]&&!p(c[3],bE4)){var
j=cf(a);R(a);return[0,j,[0,e(a)]]}var
f=s(a);if(g&&typeof
f==="number"){var
h=0;if(46===f||61===f)h=1;if(h){aa(a,g[1]);R(a);return[0,b(al[2],a),0]}}return[0,e(a),0]}function
bc(G,a,F,E){var
i=G,h=E;for(;;){var
H=i?i[1]:1,j=s(a);if(typeof
j==="number"){var
B=0;if(1===j||au===j)B=1;if(B)return U(h)}if(1-H)aa(a,84);if(2===F){var
k=s(a),q=0;if(typeof
k==="number")if(46===k)var
c=bE6;else
if(61===k)var
c=bE9;else
q=1;else
q=1;if(q)var
c=0;var
l=s(a),C=0;if(typeof
l==="number"){var
D=0;if(46!==l&&61!==l)D=1;if(!D){var
w=1;C=1}}if(!C)var
w=0;if(w){var
e=cf(a),f=s(a),r=0;if(typeof
f==="number")switch(f){case
1:case
9:case
113:n(0,a,e);var
m=[0,0,0,e];r=1;break}else
if(4===f[0]&&!p(f[3],bE7)){var
g=aA(1,a),t=0;if(typeof
g==="number")switch(g){case
1:case
9:case
113:var
o=[0,c,0,b(al[2],a)];t=1;break}else
if(4===g[0]&&!p(g[3],bE8)){var
I=cf(a);R(a);var
o=[0,c,[0,b(al[2],a)],I];t=1}if(!t){n(0,a,e);R(a);var
o=[0,0,[0,d(S[13],0,a)],e]}var
m=o;r=1}if(!r)var
x=z(1,0,a),m=[0,c,x[2],x[1]];var
y=m}else
var
A=z(0,0,a),y=[0,0,A[2],A[1]];var
v=y}else
var
u=z(1,bE5,a),v=[0,0,u[2],u[1]];var
i=[0,a$(a,9)],h=[0,v,h];continue}}function
ak(a,g){var
h=s(a);if(typeof
h==="number"&&a2===h){var
f=B(0,function(a){R(a);var
c=s(a);if(typeof
c!=="number"&&4===c[0]&&!p(c[3],bE$)){R(a);return 2<=g?[0,d(S[13],0,a)]:[0,b(al[2],a)]}aR(bE_,a);return 0},a),c=f[2],e=c?[0,[0,f[1],c[1]]]:c,i=e?[0,[1,e[1]]]:e;return i}w(a,0);var
j=bc(0,a,g,0);w(a,1);return[0,[0,j]]}function
D(e,b){var
a=c(0,0,e);if(0===a[0])return[0,a[1],b];function
f(b,a){var
c=a[1];return[0,c,A(ag(b,vk,98),b,c,a[2])]}return[0,0,d(a[1][2],b,f)]}function
bd(x){var
a=hf(1,x),j=E(a);w(a,50);var
h=s(a),c=0;if(typeof
h==="number")switch(h){case
46:if(a_(a)){w(a,46);var
k=s(a),t=0;if(typeof
k==="number"){var
u=0;if(a2!==k&&k)u=1;if(!u){var
f=1;c=2;t=1}}if(!t){var
e=1;c=1}}break;case
61:if(a_(a)){var
i=aA(1,a),g=0;if(typeof
i==="number")switch(i){case
0:R(a);var
f=0;c=2;g=2;break;case
106:R(a);aR(0,a);var
f=0;c=2;g=2;break;case
9:g=1;break}else
if(4===i[0]&&!p(i[3],bFa))g=1;switch(g){case
2:break;case
0:R(a);var
e=0;c=1;break;default:var
e=2;c=1}}break;case
0:case
106:var
f=2;c=2;break}else
if(2===h[0]){var
r=D(a,m(a,h[1])),F=C([0,j],[0,r[1]],0);return[25,[0,2,r[2],0,0,F]]}switch(c){case
0:var
e=2;break;case
1:break;default:var
y=ak(a,f),l=D(a,aj(a)),z=C([0,j],[0,l[1]],0);return[25,[0,f,l[2],0,y,z]]}var
A=2<=e?d(S[13],0,a):b(al[2],a),n=s(a),v=0;if(typeof
n==="number"&&9===n){w(a,9);var
o=ak(a,e);v=1}if(!v)var
o=0;var
q=D(a,aj(a)),B=C([0,j],[0,q[1]],0);return[25,[0,e,q[2],[0,A],o,B]]}var
be=0;function
F(a){return B(be,bd,a)}h(I,function(a){var
b=_(a),c=E(a);w(a,8);return[0,b,[15,[0,C([0,c],[0,e(a)[1]],0)]]]});h(J,function(a){var
j=E(a),b=B(0,function(a){w(a,32);var
l=0;if(8!==s(a)&&!iT(a)){var
j=d(S[13],0,a),k=j[2][1];if(1-d(bA[3],k,a[3]))aa(a,[15,k]);var
b=[0,j];l=1}if(!l)var
b=0;var
e=c(0,0,a),m=0;if(0===e[0])var
f=e[1];else{var
i=e[1];if(b){var
n=function(a,b){return d(ag(a,i9,99),a,b)},h=[0,d(i[2],b[1],n)],g=0;m=1}else
var
f=i[1]}if(!m)var
h=b,g=f;return[0,h,g]},a),e=b[2],f=e[1],g=b[1],h=0===f?1:0;if(h)var
k=a[8],l=k||a[9],i=1-l;else
var
i=h;if(i)Q(a,[0,g,35]);return[0,g,[1,[0,f,C([0,j],[0,e[2]],0)]]]});h(K,function(a){var
g=E(a),b=B(0,function(a){w(a,35);var
l=0;if(8!==s(a)&&!iT(a)){var
j=d(S[13],0,a),k=j[2][1];if(1-d(bA[3],k,a[3]))aa(a,[15,k]);var
b=[0,j];l=1}if(!l)var
b=0;var
e=c(0,0,a),m=0;if(0===e[0])var
f=e[1];else{var
i=e[1];if(b){var
n=function(a,b){return d(ag(a,i9,cA),a,b)},h=[0,d(i[2],b[1],n)],g=0;m=1}else
var
f=i[1]}if(!m)var
h=b,g=f;return[0,h,g]},a),e=b[2],f=b[1];if(1-a[8])Q(a,[0,f,34]);var
h=C([0,g],[0,e[2]],0);return[0,f,[3,[0,e[1],h]]]});h(L,function(a){var
c=B(0,function(a){var
e=E(a);w(a,26);var
f=ai(e,E(a));w(a,4);var
g=b(S[7],a);w(a,5);var
c=b(S[2],a),d=1-a[5],h=d?j6(c):d;if(h)ib(a,c[1]);return[36,[0,g,c,C([0,f],0,0)]]},a),d=c[1];ce(a,[0,d,38]);return[0,d,c[2]]});h(M,function(a){var
c=b(S[15],a),f=c[1],g=e(a);function
h(a,b){return A(ag(a,o3,cm),a,f,b)}return[0,f,[0,d(g[2],c[2],h)]]});h(j,function(j,a){if(1-a_(a))aa(a,10);var
k=ai(j,E(a));w(a,61);bI(a,1);var
f=b(al[2],a),l=98===s(a)?hg(a,f):f,m=b(al[3],a);w(a,82);var
g=b(al[1],a);b3(a);var
e=c(0,0,a);if(0===e[0])var
i=g,h=e[1];else
var
n=function(a,b){return d(ag(a,iZ,cX),a,b)},i=d(e[1][2],g,n),h=0;return[0,l,m,i,C([0,k],[0,h],0)]});h(N,function(a){return B(0,function(a){var
b=E(a);w(a,60);return[11,d(j,b,a)]},a)});h(O,function(a){if(nq(1,a)&&!Ov(1,a)){var
c=B(0,b(j,0),a);return[0,c[1],[32,c[2]]]}return b(S[2],a)});h(k,function(o,z,a){var
A=o?o[1]:o;if(1-a_(a))aa(a,11);var
B=ai(z,E(a));w(a,62);var
D=E(a);w(a,61);var
F=ai(B,D);bI(a,1);var
r=b(al[2],a),e=98===s(a)?hg(a,r):r,f=b(al[3],a),t=s(a),v=0;if(typeof
t==="number"&&86===t){w(a,86);var
g=[0,b(al[1],a)];v=1}if(!v)var
g=0;if(A){var
u=s(a),x=0;if(typeof
u==="number"&&82===u){aa(a,70);R(a);var
y=0;if(8!==s(a)&&!iT(a)){var
p=[0,b(al[1],a)];y=1}if(!y)var
p=0}else
x=1;if(x)var
p=0;var
m=p}else{w(a,82);var
m=[0,b(al[1],a)]}b3(a);var
q=c(0,0,a);if(0===q[0])var
l=m,k=g,j=f,i=e,h=q[1];else{var
n=q[1][2];if(m)var
G=function(a,b){return d(ag(a,iZ,b8),a,b)},l=[0,d(n,m[1],G)],k=g,j=f,i=e,h=0;else
if(g)var
H=0,I=function(a,b){return d(ag(a,iZ,ci),a,b)},l=H,k=[0,d(n,g[1],I)],j=f,i=e,h=0;else
if(f)var
J=0,K=0,L=function(a,b){return d(ag(a,zj,cl),a,b)},l=J,k=K,j=[0,d(n,f[1],L)],i=e,h=0;else
var
M=0,N=0,O=0,l=M,k=N,j=O,P=0,i=d(n,e,function(a,b){return d(ag(a,i9,a2),a,b)}),h=P}return[0,i,j,l,k,C([0,F],[0,h],0)]});h(f,function(a){return B(0,function(a){var
b=E(a);w(a,60);return[12,A(k,bFb,b,a)]},a)});h(P,function(a){var
c=aA(1,a);if(typeof
c==="number"&&61===c){var
e=B(0,d(k,bFc,0),a);return[0,e[1],[33,e[2]]]}return b(S[2],a)});h(l,function(h,a){if(1-a_(a))aa(a,16);var
i=ai(h,E(a));w(a,53);var
c=b(al[2],a),j=41===s(a)?c:hg(a,c),f=b(al[3],a),k=41===s(a)?f:cv(a,f),g=b(al[7],a),l=e(a);function
m(b,a){var
c=a[1];return[0,c,A(ag(b,PJ,hn),b,c,a[2])]}var
n=d(l[2],g[2],m),o=C([0,i],0,0);return[0,j,k,g[1],n,o]});h(T,function(a){return B(0,function(a){var
b=E(a);w(a,60);return[8,d(l,b,a)]},a)});h(V,function(a){var
d=nq(1,a),e=1,f=d||Ow(e,a);if(f){var
c=B(0,b(l,0),a);return[0,c[1],[26,c[2]]]}return af(a)});h(o,function(W,V){var
a=hf(1,V),X=ai(W,E(a));w(a,40);var
k=d(S[13],0,a),c=s(a),I=0;if(typeof
c==="number"){var
J=0;if(98!==c&&c)J=1;if(!J){var
l=hg(a,k);I=1}}if(!I)var
l=k;var
m=b(al[3],a),n=s(a),K=0;if(typeof
n==="number"&&!n){var
o=cv(a,m);K=1}if(!K)var
o=m;var
q=a$(a,41);if(q){var
r=b(al[5],a),t=s(a),L=0;if(typeof
t==="number"&&!t){var
Q=a5(a),T=function(a,c){return bf(b(ag(a,QL,38),a),c)},u=[0,d(Q[2],r,T)];L=1}if(!L)var
u=[0,r];var
v=u}else
var
v=q;var
f=s(a),M=0;if(typeof
f!=="number"&&4===f[0]&&!p(f[3],bFd)){R(a);var
g=0;for(;;){var
h=[0,b(al[5],a),g],i=s(a);if(typeof
i==="number"&&9===i){w(a,9);var
g=h;continue}var
j=U(h),G=s(a),N=0;if(typeof
G==="number"&&!G){var
H=OG(a,j);N=1}if(!N)var
H=j;var
x=H;M=1;break}}if(!M)var
x=0;var
y=s(a),O=0;if(typeof
y==="number"&&52===y){var
z=d(hL[5],a,0),B=s(a),P=0;if(typeof
B==="number"&&!B){var
D=[0,OH(a,z)];P=1}if(!P)var
D=[0,z];var
F=D;O=1}if(!O)var
F=0;var
Y=d(al[6],1,a),Z=e(a);function
_(b,a){var
c=a[1];return[0,c,A(ag(b,PJ,hl),b,c,a[2])]}var
$=d(Z[2],Y,_);return[0,l,o,$,v,x,F,C([0,X],0,0)]});h(X,function(a){return B(0,function(a){var
b=E(a);w(a,60);return[5,d(o,b,a)]},a)});h(q,function(f,a){var
m=f?f[1]:f,n=ai(m,E(a));w(a,15);var
o=hg(a,d(S[13],0,a)),g=B(0,function(a){var
h=cv(a,b(al[3],a)),i=b(al[8],a);w(a,86);var
c=b(al[1],a);bI(a,1);var
j=s(a);b3(a);if(66===j)var
f=a5(a),g=function(a,b){return d(ag(a,iZ,33),a,b)},e=d(f[2],c,g);else
var
e=c;return[12,[0,h,i,e,0]]},a),h=b(al[11],a),i=c(0,0,a);if(0===i[0])var
k=h,e=g,j=i[1];else{var
l=i[1][2];if(h)var
q=function(a,b){return d(ag(a,QB,je),a,b)},k=[0,d(l,h[1],q)],e=g,j=0;else
var
r=0,k=r,t=0,e=d(l,g,function(a,b){return d(ag(a,iZ,a3),a,b)}),j=t}var
p=[0,e[1],e];return[0,o,p,k,C([0,n],[0,j],0)]});h(Y,function(a){return B(0,function(a){var
c=E(a);w(a,60);var
b=s(a),e=0;if(typeof
b==="number"&&64===b){aa(a,67);w(a,64);e=1}return[7,d(q,[0,c],a)]},a)});h(t,function(a,i){var
j=ai(i,E(a));w(a,24);var
k=d(S[13],bFe,a),f=b(al[9],a),e=c(0,0,a);if(0===e[0])var
h=f,g=e[1];else
var
l=function(a,b){return d(ag(a,B9,eV),a,b)},h=d(e[1][2],f,l),g=0;return[0,k,h,C([0,j],[0,g],0)]});h(g,function(a){return B(0,function(a){var
b=E(a);w(a,60);return[13,d(t,a,b)]},a)});h(Z,function(f,a){var
c=_(a),g=E(a);w(a,60);var
h=ai(g,E(a));j2(a,bFi);if(!f&&10!==s(a))return B([0,c],function(a){var
b=s(a),i=0;if(typeof
b!=="number"&&2===b[0]){var
o=m(a,b[1]),j=a5(a),k=function(b,a){var
c=a[1];return[0,c,A(ag(b,vk,41),b,c,a[2])]},f=[1,d(j[2],o,k)];i=1}if(!i)var
f=[0,hg(a,d(S[13],0,a))];var
g=u1(0,function(a){var
t=E(a);w(a,0);var
b=0,h=0;for(;;){var
i=s(a);if(typeof
i==="number"){var
p=0;if(1===i||au===i)p=1;if(p){var
j=U(h),o=0===j?1:0,v=o?E(a):o;w(a,1);return[0,[0,j,bg([0,t],[0,e(a)[1]],v,0)],b]}}var
k=d(u,bFf,a),f=k[2],g=0;if(b)if(b[1])if(10===f[0]){aa(a,79);var
c=b}else
g=1;else
switch(f[0]){case
6:var
l=f[1][2],q=0;if(l)switch(l[1][0]){case
4:case
6:q=1;break}if(!q)aa(a,79);var
c=b;break;case
10:aa(a,78);var
c=b;break;default:g=1}else
switch(f[0]){case
6:var
m=f[1][2],r=0;if(m)switch(m[1][0]){case
4:case
6:var
n=b;r=1;break}if(!r)var
n=bFg;var
c=n;break;case
10:var
c=bFh;break;default:g=1}if(g)var
c=b;var
b=c,h=[0,k,h];continue}},a),c=g[2],l=c?c[1]:c,n=C([0,h],0,0);return[9,[0,f,g[1],l,n]]},a);return B([0,c],b($,h),a)});h($,function(i,a){var
j=E(a);w(a,10);var
k=E(a);j2(a,bFj);var
l=jt([0,i,[0,j,[0,k,[0,E(a),0]]]]),f=b(al[9],a),e=c(0,0,a);if(0===e[0])var
h=e[1],g=f;else
var
m=0,n=function(a,b){return d(ag(a,B9,cr),a,b)},h=m,g=d(e[1][2],f,n);return[10,[0,g,C([0,l],[0,h],0)]]});h(u,function(h,a){var
c=h?h[1]:h;if(1-a_(a))aa(a,13);var
e=aA(1,a);if(typeof
e==="number")switch(e){case
24:return b(g,a);case
40:return b(X,a);case
46:if(50===s(a))return F(a);break;case
49:if(c)return d(x,[0,c],a);break;case
53:return b(T,a);case
61:var
j=s(a);if(typeof
j==="number"&&50===j&&c)return F(a);return b(N,a);case
62:return b(f,a);case
15:case
64:return b(Y,a)}else
if(4===e[0]&&!p(e[3],bFk))return d(Z,c,a);if(c){var
i=s(a);if(typeof
i==="number"&&50===i){aa(a,82);return b(S[2],a)}return b(g,a)}return b(S[2],a)});h(ab,function(a){j2(a,bFl);var
b=s(a);if(typeof
b!=="number"&&2===b[0])return m(a,b[1]);var
c=[0,_(a),bFm];aR(bFn,a);return c});h(i,function(f){var
g=b(ab,f),h=g[2],a=g[1],e=c(0,0,f);if(0===e[0])return[0,[0,a,h],e[1]];var
i=0;function
j(b,c){return A(ag(b,vk,au),b,a,c)}return[0,[0,a,d(e[1][2],h,j)],i]});h(r,function(d,a,c){var
f=d?d[1]:1,b=s(a);if(typeof
b==="number"){var
e=0;if(1===b||au===b)e=1;if(e)return U(c)}if(1-f)aa(a,85);var
g=B(0,function(a){var
e=cf(a),b=s(a),d=0;if(typeof
b!=="number"&&4===b[0]&&!p(b[3],bFo)){R(a);var
c=[0,cf(a)];d=1}if(!d)var
c=0;return[0,e,c]},a);return A(r,[0,a$(a,9)],a,[0,g,c])});h(v,function(b,a){return bw(function(c){var
a=c[2];return a[2]?0:n(bFp,b,a[1])},a)});h(ac,function(h,n){var
a=Om(1,hf(1,n)),e=E(a),g=_(a);w(a,49);var
f=s(a);if(typeof
f==="number")if(53<=f){if(!(63<=f))switch(f+QX|0){case
0:return B([0,g],function(a){if(1-a_(a))aa(a,15);var
c=B(0,b(l,0),a),d=[0,c[1],[26,c[2]]];return[18,[0,[0,d],0,0,0,C([0,e],0,0)]]},a);case
8:if(0!==aA(1,a))return B([0,g],function(a){if(1-a_(a))aa(a,15);var
c=aA(1,a);if(typeof
c==="number"){if(48===c){aa(a,0);w(a,61);return[18,[0,0,0,0,0,C([0,e],0,0)]]}if(a2===c){w(a,61);var
g=_(a);w(a,a2);var
d=b(i,a),h=C([0,e],[0,d[2]],0);return[18,[0,0,[0,[1,[0,g,0]]],[0,d[1]],0,h]]}}var
f=B(0,b(j,0),a),k=[0,f[1],[32,f[2]]];return[18,[0,[0,k],0,0,0,C([0,e],0,0)]]},a);break;case
9:return B([0,g],function(c){var
a=B(0,function(a){return b(d(k,0,0),a)},c),f=[0,a[1],[33,a[2]]];return[18,[0,[0,f],0,0,0,C([0,e],0,0)]]},a)}}else
if(36===f)return B([0,g],function(i){var
n=ai(e,E(i)),o=B(0,function(a){return w(a,36)},i),a=On(1,i);if(hH(a))var
g=0,f=[0,b(aB[10],a)];else
if(j1(a))var
g=0,f=[0,d(hL[3],a,h)];else
if(48===s(a))var
g=0,f=[0,b(aB[11],a)];else{var
k=b(S[10],a),j=c(0,0,a);if(0===j[0])var
m=j[1],l=k;else
var
q=0,r=function(a,b){return d(ag(a,c2,hP),a,b)},m=q,l=d(j[1][2],k,r);var
g=m,f=[1,l]}var
p=C([0,n],[0,g],0);return[17,[0,o[1],f,p]]},a);if(j1(a))return B([0,g],function(a){var
b=d(hL[3],a,h);return[18,[0,[0,b],0,0,1,C([0,e],0,0)]]},a);if(hH(a))return B([0,g],function(a){b(nr(a),h);var
c=b(aB[10],a);return[18,[0,[0,c],0,0,1,C([0,e],0,0)]]},a);if(typeof
f==="number")if(29<=f){if(48===f){if(a[27][1])return B([0,g],function(a){var
b=d(S[3],[0,h],a);return[18,[0,[0,b],0,0,1,C([0,e],0,0)]]},a)}else
if(a2===f)return B([0,g],function(a){var
j=_(a);w(a,a2);var
k=a[27][3],c=s(a),h=0;if(typeof
c!=="number"&&4===c[0]&&!p(c[3],bFs)){R(a);var
m=k?[0,d(S[13],0,a)]:(aa(a,13),0),f=m;h=1}if(!h)var
f=0;var
g=b(i,a),l=C([0,e],[0,g[2]],0);return[18,[0,0,[0,[1,[0,j,f]]],[0,g[1]],1,l]]},a)}else{var
m=0;if(24===f||27<=f)m=1;if(m)return B([0,g],function(a){var
b=d(S[3],[0,h],a);return[18,[0,[0,b],0,0,1,C([0,e],0,0)]]},a)}var
o=a$(a,61)?0:1;return a$(a,0)?B([0,g],function(a){var
h=A(r,0,a,0);w(a,1);var
f=s(a),m=0;if(typeof
f!=="number"&&4===f[0]&&!p(f[3],bFq)){var
l=b(i,a),k=l[2],j=[0,l[1]];m=1}if(!m){d(v,a,h);var
g=c(0,0,a),n=0===g[0]?g[1]:g[1][1],k=n,j=0}return[18,[0,0,[0,[0,h]],j,o,C([0,e],[0,k],0)]]},a):(aR(bFr,a),d(S[3],[0,h],a))});h(x,function(a){var
L=a?a[1]:a;function
e(h){if(1-a_(h))aa(h,13);var
ac=E(h);w(h,60);var
a=Om(1,hf(1,h)),f=ai(ac,E(a));w(a,49);var
g=s(a);if(typeof
g==="number")if(53<=g){if(a2===g){var
ad=_(a);w(a,a2);var
ae=a[27][3],u=s(a),Y=0;if(typeof
u!=="number"&&4===u[0]&&!p(u[3],bFt)){R(a);var
ah=ae?[0,d(S[13],0,a)]:(aa(a,13),0),M=ah;Y=1}if(!Y)var
M=0;var
N=b(i,a),af=C([0,f],[0,N[2]],0);return[6,[0,0,0,[0,[1,[0,ad,M]]],[0,N[1]],af]]}if(!(63<=g))switch(g+QX|0){case
0:if(L){var
ak=B(0,b(l,0),a);return[6,[0,0,[0,[6,ak]],0,0,C([0,f],0,0)]]}break;case
8:if(L){var
am=B(0,b(j,0),a);return[6,[0,0,[0,[4,am]],0,0,C([0,f],0,0)]]}break;case
9:var
an=B(0,d(k,bFv,0),a);return[6,[0,0,[0,[5,an]],0,0,C([0,f],0,0)]]}}else{var
U=g-15|0;if(!(25<U>>>0))switch(U){case
21:var
ao=ai(f,E(a)),aq=B(0,function(a){return w(a,36)},a),m=On(1,a),F=s(m),J=0;if(typeof
F==="number")if(15===F)var
ar=0,H=ar,G=[0,[1,B(0,function(a){return d(q,0,a)},m)]];else
if(40===F)var
H=0,G=[0,[2,B(0,b(o,0),m)]];else
J=1;else
J=1;if(J){var
V=b(al[1],m),I=c(0,0,m);if(0===I[0])var
X=I[1],W=V;else
var
at=0,au=function(a,b){return d(ag(a,iZ,io),a,b)},X=at,W=d(I[1][2],V,au);var
H=X,G=[0,[3,W]]}var
as=C([0,ao],[0,H],0);return[6,[0,[0,aq[1]],G,0,0,as]];case
0:case
9:case
12:case
13:case
25:var
e=s(a);if(typeof
e==="number"){var
n=0;if(25<=e){if(29<=e){if(40===e){var
D=[0,[2,B(0,b(o,0),a)]];n=1}}else
if(27<=e)n=2}else
if(15===e){var
D=[0,[1,B(0,function(a){return d(q,0,a)},a)]];n=1}else
if(24<=e)n=2;var
K=0;switch(n){case
0:break;case
2:var
Z=0;if(typeof
e==="number")if(27===e)aa(a,72);else
if(28===e)aa(a,71);else
Z=1;else
Z=1;var
D=[0,[0,B(0,function(a){return d(t,a,0)},a)]];K=1;break;default:K=1}if(K)return[6,[0,0,D,0,0,C([0,f],0,0)]]}throw[0,ap,bFw]}}var
x=s(a),$=0;if(typeof
x==="number")if(53===x)aa(a,74);else
if(61===x)aa(a,73);else
$=1;else
$=1;w(a,0);var
O=A(r,0,a,0);w(a,1);var
y=s(a),ab=0;if(typeof
y!=="number"&&4===y[0]&&!p(y[3],bFu)){var
T=b(i,a),Q=T[2],P=[0,T[1]];ab=1}if(!ab){d(v,a,O);var
z=c(0,0,a),aj=0===z[0]?z[1]:z[1][1],Q=aj,P=0}return[6,[0,0,0,[0,[0,O]],P,C([0,f],[0,Q],0)]]}var
f=0;return function(a){return B(f,e,a)}});return[0,aw,aC,a0,aP,a6,L,M,J,K,ao,u,x,f,as,I,ac,af,F,V,a9,P,aF,aI,aL,O,aT,aX]}(nx),OY=function(J){var
g=function
c(a,b){return c.fun(a,b)},i=function
c(a,b){return c.fun(a,b)},f=function
c(a,b){return c.fun(a,b)};h(g,function(e,t){var
u=t[2],x=u[2],y=iV(e),b=0,a=u[1];for(;;){if(a){var
i=a[1];if(0===i[0]){var
l=i[1],c=l[2];switch(c[0]){case
0:var
m=c[2],g=c[1];switch(g[0]){case
0:var
h=[0,g[1]];break;case
1:var
h=[1,g[1]];break;case
2:var
h=V(bED);break;default:var
h=[2,g[1]]}var
n=m[2],v=0;if(2===n[0]){var
k=n[1];if(!k[1]){var
p=[0,k[3]],o=k[2];v=1}}if(!v)var
p=0,o=d(f,e,m);var
j=[0,[0,[0,l[1],[0,h,o,p,c[3]]]],b];break;case
1:Q(e,[0,c[2][1],97]);var
j=b;break;default:Q(e,[0,c[2][1],bEE]);var
j=b}var
b=j,a=a[2];continue}var
q=i[1],r=q[1];if(a[2]){Q(e,[0,r,66]);var
a=a[2];continue}var
s=q[2],w=s[2],b=[0,[1,[0,r,[0,d(f,e,s[1]),w]]],b],a=0;continue}var
z=[0,[0,U(b),y,x]];return[0,t[1],z]}});function
j(c,a){return b(S[23],a)?[0,d(f,c,a)]:(Q(c,[0,a[1],26]),0)}h(i,function(d,p){var
q=p[2],s=q[2],t=iV(d),b=0,a=q[1];for(;;){if(a){var
c=a[1];switch(c[0]){case
0:var
e=c[1],g=e[2];if(2===g[0]){var
f=g[1];if(!f[1]){var
b=[0,[0,[0,e[1],[0,f[2],[0,f[3]]]]],b],a=a[2];continue}}var
h=j(d,e);if(h)var
i=h[1],k=[0,[0,[0,i[1],[0,i,0]]],b];else
var
k=b;var
b=k,a=a[2];continue;case
1:var
l=c[1],m=l[1];if(a[2]){Q(d,[0,m,65]);var
a=a[2];continue}var
n=l[2],o=j(d,n[1]),r=o?[0,[1,[0,m,[0,o[1],n[2]]]],b]:b,b=r,a=0;continue;default:var
b=[0,[2,c[1]],b],a=a[2];continue}}var
u=[1,[0,U(b),t,s]];return[0,p[1],u]}});h(f,function(a,j){var
b=j[2],c=j[1];switch(b[0]){case
0:return d(i,a,[0,c,b[1]]);case
10:var
e=b[1],f=e[2][1],h=e[1],l=0;if(a[5]&&hG(f))Q(a,[0,h,52]);else
l=1;if(l&&1-a[5]){var
m=0;if(a[17]&&ay(f,bEF))Q(a,[0,h,93]);else
m=1;if(m){var
k=a[18],n=k?ay(f,bEG):k;if(n)Q(a,[0,h,92])}}return[0,c,[2,[0,e,iV(a),0]]];case
19:return d(g,a,[0,c,b[1]]);default:return[0,c,[3,[0,c,b]]]}});function
k(q){function
r(a){var
c=s(a);if(typeof
c==="number"&&82===c){w(a,82);return[0,b(S[10],a)]}return 0}function
a(a){var
X=E(a);w(a,0);var
m=0,j=0,l=0;for(;;){var
n=s(a);if(typeof
n==="number"){var
K=0;if(1===n||au===n)K=1;if(K){if(j)Q(a,[0,j[1],98]);var
P=U(l),Y=E(a);w(a,1);var
Z=W(a),$=86===s(a)?[1,b(J[9],a)]:iV(a);return[0,[0,P,$,bg([0,X],[0,Z],Y,0)]]}}if(12===s(a))var
N=E(a),t=B(0,function(a){w(a,12);return e(a,q)},a),O=C([0,N],0,0),c=[0,[1,[0,t[1],[0,t[2],O]]]];else{var
u=_(a),v=d(S[20],0,a),x=s(a),L=0;if(typeof
x==="number"&&86===x){w(a,86);var
y=B([0,u],function(a){var
b=e(a,q);return[0,b,r(a)]},a),z=y[2],f=v[2];switch(f[0]){case
0:var
g=[0,f[1]];break;case
1:var
g=[1,f[1]];break;case
2:var
g=V(bEH);break;default:var
g=[2,f[1]]}var
c=[0,[0,[0,y[1],[0,g,z[1],z[2],0]]]]}else
L=1;if(L){var
A=v[2];if(1===A[0]){var
h=A[1],i=h[2][1],k=h[1],M=0;if(uX(i)&&p(i,bEJ)&&p(i,bEK)){Q(a,[0,k,2]);M=1}if(!M&&iS(i))ce(a,[0,k,55]);var
D=B([0,u],function(c,d){return function(a){var
b=[0,d,[2,[0,c,iV(a),0]]];return[0,b,r(a)]}}(h,k),a),F=D[2],c=[0,[0,[0,D[1],[0,[1,h],F[1],F[2],1]]]]}else{aR(bEI,a);var
c=0}}}if(c){var
o=c[1],R=m?(Q(a,[0,o[1][1],66]),0):j;if(0===o[0])var
H=R,G=m;else
var
I=9===s(a)?1:0,T=I?[0,_(a)]:I,H=T,G=1;if(1!==s(a))w(a,9);var
m=G,j=H,l=[0,o,l];continue}continue}}var
c=0;return function(b){return B(c,a,b)}}function
l(g){function
a(a){var
r=E(a);w(a,6);var
c=0;for(;;){var
d=s(a);if(typeof
d==="number"){var
f=0;if(13<=d){if(au===d)f=1}else
if(7<=d)switch(d-7|0){case
2:var
n=_(a);w(a,9);var
c=[0,[2,n],c];continue;case
5:var
o=E(a),j=B(0,function(a){w(a,12);return e(a,g)},a),k=j[1],p=C([0,o],0,0),q=[1,[0,k,[0,j[2],p]]];if(7!==s(a)){Q(a,[0,k,65]);if(9===s(a))R(a)}var
c=[0,q,c];continue;case
0:f=1;break}if(f){var
l=U(c),t=E(a);w(a,7);var
u=86===s(a)?[1,b(J[9],a)]:iV(a);return[1,[0,l,u,bg([0,r],[0,W(a)],t,0)]]}}var
h=B(0,function(a){var
h=e(a,g),c=s(a),f=0;if(typeof
c==="number"&&82===c){w(a,82);var
d=[0,b(S[10],a)];f=1}if(!f)var
d=0;return[0,h,d]},a),i=h[2],m=[0,[0,h[1],[0,i[1],i[2]]]];if(7!==s(a))w(a,9);var
c=[0,m,c];continue}}var
c=0;return function(b){return B(c,a,b)}}function
e(a,c){var
d=s(a);if(typeof
d==="number"){if(6===d)return b(l(c),a);if(!d)return b(k(c),a)}var
e=A(S[14],a,0,c);return[0,e[1],[2,e[2]]]}return[0,g,i,f,k,l,e]}(al),bFC=bD3(S),bFD=al[9];function
OZ(d,a){var
b=s(a),c=0;if(typeof
b==="number")if(28===b){if(a[5])aa(a,55);else
if(a[14])aR(0,a)}else
if(58===b){if(a[17])aa(a,2);else
if(a[5])aa(a,55)}else
if(65===b){if(a[18])aa(a,2)}else
c=1;else
c=1;if(c)if(uW(b))cG(a,55);else
if(bqm(b))aR(0,a);else{var
e=0;if(d&&Os(b))cG(a,d[1]);else
e=1}return cf(a)}var
O0=function
b(a){return b.fun(a)},vb=function
d(a,b,c){return d.fun(a,b,c)},vc=function
b(a){return b.fun(a)},O1=function
c(a,b){return c.fun(a,b)},vd=function
c(a,b){return c.fun(a,b)},ve=function
c(a,b){return c.fun(a,b)},ny=function
c(a,b){return c.fun(a,b)},j$=function
c(a,b){return c.fun(a,b)},nz=function
b(a){return b.fun(a)},O2=function
b(a){return b.fun(a)},O3=function
b(a){return b.fun(a)},O4=function
d(a,b,c){return d.fun(a,b,c)},O5=function
b(a){return b.fun(a)},O6=function
b(a){return b.fun(a)},O7=hL[3],bFE=cx[3],bFF=cx[1],bFG=cx[5],bFH=hL[2],bFI=hL[1],bFJ=hL[4],bFK=cx[4],bFL=cx[6],bFM=bFC[13],bFN=OY[6],bFO=OY[3];h(O0,function(a){var
f=E(a),b=U(f),u=5;b:for(;;){if(b){var
j=b[2],k=b[1],l=k[2],m=k[1],n=l[2],e=0,v=ah(n);for(;;){if(v<(e+5|0))var
p=0;else{var
o=ay(bZ(n,e,u),bqM);if(!o){var
e=e+1|0;continue}var
p=o}if(!p){var
b=j;continue b}a[30][1]=m[3];var
g=U([0,[0,m,l],j]);break}}else
var
g=b;if(0===g){var
t=0;if(f){var
h=f[1],q=h[2];if(!q[1]){var
r=q[2],B=0;if(1<=ah(r)&&42===aU(r,0)){a[30][1]=h[1][3];var
i=[0,h,0];t=1;B=1}}}if(!t)var
i=0}else
var
i=g;var
c=d(O1,a,function(a){return 0}),y=_(a);w(a,au);var
x=bA[1];T(function(b,q){var
d=q[2];switch(d[0]){case
17:return j_(a,b,c7(0,[0,d[1][1],bFz]));case
18:var
e=d[1],g=e[1];if(g){if(!e[2]){var
h=g[1],c=h[2],f=0;switch(c[0]){case
34:var
m=c[1][1],n=0,o=T(function(b,a){return T(va,b,[0,a[2][1],0])},n,m);return T(function(b,c){return j_(a,b,c)},b,o);case
2:case
23:var
i=c[1][1];if(i)var
j=i[1];else
f=1;break;case
16:case
26:case
32:case
33:var
j=c[1][1];break;default:f=1}return f?b:j_(a,b,c7(0,[0,h[1],j[2][1]]))}}else{var
k=e[2];if(k){var
l=k[1];if(0===l[0]){var
p=l[1];return T(function(b,e){var
c=e[2],d=c[2];return d?j_(a,b,d[1]):j_(a,b,c[1])},b,p)}return b}}return b;default:return b}},x,c);if(c)var
z=js(U(c))[1],s=aM(js(c)[1],z);else
var
s=y;var
A=U(a[2][1]);return[0,s,[0,c,C([0,i],0,0),A]]}});function
bFR(p,o,n,m){var
a=p,f=m;for(;;){var
d=f[3],g=f[2],e=f[1],c=s(a);if(typeof
c==="number"&&au===c)return[0,a,e,g,d];if(b(o,c))return[0,a,e,g,d];if(typeof
c!=="number"&&2===c[0]){var
i=b(n,a),j=[0,i,g],k=i[2];if(19===k[0]){var
l=k[1][2];if(l){var
h=ay(l[1],bFS),q=h?1-a[20]:h;if(q)Q(a,[0,i[1],43]);var
r=h?hf(1,a):a,t=[0,c,e],u=d||h,a=r,f=[0,t,j,u];continue}}return[0,a,e,j,d]}return[0,a,e,g,d]}}h(vb,function(e,c,b){var
a=bFR(Ol(1,e),c,b,bFT),d=Ol(0,a[1]),f=U(a[2]);bw(function(a){if(typeof
a!=="number"&&2===a[0]){var
b=a[1],c=b[4];return c?ce(d,[0,b[1],45]):c}return V(Z(bFQ,Z(NQ(a),bFP)))},f);return[0,d,a[3],a[4]]});h(vc,function(a){var
c=b(hL[6],a),f=s(a);if(typeof
f==="number"){var
g=f-49|0;if(!(11<g>>>0))switch(g){case
0:return d(aN[16],c,a);case
1:b(nr(a),c);var
e=aA(1,a);if(typeof
e==="number"){var
h=0;if(4===e||10===e)h=1;if(h)return b(aN[17],a)}return b(aN[18],a);case
11:if(49===aA(1,a)){b(nr(a),c);return d(aN[12],0,a)}break}}return d(j$,[0,c],a)});h(O1,function(c,a){var
b=A(vb,c,a,vc),e=d(vd,a,b[1]),f=b[2];return T(function(b,a){return[0,a,b]},e,f)});h(vd,function(e,d){var
a=0;for(;;){var
c=s(d);if(typeof
c==="number"&&au===c)return U(a);if(b(e,c))return U(a);var
a=[0,b(vc,d),a];continue}});h(ve,function(b,c){var
a=A(vb,c,b,function(a){return d(j$,0,a)}),e=d(ny,b,a[1]),f=a[2],g=T(function(b,a){return[0,a,b]},e,f);return[0,g,a[3]]});h(ny,function(f,e){var
a=0;for(;;){var
c=s(e);if(typeof
c==="number"&&au===c)return U(a);if(b(f,c))return U(a);var
a=[0,d(j$,0,e),a];continue}});h(j$,function(e,a){var
f=e?e[1]:e;if(1-j1(a))b(nr(a),f);var
c=s(a);if(typeof
c==="number"){if(27===c)return b(aN[27],a);if(28===c)return b(aN[3],a)}if(hH(a))return b(aB[10],a);if(j1(a))return d(O7,a,f);if(typeof
c==="number"){var
g=c+a6|0;if(!(14<g>>>0))switch(g){case
0:if(a[27][1])return b(aB[11],a);break;case
5:return b(aN[19],a);case
12:return d(aN[11],0,a);case
13:return b(aN[25],a);case
14:return b(aN[21],a)}}return b(nz,a)});h(nz,function(a){var
c=s(a);if(typeof
c==="number")switch(c){case
0:return b(aN[7],a);case
8:return b(aN[15],a);case
19:return b(aN[22],a);case
20:return b(aN[23],a);case
22:return b(aN[24],a);case
23:return b(aN[4],a);case
24:return b(aN[26],a);case
25:return b(aN[5],a);case
26:return b(aN[6],a);case
32:return b(aN[8],a);case
35:return b(aN[9],a);case
37:return b(aN[14],a);case
39:return b(aN[1],a);case
59:return b(aN[10],a);case
113:aR(bFV,a);return[0,_(a),bFW];case
16:case
43:return b(aN[2],a);case
1:case
5:case
7:case
9:case
10:case
11:case
12:case
17:case
18:case
33:case
34:case
36:case
38:case
41:case
42:case
49:case
83:case
86:aR(bFU,a);R(a);return b(nz,a)}if(hH(a)){var
d=b(aB[10],a);ib(a,d[1]);return d}if(typeof
c==="number"&&28===c&&6===aA(1,a)){var
e=jZ(1,a);Q(a,[0,aM(_(a),e),94]);return b(aN[17],a)}return ia(a)?b(aN[20],a):j1(a)?(aR(0,a),R(a),b(aN[17],a)):b(aN[17],a)});h(O2,function(a){var
e=_(a),c=b(cx[1],a),d=s(a);if(typeof
d==="number"&&9===d)return A(cx[7],a,e,[0,c,0]);return c});h(O3,function(a){var
f=_(a),c=b(cx[2],a),e=s(a);if(typeof
e==="number"&&9===e){var
g=[0,d(nx[1],a,c),0];return[0,A(cx[7],a,f,g)]}return c});h(O4,function(c,a,f){var
g=a?a[1]:a;return B(0,function(a){var
c=1-g,e=OZ([0,f],a),d=c?85===s(a)?1:0:c;if(d){if(1-a_(a))aa(a,12);w(a,85)}return[0,e,b(al[10],a),d]},c)});h(O5,function(a){var
e=_(a),f=E(a);w(a,0);var
b=d(ny,function(a){return 1===a?1:0},a),c=0===b?1:0,g=_(a),h=c?E(a):c;w(a,1);var
i=[0,b,bg([0,f],[0,W(a)],h,0)];return[0,aM(e,g),i]});h(O6,function(k){function
a(a){var
l=E(a);w(a,0);var
f=d(ve,function(a){return 1===a?1:0},a),g=f[1],h=0===g?1:0,m=h?E(a):h;w(a,1);var
b=s(a),e=0;if(!k){var
j=0;if(typeof
b==="number"&&(1===b||au===b))j=1;if(!j){var
i=bQ(a);if(i){var
c=hI(a);e=1}else{var
c=i;e=1}}}if(!e)var
c=W(a);var
n=bg([0,l],[0,c],m,0);return[0,[0,g,n],f[2]]}var
b=0;return function(c){return u1(b,a,c)}});be(bFX,S,[0,O0,nz,j$,ny,ve,vd,O2,O3,bFE,bFF,bFG,bFH,OZ,O4,O5,O6,bFM,bFN,bFO,bFI,O7,bFJ,bFK,bFL,bFD]);var
O8=[0,0],O9=am;function
bFY(a){function
c(f,e){var
g=e[2],c=e[1],h=uI(g),i=[0,[0,bFZ,b(a[1],h)],0],j=nt(f,c[3]),k=[0,b(a[5],j),0],l=nt(f,c[2]),m=[0,b(a[5],l),k],n=[0,[0,bF0,b(a[4],m)],i],o=[0,[0,bF1,b(a[5],c[3][2])],0],p=[0,[0,bF2,b(a[5],c[3][1])],o],q=[0,[0,bF3,b(a[3],p)],0],r=[0,[0,bF4,b(a[5],c[2][2])],0],s=[0,[0,bF5,b(a[5],c[2][1])],r],t=[0,[0,bF6,b(a[3],s)],q],u=[0,[0,bF7,b(a[3],t)],n];switch(e[3]){case
0:var
d=bF8;break;case
1:var
d=bF$;break;case
2:var
d=bGa;break;case
3:var
d=bGb;break;case
4:var
d=bGc;break;default:var
d=bGd}var
v=[0,[0,bF9,b(a[1],d)],u],w=NQ(g),x=[0,[0,bF_,b(a[1],w)],v];return b(a[3],x)}return[0,c,function(e,d){var
f=U(kR(function(a){return c(e,a)},d));return b(a[4],f)}]}var
bGe=bG7;function
ie(a){return bG8(jv(a))}function
bh(a){return bG6(jv(a))}function
bGf(a){return a}function
bGg(a){return a}function
O_(d,b,a){try{var
c=new
RegExp(am(b),am(a));return c}catch(a){return bN}}var
bGh=bFY([0,O9,bGe,ie,bh,bGf,bGg,bN,O_]),bGi=[0,1],O$=function(aH){function
e(b,a){return bh(U(kR(b,a)))}function
c(c,a){return a?b(c,a[1]):bN}function
f(c,a){return 0===a[0]?bN:b(c,a[1])}function
d(a){return ie([0,[0,bq8,a[1]],[0,[0,bq7,a[2]],0]])}function
B(a){var
b=a[1],c=b?am(b[1][1]):bN,e=[0,[0,bq9,d(a[3])],0];return ie([0,[0,bq$,c],[0,[0,bq_,d(a[2])],e]])}function
g(a){return e(function(a){var
b=[0,[0,bra,am(a8s(a[2]))],0];return ie([0,[0,brb,B(a[1])],b])},a)}function
i(a){if(a){var
b=a[1],c=[0,ai(b[3],b[2])];return C([0,b[1]],c,0)}return a}function
a(x){function
u(a){return e(aG,a)}function
a(o,b,a,n){var
f=aH[1];if(f){if(x)var
g=x[1],p=[0,nt(g,b[3]),0],h=[0,[0,brc,bh([0,nt(g,b[2]),p])],0];else
var
h=x;var
i=ai(h,[0,[0,brd,B(b)],0])}else
var
i=f;if(a){var
c=a[1],d=c[1];if(d){var
j=c[2];if(j)var
q=[0,[0,bre,u(j)],0],k=[0,[0,brf,u(d)],q];else
var
k=[0,[0,brh,u(d)],0];var
l=k}else
var
e=c[2],r=e?[0,[0,bri,u(e)],0]:e,l=r;var
m=l}else
var
m=a;return ie(c6(ai(i,ai(m,[0,[0,brg,am(o)],0])),n))}function
E(a){return e(j,a)}function
ag(c){var
b=c[2],d=E(b[1]),e=[0,[0,brk,d],[0,[0,brj,u(b[3])],0]];return a(brl,c[1],b[2],e)}function
d(b){var
c=b[2];return a(bun,b[1],c[2],[0,[0,bum,am(c[1])],[0,[0,bul,bN],[0,[0,buk,!!0],0]]])}function
X(b){if(0===b[0])return d(b[1]);var
c=b[1],e=c[2],f=X(e[1]),g=[0,[0,bzk,f],[0,[0,bzj,d(e[2])],0]];return a(bzl,c[1],0,g)}function
z(c){var
e=c[2],b=e[1],f=0===b[0]?d(b[1]):z(b[1]),g=[0,[0,by5,f],[0,[0,by4,d(e[2])],0]];return a(by6,c[1],0,g)}function
S(f){var
b=f[2],e=b[1],g=0===e[0]?d(e[1]):z(e[1]),h=[0,[0,by8,g],[0,[0,by7,c(w,b[2])],0]];return a(by9,f[1],b[3],h)}function
p(e){var
d=e[2],f=d[2],b=d[1],g=e[1];if(typeof
b==="number")var
c=bN;else
switch(b[0]){case
0:var
c=am(b[1]);break;case
1:var
c=!!b[1];break;case
2:var
c=b[1];break;case
3:var
c=V(bxn);break;default:var
j=b[1],c=O_(g,j[1],j[2])}var
k=0;if(typeof
b!=="number"&&4===b[0]){var
i=b[1],l=[0,[0,bxk,ie([0,[0,bxj,am(i[1])],[0,[0,bxi,am(i[2])],0]])],0],h=[0,[0,bxm,c],[0,[0,bxl,am(f)],l]];k=1}if(!k)var
h=[0,[0,bxg,c],[0,[0,bxf,am(f)],0]];return a(bxh,g,d[3],h)}function
W(a){var
b=[0,[0,by_,h(a[2])],0];return[0,[0,by$,h(a[1])],b]}function
R(f,e){var
b=e[2],g=[0,[0,bye,!!b[3]],0],i=[0,[0,byf,h(b[2])],g],j=[0,[0,byg,c(d,b[1])],i];return a(byh,e[1],f,j)}function
h(k){var
b=k[2],c=k[1];switch(b[0]){case
0:return a(bxY,c,b[1],0);case
1:return a(bxZ,c,b[1],0);case
2:return a(bx0,c,b[1],0);case
3:return a(bx1,c,b[1],0);case
4:return a(bx2,c,b[1],0);case
5:return a(bx4,c,b[1],0);case
6:return a(bx5,c,b[1],0);case
7:return a(bx6,c,b[1],0);case
8:return a(bx7,c,b[1],0);case
9:return a(bx3,c,b[1],0);case
10:return a(bzC,c,b[1],0);case
11:var
l=b[1],A=[0,[0,bx8,h(l[1])],0];return a(bx9,c,l[2],A);case
12:return v([0,c,b[1]]);case
13:return t(1,[0,c,b[1]]);case
14:var
d=b[1],B=[0,[0,byZ,t(0,d[1])],0],C=[0,[0,by0,e(s,d[2])],B];return a(by1,c,d[3],C);case
15:var
m=b[1],D=[0,[0,by2,h(m[1])],0];return a(by3,c,m[2],D);case
16:return S([0,c,b[1]]);case
17:var
n=b[1],E=W(n);return a(bza,c,n[3],E);case
18:var
o=b[1],y=o[1],F=[0,[0,bzb,!!o[2]],0],G=ai(W(y),F);return a(bzc,c,y[3],G);case
19:var
p=b[1],i=p[1],H=[0,[0,bzd,e(h,[0,i[1],[0,i[2],i[3]]])],0];return a(bze,c,p[2],H);case
20:var
q=b[1],j=q[1],I=[0,[0,bzf,e(h,[0,j[1],[0,j[2],j[3]]])],0];return a(bzg,c,q[2],I);case
21:var
r=b[1],J=[0,[0,bzh,X(r[1])],0];return a(bzi,c,r[2],J);case
22:var
u=b[1],K=[0,[0,bzm,e(h,u[1])],0];return a(bzn,c,u[2],K);case
23:var
f=b[1];return a(bzq,c,f[3],[0,[0,bzp,am(f[1])],[0,[0,bzo,am(f[2])],0]]);case
24:var
g=b[1];return a(bzt,c,g[3],[0,[0,bzs,g[1]],[0,[0,bzr,am(g[2])],0]]);case
25:var
w=b[1];return a(bzw,c,w[3],[0,[0,bzv,bN],[0,[0,bzu,am(w[2])],0]]);default:var
x=b[1],z=x[1],L=0,M=z?bzx:bzB;return a(bzA,c,x[2],[0,[0,bzz,!!z],[0,[0,bzy,am(M)],L]])}}function
v(f){var
b=f[2],d=b[2][2],g=b[4],j=b1(i(d[4]),g),k=[0,[0,bx_,c(m,b[1])],0],l=[0,[0,bx$,c(ay,d[3])],k],n=[0,[0,bya,h(b[3])],l],o=[0,[0,byb,c(az,d[1])],n],p=d[2],q=[0,[0,byc,e(function(a){return R(0,a)},p)],o];return a(byd,f[1],j,q)}function
t(j,f){var
b=f[2],k=b[3],e=T(function(m,e){var
i=m[4],j=m[3],k=m[2],l=m[1];switch(e[0]){case
0:var
w=e[1],b=w[2],o=b[2],r=b[1];switch(r[0]){case
0:var
q=p(r[1]);break;case
1:var
q=d(r[1]);break;case
2:var
q=V(byG);break;default:var
q=V(byH)}switch(o[0]){case
0:var
t=byu,s=h(o[1]);break;case
1:var
B=o[1],t=byE,s=v([0,B[1],B[2]]);break;default:var
C=o[1],t=byF,s=v([0,C[1],C[2]])}var
E=[0,[0,byv,am(t)],0],F=[0,[0,byw,c(n,b[7])],E];return[0,[0,a(byD,w[1],b[8],[0,[0,byC,q],[0,[0,byB,s],[0,[0,byA,!!b[6]],[0,[0,byz,!!b[3]],[0,[0,byy,!!b[4]],[0,[0,byx,!!b[5]],F]]]]]]),l],k,j,i];case
1:var
x=e[1],D=x[2],G=[0,[0,byI,h(D[1])],0];return[0,[0,a(byJ,x[1],D[2],G),l],k,j,i];case
2:var
y=e[1],f=y[2],H=[0,[0,byK,c(n,f[5])],0],I=[0,[0,byL,!!f[4]],H],J=[0,[0,byM,h(f[3])],I],K=[0,[0,byN,h(f[2])],J],L=[0,[0,byO,c(d,f[1])],K];return[0,l,[0,a(byP,y[1],f[6],L),k],j,i];case
3:var
z=e[1],u=z[2],M=[0,[0,byQ,!!u[2]],0],N=[0,[0,byR,v(u[1])],M];return[0,l,k,[0,a(byS,z[1],u[3],N),j],i];default:var
A=e[1],g=A[2],O=[0,[0,byT,h(g[2])],0],P=[0,[0,byW,!!g[3]],[0,[0,byV,!!g[4]],[0,[0,byU,!!g[5]],O]]],Q=[0,[0,byX,d(g[1])],P];return[0,l,k,j,[0,a(byY,A[1],g[6],Q),i]]}},bym,k),l=[0,[0,byn,bh(U(e[4]))],0],m=[0,[0,byo,bh(U(e[3]))],l],o=[0,[0,byp,bh(U(e[2]))],m],q=[0,[0,byq,bh(U(e[1]))],o],g=[0,[0,byr,!!b[1]],q],r=j?[0,[0,bys,!!b[2]],g]:g,s=i(b[4]);return a(byt,f[1],s,r)}function
l(b){var
c=[0,[0,bzD,h(b[2])],0];return a(bzE,b[1],0,c)}function
C(d){var
b=d[2];switch(b[2]){case
0:var
c=bxN;break;case
1:var
c=bxR;break;default:var
c=bxS}var
f=[0,[0,bxO,am(c)],0],g=[0,[0,bxP,e(ax,b[1])],f];return a(bxQ,d[1],b[3],g)}function
q(c){var
b=c[2];return a(bxw,c[1],b[3],[0,[0,bxv,am(b[1])],[0,[0,bxu,am(b[2])],0]])}function
I(b){var
c=b[2],d=[0,[0,bwE,iq],[0,[0,bwD,l(c[1])],0]];return a(bwF,b[1],c[2],d)}function
y(d,b){var
c=b[1][2],e=[0,[0,bus,!!b[3]],0],g=[0,[0,but,f(l,b[2])],e];return a(buv,d,c[2],[0,[0,buu,am(c[1])],g])}function
A(b){var
c=b[2];return a(bur,b[1],c[2],[0,[0,buq,am(c[1])],[0,[0,bup,bN],[0,[0,buo,!!0],0]]])}function
J(a){return e(at,a[2][1])}function
_(c){var
b=c[2],d=[0,[0,bzV,a(bz6,b[2],0,0)],0],f=[0,[0,bzW,e($,b[3][2])],d],g=[0,[0,bzX,a(bz3,b[1],0,0)],f];return a(bzY,c[1],b[4],g)}function
g(b){var
c=b[2];return a(bAp,b[1],c[2],[0,[0,bAo,am(c[1])],0])}function
ad(b){var
c=b[2],d=[0,[0,bAl,g(c[2])],0],e=[0,[0,bAm,g(c[1])],d];return a(bAn,b[1],0,e)}function
ac(c){var
d=c[2],b=d[1],e=0===b[0]?g(b[1]):ac(b[1]),f=[0,[0,bAj,e],[0,[0,bAi,g(d[2])],0]];return a(bAk,c[1],0,f)}function
aa(a){switch(a[0]){case
0:return g(a[1]);case
1:return ad(a[1]);default:return ac(a[1])}}function
Z(f){var
b=f[2],h=[0,[0,bzR,e($,b[3][2])],0],i=[0,[0,bzS,c(aD,b[2])],h],g=b[1],d=g[2],k=[0,[0,bzZ,!!d[2]],0],l=[0,[0,bz0,e(aC,d[3])],k],m=[0,[0,bz1,aa(d[1])],l],j=[0,[0,bzT,a(bz2,g[1],0,m)],i];return a(bzU,f[1],b[4],j)}function
Q(d){var
c=d[2],f=[0,[0,bxC,e(b,c[2])],0],g=[0,[0,bxD,e(aw,c[1])],f];return a(bxE,d[1],c[3],g)}function
ap(u,i){var
f=i[2],j=f[7],k=f[5],l=f[4];if(l)var
g=l[1][2],v=b1(g[3],j),h=v,o=g[2],n=[0,g[1]];else
var
h=j,o=0,n=0;if(k)var
p=k[1][2],x=b1(p[2],h),r=x,q=e(F,p[1]);else
var
r=h,q=bh(0);var
y=[0,[0,bve,q],[0,[0,bvd,e(H,f[6])],0]],z=[0,[0,bvf,c(w,o)],y],A=[0,[0,bvg,c(b,n)],z],B=[0,[0,bvh,c(m,f[3])],A],s=f[2],t=s[2],E=[0,[0,bvp,e(ah,t[1])],0],C=[0,[0,bvi,a(bvq,s[1],t[2],E)],B],D=[0,[0,bvj,c(d,f[1])],C];return a(u,i[1],r,D)}function
o(b){var
c=b[2],d=[0,[0,buC,E(c[1])],0],e=i(c[2]);return a(buD,b[1],e,d)}function
af(f){var
a=f[2];switch(a[0]){case
0:var
e=0,c=d(a[1]);break;case
1:var
e=0,c=A(a[1]);break;default:var
e=1,c=b(a[1])}return[0,[0,bAM,b(f[1])],[0,[0,bAL,c],[0,[0,bAK,!!e],0]]]}function
ae(a){var
d=[0,[0,bAH,J(a[3])],0],e=[0,[0,bAI,c(Y,a[2])],d];return[0,[0,bAJ,b(a[1])],e]}function
P(j){var
c=j[2],d=c[3],e=c[2],b=c[1];if(d){var
f=d[1],g=f[2],l=[0,[0,bwG,k(g[1])],0],m=a(bwH,f[1],g[2],l),h=U([0,m,kR(G,e)]),n=b?[0,I(b[1]),h]:h;return bh(n)}var
i=hU(G,e),o=b?[0,I(b[1]),i]:i;return bh(o)}function
k(j){var
c=j[2],d=j[1];switch(c[0]){case
0:var
g=c[1],k=[0,[0,bwu,f(l,g[2])],0],m=[0,[0,bwv,e(as,g[1])],k];return a(bww,d,i(g[3]),m);case
1:var
h=c[1],n=[0,[0,bwx,f(l,h[2])],0],o=[0,[0,bwy,e(ar,h[1])],n];return a(bwz,d,i(h[3]),o);case
2:return y(d,c[1]);default:return b(c[1])}}function
b(K){var
f=K[2],g=K[1];switch(f[0]){case
0:var
L=f[1],aw=[0,[0,bsF,e(av,L[1])],0];return a(bsG,g,i(L[2]),aw);case
1:var
q=f[1],N=q[7],z=q[3],O=q[2];if(0===z[0])var
S=0,R=o(z[1]);else
var
S=1,R=b(z[1]);var
ax=0===N[0]?0:[0,N[1]],ay=q[9],az=b1(i(O[2][4]),ay),aA=[0,[0,bsH,c(m,q[8])],0],aB=[0,[0,bsJ,!!S],[0,[0,bsI,c(l,ax)],aA]],aC=[0,[0,bsL,!!0],[0,[0,bsK,c(D,q[6])],aB]],aD=[0,[0,bsN,R],[0,[0,bsM,!!q[4]],aC]];return a(bsQ,g,az,[0,[0,bsP,bN],[0,[0,bsO,P(O)],aD]]);case
2:var
s=f[1],T=s[1];if(T){switch(T[1]){case
0:var
j=a7C;break;case
1:var
j=a7D;break;case
2:var
j=a7E;break;case
3:var
j=a7F;break;case
4:var
j=a7G;break;case
5:var
j=a7H;break;case
6:var
j=a7I;break;case
7:var
j=a7J;break;case
8:var
j=a7K;break;case
9:var
j=a7L;break;case
10:var
j=a7M;break;case
11:var
j=a7N;break;case
12:var
j=a7O;break;case
13:var
j=a7P;break;default:var
j=a7Q}var
U=j}else
var
U=bsV;var
aE=[0,[0,bsR,b(s[3])],0],aF=[0,[0,bsS,k(s[2])],aE];return a(bsU,g,s[4],[0,[0,bsT,am(U)],aF]);case
3:var
t=f[1],aG=[0,[0,bsW,b(t[3])],0],aH=[0,[0,bsX,b(t[2])],aG];switch(t[1]){case
0:var
h=a7R;break;case
1:var
h=a7S;break;case
2:var
h=a7T;break;case
3:var
h=a7U;break;case
4:var
h=a7V;break;case
5:var
h=a7W;break;case
6:var
h=a7X;break;case
7:var
h=a7Y;break;case
8:var
h=a7Z;break;case
9:var
h=a70;break;case
10:var
h=a71;break;case
11:var
h=a72;break;case
12:var
h=a73;break;case
13:var
h=a74;break;case
14:var
h=a75;break;case
15:var
h=a76;break;case
16:var
h=a77;break;case
17:var
h=a78;break;case
18:var
h=a79;break;case
19:var
h=a7_;break;case
20:var
h=a7$;break;default:var
h=a8a}return a(bsZ,g,t[4],[0,[0,bsY,am(h)],aH]);case
4:var
A=f[1],aI=A[4],aJ=b1(i(A[3][2][2]),aI);return a(bs0,g,aJ,ae(A));case
5:return ap(bvc,[0,g,f[1]]);case
6:var
W=f[1],aK=[0,[0,bs1,c(b,W[2])],0];return a(bs3,g,0,[0,[0,bs2,e(M,W[1])],aK]);case
7:var
u=f[1],aL=[0,[0,bs4,b(u[3])],0],aM=[0,[0,bs5,b(u[2])],aL],aN=[0,[0,bs6,b(u[1])],aM];return a(bs7,g,u[4],aN);case
8:return r([0,g,f[1]]);case
9:var
X=f[1],aO=[0,[0,bs8,c(b,X[2])],0];return a(bs_,g,0,[0,[0,bs9,e(M,X[1])],aO]);case
10:return d(f[1]);case
11:var
$=f[1],aP=[0,[0,bs$,b($[1])],0];return a(bta,g,$[2],aP);case
12:return Z([0,g,f[1]]);case
13:return _([0,g,f[1]]);case
14:var
v=f[1],aa=v[1];if(typeof
aa!=="number"&&3===aa[0])return a(bxt,g,v[3],[0,[0,bxs,bN],[0,[0,bxr,am(v[2])],0]]);return p([0,g,v]);case
15:var
w=f[1];switch(w[1]){case
0:var
B=btb;break;case
1:var
B=btg;break;default:var
B=bth}var
aQ=[0,[0,btc,b(w[3])],0],aR=[0,[0,btd,b(w[2])],aQ];return a(btf,g,w[4],[0,[0,bte,am(B)],aR]);case
16:var
ab=f[1],aS=af(ab);return a(bti,g,ab[3],aS);case
17:var
C=f[1],aT=[0,[0,btj,d(C[2])],0],aU=[0,[0,btk,d(C[1])],aT];return a(btl,g,C[3],aU);case
18:var
x=f[1],ac=x[4],ad=x[3];if(ad)var
ag=ad[1],aV=b1(i(ag[2][2]),ac),aj=aV,ah=J(ag);else
var
aj=ac,ah=bh(0);var
aW=[0,[0,btn,c(Y,x[2])],[0,[0,btm,ah],0]];return a(btp,g,aj,[0,[0,bto,b(x[1])],aW]);case
19:var
ak=f[1],aX=[0,[0,btq,e(au,ak[1])],0];return a(btr,g,i(ak[2]),aX);case
20:var
al=f[1],E=al[1],aY=E[4],aZ=b1(i(E[3][2][2]),aY),a0=[0,[0,bts,!!al[3]],0];return a(btt,g,aZ,ai(ae(E),a0));case
21:var
an=f[1],ao=an[1],a1=[0,[0,btu,!!an[3]],0],a2=ai(af(ao),a1);return a(btv,g,ao[3],a2);case
22:var
aq=f[1],a3=[0,[0,btw,e(b,aq[1])],0];return a(btx,g,aq[2],a3);case
23:return a(bty,g,f[1][1],0);case
24:var
F=f[1],ba=[0,[0,bxK,Q(F[2])],0],bb=[0,[0,bxL,b(F[1])],ba];return a(bxM,g,F[3],bb);case
25:return Q([0,g,f[1]]);case
26:return a(btz,g,f[1][1],0);case
27:var
G=f[1],a4=[0,[0,btA,l(G[2])],0],a5=[0,[0,btB,b(G[1])],a4];return a(btC,g,G[3],a5);case
28:var
H=f[1],ar=H[3],as=H[2],at=H[1];if(7<=at)return a(btE,g,ar,[0,[0,btD,b(as)],0]);switch(at){case
0:var
n=btF;break;case
1:var
n=btK;break;case
2:var
n=btL;break;case
3:var
n=btM;break;case
4:var
n=btN;break;case
5:var
n=btO;break;case
6:var
n=btP;break;default:var
n=V(btQ)}var
a6=[0,[0,btH,!!1],[0,[0,btG,b(as)],0]];return a(btJ,g,ar,[0,[0,btI,am(n)],a6]);case
29:var
y=f[1],a7=y[1]?btR:btW,a8=[0,[0,btS,!!y[3]],0],a9=[0,[0,btT,b(y[2])],a8];return a(btV,g,y[4],[0,[0,btU,am(a7)],a9]);default:var
I=f[1],a_=[0,[0,btX,!!I[3]],0],a$=[0,[0,btY,c(b,I[1])],a_];return a(btZ,g,I[2],a$)}}function
r(e){var
b=e[2],f=b[7],g=b[3],h=b[2],j=0===g[0]?g[1]:V(buj),k=0===f[0]?0:[0,f[1]],n=b[9],p=b1(i(h[2][4]),n),q=[0,[0,bt$,c(m,b[8])],0],r=[0,[0,bub,!!0],[0,[0,bua,c(l,k)],q]],s=[0,[0,buc,c(D,b[6])],r],t=[0,[0,bue,!!b[4]],[0,[0,bud,!!b[5]],s]],u=[0,[0,buf,o(j)],t],v=[0,[0,bug,P(h)],u],w=[0,[0,buh,c(d,b[1])],v];return a(bui,e[1],p,w)}function
aq(f){var
b=f[2],g=[0,[0,bwm,e(s,b[3])],0],h=[0,[0,bwn,t(0,b[4])],g],i=[0,[0,bwo,c(m,b[2])],h],j=[0,[0,bwp,d(b[1])],i];return a(bwq,f[1],b[5],j)}function
O(f,e){var
b=e[2],g=f?bu7:bva,i=[0,[0,bu8,c(h,b[4])],0],j=[0,[0,bu9,c(h,b[3])],i],k=[0,[0,bu_,c(m,b[2])],j],l=[0,[0,bu$,d(b[1])],k];return a(g,e[1],b[5],l)}function
ao(e){var
b=e[2],f=[0,[0,bu3,h(b[3])],0],g=[0,[0,bu4,c(m,b[2])],f],i=[0,[0,bu5,d(b[1])],g];return a(bu6,e[1],b[4],i)}function
an(c){if(c){var
b=c[1];if(0===b[0])return e(aF,b[1]);var
f=b[1],g=f[2];if(g){var
h=[0,[0,buX,d(g[1])],0];return bh([0,a(buY,f[1],0,h),0])}return bh(0)}return bh(0)}function
N(a){return a?buV:buW}function
s(f){var
b=f[2],e=b[1],g=0===e[0]?d(e[1]):z(e[1]),h=[0,[0,bws,g],[0,[0,bwr,c(w,b[2])],0]];return a(bwt,f[1],b[3],h)}function
al(f){var
b=f[2],g=b[6],h=b[4],i=h?bh([0,s(h[1]),0]):bh(0),j=g?e(F,g[1][2][1]):bh(0),k=[0,[0,buL,i],[0,[0,buK,j],[0,[0,buJ,e(s,b[5])],0]]],l=[0,[0,buM,t(0,b[3])],k],n=[0,[0,buN,c(m,b[2])],l],o=[0,[0,buO,d(b[1])],n];return a(buP,f[1],b[7],o)}function
ak(d){var
b=d[2],e=b[2],f=b[1],g=aM(f[1],e[1]),h=[0,[0,buG,c(D,b[3])],0],i=[0,[0,buH,y(g,[0,f,[1,e],0])],h];return a(buI,d[1],b[4],i)}function
aj(c){var
b=c[2],d=b[2],e=b[1],f=[0,[0,buE,y(aM(e[1],d[1]),[0,e,[1,d],0])],0];return a(buF,c[1],b[3],f)}function
j(ai){var
g=ai[2],f=ai[1];switch(g[0]){case
0:return o([0,f,g[1]]);case
1:var
ar=g[1],aX=[0,[0,brm,c(d,ar[1])],0];return a(brn,f,ar[2],aX);case
2:return ap(bvb,[0,f,g[1]]);case
3:var
as=g[1],aY=[0,[0,bro,c(d,as[1])],0];return a(brp,f,as[2],aY);case
4:return a(brq,f,g[1][1],0);case
5:return al([0,f,g[1]]);case
6:var
u=g[1],at=u[5],au=u[4],Q=u[3],av=u[2];if(Q){var
aw=Q[1];if(0!==aw[0]&&!aw[1][2])return a(brx,f,at,[0,[0,brw,c(q,au)],0])}if(av){var
p=av[1];switch(p[0]){case
0:var
r=aj(p[1]);break;case
1:var
r=ak(p[1]);break;case
2:var
r=al(p[1]);break;case
3:var
r=h(p[1]);break;case
4:var
r=ao(p[1]);break;case
5:var
r=O(1,p[1]);break;default:var
r=aq(p[1])}var
ax=r}else
var
ax=bN;var
aZ=[0,[0,brr,c(q,au)],0],a0=[0,[0,brt,ax],[0,[0,brs,an(Q)],aZ]],ay=u[1],a1=ay?1:ay;return a(brv,f,at,[0,[0,bru,!!a1],a0]);case
7:return ak([0,f,g[1]]);case
8:var
v=g[1],bY=[0,[0,buQ,e(s,v[3])],0],bZ=[0,[0,buR,t(0,v[4])],bY],b0=[0,[0,buS,c(m,v[2])],bZ],b2=[0,[0,buT,d(v[1])],b0];return a(buU,f,v[5],b2);case
9:var
E=g[1],R=E[1],a2=0===R[0]?d(R[1]):q(R[1]),a3=0,a4=E[3]?"ES":"CommonJS",a5=[0,[0,brA,a2],[0,[0,brz,o(E[2])],[0,[0,bry,a4],a3]]];return a(brB,f,E[4],a5);case
10:var
az=g[1],a6=[0,[0,brC,l(az[1])],0];return a(brD,f,az[2],a6);case
11:var
F=g[1],b3=[0,[0,buZ,h(F[3])],0],b4=[0,[0,bu0,c(m,F[2])],b3],b5=[0,[0,bu1,d(F[1])],b4];return a(bu2,f,F[4],b5);case
12:return O(1,[0,f,g[1]]);case
13:return aj([0,f,g[1]]);case
14:var
S=g[1],a7=[0,[0,brE,b(S[2])],0],a8=[0,[0,brF,j(S[1])],a7];return a(brG,f,S[3],a8);case
15:return a(brH,f,g[1][1],0);case
16:var
T=g[1],aT=T[2],B=aT[2],I=aT[1];switch(B[0]){case
0:var
J=B[1],b6=[0,[0,bvU,!!J[2]],[0,[0,bvT,!!J[3]],0]],b7=J[1],b8=[0,[0,bvY,e(function(b){var
c=b[2],e=c[2],f=e[2],g=f[1],h=0,k=g?bxx:bxB,i=[0,[0,bvV,a(bxA,e[1],f[2],[0,[0,bxz,!!g],[0,[0,bxy,am(k)],0]])],h],j=[0,[0,bvW,d(c[1])],i];return a(bvX,b[1],0,j)},b7)],b6],K=a(bvZ,I,i(J[4]),b8);break;case
1:var
L=B[1],b_=[0,[0,bv4,!!L[2]],[0,[0,bv3,!!L[3]],0]],b$=L[1],ca=[0,[0,bv8,e(function(c){var
e=c[2],f=e[2],b=f[2],g=[0,[0,bv5,a(bxq,f[1],b[3],[0,[0,bxp,b[1]],[0,[0,bxo,am(b[2])],0]])],0],h=[0,[0,bv6,d(e[1])],g];return a(bv7,c[1],0,h)},b$)],b_],K=a(bv9,I,i(L[4]),ca);break;case
2:var
M=B[1],ag=M[1];if(0===ag[0])var
cb=ag[1],aU=hU(function(b){var
c=[0,[0,bv_,d(b[2][1])],0];return a(bv$,b[1],0,c)},cb);else
var
ce=ag[1],aU=hU(function(b){var
c=b[2],e=[0,[0,bwe,q(c[2])],0],f=[0,[0,bwf,d(c[1])],e];return a(bwg,b[1],0,f)},ce);var
cc=[0,[0,bwb,!!M[2]],[0,[0,bwa,!!M[3]],0]],cd=[0,[0,bwc,bh(aU)],cc],K=a(bwd,I,i(M[4]),cd);break;default:var
ah=B[1],cf=[0,[0,bwh,!!ah[2]],0],cg=ah[1],ch=[0,[0,bwk,e(function(b){var
c=[0,[0,bwi,d(b[2][1])],0];return a(bwj,b[1],0,c)},cg)],cf],K=a(bwl,I,i(ah[3]),ch)}var
b9=[0,[0,bv1,d(T[1])],[0,[0,bv0,K],0]];return a(bv2,f,T[3],b9);case
17:var
aA=g[1],U=aA[2],a9=0===U[0]?j(U[1]):b(U[1]),a_=[0,[0,brJ,a9],[0,[0,brI,am(N(1))],0]];return a(brK,f,aA[3],a_);case
18:var
w=g[1],aB=w[5],aC=w[4],aD=w[3],W=w[2];if(W){var
aE=W[1];if(0!==aE[0]){var
bc=[0,[0,brQ,am(N(aC))],0],bd=[0,[0,brR,c(d,aE[1][2])],bc];return a(brT,f,aB,[0,[0,brS,c(q,aD)],bd])}}var
a$=[0,[0,brL,am(N(aC))],0],ba=[0,[0,brM,c(q,aD)],a$],bb=[0,[0,brN,an(W)],ba];return a(brP,f,aB,[0,[0,brO,c(j,w[1])],bb]);case
19:var
X=g[1],be=[0,[0,brU,c(O9,X[2])],0],bf=[0,[0,brV,b(X[1])],be];return a(brW,f,X[3],bf);case
20:var
x=g[1],bg=function(a){return 0===a[0]?C(a[1]):b(a[1])},bi=[0,[0,brX,j(x[4])],0],bj=[0,[0,brY,c(b,x[3])],bi],bk=[0,[0,brZ,c(b,x[2])],bj],bl=[0,[0,br0,c(bg,x[1])],bk];return a(br1,f,x[5],bl);case
21:var
y=g[1],Y=y[1],bm=0===Y[0]?C(Y[1]):k(Y[1]),bn=[0,[0,br2,!!y[4]],0],bo=[0,[0,br3,j(y[3])],bn],bp=[0,[0,br5,bm],[0,[0,br4,b(y[2])],bo]];return a(br6,f,y[5],bp);case
22:var
z=g[1],Z=z[1],bq=0===Z[0]?C(Z[1]):k(Z[1]),br=[0,[0,br7,!!z[4]],0],bs=[0,[0,br8,j(z[3])],br],bt=[0,[0,br_,bq],[0,[0,br9,b(z[2])],bs]];return a(br$,f,z[5],bt);case
23:var
n=g[1],aQ=n[7],aR=n[3],aS=n[2],bO=0===aR[0]?aR[1]:V(bt_),bP=0===aQ[0]?0:[0,aQ[1]],bQ=n[9],bR=b1(i(aS[2][4]),bQ),bS=[0,[0,bt0,c(m,n[8])],0],bT=[0,[0,bt2,!!0],[0,[0,bt1,c(l,bP)],bS]],bU=[0,[0,bt3,c(D,n[6])],bT],bV=[0,[0,bt5,!!n[4]],[0,[0,bt4,!!n[5]],bU]],bW=[0,[0,bt6,o(bO)],bV],bX=[0,[0,bt7,P(aS)],bW];return a(bt9,f,bR,[0,[0,bt8,c(d,n[1])],bX]);case
24:var
G=g[1],aF=G[3];if(aF)var
aG=aF[1][2],aH=j(bqY(aG[1],aG[2]));else
var
aH=bN;var
bu=[0,[0,bsb,j(G[2])],[0,[0,bsa,aH],0]],bv=[0,[0,bsc,b(G[1])],bu];return a(bsd,f,G[4],bv);case
25:var
A=g[1],_=A[4],aI=A[3];if(_){var
$=_[1];if(0===$[0])var
bw=$[1],aJ=hU(function(e){var
h=e[1],b=e[3],c=e[2],i=c?aM(b[1],c[1][1]):b[1],j=c?c[1]:b,g=0,k=0;if(h)switch(h[1]){case
0:var
f=hs;break;case
1:var
f=hp;break;default:g=1}else
g=1;if(g)var
f=bN;var
l=[0,[0,bAy,d(j)],[0,[0,bAx,f],k]];return a(bAA,i,0,[0,[0,bAz,d(b)],l])},bw);else
var
aN=$[1],cj=[0,[0,bAv,d(aN[2])],0],aJ=[0,a(bAw,aN[1],0,cj),0];var
aa=aJ}else
var
aa=_;if(aI)var
aK=aI[1],ci=[0,[0,bAt,d(aK)],0],aL=[0,a(bAu,aK[1],0,ci),aa];else
var
aL=aa;switch(A[1]){case
0:var
ab=bse;break;case
1:var
ab=bsj;break;default:var
ab=bsk}var
bx=[0,[0,bsf,am(ab)],0],by=[0,[0,bsg,q(A[2])],bx],bz=[0,[0,bsh,bh(aL)],by];return a(bsi,f,A[5],bz);case
26:return aq([0,f,g[1]]);case
27:var
ac=g[1],bA=[0,[0,bsl,j(ac[2])],0],bB=[0,[0,bsm,d(ac[1])],bA];return a(bsn,f,ac[3],bB);case
28:var
aO=g[1],bC=[0,[0,bso,c(b,aO[1])],0];return a(bsp,f,aO[2],bC);case
29:var
ad=g[1],bD=[0,[0,bsq,e(aV,ad[2])],0],bE=[0,[0,bsr,b(ad[1])],bD];return a(bss,f,ad[3],bE);case
30:var
aP=g[1],bF=[0,[0,bst,b(aP[1])],0];return a(bsu,f,aP[2],bF);case
31:var
H=g[1],bG=[0,[0,bsv,c(o,H[3])],0],bH=[0,[0,bsw,c(aW,H[2])],bG],bI=[0,[0,bsx,o(H[1])],bH];return a(bsy,f,H[4],bI);case
32:return ao([0,f,g[1]]);case
33:return O(0,[0,f,g[1]]);case
34:return C([0,f,g[1]]);case
35:var
ae=g[1],bJ=[0,[0,bsz,j(ae[2])],0],bK=[0,[0,bsA,b(ae[1])],bJ];return a(bsB,f,ae[3],bK);default:var
af=g[1],bL=[0,[0,bsC,j(af[2])],0],bM=[0,[0,bsD,b(af[1])],bL];return a(bsE,f,af[3],bM)}}function
aV(f){var
d=f[2],g=[0,[0,buw,e(j,d[2])],0],h=[0,[0,bux,c(b,d[1])],g];return a(buy,f[1],d[3],h)}function
aW(d){var
b=d[2],e=[0,[0,buz,o(b[2])],0],f=[0,[0,buA,c(k,b[1])],e];return a(buB,d[1],b[3],f)}function
H(c){var
d=c[2],e=[0,[0,bvk,b(d[1])],0];return a(bvl,c[1],d[2],e)}function
F(b){var
e=b[2],f=[0,[0,bvm,c(w,e[2])],0],g=[0,[0,bvn,d(e[1])],f];return a(bvo,b[1],0,g)}function
ah(o){switch(o[0]){case
0:var
I=o[1],g=I[2],q=g[6],j=g[2];switch(j[0]){case
0:var
u=q,t=0,s=p(j[1]);break;case
1:var
u=q,t=0,s=d(j[1]);break;case
2:var
u=q,t=0,s=A(j[1]);break;default:var
L=j[1][2],Q=b1(L[2],q),u=Q,t=1,s=b(L[1])}switch(g[1]){case
0:var
v=bvr;break;case
1:var
v=bvz;break;case
2:var
v=bvA;break;default:var
v=bvB}var
N=[0,[0,bvt,!!t],[0,[0,bvs,e(H,g[5])],0]],O=[0,[0,bvv,am(v)],[0,[0,bvu,!!g[4]],N]],P=[0,[0,bvx,s],[0,[0,bvw,r(g[3])],O]];return a(bvy,I[1],u,P);case
1:var
J=o[1],i=J[2],D=i[6],E=i[2],w=i[1];switch(w[0]){case
0:var
z=D,y=0,x=p(w[1]);break;case
1:var
z=D,y=0,x=d(w[1]);break;case
2:var
G=V(bvS),z=G[3],y=G[2],x=G[1];break;default:var
M=w[1][2],ab=b1(M[2],D),z=ab,y=1,x=b(M[1])}if(typeof
E==="number")if(E)var
m=0,F=0;else
var
m=1,F=0;else
var
m=0,F=[0,E[1]];var
Y=m?[0,[0,bvK,!!m],0]:m,Z=[0,[0,bvL,c(n,i[5])],0],_=[0,[0,bvN,!!y],[0,[0,bvM,!!i[4]],Z]],$=[0,[0,bvO,f(l,i[3])],_],aa=ai([0,[0,bvQ,x],[0,[0,bvP,c(b,F)],$]],Y);return a(bvR,J[1],z,aa);default:var
K=o[1],h=K[2],B=h[2];if(typeof
B==="number")if(B)var
k=0,C=0;else
var
k=1,C=0;else
var
k=0,C=[0,B[1]];var
R=k?[0,[0,bvC,!!k],0]:k,S=[0,[0,bvD,c(n,h[5])],0],T=[0,[0,bvF,!!0],[0,[0,bvE,!!h[4]],S]],U=[0,[0,bvG,f(l,h[3])],T],W=[0,[0,bvH,c(b,C)],U],X=ai([0,[0,bvI,A(h[1])],W],R);return a(bvJ,K[1],h[6],X)}}function
G(c){var
d=c[2],e=d[2],f=d[1];if(e){var
g=[0,[0,bwA,b(e[1])],0],h=[0,[0,bwB,k(f)],g];return a(bwC,c[1],0,h)}return k(f)}function
K(c,b){var
d=[0,[0,bwI,k(b[1])],0];return a(bwJ,c,b[2],d)}function
ar(c){switch(c[0]){case
0:var
d=c[1],e=d[2],f=e[2],g=e[1];if(f){var
i=[0,[0,bwK,b(f[1])],0],j=[0,[0,bwL,k(g)],i];return a(bwM,d[1],0,j)}return k(g);case
1:var
h=c[1];return K(h[1],h[2]);default:return bN}}function
au(n){if(0===n[0]){var
q=n[1],c=q[2];switch(c[0]){case
0:var
y=b(c[2]),f=0,j=c[3],i=0,h=bwN,g=y,e=c[1];break;case
1:var
t=c[2],A=r([0,t[1],t[2]]),f=0,j=0,i=1,h=bwW,g=A,e=c[1];break;case
2:var
u=c[2],B=r([0,u[1],u[2]]),f=c[3],j=0,i=0,h=bwX,g=B,e=c[1];break;default:var
v=c[2],C=r([0,v[1],v[2]]),f=c[3],j=0,i=0,h=bwY,g=C,e=c[1]}switch(e[0]){case
0:var
m=f,l=0,k=p(e[1]);break;case
1:var
m=f,l=0,k=d(e[1]);break;case
2:var
o=V(bwV),m=o[3],l=o[2],k=o[1];break;default:var
s=e[1][2],z=b1(s[2],f),m=z,l=1,k=b(s[1])}return a(bwU,q[1],m,[0,[0,bwT,k],[0,[0,bwS,g],[0,[0,bwR,am(h)],[0,[0,bwQ,!!i],[0,[0,bwP,!!j],[0,[0,bwO,!!l],0]]]]]])}var
w=n[1],x=w[2],D=[0,[0,bwZ,b(x[1])],0];return a(bw0,w[1],x[2],D)}function
as(f){if(0===f[0]){var
l=f[1],c=l[2],m=c[3],g=c[2],e=c[1];switch(e[0]){case
0:var
j=0,i=0,h=p(e[1]);break;case
1:var
j=0,i=0,h=d(e[1]);break;default:var
q=e[1][2],u=b(q[1]),j=q[2],i=1,h=u}if(m)var
n=m[1],s=aM(g[1],n[1]),t=[0,[0,bw1,b(n)],0],o=a(bw3,s,0,[0,[0,bw2,k(g)],t]);else
var
o=k(g);return a(bw_,l[1],j,[0,[0,bw9,h],[0,[0,bw8,o],[0,[0,bw7,cZ],[0,[0,bw6,!!0],[0,[0,bw5,!!c[4]],[0,[0,bw4,!!i],0]]]]]])}var
r=f[1];return K(r[1],r[2])}function
L(c){var
d=c[2],e=[0,[0,bw$,b(d[1])],0];return a(bxa,c[1],d[2],e)}function
at(a){return 0===a[0]?b(a[1]):L(a[1])}function
av(a){switch(a[0]){case
0:return b(a[1]);case
1:return L(a[1]);default:return bN}}function
M(d){var
c=d[2],e=[0,[0,bxb,!!c[3]],0],f=[0,[0,bxc,b(c[2])],e],g=[0,[0,bxd,k(c[1])],f];return a(bxe,d[1],0,g)}function
aw(b){var
c=b[2],d=c[1],e=ie([0,[0,bxG,am(d[1])],[0,[0,bxF,am(d[2])],0]]);return a(bxJ,b[1],0,[0,[0,bxI,e],[0,[0,bxH,!!c[2]],0]])}function
ax(d){var
e=d[2],f=[0,[0,bxT,c(b,e[2])],0],g=[0,[0,bxU,k(e[1])],f];return a(bxV,d[1],0,g)}function
n(b){var
c=b[2],d=c[1]?Qg:"plus";return a(bxX,b[1],c[2],[0,[0,bxW,d],0])}function
ay(b){var
a=b[2];return R(a[2],a[1])}function
az(b){var
e=b[2],f=[0,[0,byj,h(e[1][2])],[0,[0,byi,!!0],0]],g=[0,[0,byk,c(d,0)],f];return a(byl,b[1],e[2],g)}function
m(b){var
c=b[2],d=[0,[0,bzF,e(aA,c[1])],0],f=i(c[2]);return a(bzG,b[1],f,d)}function
aA(d){var
b=d[2],e=b[1][2],g=[0,[0,bzH,c(h,b[4])],0],i=[0,[0,bzI,c(n,b[3])],g],j=[0,[0,bzJ,f(l,b[2])],i];return a(bzL,d[1],e[2],[0,[0,bzK,am(e[1])],j])}function
w(b){var
c=b[2],d=[0,[0,bzM,e(h,c[1])],0],f=i(c[2]);return a(bzN,b[1],f,d)}function
Y(b){var
c=b[2],d=[0,[0,bzO,e(aB,c[1])],0],f=i(c[2]);return a(bzP,b[1],f,d)}function
aB(a){if(0===a[0])return h(a[1]);var
b=a[1],c=b[1],d=b[2][1];return S([0,c,[0,[0,c7(0,[0,c,bzQ])],0,d]])}function
aC(d){if(0===d[0]){var
f=d[1],i=f[2],e=i[1],k=0===e[0]?g(e[1]):ad(e[1]),l=[0,[0,bz8,k],[0,[0,bz7,c(aE,i[2])],0]];return a(bz9,f[1],0,l)}var
h=d[1],j=h[2],m=[0,[0,bz_,b(j[1])],0];return a(bz$,h[1],j[2],m)}function
aD(b){var
c=[0,[0,bz4,aa(b[2][1])],0];return a(bz5,b[1],0,c)}function
ab(d){var
e=d[2],f=e[1],c=d[1],g=f?b(f[1]):a(bAc,[0,c[1],[0,c[2][1],c[2][2]+1|0],[0,c[3][1],c[3][2]-1|0]],0,0);return a(bAb,c,i(e[2]),[0,[0,bAa,g],0])}function
$(e){var
c=e[2],d=e[1];switch(c[0]){case
0:return Z([0,d,c[1]]);case
1:return _([0,d,c[1]]);case
2:return ab([0,d,c[1]]);case
3:var
f=c[1],h=[0,[0,bAd,b(f[1])],0];return a(bAe,d,f[2],h);default:var
g=c[1];return a(bAh,d,0,[0,[0,bAg,am(g[1])],[0,[0,bAf,am(g[2])],0]])}}function
aE(a){return 0===a[0]?p([0,a[1],a[2]]):ab([0,a[1],a[2]])}function
aF(b){var
c=b[2],e=c[2],f=c[1],g=e?d(e[1]):d(f),h=[0,[0,bAr,d(f)],[0,[0,bAq,g],0]];return a(bAs,b[1],0,h)}function
aG(c){var
b=c[2];if(b[1])var
e=b[2],d=bAB;else
var
e=b[2],d=bAD;return a(d,c[1],0,[0,[0,bAC,am(e)],0])}function
D(c){var
d=c[2],e=d[1];if(e)var
g=[0,[0,bAE,b(e[1])],0],f=bAF;else
var
g=0,f=bAG;return a(f,c[1],d[2],g)}return[0,ag,b]}function
h(b){return a(b)[1]}return[0,h,function(b){return a(b)[2]},g]}(bGi);function
ka(d,c,b){var
a=c[b];return k4(a)?a|0:d}function
bGo(ab,E){var
h=S7(E,Hv)?{}:E,s=ct(ab),Z=ka(iN[5],h,bGj),_=ka(iN[4],h,bGk),$=ka(iN[3],h,bGl),aa=ka(iN[2],h,bGm),ac=[0,[0,ka(iN[1],h,bGn),aa,$,_,Z]],F=h[bGp],G=k4(F),t=G?F|0:G,H=h[bGq],ad=k4(H)?H|0:1,I=h[bGr],ae=k4(I)?I|0:1,u=[0,0],af=t?[0,function(a){u[1]=[0,a,u[1]];return 0}]:t,Y=bGs[1],D=bpv([0,af],[0,ac],0,s),C=b(S[1],D),W=U(D[1][1]),X=[0,u$[1],0],o=U(T(function(c,a){var
e=c[2],b=c[1];return d(u$[3],a,b)?[0,b,e]:[0,d(u$[4],a,b),[0,a,e]]},X,W)[2]);if(o&&Y)throw[0,a8r,o[1],o[2]];O8[1]=0;var
x=ah(s)-0|0,c=g7(s),i=0,a=0;for(;;){if(a===x)var
B=i;else{var
e=bL(c,a),K=0;if(0<=e&&!(aC<e))var
f=1;else
K=1;if(K){var
L=0;if(vH<=e&&!(n_<e))var
f=2;else
L=1;if(L){var
M=0;if(jg<=e&&!(nN<e))var
f=3;else
M=1;if(M){var
N=0;if(i_<=e&&!(p0<e))var
f=4;else
N=1;if(N)var
f=0}}}if(0===f){var
i=u0(i,a,0),a=a+1|0;continue}if(!((x-a|0)<f)){var
w=f-1|0,O=a+f|0;if(3<w>>>0)throw[0,ap,Xg];switch(w){case
0:var
l=bL(c,a);break;case
1:var
l=(bL(c,a)&31)<<6|bL(c,a+1|0)&63;break;case
2:var
l=(bL(c,a)&15)<<12|(bL(c,a+1|0)&63)<<6|bL(c,a+2|0)&63;break;default:var
l=(bL(c,a)&7)<<18|(bL(c,a+1|0)&63)<<12|(bL(c,a+2|0)&63)<<6|bL(c,a+3|0)&63}var
i=u0(i,a,[0,l]),a=O;continue}var
B=u0(i,a,0)}var
j=bq1,g=U([0,6,B]);for(;;){var
m=j[3],q=j[2],k=j[1];if(g){var
n=g[1];if(5===n){var
r=g[2];if(r&&6===r[1]){var
P=jv(U([0,k,q])),j=[0,k+2|0,0,[0,P,m]],g=r[2];continue}}else
if(!(6<=n)){var
V=g[2],j=[0,k+OI(n)|0,[0,k,q],m],g=V;continue}var
Q=jv(U([0,k,q])),R=g[2],j=[0,k+OI(n)|0,0,[0,Q,m]],g=R;continue}var
A=jv(U(m));if(ad)var
p=C;else
var
y=b(a7B[1],0),p=d(ag(y,-201766268,27),y,C);if(ae)var
J=p;else
var
z=p[2],J=[0,p[1],[0,z[1],z[2],0]];var
v=d(O$[1],[0,A],J),aj=ai(o,O8[1]);v[bGt]=b(O$[3],aj);if(t){var
ak=u[1];v[bGu]=bh(kR(b(bGh[1],A),ak))}return v}}}if(typeof
exports!=="undefined")var
Pa=exports;else{var
Pb={};rP[bGx]=Pb;var
Pa=Pb}Pa[bGw]=function(b,a){try{var
c=bGo(b,a);return c}catch(a){a=aS(a);return a[1]===rO?Hw(a[2]):Hw(new
Xl(am(Z(bGv,kX(a)))))}};ri(0);return}(globalThis));

},{"constants":30,"fs":29}],33:[function(require,module,exports){
/*jshint node:true */
/* globals define */
/*
  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

'use strict';

/**
The following batches are equivalent:

var beautify_js = require('js-beautify');
var beautify_js = require('js-beautify').js;
var beautify_js = require('js-beautify').js_beautify;

var beautify_css = require('js-beautify').css;
var beautify_css = require('js-beautify').css_beautify;

var beautify_html = require('js-beautify').html;
var beautify_html = require('js-beautify').html_beautify;

All methods returned accept two arguments, the source string and an options object.
**/

function get_beautify(js_beautify, css_beautify, html_beautify) {
  // the default is js
  var beautify = function(src, config) {
    return js_beautify.js_beautify(src, config);
  };

  // short aliases
  beautify.js = js_beautify.js_beautify;
  beautify.css = css_beautify.css_beautify;
  beautify.html = html_beautify.html_beautify;

  // legacy aliases
  beautify.js_beautify = js_beautify.js_beautify;
  beautify.css_beautify = css_beautify.css_beautify;
  beautify.html_beautify = html_beautify.html_beautify;

  return beautify;
}

if (typeof define === "function" && define.amd) {
  // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
  define([
    "./lib/beautify",
    "./lib/beautify-css",
    "./lib/beautify-html"
  ], function(js_beautify, css_beautify, html_beautify) {
    return get_beautify(js_beautify, css_beautify, html_beautify);
  });
} else {
  (function(mod) {
    var beautifier = require('./src/index');
    beautifier.js_beautify = beautifier.js;
    beautifier.css_beautify = beautifier.css;
    beautifier.html_beautify = beautifier.html;

    mod.exports = get_beautify(beautifier, beautifier, beautifier);

  })(module);
}
},{"./src/index":51}],34:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function Directives(start_block_pattern, end_block_pattern) {
  start_block_pattern = typeof start_block_pattern === 'string' ? start_block_pattern : start_block_pattern.source;
  end_block_pattern = typeof end_block_pattern === 'string' ? end_block_pattern : end_block_pattern.source;
  this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \w+[:]\w+)+ /.source + end_block_pattern, 'g');
  this.__directive_pattern = / (\w+)[:](\w+)/g;

  this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\sbeautify\signore:end\s/.source + end_block_pattern, 'g');
}

Directives.prototype.get_directives = function(text) {
  if (!text.match(this.__directives_block_pattern)) {
    return null;
  }

  var directives = {};
  this.__directive_pattern.lastIndex = 0;
  var directive_match = this.__directive_pattern.exec(text);

  while (directive_match) {
    directives[directive_match[1]] = directive_match[2];
    directive_match = this.__directive_pattern.exec(text);
  }

  return directives;
};

Directives.prototype.readIgnored = function(input) {
  return input.readUntilAfter(this.__directives_end_ignore_pattern);
};


module.exports.Directives = Directives;

},{}],35:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var regexp_has_sticky = RegExp.prototype.hasOwnProperty('sticky');

function InputScanner(input_string) {
  this.__input = input_string || '';
  this.__input_length = this.__input.length;
  this.__position = 0;
}

InputScanner.prototype.restart = function() {
  this.__position = 0;
};

InputScanner.prototype.back = function() {
  if (this.__position > 0) {
    this.__position -= 1;
  }
};

InputScanner.prototype.hasNext = function() {
  return this.__position < this.__input_length;
};

InputScanner.prototype.next = function() {
  var val = null;
  if (this.hasNext()) {
    val = this.__input.charAt(this.__position);
    this.__position += 1;
  }
  return val;
};

InputScanner.prototype.peek = function(index) {
  var val = null;
  index = index || 0;
  index += this.__position;
  if (index >= 0 && index < this.__input_length) {
    val = this.__input.charAt(index);
  }
  return val;
};

// This is a JavaScript only helper function (not in python)
// Javascript doesn't have a match method
// and not all implementation support "sticky" flag.
// If they do not support sticky then both this.match() and this.test() method
// must get the match and check the index of the match.
// If sticky is supported and set, this method will use it.
// Otherwise it will check that global is set, and fall back to the slower method.
InputScanner.prototype.__match = function(pattern, index) {
  pattern.lastIndex = index;
  var pattern_match = pattern.exec(this.__input);

  if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {
    if (pattern_match.index !== index) {
      pattern_match = null;
    }
  }

  return pattern_match;
};

InputScanner.prototype.test = function(pattern, index) {
  index = index || 0;
  index += this.__position;

  if (index >= 0 && index < this.__input_length) {
    return !!this.__match(pattern, index);
  } else {
    return false;
  }
};

InputScanner.prototype.testChar = function(pattern, index) {
  // test one character regex match
  var val = this.peek(index);
  pattern.lastIndex = 0;
  return val !== null && pattern.test(val);
};

InputScanner.prototype.match = function(pattern) {
  var pattern_match = this.__match(pattern, this.__position);
  if (pattern_match) {
    this.__position += pattern_match[0].length;
  } else {
    pattern_match = null;
  }
  return pattern_match;
};

InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {
  var val = '';
  var match;
  if (starting_pattern) {
    match = this.match(starting_pattern);
    if (match) {
      val += match[0];
    }
  }
  if (until_pattern && (match || !starting_pattern)) {
    val += this.readUntil(until_pattern, until_after);
  }
  return val;
};

InputScanner.prototype.readUntil = function(pattern, until_after) {
  var val = '';
  var match_index = this.__position;
  pattern.lastIndex = this.__position;
  var pattern_match = pattern.exec(this.__input);
  if (pattern_match) {
    match_index = pattern_match.index;
    if (until_after) {
      match_index += pattern_match[0].length;
    }
  } else {
    match_index = this.__input_length;
  }

  val = this.__input.substring(this.__position, match_index);
  this.__position = match_index;
  return val;
};

InputScanner.prototype.readUntilAfter = function(pattern) {
  return this.readUntil(pattern, true);
};

InputScanner.prototype.get_regexp = function(pattern, match_from) {
  var result = null;
  var flags = 'g';
  if (match_from && regexp_has_sticky) {
    flags = 'y';
  }
  // strings are converted to regexp
  if (typeof pattern === "string" && pattern !== '') {
    // result = new RegExp(pattern.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), flags);
    result = new RegExp(pattern, flags);
  } else if (pattern) {
    result = new RegExp(pattern.source, flags);
  }
  return result;
};

InputScanner.prototype.get_literal_regexp = function(literal_string) {
  return RegExp(literal_string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'));
};

/* css beautifier legacy helpers */
InputScanner.prototype.peekUntilAfter = function(pattern) {
  var start = this.__position;
  var val = this.readUntilAfter(pattern);
  this.__position = start;
  return val;
};

InputScanner.prototype.lookBack = function(testVal) {
  var start = this.__position - 1;
  return start >= testVal.length && this.__input.substring(start - testVal.length, start)
    .toLowerCase() === testVal;
};

module.exports.InputScanner = InputScanner;

},{}],36:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function Options(options, merge_child_field) {
  this.raw_options = _mergeOpts(options, merge_child_field);

  // Support passing the source text back with no change
  this.disabled = this._get_boolean('disabled');

  this.eol = this._get_characters('eol', 'auto');
  this.end_with_newline = this._get_boolean('end_with_newline');
  this.indent_size = this._get_number('indent_size', 4);
  this.indent_char = this._get_characters('indent_char', ' ');
  this.indent_level = this._get_number('indent_level');

  this.preserve_newlines = this._get_boolean('preserve_newlines', true);
  this.max_preserve_newlines = this._get_number('max_preserve_newlines', 32786);
  if (!this.preserve_newlines) {
    this.max_preserve_newlines = 0;
  }

  this.indent_with_tabs = this._get_boolean('indent_with_tabs', this.indent_char === '\t');
  if (this.indent_with_tabs) {
    this.indent_char = '\t';

    // indent_size behavior changed after 1.8.6
    // It used to be that indent_size would be
    // set to 1 for indent_with_tabs. That is no longer needed and
    // actually doesn't make sense - why not use spaces? Further,
    // that might produce unexpected behavior - tabs being used
    // for single-column alignment. So, when indent_with_tabs is true
    // and indent_size is 1, reset indent_size to 4.
    if (this.indent_size === 1) {
      this.indent_size = 4;
    }
  }

  // Backwards compat with 1.3.x
  this.wrap_line_length = this._get_number('wrap_line_length', this._get_number('max_char'));

  this.indent_empty_lines = this._get_boolean('indent_empty_lines');

  // valid templating languages ['django', 'erb', 'handlebars', 'php', 'smarty']
  // For now, 'auto' = all off for javascript, all on for html (and inline javascript).
  // other values ignored
  this.templating = this._get_selection_list('templating', ['auto', 'none', 'django', 'erb', 'handlebars', 'php', 'smarty'], ['auto']);
}

Options.prototype._get_array = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = default_value || [];
  if (typeof option_value === 'object') {
    if (option_value !== null && typeof option_value.concat === 'function') {
      result = option_value.concat();
    }
  } else if (typeof option_value === 'string') {
    result = option_value.split(/[^a-zA-Z0-9_\/\-]+/);
  }
  return result;
};

Options.prototype._get_boolean = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = option_value === undefined ? !!default_value : !!option_value;
  return result;
};

Options.prototype._get_characters = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = default_value || '';
  if (typeof option_value === 'string') {
    result = option_value.replace(/\\r/, '\r').replace(/\\n/, '\n').replace(/\\t/, '\t');
  }
  return result;
};

Options.prototype._get_number = function(name, default_value) {
  var option_value = this.raw_options[name];
  default_value = parseInt(default_value, 10);
  if (isNaN(default_value)) {
    default_value = 0;
  }
  var result = parseInt(option_value, 10);
  if (isNaN(result)) {
    result = default_value;
  }
  return result;
};

Options.prototype._get_selection = function(name, selection_list, default_value) {
  var result = this._get_selection_list(name, selection_list, default_value);
  if (result.length !== 1) {
    throw new Error(
      "Invalid Option Value: The option '" + name + "' can only be one of the following values:\n" +
      selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
  }

  return result[0];
};


Options.prototype._get_selection_list = function(name, selection_list, default_value) {
  if (!selection_list || selection_list.length === 0) {
    throw new Error("Selection list cannot be empty.");
  }

  default_value = default_value || [selection_list[0]];
  if (!this._is_valid_selection(default_value, selection_list)) {
    throw new Error("Invalid Default Value!");
  }

  var result = this._get_array(name, default_value);
  if (!this._is_valid_selection(result, selection_list)) {
    throw new Error(
      "Invalid Option Value: The option '" + name + "' can contain only the following values:\n" +
      selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
  }

  return result;
};

Options.prototype._is_valid_selection = function(result, selection_list) {
  return result.length && selection_list.length &&
    !result.some(function(item) { return selection_list.indexOf(item) === -1; });
};


// merges child options up with the parent options object
// Example: obj = {a: 1, b: {a: 2}}
//          mergeOpts(obj, 'b')
//
//          Returns: {a: 2}
function _mergeOpts(allOptions, childFieldName) {
  var finalOpts = {};
  allOptions = _normalizeOpts(allOptions);
  var name;

  for (name in allOptions) {
    if (name !== childFieldName) {
      finalOpts[name] = allOptions[name];
    }
  }

  //merge in the per type settings for the childFieldName
  if (childFieldName && allOptions[childFieldName]) {
    for (name in allOptions[childFieldName]) {
      finalOpts[name] = allOptions[childFieldName][name];
    }
  }
  return finalOpts;
}

function _normalizeOpts(options) {
  var convertedOpts = {};
  var key;

  for (key in options) {
    var newKey = key.replace(/-/g, "_");
    convertedOpts[newKey] = options[key];
  }
  return convertedOpts;
}

module.exports.Options = Options;
module.exports.normalizeOpts = _normalizeOpts;
module.exports.mergeOpts = _mergeOpts;

},{}],37:[function(require,module,exports){
/*jshint node:true */
/*
  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function OutputLine(parent) {
  this.__parent = parent;
  this.__character_count = 0;
  // use indent_count as a marker for this.__lines that have preserved indentation
  this.__indent_count = -1;
  this.__alignment_count = 0;
  this.__wrap_point_index = 0;
  this.__wrap_point_character_count = 0;
  this.__wrap_point_indent_count = -1;
  this.__wrap_point_alignment_count = 0;

  this.__items = [];
}

OutputLine.prototype.clone_empty = function() {
  var line = new OutputLine(this.__parent);
  line.set_indent(this.__indent_count, this.__alignment_count);
  return line;
};

OutputLine.prototype.item = function(index) {
  if (index < 0) {
    return this.__items[this.__items.length + index];
  } else {
    return this.__items[index];
  }
};

OutputLine.prototype.has_match = function(pattern) {
  for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {
    if (this.__items[lastCheckedOutput].match(pattern)) {
      return true;
    }
  }
  return false;
};

OutputLine.prototype.set_indent = function(indent, alignment) {
  if (this.is_empty()) {
    this.__indent_count = indent || 0;
    this.__alignment_count = alignment || 0;
    this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);
  }
};

OutputLine.prototype._set_wrap_point = function() {
  if (this.__parent.wrap_line_length) {
    this.__wrap_point_index = this.__items.length;
    this.__wrap_point_character_count = this.__character_count;
    this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;
    this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;
  }
};

OutputLine.prototype._should_wrap = function() {
  return this.__wrap_point_index &&
    this.__character_count > this.__parent.wrap_line_length &&
    this.__wrap_point_character_count > this.__parent.next_line.__character_count;
};

OutputLine.prototype._allow_wrap = function() {
  if (this._should_wrap()) {
    this.__parent.add_new_line();
    var next = this.__parent.current_line;
    next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);
    next.__items = this.__items.slice(this.__wrap_point_index);
    this.__items = this.__items.slice(0, this.__wrap_point_index);

    next.__character_count += this.__character_count - this.__wrap_point_character_count;
    this.__character_count = this.__wrap_point_character_count;

    if (next.__items[0] === " ") {
      next.__items.splice(0, 1);
      next.__character_count -= 1;
    }
    return true;
  }
  return false;
};

OutputLine.prototype.is_empty = function() {
  return this.__items.length === 0;
};

OutputLine.prototype.last = function() {
  if (!this.is_empty()) {
    return this.__items[this.__items.length - 1];
  } else {
    return null;
  }
};

OutputLine.prototype.push = function(item) {
  this.__items.push(item);
  var last_newline_index = item.lastIndexOf('\n');
  if (last_newline_index !== -1) {
    this.__character_count = item.length - last_newline_index;
  } else {
    this.__character_count += item.length;
  }
};

OutputLine.prototype.pop = function() {
  var item = null;
  if (!this.is_empty()) {
    item = this.__items.pop();
    this.__character_count -= item.length;
  }
  return item;
};


OutputLine.prototype._remove_indent = function() {
  if (this.__indent_count > 0) {
    this.__indent_count -= 1;
    this.__character_count -= this.__parent.indent_size;
  }
};

OutputLine.prototype._remove_wrap_indent = function() {
  if (this.__wrap_point_indent_count > 0) {
    this.__wrap_point_indent_count -= 1;
  }
};
OutputLine.prototype.trim = function() {
  while (this.last() === ' ') {
    this.__items.pop();
    this.__character_count -= 1;
  }
};

OutputLine.prototype.toString = function() {
  var result = '';
  if (this.is_empty()) {
    if (this.__parent.indent_empty_lines) {
      result = this.__parent.get_indent_string(this.__indent_count);
    }
  } else {
    result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);
    result += this.__items.join('');
  }
  return result;
};

function IndentStringCache(options, baseIndentString) {
  this.__cache = [''];
  this.__indent_size = options.indent_size;
  this.__indent_string = options.indent_char;
  if (!options.indent_with_tabs) {
    this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);
  }

  // Set to null to continue support for auto detection of base indent
  baseIndentString = baseIndentString || '';
  if (options.indent_level > 0) {
    baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);
  }

  this.__base_string = baseIndentString;
  this.__base_string_length = baseIndentString.length;
}

IndentStringCache.prototype.get_indent_size = function(indent, column) {
  var result = this.__base_string_length;
  column = column || 0;
  if (indent < 0) {
    result = 0;
  }
  result += indent * this.__indent_size;
  result += column;
  return result;
};

IndentStringCache.prototype.get_indent_string = function(indent_level, column) {
  var result = this.__base_string;
  column = column || 0;
  if (indent_level < 0) {
    indent_level = 0;
    result = '';
  }
  column += indent_level * this.__indent_size;
  this.__ensure_cache(column);
  result += this.__cache[column];
  return result;
};

IndentStringCache.prototype.__ensure_cache = function(column) {
  while (column >= this.__cache.length) {
    this.__add_column();
  }
};

IndentStringCache.prototype.__add_column = function() {
  var column = this.__cache.length;
  var indent = 0;
  var result = '';
  if (this.__indent_size && column >= this.__indent_size) {
    indent = Math.floor(column / this.__indent_size);
    column -= indent * this.__indent_size;
    result = new Array(indent + 1).join(this.__indent_string);
  }
  if (column) {
    result += new Array(column + 1).join(' ');
  }

  this.__cache.push(result);
};

function Output(options, baseIndentString) {
  this.__indent_cache = new IndentStringCache(options, baseIndentString);
  this.raw = false;
  this._end_with_newline = options.end_with_newline;
  this.indent_size = options.indent_size;
  this.wrap_line_length = options.wrap_line_length;
  this.indent_empty_lines = options.indent_empty_lines;
  this.__lines = [];
  this.previous_line = null;
  this.current_line = null;
  this.next_line = new OutputLine(this);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = false;
  // initialize
  this.__add_outputline();
}

Output.prototype.__add_outputline = function() {
  this.previous_line = this.current_line;
  this.current_line = this.next_line.clone_empty();
  this.__lines.push(this.current_line);
};

Output.prototype.get_line_number = function() {
  return this.__lines.length;
};

Output.prototype.get_indent_string = function(indent, column) {
  return this.__indent_cache.get_indent_string(indent, column);
};

Output.prototype.get_indent_size = function(indent, column) {
  return this.__indent_cache.get_indent_size(indent, column);
};

Output.prototype.is_empty = function() {
  return !this.previous_line && this.current_line.is_empty();
};

Output.prototype.add_new_line = function(force_newline) {
  // never newline at the start of file
  // otherwise, newline only if we didn't just add one or we're forced
  if (this.is_empty() ||
    (!force_newline && this.just_added_newline())) {
    return false;
  }

  // if raw output is enabled, don't print additional newlines,
  // but still return True as though you had
  if (!this.raw) {
    this.__add_outputline();
  }
  return true;
};

Output.prototype.get_code = function(eol) {
  this.trim(true);

  // handle some edge cases where the last tokens
  // has text that ends with newline(s)
  var last_item = this.current_line.pop();
  if (last_item) {
    if (last_item[last_item.length - 1] === '\n') {
      last_item = last_item.replace(/\n+$/g, '');
    }
    this.current_line.push(last_item);
  }

  if (this._end_with_newline) {
    this.__add_outputline();
  }

  var sweet_code = this.__lines.join('\n');

  if (eol !== '\n') {
    sweet_code = sweet_code.replace(/[\n]/g, eol);
  }
  return sweet_code;
};

Output.prototype.set_wrap_point = function() {
  this.current_line._set_wrap_point();
};

Output.prototype.set_indent = function(indent, alignment) {
  indent = indent || 0;
  alignment = alignment || 0;

  // Next line stores alignment values
  this.next_line.set_indent(indent, alignment);

  // Never indent your first output indent at the start of the file
  if (this.__lines.length > 1) {
    this.current_line.set_indent(indent, alignment);
    return true;
  }

  this.current_line.set_indent();
  return false;
};

Output.prototype.add_raw_token = function(token) {
  for (var x = 0; x < token.newlines; x++) {
    this.__add_outputline();
  }
  this.current_line.set_indent(-1);
  this.current_line.push(token.whitespace_before);
  this.current_line.push(token.text);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = false;
};

Output.prototype.add_token = function(printable_token) {
  this.__add_space_before_token();
  this.current_line.push(printable_token);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = this.current_line._allow_wrap();
};

Output.prototype.__add_space_before_token = function() {
  if (this.space_before_token && !this.just_added_newline()) {
    if (!this.non_breaking_space) {
      this.set_wrap_point();
    }
    this.current_line.push(' ');
  }
};

Output.prototype.remove_indent = function(index) {
  var output_length = this.__lines.length;
  while (index < output_length) {
    this.__lines[index]._remove_indent();
    index++;
  }
  this.current_line._remove_wrap_indent();
};

Output.prototype.trim = function(eat_newlines) {
  eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;

  this.current_line.trim();

  while (eat_newlines && this.__lines.length > 1 &&
    this.current_line.is_empty()) {
    this.__lines.pop();
    this.current_line = this.__lines[this.__lines.length - 1];
    this.current_line.trim();
  }

  this.previous_line = this.__lines.length > 1 ?
    this.__lines[this.__lines.length - 2] : null;
};

Output.prototype.just_added_newline = function() {
  return this.current_line.is_empty();
};

Output.prototype.just_added_blankline = function() {
  return this.is_empty() ||
    (this.current_line.is_empty() && this.previous_line.is_empty());
};

Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {
  var index = this.__lines.length - 2;
  while (index >= 0) {
    var potentialEmptyLine = this.__lines[index];
    if (potentialEmptyLine.is_empty()) {
      break;
    } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 &&
      potentialEmptyLine.item(-1) !== ends_with) {
      this.__lines.splice(index + 1, 0, new OutputLine(this));
      this.previous_line = this.__lines[this.__lines.length - 2];
      break;
    }
    index--;
  }
};

module.exports.Output = Output;

},{}],38:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function Pattern(input_scanner, parent) {
  this._input = input_scanner;
  this._starting_pattern = null;
  this._match_pattern = null;
  this._until_pattern = null;
  this._until_after = false;

  if (parent) {
    this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);
    this._match_pattern = this._input.get_regexp(parent._match_pattern, true);
    this._until_pattern = this._input.get_regexp(parent._until_pattern);
    this._until_after = parent._until_after;
  }
}

Pattern.prototype.read = function() {
  var result = this._input.read(this._starting_pattern);
  if (!this._starting_pattern || result) {
    result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);
  }
  return result;
};

Pattern.prototype.read_match = function() {
  return this._input.match(this._match_pattern);
};

Pattern.prototype.until_after = function(pattern) {
  var result = this._create();
  result._until_after = true;
  result._until_pattern = this._input.get_regexp(pattern);
  result._update();
  return result;
};

Pattern.prototype.until = function(pattern) {
  var result = this._create();
  result._until_after = false;
  result._until_pattern = this._input.get_regexp(pattern);
  result._update();
  return result;
};

Pattern.prototype.starting_with = function(pattern) {
  var result = this._create();
  result._starting_pattern = this._input.get_regexp(pattern, true);
  result._update();
  return result;
};

Pattern.prototype.matching = function(pattern) {
  var result = this._create();
  result._match_pattern = this._input.get_regexp(pattern, true);
  result._update();
  return result;
};

Pattern.prototype._create = function() {
  return new Pattern(this._input, this);
};

Pattern.prototype._update = function() {};

module.exports.Pattern = Pattern;

},{}],39:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Pattern = require('./pattern').Pattern;


var template_names = {
  django: false,
  erb: false,
  handlebars: false,
  php: false,
  smarty: false
};

// This lets templates appear anywhere we would do a readUntil
// The cost is higher but it is pay to play.
function TemplatablePattern(input_scanner, parent) {
  Pattern.call(this, input_scanner, parent);
  this.__template_pattern = null;
  this._disabled = Object.assign({}, template_names);
  this._excluded = Object.assign({}, template_names);

  if (parent) {
    this.__template_pattern = this._input.get_regexp(parent.__template_pattern);
    this._excluded = Object.assign(this._excluded, parent._excluded);
    this._disabled = Object.assign(this._disabled, parent._disabled);
  }
  var pattern = new Pattern(input_scanner);
  this.__patterns = {
    handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),
    handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),
    handlebars: pattern.starting_with(/{{/).until_after(/}}/),
    php: pattern.starting_with(/<\?(?:[= ]|php)/).until_after(/\?>/),
    erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),
    // django coflicts with handlebars a bit.
    django: pattern.starting_with(/{%/).until_after(/%}/),
    django_value: pattern.starting_with(/{{/).until_after(/}}/),
    django_comment: pattern.starting_with(/{#/).until_after(/#}/),
    smarty: pattern.starting_with(/{(?=[^}{\s\n])/).until_after(/[^\s\n]}/),
    smarty_comment: pattern.starting_with(/{\*/).until_after(/\*}/),
    smarty_literal: pattern.starting_with(/{literal}/).until_after(/{\/literal}/)
  };
}
TemplatablePattern.prototype = new Pattern();

TemplatablePattern.prototype._create = function() {
  return new TemplatablePattern(this._input, this);
};

TemplatablePattern.prototype._update = function() {
  this.__set_templated_pattern();
};

TemplatablePattern.prototype.disable = function(language) {
  var result = this._create();
  result._disabled[language] = true;
  result._update();
  return result;
};

TemplatablePattern.prototype.read_options = function(options) {
  var result = this._create();
  for (var language in template_names) {
    result._disabled[language] = options.templating.indexOf(language) === -1;
  }
  result._update();
  return result;
};

TemplatablePattern.prototype.exclude = function(language) {
  var result = this._create();
  result._excluded[language] = true;
  result._update();
  return result;
};

TemplatablePattern.prototype.read = function() {
  var result = '';
  if (this._match_pattern) {
    result = this._input.read(this._starting_pattern);
  } else {
    result = this._input.read(this._starting_pattern, this.__template_pattern);
  }
  var next = this._read_template();
  while (next) {
    if (this._match_pattern) {
      next += this._input.read(this._match_pattern);
    } else {
      next += this._input.readUntil(this.__template_pattern);
    }
    result += next;
    next = this._read_template();
  }

  if (this._until_after) {
    result += this._input.readUntilAfter(this._until_pattern);
  }
  return result;
};

TemplatablePattern.prototype.__set_templated_pattern = function() {
  var items = [];

  if (!this._disabled.php) {
    items.push(this.__patterns.php._starting_pattern.source);
  }
  if (!this._disabled.handlebars) {
    items.push(this.__patterns.handlebars._starting_pattern.source);
  }
  if (!this._disabled.erb) {
    items.push(this.__patterns.erb._starting_pattern.source);
  }
  if (!this._disabled.django) {
    items.push(this.__patterns.django._starting_pattern.source);
    // The starting pattern for django is more complex because it has different
    // patterns for value, comment, and other sections
    items.push(this.__patterns.django_value._starting_pattern.source);
    items.push(this.__patterns.django_comment._starting_pattern.source);
  }
  if (!this._disabled.smarty) {
    items.push(this.__patterns.smarty._starting_pattern.source);
  }

  if (this._until_pattern) {
    items.push(this._until_pattern.source);
  }
  this.__template_pattern = this._input.get_regexp('(?:' + items.join('|') + ')');
};

TemplatablePattern.prototype._read_template = function() {
  var resulting_string = '';
  var c = this._input.peek();
  if (c === '<') {
    var peek1 = this._input.peek(1);
    //if we're in a comment, do something special
    // We treat all comments as literals, even more than preformatted tags
    // we just look for the appropriate close tag
    if (!this._disabled.php && !this._excluded.php && peek1 === '?') {
      resulting_string = resulting_string ||
        this.__patterns.php.read();
    }
    if (!this._disabled.erb && !this._excluded.erb && peek1 === '%') {
      resulting_string = resulting_string ||
        this.__patterns.erb.read();
    }
  } else if (c === '{') {
    if (!this._disabled.handlebars && !this._excluded.handlebars) {
      resulting_string = resulting_string ||
        this.__patterns.handlebars_comment.read();
      resulting_string = resulting_string ||
        this.__patterns.handlebars_unescaped.read();
      resulting_string = resulting_string ||
        this.__patterns.handlebars.read();
    }
    if (!this._disabled.django) {
      // django coflicts with handlebars a bit.
      if (!this._excluded.django && !this._excluded.handlebars) {
        resulting_string = resulting_string ||
          this.__patterns.django_value.read();
      }
      if (!this._excluded.django) {
        resulting_string = resulting_string ||
          this.__patterns.django_comment.read();
        resulting_string = resulting_string ||
          this.__patterns.django.read();
      }
    }
    if (!this._disabled.smarty) {
      // smarty cannot be enabled with django or handlebars enabled
      if (this._disabled.django && this._disabled.handlebars) {
        resulting_string = resulting_string ||
          this.__patterns.smarty_comment.read();
        resulting_string = resulting_string ||
          this.__patterns.smarty_literal.read();
        resulting_string = resulting_string ||
          this.__patterns.smarty.read();
      }
    }
  }
  return resulting_string;
};


module.exports.TemplatablePattern = TemplatablePattern;

},{"./pattern":38}],40:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function Token(type, text, newlines, whitespace_before) {
  this.type = type;
  this.text = text;

  // comments_before are
  // comments that have a new line before them
  // and may or may not have a newline after
  // this is a set of comments before
  this.comments_before = null; /* inline comment*/


  // this.comments_after =  new TokenStream(); // no new line before and newline after
  this.newlines = newlines || 0;
  this.whitespace_before = whitespace_before || '';
  this.parent = null;
  this.next = null;
  this.previous = null;
  this.opened = null;
  this.closed = null;
  this.directives = null;
}


module.exports.Token = Token;

},{}],41:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var InputScanner = require('../core/inputscanner').InputScanner;
var Token = require('../core/token').Token;
var TokenStream = require('../core/tokenstream').TokenStream;
var WhitespacePattern = require('./whitespacepattern').WhitespacePattern;

var TOKEN = {
  START: 'TK_START',
  RAW: 'TK_RAW',
  EOF: 'TK_EOF'
};

var Tokenizer = function(input_string, options) {
  this._input = new InputScanner(input_string);
  this._options = options || {};
  this.__tokens = null;

  this._patterns = {};
  this._patterns.whitespace = new WhitespacePattern(this._input);
};

Tokenizer.prototype.tokenize = function() {
  this._input.restart();
  this.__tokens = new TokenStream();

  this._reset();

  var current;
  var previous = new Token(TOKEN.START, '');
  var open_token = null;
  var open_stack = [];
  var comments = new TokenStream();

  while (previous.type !== TOKEN.EOF) {
    current = this._get_next_token(previous, open_token);
    while (this._is_comment(current)) {
      comments.add(current);
      current = this._get_next_token(previous, open_token);
    }

    if (!comments.isEmpty()) {
      current.comments_before = comments;
      comments = new TokenStream();
    }

    current.parent = open_token;

    if (this._is_opening(current)) {
      open_stack.push(open_token);
      open_token = current;
    } else if (open_token && this._is_closing(current, open_token)) {
      current.opened = open_token;
      open_token.closed = current;
      open_token = open_stack.pop();
      current.parent = open_token;
    }

    current.previous = previous;
    previous.next = current;

    this.__tokens.add(current);
    previous = current;
  }

  return this.__tokens;
};


Tokenizer.prototype._is_first_token = function() {
  return this.__tokens.isEmpty();
};

Tokenizer.prototype._reset = function() {};

Tokenizer.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false
  this._readWhitespace();
  var resulting_string = this._input.read(/.+/g);
  if (resulting_string) {
    return this._create_token(TOKEN.RAW, resulting_string);
  } else {
    return this._create_token(TOKEN.EOF, '');
  }
};

Tokenizer.prototype._is_comment = function(current_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._is_opening = function(current_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._is_closing = function(current_token, open_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._create_token = function(type, text) {
  var token = new Token(type, text,
    this._patterns.whitespace.newline_count,
    this._patterns.whitespace.whitespace_before_token);
  return token;
};

Tokenizer.prototype._readWhitespace = function() {
  return this._patterns.whitespace.read();
};



module.exports.Tokenizer = Tokenizer;
module.exports.TOKEN = TOKEN;

},{"../core/inputscanner":35,"../core/token":40,"../core/tokenstream":42,"./whitespacepattern":43}],42:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

function TokenStream(parent_token) {
  // private
  this.__tokens = [];
  this.__tokens_length = this.__tokens.length;
  this.__position = 0;
  this.__parent_token = parent_token;
}

TokenStream.prototype.restart = function() {
  this.__position = 0;
};

TokenStream.prototype.isEmpty = function() {
  return this.__tokens_length === 0;
};

TokenStream.prototype.hasNext = function() {
  return this.__position < this.__tokens_length;
};

TokenStream.prototype.next = function() {
  var val = null;
  if (this.hasNext()) {
    val = this.__tokens[this.__position];
    this.__position += 1;
  }
  return val;
};

TokenStream.prototype.peek = function(index) {
  var val = null;
  index = index || 0;
  index += this.__position;
  if (index >= 0 && index < this.__tokens_length) {
    val = this.__tokens[index];
  }
  return val;
};

TokenStream.prototype.add = function(token) {
  if (this.__parent_token) {
    token.parent = this.__parent_token;
  }
  this.__tokens.push(token);
  this.__tokens_length += 1;
};

module.exports.TokenStream = TokenStream;

},{}],43:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Pattern = require('../core/pattern').Pattern;

function WhitespacePattern(input_scanner, parent) {
  Pattern.call(this, input_scanner, parent);
  if (parent) {
    this._line_regexp = this._input.get_regexp(parent._line_regexp);
  } else {
    this.__set_whitespace_patterns('', '');
  }

  this.newline_count = 0;
  this.whitespace_before_token = '';
}
WhitespacePattern.prototype = new Pattern();

WhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {
  whitespace_chars += '\\t ';
  newline_chars += '\\n\\r';

  this._match_pattern = this._input.get_regexp(
    '[' + whitespace_chars + newline_chars + ']+', true);
  this._newline_regexp = this._input.get_regexp(
    '\\r\\n|[' + newline_chars + ']');
};

WhitespacePattern.prototype.read = function() {
  this.newline_count = 0;
  this.whitespace_before_token = '';

  var resulting_string = this._input.read(this._match_pattern);
  if (resulting_string === ' ') {
    this.whitespace_before_token = ' ';
  } else if (resulting_string) {
    var matches = this.__split(this._newline_regexp, resulting_string);
    this.newline_count = matches.length - 1;
    this.whitespace_before_token = matches[this.newline_count];
  }

  return resulting_string;
};

WhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {
  var result = this._create();
  result.__set_whitespace_patterns(whitespace_chars, newline_chars);
  result._update();
  return result;
};

WhitespacePattern.prototype._create = function() {
  return new WhitespacePattern(this._input, this);
};

WhitespacePattern.prototype.__split = function(regexp, input_string) {
  regexp.lastIndex = 0;
  var start_index = 0;
  var result = [];
  var next_match = regexp.exec(input_string);
  while (next_match) {
    result.push(input_string.substring(start_index, next_match.index));
    start_index = next_match.index + next_match[0].length;
    next_match = regexp.exec(input_string);
  }

  if (start_index < input_string.length) {
    result.push(input_string.substring(start_index, input_string.length));
  } else {
    result.push('');
  }

  return result;
};



module.exports.WhitespacePattern = WhitespacePattern;

},{"../core/pattern":38}],44:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Options = require('./options').Options;
var Output = require('../core/output').Output;
var InputScanner = require('../core/inputscanner').InputScanner;
var Directives = require('../core/directives').Directives;

var directives_core = new Directives(/\/\*/, /\*\//);

var lineBreak = /\r\n|[\r\n]/;
var allLineBreaks = /\r\n|[\r\n]/g;

// tokenizer
var whitespaceChar = /\s/;
var whitespacePattern = /(?:\s|\n)+/g;
var block_comment_pattern = /\/\*(?:[\s\S]*?)((?:\*\/)|$)/g;
var comment_pattern = /\/\/(?:[^\n\r\u2028\u2029]*)/g;

function Beautifier(source_text, options) {
  this._source_text = source_text || '';
  // Allow the setting of language/file-type specific options
  // with inheritance of overall settings
  this._options = new Options(options);
  this._ch = null;
  this._input = null;

  // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
  this.NESTED_AT_RULE = {
    "@page": true,
    "@font-face": true,
    "@keyframes": true,
    // also in CONDITIONAL_GROUP_RULE below
    "@media": true,
    "@supports": true,
    "@document": true
  };
  this.CONDITIONAL_GROUP_RULE = {
    "@media": true,
    "@supports": true,
    "@document": true
  };
  this.NON_SEMICOLON_NEWLINE_PROPERTY = [
    "grid-template-areas",
    "grid-template"
  ];

}

Beautifier.prototype.eatString = function(endChars) {
  var result = '';
  this._ch = this._input.next();
  while (this._ch) {
    result += this._ch;
    if (this._ch === "\\") {
      result += this._input.next();
    } else if (endChars.indexOf(this._ch) !== -1 || this._ch === "\n") {
      break;
    }
    this._ch = this._input.next();
  }
  return result;
};

// Skips any white space in the source text from the current position.
// When allowAtLeastOneNewLine is true, will output new lines for each
// newline character found; if the user has preserve_newlines off, only
// the first newline will be output
Beautifier.prototype.eatWhitespace = function(allowAtLeastOneNewLine) {
  var result = whitespaceChar.test(this._input.peek());
  var newline_count = 0;
  while (whitespaceChar.test(this._input.peek())) {
    this._ch = this._input.next();
    if (allowAtLeastOneNewLine && this._ch === '\n') {
      if (newline_count === 0 || newline_count < this._options.max_preserve_newlines) {
        newline_count++;
        this._output.add_new_line(true);
      }
    }
  }
  return result;
};

// Nested pseudo-class if we are insideRule
// and the next special character found opens
// a new block
Beautifier.prototype.foundNestedPseudoClass = function() {
  var openParen = 0;
  var i = 1;
  var ch = this._input.peek(i);
  while (ch) {
    if (ch === "{") {
      return true;
    } else if (ch === '(') {
      // pseudoclasses can contain ()
      openParen += 1;
    } else if (ch === ')') {
      if (openParen === 0) {
        return false;
      }
      openParen -= 1;
    } else if (ch === ";" || ch === "}") {
      return false;
    }
    i++;
    ch = this._input.peek(i);
  }
  return false;
};

Beautifier.prototype.print_string = function(output_string) {
  this._output.set_indent(this._indentLevel);
  this._output.non_breaking_space = true;
  this._output.add_token(output_string);
};

Beautifier.prototype.preserveSingleSpace = function(isAfterSpace) {
  if (isAfterSpace) {
    this._output.space_before_token = true;
  }
};

Beautifier.prototype.indent = function() {
  this._indentLevel++;
};

Beautifier.prototype.outdent = function() {
  if (this._indentLevel > 0) {
    this._indentLevel--;
  }
};

/*_____________________--------------------_____________________*/

Beautifier.prototype.beautify = function() {
  if (this._options.disabled) {
    return this._source_text;
  }

  var source_text = this._source_text;
  var eol = this._options.eol;
  if (eol === 'auto') {
    eol = '\n';
    if (source_text && lineBreak.test(source_text || '')) {
      eol = source_text.match(lineBreak)[0];
    }
  }


  // HACK: newline parsing inconsistent. This brute force normalizes the this._input.
  source_text = source_text.replace(allLineBreaks, '\n');

  // reset
  var baseIndentString = source_text.match(/^[\t ]*/)[0];

  this._output = new Output(this._options, baseIndentString);
  this._input = new InputScanner(source_text);
  this._indentLevel = 0;
  this._nestedLevel = 0;

  this._ch = null;
  var parenLevel = 0;

  var insideRule = false;
  // This is the value side of a property value pair (blue in the following ex)
  // label { content: blue }
  var insidePropertyValue = false;
  var enteringConditionalGroup = false;
  var insideAtExtend = false;
  var insideAtImport = false;
  var insideScssMap = false;
  var topCharacter = this._ch;
  var insideNonSemiColonValues = false;
  var whitespace;
  var isAfterSpace;
  var previous_ch;

  while (true) {
    whitespace = this._input.read(whitespacePattern);
    isAfterSpace = whitespace !== '';
    previous_ch = topCharacter;
    this._ch = this._input.next();
    if (this._ch === '\\' && this._input.hasNext()) {
      this._ch += this._input.next();
    }
    topCharacter = this._ch;

    if (!this._ch) {
      break;
    } else if (this._ch === '/' && this._input.peek() === '*') {
      // /* css comment */
      // Always start block comments on a new line.
      // This handles scenarios where a block comment immediately
      // follows a property definition on the same line or where
      // minified code is being beautified.
      this._output.add_new_line();
      this._input.back();

      var comment = this._input.read(block_comment_pattern);

      // Handle ignore directive
      var directives = directives_core.get_directives(comment);
      if (directives && directives.ignore === 'start') {
        comment += directives_core.readIgnored(this._input);
      }

      this.print_string(comment);

      // Ensures any new lines following the comment are preserved
      this.eatWhitespace(true);

      // Block comments are followed by a new line so they don't
      // share a line with other properties
      this._output.add_new_line();
    } else if (this._ch === '/' && this._input.peek() === '/') {
      // // single line comment
      // Preserves the space before a comment
      // on the same line as a rule
      this._output.space_before_token = true;
      this._input.back();
      this.print_string(this._input.read(comment_pattern));

      // Ensures any new lines following the comment are preserved
      this.eatWhitespace(true);
    } else if (this._ch === '@' || this._ch === '$') {
      this.preserveSingleSpace(isAfterSpace);

      // deal with less propery mixins @{...}
      if (this._input.peek() === '{') {
        this.print_string(this._ch + this.eatString('}'));
      } else {
        this.print_string(this._ch);

        // strip trailing space, if present, for hash property checks
        var variableOrRule = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);

        if (variableOrRule.match(/[ :]$/)) {
          // we have a variable or pseudo-class, add it and insert one space before continuing
          variableOrRule = this.eatString(": ").replace(/\s$/, '');
          this.print_string(variableOrRule);
          this._output.space_before_token = true;
        }

        variableOrRule = variableOrRule.replace(/\s$/, '');

        if (variableOrRule === 'extend') {
          insideAtExtend = true;
        } else if (variableOrRule === 'import') {
          insideAtImport = true;
        }

        // might be a nesting at-rule
        if (variableOrRule in this.NESTED_AT_RULE) {
          this._nestedLevel += 1;
          if (variableOrRule in this.CONDITIONAL_GROUP_RULE) {
            enteringConditionalGroup = true;
          }
          // might be less variable
        } else if (!insideRule && parenLevel === 0 && variableOrRule.indexOf(':') !== -1) {
          insidePropertyValue = true;
          this.indent();
        }
      }
    } else if (this._ch === '#' && this._input.peek() === '{') {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch + this.eatString('}'));
    } else if (this._ch === '{') {
      if (insidePropertyValue) {
        insidePropertyValue = false;
        this.outdent();
      }

      // when entering conditional groups, only rulesets are allowed
      if (enteringConditionalGroup) {
        enteringConditionalGroup = false;
        insideRule = (this._indentLevel >= this._nestedLevel);
      } else {
        // otherwise, declarations are also allowed
        insideRule = (this._indentLevel >= this._nestedLevel - 1);
      }
      if (this._options.newline_between_rules && insideRule) {
        if (this._output.previous_line && this._output.previous_line.item(-1) !== '{') {
          this._output.ensure_empty_line_above('/', ',');
        }
      }

      this._output.space_before_token = true;

      // The difference in print_string and indent order is necessary to indent the '{' correctly
      if (this._options.brace_style === 'expand') {
        this._output.add_new_line();
        this.print_string(this._ch);
        this.indent();
        this._output.set_indent(this._indentLevel);
      } else {
        // inside mixin and first param is object
        if (previous_ch === '(') {
          this._output.space_before_token = false;
        } else if (previous_ch !== ',') {
          this.indent();
        }
        this.print_string(this._ch);
      }

      this.eatWhitespace(true);
      this._output.add_new_line();
    } else if (this._ch === '}') {
      this.outdent();
      this._output.add_new_line();
      if (previous_ch === '{') {
        this._output.trim(true);
      }
      insideAtImport = false;
      insideAtExtend = false;
      if (insidePropertyValue) {
        this.outdent();
        insidePropertyValue = false;
      }
      this.print_string(this._ch);
      insideRule = false;
      if (this._nestedLevel) {
        this._nestedLevel--;
      }

      this.eatWhitespace(true);
      this._output.add_new_line();

      if (this._options.newline_between_rules && !this._output.just_added_blankline()) {
        if (this._input.peek() !== '}') {
          this._output.add_new_line(true);
        }
      }
      if (this._input.peek() === ')') {
        this._output.trim(true);
        if (this._options.brace_style === "expand") {
          this._output.add_new_line(true);
        }
      }
    } else if (this._ch === ":") {

      for (var i = 0; i < this.NON_SEMICOLON_NEWLINE_PROPERTY.length; i++) {
        if (this._input.lookBack(this.NON_SEMICOLON_NEWLINE_PROPERTY[i])) {
          insideNonSemiColonValues = true;
          break;
        }
      }

      if ((insideRule || enteringConditionalGroup) && !(this._input.lookBack("&") || this.foundNestedPseudoClass()) && !this._input.lookBack("(") && !insideAtExtend && parenLevel === 0) {
        // 'property: value' delimiter
        // which could be in a conditional group query
        this.print_string(':');
        if (!insidePropertyValue) {
          insidePropertyValue = true;
          this._output.space_before_token = true;
          this.eatWhitespace(true);
          this.indent();
        }
      } else {
        // sass/less parent reference don't use a space
        // sass nested pseudo-class don't use a space

        // preserve space before pseudoclasses/pseudoelements, as it means "in any child"
        if (this._input.lookBack(" ")) {
          this._output.space_before_token = true;
        }
        if (this._input.peek() === ":") {
          // pseudo-element
          this._ch = this._input.next();
          this.print_string("::");
        } else {
          // pseudo-class
          this.print_string(':');
        }
      }
    } else if (this._ch === '"' || this._ch === '\'') {
      var preserveQuoteSpace = previous_ch === '"' || previous_ch === '\'';
      this.preserveSingleSpace(preserveQuoteSpace || isAfterSpace);
      this.print_string(this._ch + this.eatString(this._ch));
      this.eatWhitespace(true);
    } else if (this._ch === ';') {
      insideNonSemiColonValues = false;
      if (parenLevel === 0) {
        if (insidePropertyValue) {
          this.outdent();
          insidePropertyValue = false;
        }
        insideAtExtend = false;
        insideAtImport = false;
        this.print_string(this._ch);
        this.eatWhitespace(true);

        // This maintains single line comments on the same
        // line. Block comments are also affected, but
        // a new line is always output before one inside
        // that section
        if (this._input.peek() !== '/') {
          this._output.add_new_line();
        }
      } else {
        this.print_string(this._ch);
        this.eatWhitespace(true);
        this._output.space_before_token = true;
      }
    } else if (this._ch === '(') { // may be a url
      if (this._input.lookBack("url")) {
        this.print_string(this._ch);
        this.eatWhitespace();
        parenLevel++;
        this.indent();
        this._ch = this._input.next();
        if (this._ch === ')' || this._ch === '"' || this._ch === '\'') {
          this._input.back();
        } else if (this._ch) {
          this.print_string(this._ch + this.eatString(')'));
          if (parenLevel) {
            parenLevel--;
            this.outdent();
          }
        }
      } else {
        var space_needed = false;
        if (this._input.lookBack("with")) {
          // look back is not an accurate solution, we need tokens to confirm without whitespaces
          space_needed = true;
        }
        this.preserveSingleSpace(isAfterSpace || space_needed);
        this.print_string(this._ch);

        // handle scss/sass map
        if (insidePropertyValue && previous_ch === "$" && this._options.selector_separator_newline) {
          this._output.add_new_line();
          insideScssMap = true;
        } else {
          this.eatWhitespace();
          parenLevel++;
          this.indent();
        }
      }
    } else if (this._ch === ')') {
      if (parenLevel) {
        parenLevel--;
        this.outdent();
      }
      if (insideScssMap && this._input.peek() === ";" && this._options.selector_separator_newline) {
        insideScssMap = false;
        this.outdent();
        this._output.add_new_line();
      }
      this.print_string(this._ch);
    } else if (this._ch === ',') {
      this.print_string(this._ch);
      this.eatWhitespace(true);
      if (this._options.selector_separator_newline && (!insidePropertyValue || insideScssMap) && parenLevel === 0 && !insideAtImport && !insideAtExtend) {
        this._output.add_new_line();
      } else {
        this._output.space_before_token = true;
      }
    } else if ((this._ch === '>' || this._ch === '+' || this._ch === '~') && !insidePropertyValue && parenLevel === 0) {
      //handle combinator spacing
      if (this._options.space_around_combinator) {
        this._output.space_before_token = true;
        this.print_string(this._ch);
        this._output.space_before_token = true;
      } else {
        this.print_string(this._ch);
        this.eatWhitespace();
        // squash extra whitespace
        if (this._ch && whitespaceChar.test(this._ch)) {
          this._ch = '';
        }
      }
    } else if (this._ch === ']') {
      this.print_string(this._ch);
    } else if (this._ch === '[') {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch);
    } else if (this._ch === '=') { // no whitespace before or after
      this.eatWhitespace();
      this.print_string('=');
      if (whitespaceChar.test(this._ch)) {
        this._ch = '';
      }
    } else if (this._ch === '!' && !this._input.lookBack("\\")) { // !important
      this._output.space_before_token = true;
      this.print_string(this._ch);
    } else {
      var preserveAfterSpace = previous_ch === '"' || previous_ch === '\'';
      this.preserveSingleSpace(preserveAfterSpace || isAfterSpace);
      this.print_string(this._ch);

      if (!this._output.just_added_newline() && this._input.peek() === '\n' && insideNonSemiColonValues) {
        this._output.add_new_line();
      }
    }
  }

  var sweetCode = this._output.get_code(eol);

  return sweetCode;
};

module.exports.Beautifier = Beautifier;

},{"../core/directives":34,"../core/inputscanner":35,"../core/output":37,"./options":46}],45:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Beautifier = require('./beautifier').Beautifier,
  Options = require('./options').Options;

function css_beautify(source_text, options) {
  var beautifier = new Beautifier(source_text, options);
  return beautifier.beautify();
}

module.exports = css_beautify;
module.exports.defaultOptions = function() {
  return new Options();
};

},{"./beautifier":44,"./options":46}],46:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var BaseOptions = require('../core/options').Options;

function Options(options) {
  BaseOptions.call(this, options, 'css');

  this.selector_separator_newline = this._get_boolean('selector_separator_newline', true);
  this.newline_between_rules = this._get_boolean('newline_between_rules', true);
  var space_around_selector_separator = this._get_boolean('space_around_selector_separator');
  this.space_around_combinator = this._get_boolean('space_around_combinator') || space_around_selector_separator;

  var brace_style_split = this._get_selection_list('brace_style', ['collapse', 'expand', 'end-expand', 'none', 'preserve-inline']);
  this.brace_style = 'collapse';
  for (var bs = 0; bs < brace_style_split.length; bs++) {
    if (brace_style_split[bs] !== 'expand') {
      // default to collapse, as only collapse|expand is implemented for now
      this.brace_style = 'collapse';
    } else {
      this.brace_style = brace_style_split[bs];
    }
  }
}
Options.prototype = new BaseOptions();



module.exports.Options = Options;

},{"../core/options":36}],47:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Options = require('../html/options').Options;
var Output = require('../core/output').Output;
var Tokenizer = require('../html/tokenizer').Tokenizer;
var TOKEN = require('../html/tokenizer').TOKEN;

var lineBreak = /\r\n|[\r\n]/;
var allLineBreaks = /\r\n|[\r\n]/g;

var Printer = function(options, base_indent_string) { //handles input/output and some other printing functions

  this.indent_level = 0;
  this.alignment_size = 0;
  this.max_preserve_newlines = options.max_preserve_newlines;
  this.preserve_newlines = options.preserve_newlines;

  this._output = new Output(options, base_indent_string);

};

Printer.prototype.current_line_has_match = function(pattern) {
  return this._output.current_line.has_match(pattern);
};

Printer.prototype.set_space_before_token = function(value, non_breaking) {
  this._output.space_before_token = value;
  this._output.non_breaking_space = non_breaking;
};

Printer.prototype.set_wrap_point = function() {
  this._output.set_indent(this.indent_level, this.alignment_size);
  this._output.set_wrap_point();
};


Printer.prototype.add_raw_token = function(token) {
  this._output.add_raw_token(token);
};

Printer.prototype.print_preserved_newlines = function(raw_token) {
  var newlines = 0;
  if (raw_token.type !== TOKEN.TEXT && raw_token.previous.type !== TOKEN.TEXT) {
    newlines = raw_token.newlines ? 1 : 0;
  }

  if (this.preserve_newlines) {
    newlines = raw_token.newlines < this.max_preserve_newlines + 1 ? raw_token.newlines : this.max_preserve_newlines + 1;
  }
  for (var n = 0; n < newlines; n++) {
    this.print_newline(n > 0);
  }

  return newlines !== 0;
};

Printer.prototype.traverse_whitespace = function(raw_token) {
  if (raw_token.whitespace_before || raw_token.newlines) {
    if (!this.print_preserved_newlines(raw_token)) {
      this._output.space_before_token = true;
    }
    return true;
  }
  return false;
};

Printer.prototype.previous_token_wrapped = function() {
  return this._output.previous_token_wrapped;
};

Printer.prototype.print_newline = function(force) {
  this._output.add_new_line(force);
};

Printer.prototype.print_token = function(token) {
  if (token.text) {
    this._output.set_indent(this.indent_level, this.alignment_size);
    this._output.add_token(token.text);
  }
};

Printer.prototype.indent = function() {
  this.indent_level++;
};

Printer.prototype.get_full_indent = function(level) {
  level = this.indent_level + (level || 0);
  if (level < 1) {
    return '';
  }

  return this._output.get_indent_string(level);
};

var get_type_attribute = function(start_token) {
  var result = null;
  var raw_token = start_token.next;

  // Search attributes for a type attribute
  while (raw_token.type !== TOKEN.EOF && start_token.closed !== raw_token) {
    if (raw_token.type === TOKEN.ATTRIBUTE && raw_token.text === 'type') {
      if (raw_token.next && raw_token.next.type === TOKEN.EQUALS &&
        raw_token.next.next && raw_token.next.next.type === TOKEN.VALUE) {
        result = raw_token.next.next.text;
      }
      break;
    }
    raw_token = raw_token.next;
  }

  return result;
};

var get_custom_beautifier_name = function(tag_check, raw_token) {
  var typeAttribute = null;
  var result = null;

  if (!raw_token.closed) {
    return null;
  }

  if (tag_check === 'script') {
    typeAttribute = 'text/javascript';
  } else if (tag_check === 'style') {
    typeAttribute = 'text/css';
  }

  typeAttribute = get_type_attribute(raw_token) || typeAttribute;

  // For script and style tags that have a type attribute, only enable custom beautifiers for matching values
  // For those without a type attribute use default;
  if (typeAttribute.search('text/css') > -1) {
    result = 'css';
  } else if (typeAttribute.search(/module|((text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect))/) > -1) {
    result = 'javascript';
  } else if (typeAttribute.search(/(text|application|dojo)\/(x-)?(html)/) > -1) {
    result = 'html';
  } else if (typeAttribute.search(/test\/null/) > -1) {
    // Test only mime-type for testing the beautifier when null is passed as beautifing function
    result = 'null';
  }

  return result;
};

function in_array(what, arr) {
  return arr.indexOf(what) !== -1;
}

function TagFrame(parent, parser_token, indent_level) {
  this.parent = parent || null;
  this.tag = parser_token ? parser_token.tag_name : '';
  this.indent_level = indent_level || 0;
  this.parser_token = parser_token || null;
}

function TagStack(printer) {
  this._printer = printer;
  this._current_frame = null;
}

TagStack.prototype.get_parser_token = function() {
  return this._current_frame ? this._current_frame.parser_token : null;
};

TagStack.prototype.record_tag = function(parser_token) { //function to record a tag and its parent in this.tags Object
  var new_frame = new TagFrame(this._current_frame, parser_token, this._printer.indent_level);
  this._current_frame = new_frame;
};

TagStack.prototype._try_pop_frame = function(frame) { //function to retrieve the opening tag to the corresponding closer
  var parser_token = null;

  if (frame) {
    parser_token = frame.parser_token;
    this._printer.indent_level = frame.indent_level;
    this._current_frame = frame.parent;
  }

  return parser_token;
};

TagStack.prototype._get_frame = function(tag_list, stop_list) { //function to retrieve the opening tag to the corresponding closer
  var frame = this._current_frame;

  while (frame) { //till we reach '' (the initial value);
    if (tag_list.indexOf(frame.tag) !== -1) { //if this is it use it
      break;
    } else if (stop_list && stop_list.indexOf(frame.tag) !== -1) {
      frame = null;
      break;
    }
    frame = frame.parent;
  }

  return frame;
};

TagStack.prototype.try_pop = function(tag, stop_list) { //function to retrieve the opening tag to the corresponding closer
  var frame = this._get_frame([tag], stop_list);
  return this._try_pop_frame(frame);
};

TagStack.prototype.indent_to_tag = function(tag_list) {
  var frame = this._get_frame(tag_list);
  if (frame) {
    this._printer.indent_level = frame.indent_level;
  }
};

function Beautifier(source_text, options, js_beautify, css_beautify) {
  //Wrapper function to invoke all the necessary constructors and deal with the output.
  this._source_text = source_text || '';
  options = options || {};
  this._js_beautify = js_beautify;
  this._css_beautify = css_beautify;
  this._tag_stack = null;

  // Allow the setting of language/file-type specific options
  // with inheritance of overall settings
  var optionHtml = new Options(options, 'html');

  this._options = optionHtml;

  this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, 'force'.length) === 'force';
  this._is_wrap_attributes_force_expand_multiline = (this._options.wrap_attributes === 'force-expand-multiline');
  this._is_wrap_attributes_force_aligned = (this._options.wrap_attributes === 'force-aligned');
  this._is_wrap_attributes_aligned_multiple = (this._options.wrap_attributes === 'aligned-multiple');
  this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, 'preserve'.length) === 'preserve';
  this._is_wrap_attributes_preserve_aligned = (this._options.wrap_attributes === 'preserve-aligned');
}

Beautifier.prototype.beautify = function() {

  // if disabled, return the input unchanged.
  if (this._options.disabled) {
    return this._source_text;
  }

  var source_text = this._source_text;
  var eol = this._options.eol;
  if (this._options.eol === 'auto') {
    eol = '\n';
    if (source_text && lineBreak.test(source_text)) {
      eol = source_text.match(lineBreak)[0];
    }
  }

  // HACK: newline parsing inconsistent. This brute force normalizes the input.
  source_text = source_text.replace(allLineBreaks, '\n');

  var baseIndentString = source_text.match(/^[\t ]*/)[0];

  var last_token = {
    text: '',
    type: ''
  };

  var last_tag_token = new TagOpenParserToken();

  var printer = new Printer(this._options, baseIndentString);
  var tokens = new Tokenizer(source_text, this._options).tokenize();

  this._tag_stack = new TagStack(printer);

  var parser_token = null;
  var raw_token = tokens.next();
  while (raw_token.type !== TOKEN.EOF) {

    if (raw_token.type === TOKEN.TAG_OPEN || raw_token.type === TOKEN.COMMENT) {
      parser_token = this._handle_tag_open(printer, raw_token, last_tag_token, last_token);
      last_tag_token = parser_token;
    } else if ((raw_token.type === TOKEN.ATTRIBUTE || raw_token.type === TOKEN.EQUALS || raw_token.type === TOKEN.VALUE) ||
      (raw_token.type === TOKEN.TEXT && !last_tag_token.tag_complete)) {
      parser_token = this._handle_inside_tag(printer, raw_token, last_tag_token, tokens);
    } else if (raw_token.type === TOKEN.TAG_CLOSE) {
      parser_token = this._handle_tag_close(printer, raw_token, last_tag_token);
    } else if (raw_token.type === TOKEN.TEXT) {
      parser_token = this._handle_text(printer, raw_token, last_tag_token);
    } else {
      // This should never happen, but if it does. Print the raw token
      printer.add_raw_token(raw_token);
    }

    last_token = parser_token;

    raw_token = tokens.next();
  }
  var sweet_code = printer._output.get_code(eol);

  return sweet_code;
};

Beautifier.prototype._handle_tag_close = function(printer, raw_token, last_tag_token) {
  var parser_token = {
    text: raw_token.text,
    type: raw_token.type
  };
  printer.alignment_size = 0;
  last_tag_token.tag_complete = true;

  printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== '', true);
  if (last_tag_token.is_unformatted) {
    printer.add_raw_token(raw_token);
  } else {
    if (last_tag_token.tag_start_char === '<') {
      printer.set_space_before_token(raw_token.text[0] === '/', true); // space before />, no space before >
      if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.has_wrapped_attrs) {
        printer.print_newline(false);
      }
    }
    printer.print_token(raw_token);

  }

  if (last_tag_token.indent_content &&
    !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {
    printer.indent();

    // only indent once per opened tag
    last_tag_token.indent_content = false;
  }

  if (!last_tag_token.is_inline_element &&
    !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {
    printer.set_wrap_point();
  }

  return parser_token;
};

Beautifier.prototype._handle_inside_tag = function(printer, raw_token, last_tag_token, tokens) {
  var wrapped = last_tag_token.has_wrapped_attrs;
  var parser_token = {
    text: raw_token.text,
    type: raw_token.type
  };

  printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== '', true);
  if (last_tag_token.is_unformatted) {
    printer.add_raw_token(raw_token);
  } else if (last_tag_token.tag_start_char === '{' && raw_token.type === TOKEN.TEXT) {
    // For the insides of handlebars allow newlines or a single space between open and contents
    if (printer.print_preserved_newlines(raw_token)) {
      raw_token.newlines = 0;
      printer.add_raw_token(raw_token);
    } else {
      printer.print_token(raw_token);
    }
  } else {
    if (raw_token.type === TOKEN.ATTRIBUTE) {
      printer.set_space_before_token(true);
      last_tag_token.attr_count += 1;
    } else if (raw_token.type === TOKEN.EQUALS) { //no space before =
      printer.set_space_before_token(false);
    } else if (raw_token.type === TOKEN.VALUE && raw_token.previous.type === TOKEN.EQUALS) { //no space before value
      printer.set_space_before_token(false);
    }

    if (raw_token.type === TOKEN.ATTRIBUTE && last_tag_token.tag_start_char === '<') {
      if (this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) {
        printer.traverse_whitespace(raw_token);
        wrapped = wrapped || raw_token.newlines !== 0;
      }


      if (this._is_wrap_attributes_force) {
        var force_attr_wrap = last_tag_token.attr_count > 1;
        if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.attr_count === 1) {
          var is_only_attribute = true;
          var peek_index = 0;
          var peek_token;
          do {
            peek_token = tokens.peek(peek_index);
            if (peek_token.type === TOKEN.ATTRIBUTE) {
              is_only_attribute = false;
              break;
            }
            peek_index += 1;
          } while (peek_index < 4 && peek_token.type !== TOKEN.EOF && peek_token.type !== TOKEN.TAG_CLOSE);

          force_attr_wrap = !is_only_attribute;
        }

        if (force_attr_wrap) {
          printer.print_newline(false);
          wrapped = true;
        }
      }
    }
    printer.print_token(raw_token);
    wrapped = wrapped || printer.previous_token_wrapped();
    last_tag_token.has_wrapped_attrs = wrapped;
  }
  return parser_token;
};

Beautifier.prototype._handle_text = function(printer, raw_token, last_tag_token) {
  var parser_token = {
    text: raw_token.text,
    type: 'TK_CONTENT'
  };
  if (last_tag_token.custom_beautifier_name) { //check if we need to format javascript
    this._print_custom_beatifier_text(printer, raw_token, last_tag_token);
  } else if (last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) {
    printer.add_raw_token(raw_token);
  } else {
    printer.traverse_whitespace(raw_token);
    printer.print_token(raw_token);
  }
  return parser_token;
};

Beautifier.prototype._print_custom_beatifier_text = function(printer, raw_token, last_tag_token) {
  var local = this;
  if (raw_token.text !== '') {

    var text = raw_token.text,
      _beautifier,
      script_indent_level = 1,
      pre = '',
      post = '';
    if (last_tag_token.custom_beautifier_name === 'javascript' && typeof this._js_beautify === 'function') {
      _beautifier = this._js_beautify;
    } else if (last_tag_token.custom_beautifier_name === 'css' && typeof this._css_beautify === 'function') {
      _beautifier = this._css_beautify;
    } else if (last_tag_token.custom_beautifier_name === 'html') {
      _beautifier = function(html_source, options) {
        var beautifier = new Beautifier(html_source, options, local._js_beautify, local._css_beautify);
        return beautifier.beautify();
      };
    }

    if (this._options.indent_scripts === "keep") {
      script_indent_level = 0;
    } else if (this._options.indent_scripts === "separate") {
      script_indent_level = -printer.indent_level;
    }

    var indentation = printer.get_full_indent(script_indent_level);

    // if there is at least one empty line at the end of this text, strip it
    // we'll be adding one back after the text but before the containing tag.
    text = text.replace(/\n[ \t]*$/, '');

    // Handle the case where content is wrapped in a comment or cdata.
    if (last_tag_token.custom_beautifier_name !== 'html' &&
      text[0] === '<' && text.match(/^(<!--|<!\[CDATA\[)/)) {
      var matched = /^(<!--[^\n]*|<!\[CDATA\[)(\n?)([ \t\n]*)([\s\S]*)(-->|]]>)$/.exec(text);

      // if we start to wrap but don't finish, print raw
      if (!matched) {
        printer.add_raw_token(raw_token);
        return;
      }

      pre = indentation + matched[1] + '\n';
      text = matched[4];
      if (matched[5]) {
        post = indentation + matched[5];
      }

      // if there is at least one empty line at the end of this text, strip it
      // we'll be adding one back after the text but before the containing tag.
      text = text.replace(/\n[ \t]*$/, '');

      if (matched[2] || matched[3].indexOf('\n') !== -1) {
        // if the first line of the non-comment text has spaces
        // use that as the basis for indenting in null case.
        matched = matched[3].match(/[ \t]+$/);
        if (matched) {
          raw_token.whitespace_before = matched[0];
        }
      }
    }

    if (text) {
      if (_beautifier) {

        // call the Beautifier if avaliable
        var Child_options = function() {
          this.eol = '\n';
        };
        Child_options.prototype = this._options.raw_options;
        var child_options = new Child_options();
        text = _beautifier(indentation + text, child_options);
      } else {
        // simply indent the string otherwise
        var white = raw_token.whitespace_before;
        if (white) {
          text = text.replace(new RegExp('\n(' + white + ')?', 'g'), '\n');
        }

        text = indentation + text.replace(/\n/g, '\n' + indentation);
      }
    }

    if (pre) {
      if (!text) {
        text = pre + post;
      } else {
        text = pre + text + '\n' + post;
      }
    }

    printer.print_newline(false);
    if (text) {
      raw_token.text = text;
      raw_token.whitespace_before = '';
      raw_token.newlines = 0;
      printer.add_raw_token(raw_token);
      printer.print_newline(true);
    }
  }
};

Beautifier.prototype._handle_tag_open = function(printer, raw_token, last_tag_token, last_token) {
  var parser_token = this._get_tag_open_token(raw_token);

  if ((last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) &&
    !last_tag_token.is_empty_element &&
    raw_token.type === TOKEN.TAG_OPEN && raw_token.text.indexOf('</') === 0) {
    // End element tags for unformatted or content_unformatted elements
    // are printed raw to keep any newlines inside them exactly the same.
    printer.add_raw_token(raw_token);
    parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name);
  } else {
    printer.traverse_whitespace(raw_token);
    this._set_tag_position(printer, raw_token, parser_token, last_tag_token, last_token);
    if (!parser_token.is_inline_element) {
      printer.set_wrap_point();
    }
    printer.print_token(raw_token);
  }

  //indent attributes an auto, forced, aligned or forced-align line-wrap
  if (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) {
    parser_token.alignment_size = raw_token.text.length + 1;
  }

  if (!parser_token.tag_complete && !parser_token.is_unformatted) {
    printer.alignment_size = parser_token.alignment_size;
  }

  return parser_token;
};

var TagOpenParserToken = function(parent, raw_token) {
  this.parent = parent || null;
  this.text = '';
  this.type = 'TK_TAG_OPEN';
  this.tag_name = '';
  this.is_inline_element = false;
  this.is_unformatted = false;
  this.is_content_unformatted = false;
  this.is_empty_element = false;
  this.is_start_tag = false;
  this.is_end_tag = false;
  this.indent_content = false;
  this.multiline_content = false;
  this.custom_beautifier_name = null;
  this.start_tag_token = null;
  this.attr_count = 0;
  this.has_wrapped_attrs = false;
  this.alignment_size = 0;
  this.tag_complete = false;
  this.tag_start_char = '';
  this.tag_check = '';

  if (!raw_token) {
    this.tag_complete = true;
  } else {
    var tag_check_match;

    this.tag_start_char = raw_token.text[0];
    this.text = raw_token.text;

    if (this.tag_start_char === '<') {
      tag_check_match = raw_token.text.match(/^<([^\s>]*)/);
      this.tag_check = tag_check_match ? tag_check_match[1] : '';
    } else {
      tag_check_match = raw_token.text.match(/^{{~?(?:[\^]|#\*?)?([^\s}]+)/);
      this.tag_check = tag_check_match ? tag_check_match[1] : '';

      // handle "{{#> myPartial}}" or "{{~#> myPartial}}"
      if ((raw_token.text.startsWith('{{#>') || raw_token.text.startsWith('{{~#>')) && this.tag_check[0] === '>') {
        if (this.tag_check === '>' && raw_token.next !== null) {
          this.tag_check = raw_token.next.text.split(' ')[0];
        } else {
          this.tag_check = raw_token.text.split('>')[1];
        }
      }
    }

    this.tag_check = this.tag_check.toLowerCase();

    if (raw_token.type === TOKEN.COMMENT) {
      this.tag_complete = true;
    }

    this.is_start_tag = this.tag_check.charAt(0) !== '/';
    this.tag_name = !this.is_start_tag ? this.tag_check.substr(1) : this.tag_check;
    this.is_end_tag = !this.is_start_tag ||
      (raw_token.closed && raw_token.closed.text === '/>');

    // if whitespace handler ~ included (i.e. {{~#if true}}), handlebars tags start at pos 3 not pos 2
    var handlebar_starts = 2;
    if (this.tag_start_char === '{' && this.text.length >= 3) {
      if (this.text.charAt(2) === '~') {
        handlebar_starts = 3;
      }
    }

    // handlebars tags that don't start with # or ^ are single_tags, and so also start and end.
    this.is_end_tag = this.is_end_tag ||
      (this.tag_start_char === '{' && (this.text.length < 3 || (/[^#\^]/.test(this.text.charAt(handlebar_starts)))));
  }
};

Beautifier.prototype._get_tag_open_token = function(raw_token) { //function to get a full tag and parse its type
  var parser_token = new TagOpenParserToken(this._tag_stack.get_parser_token(), raw_token);

  parser_token.alignment_size = this._options.wrap_attributes_indent_size;

  parser_token.is_end_tag = parser_token.is_end_tag ||
    in_array(parser_token.tag_check, this._options.void_elements);

  parser_token.is_empty_element = parser_token.tag_complete ||
    (parser_token.is_start_tag && parser_token.is_end_tag);

  parser_token.is_unformatted = !parser_token.tag_complete && in_array(parser_token.tag_check, this._options.unformatted);
  parser_token.is_content_unformatted = !parser_token.is_empty_element && in_array(parser_token.tag_check, this._options.content_unformatted);
  parser_token.is_inline_element = in_array(parser_token.tag_name, this._options.inline) || parser_token.tag_start_char === '{';

  return parser_token;
};

Beautifier.prototype._set_tag_position = function(printer, raw_token, parser_token, last_tag_token, last_token) {

  if (!parser_token.is_empty_element) {
    if (parser_token.is_end_tag) { //this tag is a double tag so check for tag-ending
      parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name); //remove it and all ancestors
    } else { // it's a start-tag
      // check if this tag is starting an element that has optional end element
      // and do an ending needed
      if (this._do_optional_end_element(parser_token)) {
        if (!parser_token.is_inline_element) {
          printer.print_newline(false);
        }
      }

      this._tag_stack.record_tag(parser_token); //push it on the tag stack

      if ((parser_token.tag_name === 'script' || parser_token.tag_name === 'style') &&
        !(parser_token.is_unformatted || parser_token.is_content_unformatted)) {
        parser_token.custom_beautifier_name = get_custom_beautifier_name(parser_token.tag_check, raw_token);
      }
    }
  }

  if (in_array(parser_token.tag_check, this._options.extra_liners)) { //check if this double needs an extra line
    printer.print_newline(false);
    if (!printer._output.just_added_blankline()) {
      printer.print_newline(true);
    }
  }

  if (parser_token.is_empty_element) { //if this tag name is a single tag type (either in the list or has a closing /)

    // if you hit an else case, reset the indent level if you are inside an:
    // 'if', 'unless', or 'each' block.
    if (parser_token.tag_start_char === '{' && parser_token.tag_check === 'else') {
      this._tag_stack.indent_to_tag(['if', 'unless', 'each']);
      parser_token.indent_content = true;
      // Don't add a newline if opening {{#if}} tag is on the current line
      var foundIfOnCurrentLine = printer.current_line_has_match(/{{#if/);
      if (!foundIfOnCurrentLine) {
        printer.print_newline(false);
      }
    }

    // Don't add a newline before elements that should remain where they are.
    if (parser_token.tag_name === '!--' && last_token.type === TOKEN.TAG_CLOSE &&
      last_tag_token.is_end_tag && parser_token.text.indexOf('\n') === -1) {
      //Do nothing. Leave comments on same line.
    } else {
      if (!(parser_token.is_inline_element || parser_token.is_unformatted)) {
        printer.print_newline(false);
      }
      this._calcluate_parent_multiline(printer, parser_token);
    }
  } else if (parser_token.is_end_tag) { //this tag is a double tag so check for tag-ending
    var do_end_expand = false;

    // deciding whether a block is multiline should not be this hard
    do_end_expand = parser_token.start_tag_token && parser_token.start_tag_token.multiline_content;
    do_end_expand = do_end_expand || (!parser_token.is_inline_element &&
      !(last_tag_token.is_inline_element || last_tag_token.is_unformatted) &&
      !(last_token.type === TOKEN.TAG_CLOSE && parser_token.start_tag_token === last_tag_token) &&
      last_token.type !== 'TK_CONTENT'
    );

    if (parser_token.is_content_unformatted || parser_token.is_unformatted) {
      do_end_expand = false;
    }

    if (do_end_expand) {
      printer.print_newline(false);
    }
  } else { // it's a start-tag
    parser_token.indent_content = !parser_token.custom_beautifier_name;

    if (parser_token.tag_start_char === '<') {
      if (parser_token.tag_name === 'html') {
        parser_token.indent_content = this._options.indent_inner_html;
      } else if (parser_token.tag_name === 'head') {
        parser_token.indent_content = this._options.indent_head_inner_html;
      } else if (parser_token.tag_name === 'body') {
        parser_token.indent_content = this._options.indent_body_inner_html;
      }
    }

    if (!(parser_token.is_inline_element || parser_token.is_unformatted) &&
      (last_token.type !== 'TK_CONTENT' || parser_token.is_content_unformatted)) {
      printer.print_newline(false);
    }

    this._calcluate_parent_multiline(printer, parser_token);
  }
};

Beautifier.prototype._calcluate_parent_multiline = function(printer, parser_token) {
  if (parser_token.parent && printer._output.just_added_newline() &&
    !((parser_token.is_inline_element || parser_token.is_unformatted) && parser_token.parent.is_inline_element)) {
    parser_token.parent.multiline_content = true;
  }
};

//To be used for <p> tag special case:
var p_closers = ['address', 'article', 'aside', 'blockquote', 'details', 'div', 'dl', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'];
var p_parent_excludes = ['a', 'audio', 'del', 'ins', 'map', 'noscript', 'video'];

Beautifier.prototype._do_optional_end_element = function(parser_token) {
  var result = null;
  // NOTE: cases of "if there is no more content in the parent element"
  // are handled automatically by the beautifier.
  // It assumes parent or ancestor close tag closes all children.
  // https://www.w3.org/TR/html5/syntax.html#optional-tags
  if (parser_token.is_empty_element || !parser_token.is_start_tag || !parser_token.parent) {
    return;

  }

  if (parser_token.tag_name === 'body') {
    // A head element’s end tag may be omitted if the head element is not immediately followed by a space character or a comment.
    result = result || this._tag_stack.try_pop('head');

    //} else if (parser_token.tag_name === 'body') {
    // DONE: A body element’s end tag may be omitted if the body element is not immediately followed by a comment.

  } else if (parser_token.tag_name === 'li') {
    // An li element’s end tag may be omitted if the li element is immediately followed by another li element or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('li', ['ol', 'ul']);

  } else if (parser_token.tag_name === 'dd' || parser_token.tag_name === 'dt') {
    // A dd element’s end tag may be omitted if the dd element is immediately followed by another dd element or a dt element, or if there is no more content in the parent element.
    // A dt element’s end tag may be omitted if the dt element is immediately followed by another dt element or a dd element.
    result = result || this._tag_stack.try_pop('dt', ['dl']);
    result = result || this._tag_stack.try_pop('dd', ['dl']);


  } else if (parser_token.parent.tag_name === 'p' && p_closers.indexOf(parser_token.tag_name) !== -1) {
    // IMPORTANT: this else-if works because p_closers has no overlap with any other element we look for in this method
    // check for the parent element is an HTML element that is not an <a>, <audio>, <del>, <ins>, <map>, <noscript>, or <video> element,  or an autonomous custom element.
    // To do this right, this needs to be coded as an inclusion of the inverse of the exclusion above.
    // But to start with (if we ignore "autonomous custom elements") the exclusion would be fine.
    var p_parent = parser_token.parent.parent;
    if (!p_parent || p_parent_excludes.indexOf(p_parent.tag_name) === -1) {
      result = result || this._tag_stack.try_pop('p');
    }
  } else if (parser_token.tag_name === 'rp' || parser_token.tag_name === 'rt') {
    // An rt element’s end tag may be omitted if the rt element is immediately followed by an rt or rp element, or if there is no more content in the parent element.
    // An rp element’s end tag may be omitted if the rp element is immediately followed by an rt or rp element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('rt', ['ruby', 'rtc']);
    result = result || this._tag_stack.try_pop('rp', ['ruby', 'rtc']);

  } else if (parser_token.tag_name === 'optgroup') {
    // An optgroup element’s end tag may be omitted if the optgroup element is immediately followed by another optgroup element, or if there is no more content in the parent element.
    // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('optgroup', ['select']);
    //result = result || this._tag_stack.try_pop('option', ['select']);

  } else if (parser_token.tag_name === 'option') {
    // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('option', ['select', 'datalist', 'optgroup']);

  } else if (parser_token.tag_name === 'colgroup') {
    // DONE: A colgroup element’s end tag may be omitted if the colgroup element is not immediately followed by a space character or a comment.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);

  } else if (parser_token.tag_name === 'thead') {
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);

    //} else if (parser_token.tag_name === 'caption') {
    // DONE: A caption element’s end tag may be omitted if the caption element is not immediately followed by a space character or a comment.

  } else if (parser_token.tag_name === 'tbody' || parser_token.tag_name === 'tfoot') {
    // A thead element’s end tag may be omitted if the thead element is immediately followed by a tbody or tfoot element.
    // A tbody element’s end tag may be omitted if the tbody element is immediately followed by a tbody or tfoot element, or if there is no more content in the parent element.
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);
    result = result || this._tag_stack.try_pop('thead', ['table']);
    result = result || this._tag_stack.try_pop('tbody', ['table']);

    //} else if (parser_token.tag_name === 'tfoot') {
    // DONE: A tfoot element’s end tag may be omitted if there is no more content in the parent element.

  } else if (parser_token.tag_name === 'tr') {
    // A tr element’s end tag may be omitted if the tr element is immediately followed by another tr element, or if there is no more content in the parent element.
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);
    result = result || this._tag_stack.try_pop('tr', ['table', 'thead', 'tbody', 'tfoot']);

  } else if (parser_token.tag_name === 'th' || parser_token.tag_name === 'td') {
    // A td element’s end tag may be omitted if the td element is immediately followed by a td or th element, or if there is no more content in the parent element.
    // A th element’s end tag may be omitted if the th element is immediately followed by a td or th element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('td', ['table', 'thead', 'tbody', 'tfoot', 'tr']);
    result = result || this._tag_stack.try_pop('th', ['table', 'thead', 'tbody', 'tfoot', 'tr']);
  }

  // Start element omission not handled currently
  // A head element’s start tag may be omitted if the element is empty, or if the first thing inside the head element is an element.
  // A tbody element’s start tag may be omitted if the first thing inside the tbody element is a tr element, and if the element is not immediately preceded by a tbody, thead, or tfoot element whose end tag has been omitted. (It can’t be omitted if the element is empty.)
  // A colgroup element’s start tag may be omitted if the first thing inside the colgroup element is a col element, and if the element is not immediately preceded by another colgroup element whose end tag has been omitted. (It can’t be omitted if the element is empty.)

  // Fix up the parent of the parser token
  parser_token.parent = this._tag_stack.get_parser_token();

  return result;
};

module.exports.Beautifier = Beautifier;

},{"../core/output":37,"../html/options":49,"../html/tokenizer":50}],48:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Beautifier = require('./beautifier').Beautifier,
  Options = require('./options').Options;

function style_html(html_source, options, js_beautify, css_beautify) {
  var beautifier = new Beautifier(html_source, options, js_beautify, css_beautify);
  return beautifier.beautify();
}

module.exports = style_html;
module.exports.defaultOptions = function() {
  return new Options();
};

},{"./beautifier":47,"./options":49}],49:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var BaseOptions = require('../core/options').Options;

function Options(options) {
  BaseOptions.call(this, options, 'html');
  if (this.templating.length === 1 && this.templating[0] === 'auto') {
    this.templating = ['django', 'erb', 'handlebars', 'php'];
  }

  this.indent_inner_html = this._get_boolean('indent_inner_html');
  this.indent_body_inner_html = this._get_boolean('indent_body_inner_html', true);
  this.indent_head_inner_html = this._get_boolean('indent_head_inner_html', true);

  this.indent_handlebars = this._get_boolean('indent_handlebars', true);
  this.wrap_attributes = this._get_selection('wrap_attributes',
    ['auto', 'force', 'force-aligned', 'force-expand-multiline', 'aligned-multiple', 'preserve', 'preserve-aligned']);
  this.wrap_attributes_indent_size = this._get_number('wrap_attributes_indent_size', this.indent_size);
  this.extra_liners = this._get_array('extra_liners', ['head', 'body', '/html']);

  // Block vs inline elements
  // https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements
  // https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements
  // https://www.w3.org/TR/html5/dom.html#phrasing-content
  this.inline = this._get_array('inline', [
    'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',
    'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',
    'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',
    'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',
    'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',
    'video', 'wbr', 'text',
    // obsolete inline tags
    'acronym', 'big', 'strike', 'tt'
  ]);
  this.void_elements = this._get_array('void_elements', [
    // HTLM void elements - aka self-closing tags - aka singletons
    // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
    'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',
    'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',
    // NOTE: Optional tags are too complex for a simple list
    // they are hard coded in _do_optional_end_element

    // Doctype and xml elements
    '!doctype', '?xml',

    // obsolete tags
    // basefont: https://www.computerhope.com/jargon/h/html-basefont-tag.htm
    // isndex: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex
    'basefont', 'isindex'
  ]);
  this.unformatted = this._get_array('unformatted', []);
  this.content_unformatted = this._get_array('content_unformatted', [
    'pre', 'textarea'
  ]);
  this.unformatted_content_delimiter = this._get_characters('unformatted_content_delimiter');
  this.indent_scripts = this._get_selection('indent_scripts', ['normal', 'keep', 'separate']);

}
Options.prototype = new BaseOptions();



module.exports.Options = Options;

},{"../core/options":36}],50:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var BaseTokenizer = require('../core/tokenizer').Tokenizer;
var BASETOKEN = require('../core/tokenizer').TOKEN;
var Directives = require('../core/directives').Directives;
var TemplatablePattern = require('../core/templatablepattern').TemplatablePattern;
var Pattern = require('../core/pattern').Pattern;

var TOKEN = {
  TAG_OPEN: 'TK_TAG_OPEN',
  TAG_CLOSE: 'TK_TAG_CLOSE',
  ATTRIBUTE: 'TK_ATTRIBUTE',
  EQUALS: 'TK_EQUALS',
  VALUE: 'TK_VALUE',
  COMMENT: 'TK_COMMENT',
  TEXT: 'TK_TEXT',
  UNKNOWN: 'TK_UNKNOWN',
  START: BASETOKEN.START,
  RAW: BASETOKEN.RAW,
  EOF: BASETOKEN.EOF
};

var directives_core = new Directives(/<\!--/, /-->/);

var Tokenizer = function(input_string, options) {
  BaseTokenizer.call(this, input_string, options);
  this._current_tag_name = '';

  // Words end at whitespace or when a tag starts
  // if we are indenting handlebars, they are considered tags
  var templatable_reader = new TemplatablePattern(this._input).read_options(this._options);
  var pattern_reader = new Pattern(this._input);

  this.__patterns = {
    word: templatable_reader.until(/[\n\r\t <]/),
    single_quote: templatable_reader.until_after(/'/),
    double_quote: templatable_reader.until_after(/"/),
    attribute: templatable_reader.until(/[\n\r\t =>]|\/>/),
    element_name: templatable_reader.until(/[\n\r\t >\/]/),

    handlebars_comment: pattern_reader.starting_with(/{{!--/).until_after(/--}}/),
    handlebars: pattern_reader.starting_with(/{{/).until_after(/}}/),
    handlebars_open: pattern_reader.until(/[\n\r\t }]/),
    handlebars_raw_close: pattern_reader.until(/}}/),
    comment: pattern_reader.starting_with(/<!--/).until_after(/-->/),
    cdata: pattern_reader.starting_with(/<!\[CDATA\[/).until_after(/]]>/),
    // https://en.wikipedia.org/wiki/Conditional_comment
    conditional_comment: pattern_reader.starting_with(/<!\[/).until_after(/]>/),
    processing: pattern_reader.starting_with(/<\?/).until_after(/\?>/)
  };

  if (this._options.indent_handlebars) {
    this.__patterns.word = this.__patterns.word.exclude('handlebars');
  }

  this._unformatted_content_delimiter = null;

  if (this._options.unformatted_content_delimiter) {
    var literal_regexp = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);
    this.__patterns.unformatted_content_delimiter =
      pattern_reader.matching(literal_regexp)
      .until_after(literal_regexp);
  }
};
Tokenizer.prototype = new BaseTokenizer();

Tokenizer.prototype._is_comment = function(current_token) { // jshint unused:false
  return false; //current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.UNKNOWN;
};

Tokenizer.prototype._is_opening = function(current_token) {
  return current_token.type === TOKEN.TAG_OPEN;
};

Tokenizer.prototype._is_closing = function(current_token, open_token) {
  return current_token.type === TOKEN.TAG_CLOSE &&
    (open_token && (
      ((current_token.text === '>' || current_token.text === '/>') && open_token.text[0] === '<') ||
      (current_token.text === '}}' && open_token.text[0] === '{' && open_token.text[1] === '{')));
};

Tokenizer.prototype._reset = function() {
  this._current_tag_name = '';
};

Tokenizer.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false
  var token = null;
  this._readWhitespace();
  var c = this._input.peek();

  if (c === null) {
    return this._create_token(TOKEN.EOF, '');
  }

  token = token || this._read_open_handlebars(c, open_token);
  token = token || this._read_attribute(c, previous_token, open_token);
  token = token || this._read_close(c, open_token);
  token = token || this._read_raw_content(c, previous_token, open_token);
  token = token || this._read_content_word(c);
  token = token || this._read_comment_or_cdata(c);
  token = token || this._read_processing(c);
  token = token || this._read_open(c, open_token);
  token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());

  return token;
};

Tokenizer.prototype._read_comment_or_cdata = function(c) { // jshint unused:false
  var token = null;
  var resulting_string = null;
  var directives = null;

  if (c === '<') {
    var peek1 = this._input.peek(1);
    // We treat all comments as literals, even more than preformatted tags
    // we only look for the appropriate closing marker
    if (peek1 === '!') {
      resulting_string = this.__patterns.comment.read();

      // only process directive on html comments
      if (resulting_string) {
        directives = directives_core.get_directives(resulting_string);
        if (directives && directives.ignore === 'start') {
          resulting_string += directives_core.readIgnored(this._input);
        }
      } else {
        resulting_string = this.__patterns.cdata.read();
      }
    }

    if (resulting_string) {
      token = this._create_token(TOKEN.COMMENT, resulting_string);
      token.directives = directives;
    }
  }

  return token;
};

Tokenizer.prototype._read_processing = function(c) { // jshint unused:false
  var token = null;
  var resulting_string = null;
  var directives = null;

  if (c === '<') {
    var peek1 = this._input.peek(1);
    if (peek1 === '!' || peek1 === '?') {
      resulting_string = this.__patterns.conditional_comment.read();
      resulting_string = resulting_string || this.__patterns.processing.read();
    }

    if (resulting_string) {
      token = this._create_token(TOKEN.COMMENT, resulting_string);
      token.directives = directives;
    }
  }

  return token;
};

Tokenizer.prototype._read_open = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (!open_token) {
    if (c === '<') {

      resulting_string = this._input.next();
      if (this._input.peek() === '/') {
        resulting_string += this._input.next();
      }
      resulting_string += this.__patterns.element_name.read();
      token = this._create_token(TOKEN.TAG_OPEN, resulting_string);
    }
  }
  return token;
};

Tokenizer.prototype._read_open_handlebars = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (!open_token) {
    if (this._options.indent_handlebars && c === '{' && this._input.peek(1) === '{') {
      if (this._input.peek(2) === '!') {
        resulting_string = this.__patterns.handlebars_comment.read();
        resulting_string = resulting_string || this.__patterns.handlebars.read();
        token = this._create_token(TOKEN.COMMENT, resulting_string);
      } else {
        resulting_string = this.__patterns.handlebars_open.read();
        token = this._create_token(TOKEN.TAG_OPEN, resulting_string);
      }
    }
  }
  return token;
};


Tokenizer.prototype._read_close = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (open_token) {
    if (open_token.text[0] === '<' && (c === '>' || (c === '/' && this._input.peek(1) === '>'))) {
      resulting_string = this._input.next();
      if (c === '/') { //  for close tag "/>"
        resulting_string += this._input.next();
      }
      token = this._create_token(TOKEN.TAG_CLOSE, resulting_string);
    } else if (open_token.text[0] === '{' && c === '}' && this._input.peek(1) === '}') {
      this._input.next();
      this._input.next();
      token = this._create_token(TOKEN.TAG_CLOSE, '}}');
    }
  }

  return token;
};

Tokenizer.prototype._read_attribute = function(c, previous_token, open_token) {
  var token = null;
  var resulting_string = '';
  if (open_token && open_token.text[0] === '<') {

    if (c === '=') {
      token = this._create_token(TOKEN.EQUALS, this._input.next());
    } else if (c === '"' || c === "'") {
      var content = this._input.next();
      if (c === '"') {
        content += this.__patterns.double_quote.read();
      } else {
        content += this.__patterns.single_quote.read();
      }
      token = this._create_token(TOKEN.VALUE, content);
    } else {
      resulting_string = this.__patterns.attribute.read();

      if (resulting_string) {
        if (previous_token.type === TOKEN.EQUALS) {
          token = this._create_token(TOKEN.VALUE, resulting_string);
        } else {
          token = this._create_token(TOKEN.ATTRIBUTE, resulting_string);
        }
      }
    }
  }
  return token;
};

Tokenizer.prototype._is_content_unformatted = function(tag_name) {
  // void_elements have no content and so cannot have unformatted content
  // script and style tags should always be read as unformatted content
  // finally content_unformatted and unformatted element contents are unformatted
  return this._options.void_elements.indexOf(tag_name) === -1 &&
    (this._options.content_unformatted.indexOf(tag_name) !== -1 ||
      this._options.unformatted.indexOf(tag_name) !== -1);
};


Tokenizer.prototype._read_raw_content = function(c, previous_token, open_token) { // jshint unused:false
  var resulting_string = '';
  if (open_token && open_token.text[0] === '{') {
    resulting_string = this.__patterns.handlebars_raw_close.read();
  } else if (previous_token.type === TOKEN.TAG_CLOSE &&
    previous_token.opened.text[0] === '<' && previous_token.text[0] !== '/') {
    // ^^ empty tag has no content 
    var tag_name = previous_token.opened.text.substr(1).toLowerCase();
    if (tag_name === 'script' || tag_name === 'style') {
      // Script and style tags are allowed to have comments wrapping their content
      // or just have regular content.
      var token = this._read_comment_or_cdata(c);
      if (token) {
        token.type = TOKEN.TEXT;
        return token;
      }
      resulting_string = this._input.readUntil(new RegExp('</' + tag_name + '[\\n\\r\\t ]*?>', 'ig'));
    } else if (this._is_content_unformatted(tag_name)) {

      resulting_string = this._input.readUntil(new RegExp('</' + tag_name + '[\\n\\r\\t ]*?>', 'ig'));
    }
  }

  if (resulting_string) {
    return this._create_token(TOKEN.TEXT, resulting_string);
  }

  return null;
};

Tokenizer.prototype._read_content_word = function(c) {
  var resulting_string = '';
  if (this._options.unformatted_content_delimiter) {
    if (c === this._options.unformatted_content_delimiter[0]) {
      resulting_string = this.__patterns.unformatted_content_delimiter.read();
    }
  }

  if (!resulting_string) {
    resulting_string = this.__patterns.word.read();
  }
  if (resulting_string) {
    return this._create_token(TOKEN.TEXT, resulting_string);
  }
};

module.exports.Tokenizer = Tokenizer;
module.exports.TOKEN = TOKEN;

},{"../core/directives":34,"../core/pattern":38,"../core/templatablepattern":39,"../core/tokenizer":41}],51:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var js_beautify = require('./javascript/index');
var css_beautify = require('./css/index');
var html_beautify = require('./html/index');

function style_html(html_source, options, js, css) {
  js = js || js_beautify;
  css = css || css_beautify;
  return html_beautify(html_source, options, js, css);
}
style_html.defaultOptions = html_beautify.defaultOptions;

module.exports.js = js_beautify;
module.exports.css = css_beautify;
module.exports.html = style_html;

},{"./css/index":45,"./html/index":48,"./javascript/index":54}],52:[function(require,module,exports){
/* jshint node: true, curly: false */
// Parts of this section of code is taken from acorn.
//
// Acorn was written by Marijn Haverbeke and released under an MIT
// license. The Unicode regexps (for identifiers and whitespace) were
// taken from [Esprima](http://esprima.org) by Ariya Hidayat.
//
// Git repositories for Acorn are available at
//
//     http://marijnhaverbeke.nl/git/acorn
//     https://github.com/marijnh/acorn.git

// ## Character categories


'use strict';

// acorn used char codes to squeeze the last bit of performance out
// Beautifier is okay without that, so we're using regex
// permit # (23), $ (36), and @ (64). @ is used in ES7 decorators.
// 65 through 91 are uppercase letters.
// permit _ (95).
// 97 through 123 are lowercase letters.
var baseASCIIidentifierStartChars = "\\x23\\x24\\x40\\x41-\\x5a\\x5f\\x61-\\x7a";

// inside an identifier @ is not allowed but 0-9 are.
var baseASCIIidentifierChars = "\\x24\\x30-\\x39\\x41-\\x5a\\x5f\\x61-\\x7a";

// Big ugly regular expressions that match characters in the
// whitespace, identifier, and identifier-start categories. These
// are only applied when a character is found to actually have a
// code point above 128.
var nonASCIIidentifierStartChars = "\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc";
var nonASCIIidentifierChars = "\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f";
//var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
//var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

var identifierStart = "(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierStartChars + nonASCIIidentifierStartChars + "])";
var identifierChars = "(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "])*";

exports.identifier = new RegExp(identifierStart + identifierChars, 'g');
exports.identifierStart = new RegExp(identifierStart);
exports.identifierMatch = new RegExp("(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "])+");

var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/; // jshint ignore:line

// Whether a single character denotes a newline.

exports.newline = /[\n\r\u2028\u2029]/;

// Matches a whole line break (where CRLF is considered a single
// line break). Used to count lines.

// in javascript, these two differ
// in python they are the same, different methods are called on them
exports.lineBreak = new RegExp('\r\n|' + exports.newline.source);
exports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');

},{}],53:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Output = require('../core/output').Output;
var Token = require('../core/token').Token;
var acorn = require('./acorn');
var Options = require('./options').Options;
var Tokenizer = require('./tokenizer').Tokenizer;
var line_starters = require('./tokenizer').line_starters;
var positionable_operators = require('./tokenizer').positionable_operators;
var TOKEN = require('./tokenizer').TOKEN;


function in_array(what, arr) {
  return arr.indexOf(what) !== -1;
}

function ltrim(s) {
  return s.replace(/^\s+/g, '');
}

function generateMapFromStrings(list) {
  var result = {};
  for (var x = 0; x < list.length; x++) {
    // make the mapped names underscored instead of dash
    result[list[x].replace(/-/g, '_')] = list[x];
  }
  return result;
}

function reserved_word(token, word) {
  return token && token.type === TOKEN.RESERVED && token.text === word;
}

function reserved_array(token, words) {
  return token && token.type === TOKEN.RESERVED && in_array(token.text, words);
}
// Unsure of what they mean, but they work. Worth cleaning up in future.
var special_words = ['case', 'return', 'do', 'if', 'throw', 'else', 'await', 'break', 'continue', 'async'];

var validPositionValues = ['before-newline', 'after-newline', 'preserve-newline'];

// Generate map from array
var OPERATOR_POSITION = generateMapFromStrings(validPositionValues);

var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];

var MODE = {
  BlockStatement: 'BlockStatement', // 'BLOCK'
  Statement: 'Statement', // 'STATEMENT'
  ObjectLiteral: 'ObjectLiteral', // 'OBJECT',
  ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',
  ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',
  Conditional: 'Conditional', //'(COND-EXPRESSION)',
  Expression: 'Expression' //'(EXPRESSION)'
};

function remove_redundant_indentation(output, frame) {
  // This implementation is effective but has some issues:
  //     - can cause line wrap to happen too soon due to indent removal
  //           after wrap points are calculated
  // These issues are minor compared to ugly indentation.

  if (frame.multiline_frame ||
    frame.mode === MODE.ForInitializer ||
    frame.mode === MODE.Conditional) {
    return;
  }

  // remove one indent from each line inside this section
  output.remove_indent(frame.start_line_index);
}

// we could use just string.split, but
// IE doesn't like returning empty strings
function split_linebreaks(s) {
  //return s.split(/\x0d\x0a|\x0a/);

  s = s.replace(acorn.allLineBreaks, '\n');
  var out = [],
    idx = s.indexOf("\n");
  while (idx !== -1) {
    out.push(s.substring(0, idx));
    s = s.substring(idx + 1);
    idx = s.indexOf("\n");
  }
  if (s.length) {
    out.push(s);
  }
  return out;
}

function is_array(mode) {
  return mode === MODE.ArrayLiteral;
}

function is_expression(mode) {
  return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);
}

function all_lines_start_with(lines, c) {
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i].trim();
    if (line.charAt(0) !== c) {
      return false;
    }
  }
  return true;
}

function each_line_matches_indent(lines, indent) {
  var i = 0,
    len = lines.length,
    line;
  for (; i < len; i++) {
    line = lines[i];
    // allow empty lines to pass through
    if (line && line.indexOf(indent) !== 0) {
      return false;
    }
  }
  return true;
}


function Beautifier(source_text, options) {
  options = options || {};
  this._source_text = source_text || '';

  this._output = null;
  this._tokens = null;
  this._last_last_text = null;
  this._flags = null;
  this._previous_flags = null;

  this._flag_store = null;
  this._options = new Options(options);
}

Beautifier.prototype.create_flags = function(flags_base, mode) {
  var next_indent_level = 0;
  if (flags_base) {
    next_indent_level = flags_base.indentation_level;
    if (!this._output.just_added_newline() &&
      flags_base.line_indent_level > next_indent_level) {
      next_indent_level = flags_base.line_indent_level;
    }
  }

  var next_flags = {
    mode: mode,
    parent: flags_base,
    last_token: flags_base ? flags_base.last_token : new Token(TOKEN.START_BLOCK, ''), // last token text
    last_word: flags_base ? flags_base.last_word : '', // last TOKEN.WORD passed
    declaration_statement: false,
    declaration_assignment: false,
    multiline_frame: false,
    inline_frame: false,
    if_block: false,
    else_block: false,
    class_start_block: false, // class A { INSIDE HERE } or class B extends C { INSIDE HERE }
    do_block: false,
    do_while: false,
    import_block: false,
    in_case_statement: false, // switch(..){ INSIDE HERE }
    in_case: false, // we're on the exact line with "case 0:"
    case_body: false, // the indented case-action block
    case_block: false, // the indented case-action block is wrapped with {}
    indentation_level: next_indent_level,
    alignment: 0,
    line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,
    start_line_index: this._output.get_line_number(),
    ternary_depth: 0
  };
  return next_flags;
};

Beautifier.prototype._reset = function(source_text) {
  var baseIndentString = source_text.match(/^[\t ]*/)[0];

  this._last_last_text = ''; // pre-last token text
  this._output = new Output(this._options, baseIndentString);

  // If testing the ignore directive, start with output disable set to true
  this._output.raw = this._options.test_output_raw;


  // Stack of parsing/formatting states, including MODE.
  // We tokenize, parse, and output in an almost purely a forward-only stream of token input
  // and formatted output.  This makes the beautifier less accurate than full parsers
  // but also far more tolerant of syntax errors.
  //
  // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type
  // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later
  // encounter a ":", we'll switch to to MODE.ObjectLiteral.  If we then see a ";",
  // most full parsers would die, but the beautifier gracefully falls back to
  // MODE.BlockStatement and continues on.
  this._flag_store = [];
  this.set_mode(MODE.BlockStatement);
  var tokenizer = new Tokenizer(source_text, this._options);
  this._tokens = tokenizer.tokenize();
  return source_text;
};

Beautifier.prototype.beautify = function() {
  // if disabled, return the input unchanged.
  if (this._options.disabled) {
    return this._source_text;
  }

  var sweet_code;
  var source_text = this._reset(this._source_text);

  var eol = this._options.eol;
  if (this._options.eol === 'auto') {
    eol = '\n';
    if (source_text && acorn.lineBreak.test(source_text || '')) {
      eol = source_text.match(acorn.lineBreak)[0];
    }
  }

  var current_token = this._tokens.next();
  while (current_token) {
    this.handle_token(current_token);

    this._last_last_text = this._flags.last_token.text;
    this._flags.last_token = current_token;

    current_token = this._tokens.next();
  }

  sweet_code = this._output.get_code(eol);

  return sweet_code;
};

Beautifier.prototype.handle_token = function(current_token, preserve_statement_flags) {
  if (current_token.type === TOKEN.START_EXPR) {
    this.handle_start_expr(current_token);
  } else if (current_token.type === TOKEN.END_EXPR) {
    this.handle_end_expr(current_token);
  } else if (current_token.type === TOKEN.START_BLOCK) {
    this.handle_start_block(current_token);
  } else if (current_token.type === TOKEN.END_BLOCK) {
    this.handle_end_block(current_token);
  } else if (current_token.type === TOKEN.WORD) {
    this.handle_word(current_token);
  } else if (current_token.type === TOKEN.RESERVED) {
    this.handle_word(current_token);
  } else if (current_token.type === TOKEN.SEMICOLON) {
    this.handle_semicolon(current_token);
  } else if (current_token.type === TOKEN.STRING) {
    this.handle_string(current_token);
  } else if (current_token.type === TOKEN.EQUALS) {
    this.handle_equals(current_token);
  } else if (current_token.type === TOKEN.OPERATOR) {
    this.handle_operator(current_token);
  } else if (current_token.type === TOKEN.COMMA) {
    this.handle_comma(current_token);
  } else if (current_token.type === TOKEN.BLOCK_COMMENT) {
    this.handle_block_comment(current_token, preserve_statement_flags);
  } else if (current_token.type === TOKEN.COMMENT) {
    this.handle_comment(current_token, preserve_statement_flags);
  } else if (current_token.type === TOKEN.DOT) {
    this.handle_dot(current_token);
  } else if (current_token.type === TOKEN.EOF) {
    this.handle_eof(current_token);
  } else if (current_token.type === TOKEN.UNKNOWN) {
    this.handle_unknown(current_token, preserve_statement_flags);
  } else {
    this.handle_unknown(current_token, preserve_statement_flags);
  }
};

Beautifier.prototype.handle_whitespace_and_comments = function(current_token, preserve_statement_flags) {
  var newlines = current_token.newlines;
  var keep_whitespace = this._options.keep_array_indentation && is_array(this._flags.mode);

  if (current_token.comments_before) {
    var comment_token = current_token.comments_before.next();
    while (comment_token) {
      // The cleanest handling of inline comments is to treat them as though they aren't there.
      // Just continue formatting and the behavior should be logical.
      // Also ignore unknown tokens.  Again, this should result in better behavior.
      this.handle_whitespace_and_comments(comment_token, preserve_statement_flags);
      this.handle_token(comment_token, preserve_statement_flags);
      comment_token = current_token.comments_before.next();
    }
  }

  if (keep_whitespace) {
    for (var i = 0; i < newlines; i += 1) {
      this.print_newline(i > 0, preserve_statement_flags);
    }
  } else {
    if (this._options.max_preserve_newlines && newlines > this._options.max_preserve_newlines) {
      newlines = this._options.max_preserve_newlines;
    }

    if (this._options.preserve_newlines) {
      if (newlines > 1) {
        this.print_newline(false, preserve_statement_flags);
        for (var j = 1; j < newlines; j += 1) {
          this.print_newline(true, preserve_statement_flags);
        }
      }
    }
  }

};

var newline_restricted_tokens = ['async', 'break', 'continue', 'return', 'throw', 'yield'];

Beautifier.prototype.allow_wrap_or_preserved_newline = function(current_token, force_linewrap) {
  force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;

  // Never wrap the first token on a line
  if (this._output.just_added_newline()) {
    return;
  }

  var shouldPreserveOrForce = (this._options.preserve_newlines && current_token.newlines) || force_linewrap;
  var operatorLogicApplies = in_array(this._flags.last_token.text, positionable_operators) ||
    in_array(current_token.text, positionable_operators);

  if (operatorLogicApplies) {
    var shouldPrintOperatorNewline = (
        in_array(this._flags.last_token.text, positionable_operators) &&
        in_array(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)
      ) ||
      in_array(current_token.text, positionable_operators);
    shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;
  }

  if (shouldPreserveOrForce) {
    this.print_newline(false, true);
  } else if (this._options.wrap_line_length) {
    if (reserved_array(this._flags.last_token, newline_restricted_tokens)) {
      // These tokens should never have a newline inserted
      // between them and the following expression.
      return;
    }
    this._output.set_wrap_point();
  }
};

Beautifier.prototype.print_newline = function(force_newline, preserve_statement_flags) {
  if (!preserve_statement_flags) {
    if (this._flags.last_token.text !== ';' && this._flags.last_token.text !== ',' && this._flags.last_token.text !== '=' && (this._flags.last_token.type !== TOKEN.OPERATOR || this._flags.last_token.text === '--' || this._flags.last_token.text === '++')) {
      var next_token = this._tokens.peek();
      while (this._flags.mode === MODE.Statement &&
        !(this._flags.if_block && reserved_word(next_token, 'else')) &&
        !this._flags.do_block) {
        this.restore_mode();
      }
    }
  }

  if (this._output.add_new_line(force_newline)) {
    this._flags.multiline_frame = true;
  }
};

Beautifier.prototype.print_token_line_indentation = function(current_token) {
  if (this._output.just_added_newline()) {
    if (this._options.keep_array_indentation &&
      current_token.newlines &&
      (current_token.text === '[' || is_array(this._flags.mode))) {
      this._output.current_line.set_indent(-1);
      this._output.current_line.push(current_token.whitespace_before);
      this._output.space_before_token = false;
    } else if (this._output.set_indent(this._flags.indentation_level, this._flags.alignment)) {
      this._flags.line_indent_level = this._flags.indentation_level;
    }
  }
};

Beautifier.prototype.print_token = function(current_token) {
  if (this._output.raw) {
    this._output.add_raw_token(current_token);
    return;
  }

  if (this._options.comma_first && current_token.previous && current_token.previous.type === TOKEN.COMMA &&
    this._output.just_added_newline()) {
    if (this._output.previous_line.last() === ',') {
      var popped = this._output.previous_line.pop();
      // if the comma was already at the start of the line,
      // pull back onto that line and reprint the indentation
      if (this._output.previous_line.is_empty()) {
        this._output.previous_line.push(popped);
        this._output.trim(true);
        this._output.current_line.pop();
        this._output.trim();
      }

      // add the comma in front of the next token
      this.print_token_line_indentation(current_token);
      this._output.add_token(',');
      this._output.space_before_token = true;
    }
  }

  this.print_token_line_indentation(current_token);
  this._output.non_breaking_space = true;
  this._output.add_token(current_token.text);
  if (this._output.previous_token_wrapped) {
    this._flags.multiline_frame = true;
  }
};

Beautifier.prototype.indent = function() {
  this._flags.indentation_level += 1;
  this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
};

Beautifier.prototype.deindent = function() {
  if (this._flags.indentation_level > 0 &&
    ((!this._flags.parent) || this._flags.indentation_level > this._flags.parent.indentation_level)) {
    this._flags.indentation_level -= 1;
    this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
  }
};

Beautifier.prototype.set_mode = function(mode) {
  if (this._flags) {
    this._flag_store.push(this._flags);
    this._previous_flags = this._flags;
  } else {
    this._previous_flags = this.create_flags(null, mode);
  }

  this._flags = this.create_flags(this._previous_flags, mode);
  this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
};


Beautifier.prototype.restore_mode = function() {
  if (this._flag_store.length > 0) {
    this._previous_flags = this._flags;
    this._flags = this._flag_store.pop();
    if (this._previous_flags.mode === MODE.Statement) {
      remove_redundant_indentation(this._output, this._previous_flags);
    }
    this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
  }
};

Beautifier.prototype.start_of_object_property = function() {
  return this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement && (
    (this._flags.last_token.text === ':' && this._flags.ternary_depth === 0) || (reserved_array(this._flags.last_token, ['get', 'set'])));
};

Beautifier.prototype.start_of_statement = function(current_token) {
  var start = false;
  start = start || reserved_array(this._flags.last_token, ['var', 'let', 'const']) && current_token.type === TOKEN.WORD;
  start = start || reserved_word(this._flags.last_token, 'do');
  start = start || (!(this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement)) && reserved_array(this._flags.last_token, newline_restricted_tokens) && !current_token.newlines;
  start = start || reserved_word(this._flags.last_token, 'else') &&
    !(reserved_word(current_token, 'if') && !current_token.comments_before);
  start = start || (this._flags.last_token.type === TOKEN.END_EXPR && (this._previous_flags.mode === MODE.ForInitializer || this._previous_flags.mode === MODE.Conditional));
  start = start || (this._flags.last_token.type === TOKEN.WORD && this._flags.mode === MODE.BlockStatement &&
    !this._flags.in_case &&
    !(current_token.text === '--' || current_token.text === '++') &&
    this._last_last_text !== 'function' &&
    current_token.type !== TOKEN.WORD && current_token.type !== TOKEN.RESERVED);
  start = start || (this._flags.mode === MODE.ObjectLiteral && (
    (this._flags.last_token.text === ':' && this._flags.ternary_depth === 0) || reserved_array(this._flags.last_token, ['get', 'set'])));

  if (start) {
    this.set_mode(MODE.Statement);
    this.indent();

    this.handle_whitespace_and_comments(current_token, true);

    // Issue #276:
    // If starting a new statement with [if, for, while, do], push to a new line.
    // if (a) if (b) if(c) d(); else e(); else f();
    if (!this.start_of_object_property()) {
      this.allow_wrap_or_preserved_newline(current_token,
        reserved_array(current_token, ['do', 'for', 'if', 'while']));
    }
    return true;
  }
  return false;
};

Beautifier.prototype.handle_start_expr = function(current_token) {
  // The conditional starts the statement if appropriate.
  if (!this.start_of_statement(current_token)) {
    this.handle_whitespace_and_comments(current_token);
  }

  var next_mode = MODE.Expression;
  if (current_token.text === '[') {

    if (this._flags.last_token.type === TOKEN.WORD || this._flags.last_token.text === ')') {
      // this is array index specifier, break immediately
      // a[x], fn()[x]
      if (reserved_array(this._flags.last_token, line_starters)) {
        this._output.space_before_token = true;
      }
      this.print_token(current_token);
      this.set_mode(next_mode);
      this.indent();
      if (this._options.space_in_paren) {
        this._output.space_before_token = true;
      }
      return;
    }

    next_mode = MODE.ArrayLiteral;
    if (is_array(this._flags.mode)) {
      if (this._flags.last_token.text === '[' ||
        (this._flags.last_token.text === ',' && (this._last_last_text === ']' || this._last_last_text === '}'))) {
        // ], [ goes to new line
        // }, [ goes to new line
        if (!this._options.keep_array_indentation) {
          this.print_newline();
        }
      }
    }

    if (!in_array(this._flags.last_token.type, [TOKEN.START_EXPR, TOKEN.END_EXPR, TOKEN.WORD, TOKEN.OPERATOR, TOKEN.DOT])) {
      this._output.space_before_token = true;
    }
  } else {
    if (this._flags.last_token.type === TOKEN.RESERVED) {
      if (this._flags.last_token.text === 'for') {
        this._output.space_before_token = this._options.space_before_conditional;
        next_mode = MODE.ForInitializer;
      } else if (in_array(this._flags.last_token.text, ['if', 'while', 'switch'])) {
        this._output.space_before_token = this._options.space_before_conditional;
        next_mode = MODE.Conditional;
      } else if (in_array(this._flags.last_word, ['await', 'async'])) {
        // Should be a space between await and an IIFE, or async and an arrow function
        this._output.space_before_token = true;
      } else if (this._flags.last_token.text === 'import' && current_token.whitespace_before === '') {
        this._output.space_before_token = false;
      } else if (in_array(this._flags.last_token.text, line_starters) || this._flags.last_token.text === 'catch') {
        this._output.space_before_token = true;
      }
    } else if (this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {
      // Support of this kind of newline preservation.
      // a = (b &&
      //     (c || d));
      if (!this.start_of_object_property()) {
        this.allow_wrap_or_preserved_newline(current_token);
      }
    } else if (this._flags.last_token.type === TOKEN.WORD) {
      this._output.space_before_token = false;

      // function name() vs function name ()
      // function* name() vs function* name ()
      // async name() vs async name ()
      // In ES6, you can also define the method properties of an object
      // var obj = {a: function() {}}
      // It can be abbreviated
      // var obj = {a() {}}
      // var obj = { a() {}} vs var obj = { a () {}}
      // var obj = { * a() {}} vs var obj = { * a () {}}
      var peek_back_two = this._tokens.peek(-3);
      if (this._options.space_after_named_function && peek_back_two) {
        // peek starts at next character so -1 is current token
        var peek_back_three = this._tokens.peek(-4);
        if (reserved_array(peek_back_two, ['async', 'function']) ||
          (peek_back_two.text === '*' && reserved_array(peek_back_three, ['async', 'function']))) {
          this._output.space_before_token = true;
        } else if (this._flags.mode === MODE.ObjectLiteral) {
          if ((peek_back_two.text === '{' || peek_back_two.text === ',') ||
            (peek_back_two.text === '*' && (peek_back_three.text === '{' || peek_back_three.text === ','))) {
            this._output.space_before_token = true;
          }
        } else if (this._flags.parent && this._flags.parent.class_start_block) {
          this._output.space_before_token = true;
        }
      }
    } else {
      // Support preserving wrapped arrow function expressions
      // a.b('c',
      //     () => d.e
      // )
      this.allow_wrap_or_preserved_newline(current_token);
    }

    // function() vs function ()
    // yield*() vs yield* ()
    // function*() vs function* ()
    if ((this._flags.last_token.type === TOKEN.RESERVED && (this._flags.last_word === 'function' || this._flags.last_word === 'typeof')) ||
      (this._flags.last_token.text === '*' &&
        (in_array(this._last_last_text, ['function', 'yield']) ||
          (this._flags.mode === MODE.ObjectLiteral && in_array(this._last_last_text, ['{', ',']))))) {
      this._output.space_before_token = this._options.space_after_anon_function;
    }
  }

  if (this._flags.last_token.text === ';' || this._flags.last_token.type === TOKEN.START_BLOCK) {
    this.print_newline();
  } else if (this._flags.last_token.type === TOKEN.END_EXPR || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.END_BLOCK || this._flags.last_token.text === '.' || this._flags.last_token.type === TOKEN.COMMA) {
    // do nothing on (( and )( and ][ and ]( and .(
    // TODO: Consider whether forcing this is required.  Review failing tests when removed.
    this.allow_wrap_or_preserved_newline(current_token, current_token.newlines);
  }

  this.print_token(current_token);
  this.set_mode(next_mode);
  if (this._options.space_in_paren) {
    this._output.space_before_token = true;
  }

  // In all cases, if we newline while inside an expression it should be indented.
  this.indent();
};

Beautifier.prototype.handle_end_expr = function(current_token) {
  // statements inside expressions are not valid syntax, but...
  // statements must all be closed when their container closes
  while (this._flags.mode === MODE.Statement) {
    this.restore_mode();
  }

  this.handle_whitespace_and_comments(current_token);

  if (this._flags.multiline_frame) {
    this.allow_wrap_or_preserved_newline(current_token,
      current_token.text === ']' && is_array(this._flags.mode) && !this._options.keep_array_indentation);
  }

  if (this._options.space_in_paren) {
    if (this._flags.last_token.type === TOKEN.START_EXPR && !this._options.space_in_empty_paren) {
      // () [] no inner space in empty parens like these, ever, ref #320
      this._output.trim();
      this._output.space_before_token = false;
    } else {
      this._output.space_before_token = true;
    }
  }
  this.deindent();
  this.print_token(current_token);
  this.restore_mode();

  remove_redundant_indentation(this._output, this._previous_flags);

  // do {} while () // no statement required after
  if (this._flags.do_while && this._previous_flags.mode === MODE.Conditional) {
    this._previous_flags.mode = MODE.Expression;
    this._flags.do_block = false;
    this._flags.do_while = false;

  }
};

Beautifier.prototype.handle_start_block = function(current_token) {
  this.handle_whitespace_and_comments(current_token);

  // Check if this is should be treated as a ObjectLiteral
  var next_token = this._tokens.peek();
  var second_token = this._tokens.peek(1);
  if (this._flags.last_word === 'switch' && this._flags.last_token.type === TOKEN.END_EXPR) {
    this.set_mode(MODE.BlockStatement);
    this._flags.in_case_statement = true;
  } else if (this._flags.case_body) {
    this.set_mode(MODE.BlockStatement);
  } else if (second_token && (
      (in_array(second_token.text, [':', ',']) && in_array(next_token.type, [TOKEN.STRING, TOKEN.WORD, TOKEN.RESERVED])) ||
      (in_array(next_token.text, ['get', 'set', '...']) && in_array(second_token.type, [TOKEN.WORD, TOKEN.RESERVED]))
    )) {
    // We don't support TypeScript,but we didn't break it for a very long time.
    // We'll try to keep not breaking it.
    if (in_array(this._last_last_text, ['class', 'interface']) && !in_array(second_token.text, [':', ','])) {
      this.set_mode(MODE.BlockStatement);
    } else {
      this.set_mode(MODE.ObjectLiteral);
    }
  } else if (this._flags.last_token.type === TOKEN.OPERATOR && this._flags.last_token.text === '=>') {
    // arrow function: (param1, paramN) => { statements }
    this.set_mode(MODE.BlockStatement);
  } else if (in_array(this._flags.last_token.type, [TOKEN.EQUALS, TOKEN.START_EXPR, TOKEN.COMMA, TOKEN.OPERATOR]) ||
    reserved_array(this._flags.last_token, ['return', 'throw', 'import', 'default'])
  ) {
    // Detecting shorthand function syntax is difficult by scanning forward,
    //     so check the surrounding context.
    // If the block is being returned, imported, export default, passed as arg,
    //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.
    this.set_mode(MODE.ObjectLiteral);
  } else {
    this.set_mode(MODE.BlockStatement);
  }

  if (this._flags.last_token) {
    if (reserved_array(this._flags.last_token.previous, ['class', 'extends'])) {
      this._flags.class_start_block = true;
    }
  }

  var empty_braces = !next_token.comments_before && next_token.text === '}';
  var empty_anonymous_function = empty_braces && this._flags.last_word === 'function' &&
    this._flags.last_token.type === TOKEN.END_EXPR;

  if (this._options.brace_preserve_inline) // check for inline, set inline_frame if so
  {
    // search forward for a newline wanted inside this block
    var index = 0;
    var check_token = null;
    this._flags.inline_frame = true;
    do {
      index += 1;
      check_token = this._tokens.peek(index - 1);
      if (check_token.newlines) {
        this._flags.inline_frame = false;
        break;
      }
    } while (check_token.type !== TOKEN.EOF &&
      !(check_token.type === TOKEN.END_BLOCK && check_token.opened === current_token));
  }

  if ((this._options.brace_style === "expand" ||
      (this._options.brace_style === "none" && current_token.newlines)) &&
    !this._flags.inline_frame) {
    if (this._flags.last_token.type !== TOKEN.OPERATOR &&
      (empty_anonymous_function ||
        this._flags.last_token.type === TOKEN.EQUALS ||
        (reserved_array(this._flags.last_token, special_words) && this._flags.last_token.text !== 'else'))) {
      this._output.space_before_token = true;
    } else {
      this.print_newline(false, true);
    }
  } else { // collapse || inline_frame
    if (is_array(this._previous_flags.mode) && (this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.COMMA)) {
      if (this._flags.last_token.type === TOKEN.COMMA || this._options.space_in_paren) {
        this._output.space_before_token = true;
      }

      if (this._flags.last_token.type === TOKEN.COMMA || (this._flags.last_token.type === TOKEN.START_EXPR && this._flags.inline_frame)) {
        this.allow_wrap_or_preserved_newline(current_token);
        this._previous_flags.multiline_frame = this._previous_flags.multiline_frame || this._flags.multiline_frame;
        this._flags.multiline_frame = false;
      }
    }
    if (this._flags.last_token.type !== TOKEN.OPERATOR && this._flags.last_token.type !== TOKEN.START_EXPR) {
      if (this._flags.last_token.type === TOKEN.START_BLOCK && !this._flags.inline_frame) {
        this.print_newline();
      } else {
        this._output.space_before_token = true;
      }
    }
  }
  this.print_token(current_token);
  this.indent();

  // Except for specific cases, open braces are followed by a new line.
  if (!empty_braces && !(this._options.brace_preserve_inline && this._flags.inline_frame)) {
    this.print_newline();
  }
};

Beautifier.prototype.handle_end_block = function(current_token) {
  // statements must all be closed when their container closes
  this.handle_whitespace_and_comments(current_token);

  while (this._flags.mode === MODE.Statement) {
    this.restore_mode();
  }

  var empty_braces = this._flags.last_token.type === TOKEN.START_BLOCK;

  if (this._flags.inline_frame && !empty_braces) { // try inline_frame (only set if this._options.braces-preserve-inline) first
    this._output.space_before_token = true;
  } else if (this._options.brace_style === "expand") {
    if (!empty_braces) {
      this.print_newline();
    }
  } else {
    // skip {}
    if (!empty_braces) {
      if (is_array(this._flags.mode) && this._options.keep_array_indentation) {
        // we REALLY need a newline here, but newliner would skip that
        this._options.keep_array_indentation = false;
        this.print_newline();
        this._options.keep_array_indentation = true;

      } else {
        this.print_newline();
      }
    }
  }
  this.restore_mode();
  this.print_token(current_token);
};

Beautifier.prototype.handle_word = function(current_token) {
  if (current_token.type === TOKEN.RESERVED) {
    if (in_array(current_token.text, ['set', 'get']) && this._flags.mode !== MODE.ObjectLiteral) {
      current_token.type = TOKEN.WORD;
    } else if (current_token.text === 'import' && in_array(this._tokens.peek().text, ['(', '.'])) {
      current_token.type = TOKEN.WORD;
    } else if (in_array(current_token.text, ['as', 'from']) && !this._flags.import_block) {
      current_token.type = TOKEN.WORD;
    } else if (this._flags.mode === MODE.ObjectLiteral) {
      var next_token = this._tokens.peek();
      if (next_token.text === ':') {
        current_token.type = TOKEN.WORD;
      }
    }
  }

  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
    if (reserved_array(this._flags.last_token, ['var', 'let', 'const']) && current_token.type === TOKEN.WORD) {
      this._flags.declaration_statement = true;
    }
  } else if (current_token.newlines && !is_expression(this._flags.mode) &&
    (this._flags.last_token.type !== TOKEN.OPERATOR || (this._flags.last_token.text === '--' || this._flags.last_token.text === '++')) &&
    this._flags.last_token.type !== TOKEN.EQUALS &&
    (this._options.preserve_newlines || !reserved_array(this._flags.last_token, ['var', 'let', 'const', 'set', 'get']))) {
    this.handle_whitespace_and_comments(current_token);
    this.print_newline();
  } else {
    this.handle_whitespace_and_comments(current_token);
  }

  if (this._flags.do_block && !this._flags.do_while) {
    if (reserved_word(current_token, 'while')) {
      // do {} ## while ()
      this._output.space_before_token = true;
      this.print_token(current_token);
      this._output.space_before_token = true;
      this._flags.do_while = true;
      return;
    } else {
      // do {} should always have while as the next word.
      // if we don't see the expected while, recover
      this.print_newline();
      this._flags.do_block = false;
    }
  }

  // if may be followed by else, or not
  // Bare/inline ifs are tricky
  // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();
  if (this._flags.if_block) {
    if (!this._flags.else_block && reserved_word(current_token, 'else')) {
      this._flags.else_block = true;
    } else {
      while (this._flags.mode === MODE.Statement) {
        this.restore_mode();
      }
      this._flags.if_block = false;
      this._flags.else_block = false;
    }
  }

  if (this._flags.in_case_statement && reserved_array(current_token, ['case', 'default'])) {
    this.print_newline();
    if (!this._flags.case_block && (this._flags.case_body || this._options.jslint_happy)) {
      // switch cases following one another
      this.deindent();
    }
    this._flags.case_body = false;

    this.print_token(current_token);
    this._flags.in_case = true;
    return;
  }

  if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {
    if (!this.start_of_object_property()) {
      this.allow_wrap_or_preserved_newline(current_token);
    }
  }

  if (reserved_word(current_token, 'function')) {
    if (in_array(this._flags.last_token.text, ['}', ';']) ||
      (this._output.just_added_newline() && !(in_array(this._flags.last_token.text, ['(', '[', '{', ':', '=', ',']) || this._flags.last_token.type === TOKEN.OPERATOR))) {
      // make sure there is a nice clean space of at least one blank line
      // before a new function definition
      if (!this._output.just_added_blankline() && !current_token.comments_before) {
        this.print_newline();
        this.print_newline(true);
      }
    }
    if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD) {
      if (reserved_array(this._flags.last_token, ['get', 'set', 'new', 'export']) ||
        reserved_array(this._flags.last_token, newline_restricted_tokens)) {
        this._output.space_before_token = true;
      } else if (reserved_word(this._flags.last_token, 'default') && this._last_last_text === 'export') {
        this._output.space_before_token = true;
      } else if (this._flags.last_token.text === 'declare') {
        // accomodates Typescript declare function formatting
        this._output.space_before_token = true;
      } else {
        this.print_newline();
      }
    } else if (this._flags.last_token.type === TOKEN.OPERATOR || this._flags.last_token.text === '=') {
      // foo = function
      this._output.space_before_token = true;
    } else if (!this._flags.multiline_frame && (is_expression(this._flags.mode) || is_array(this._flags.mode))) {
      // (function
    } else {
      this.print_newline();
    }

    this.print_token(current_token);
    this._flags.last_word = current_token.text;
    return;
  }

  var prefix = 'NONE';

  if (this._flags.last_token.type === TOKEN.END_BLOCK) {

    if (this._previous_flags.inline_frame) {
      prefix = 'SPACE';
    } else if (!reserved_array(current_token, ['else', 'catch', 'finally', 'from'])) {
      prefix = 'NEWLINE';
    } else {
      if (this._options.brace_style === "expand" ||
        this._options.brace_style === "end-expand" ||
        (this._options.brace_style === "none" && current_token.newlines)) {
        prefix = 'NEWLINE';
      } else {
        prefix = 'SPACE';
        this._output.space_before_token = true;
      }
    }
  } else if (this._flags.last_token.type === TOKEN.SEMICOLON && this._flags.mode === MODE.BlockStatement) {
    // TODO: Should this be for STATEMENT as well?
    prefix = 'NEWLINE';
  } else if (this._flags.last_token.type === TOKEN.SEMICOLON && is_expression(this._flags.mode)) {
    prefix = 'SPACE';
  } else if (this._flags.last_token.type === TOKEN.STRING) {
    prefix = 'NEWLINE';
  } else if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD ||
    (this._flags.last_token.text === '*' &&
      (in_array(this._last_last_text, ['function', 'yield']) ||
        (this._flags.mode === MODE.ObjectLiteral && in_array(this._last_last_text, ['{', ',']))))) {
    prefix = 'SPACE';
  } else if (this._flags.last_token.type === TOKEN.START_BLOCK) {
    if (this._flags.inline_frame) {
      prefix = 'SPACE';
    } else {
      prefix = 'NEWLINE';
    }
  } else if (this._flags.last_token.type === TOKEN.END_EXPR) {
    this._output.space_before_token = true;
    prefix = 'NEWLINE';
  }

  if (reserved_array(current_token, line_starters) && this._flags.last_token.text !== ')') {
    if (this._flags.inline_frame || this._flags.last_token.text === 'else' || this._flags.last_token.text === 'export') {
      prefix = 'SPACE';
    } else {
      prefix = 'NEWLINE';
    }

  }

  if (reserved_array(current_token, ['else', 'catch', 'finally'])) {
    if ((!(this._flags.last_token.type === TOKEN.END_BLOCK && this._previous_flags.mode === MODE.BlockStatement) ||
        this._options.brace_style === "expand" ||
        this._options.brace_style === "end-expand" ||
        (this._options.brace_style === "none" && current_token.newlines)) &&
      !this._flags.inline_frame) {
      this.print_newline();
    } else {
      this._output.trim(true);
      var line = this._output.current_line;
      // If we trimmed and there's something other than a close block before us
      // put a newline back in.  Handles '} // comment' scenario.
      if (line.last() !== '}') {
        this.print_newline();
      }
      this._output.space_before_token = true;
    }
  } else if (prefix === 'NEWLINE') {
    if (reserved_array(this._flags.last_token, special_words)) {
      // no newline between 'return nnn'
      this._output.space_before_token = true;
    } else if (this._flags.last_token.text === 'declare' && reserved_array(current_token, ['var', 'let', 'const'])) {
      // accomodates Typescript declare formatting
      this._output.space_before_token = true;
    } else if (this._flags.last_token.type !== TOKEN.END_EXPR) {
      if ((this._flags.last_token.type !== TOKEN.START_EXPR || !reserved_array(current_token, ['var', 'let', 'const'])) && this._flags.last_token.text !== ':') {
        // no need to force newline on 'var': for (var x = 0...)
        if (reserved_word(current_token, 'if') && reserved_word(current_token.previous, 'else')) {
          // no newline for } else if {
          this._output.space_before_token = true;
        } else {
          this.print_newline();
        }
      }
    } else if (reserved_array(current_token, line_starters) && this._flags.last_token.text !== ')') {
      this.print_newline();
    }
  } else if (this._flags.multiline_frame && is_array(this._flags.mode) && this._flags.last_token.text === ',' && this._last_last_text === '}') {
    this.print_newline(); // }, in lists get a newline treatment
  } else if (prefix === 'SPACE') {
    this._output.space_before_token = true;
  }
  if (current_token.previous && (current_token.previous.type === TOKEN.WORD || current_token.previous.type === TOKEN.RESERVED)) {
    this._output.space_before_token = true;
  }
  this.print_token(current_token);
  this._flags.last_word = current_token.text;

  if (current_token.type === TOKEN.RESERVED) {
    if (current_token.text === 'do') {
      this._flags.do_block = true;
    } else if (current_token.text === 'if') {
      this._flags.if_block = true;
    } else if (current_token.text === 'import') {
      this._flags.import_block = true;
    } else if (this._flags.import_block && reserved_word(current_token, 'from')) {
      this._flags.import_block = false;
    }
  }
};

Beautifier.prototype.handle_semicolon = function(current_token) {
  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
    // Semicolon can be the start (and end) of a statement
    this._output.space_before_token = false;
  } else {
    this.handle_whitespace_and_comments(current_token);
  }

  var next_token = this._tokens.peek();
  while (this._flags.mode === MODE.Statement &&
    !(this._flags.if_block && reserved_word(next_token, 'else')) &&
    !this._flags.do_block) {
    this.restore_mode();
  }

  // hacky but effective for the moment
  if (this._flags.import_block) {
    this._flags.import_block = false;
  }
  this.print_token(current_token);
};

Beautifier.prototype.handle_string = function(current_token) {
  if (current_token.text.startsWith("`") && current_token.newlines === 0 && current_token.whitespace_before === '' && (current_token.previous.text === ')' || this._flags.last_token.type === TOKEN.WORD)) {
    //Conditional for detectign backtick strings
  } else if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
    // One difference - strings want at least a space before
    this._output.space_before_token = true;
  } else {
    this.handle_whitespace_and_comments(current_token);
    if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD || this._flags.inline_frame) {
      this._output.space_before_token = true;
    } else if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {
      if (!this.start_of_object_property()) {
        this.allow_wrap_or_preserved_newline(current_token);
      }
    } else if ((current_token.text.startsWith("`") && this._flags.last_token.type === TOKEN.END_EXPR && (current_token.previous.text === ']' || current_token.previous.text === ')') && current_token.newlines === 0)) {
      this._output.space_before_token = true;
    } else {
      this.print_newline();
    }
  }
  this.print_token(current_token);
};

Beautifier.prototype.handle_equals = function(current_token) {
  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
  } else {
    this.handle_whitespace_and_comments(current_token);
  }

  if (this._flags.declaration_statement) {
    // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done
    this._flags.declaration_assignment = true;
  }
  this._output.space_before_token = true;
  this.print_token(current_token);
  this._output.space_before_token = true;
};

Beautifier.prototype.handle_comma = function(current_token) {
  this.handle_whitespace_and_comments(current_token, true);

  this.print_token(current_token);
  this._output.space_before_token = true;
  if (this._flags.declaration_statement) {
    if (is_expression(this._flags.parent.mode)) {
      // do not break on comma, for(var a = 1, b = 2)
      this._flags.declaration_assignment = false;
    }

    if (this._flags.declaration_assignment) {
      this._flags.declaration_assignment = false;
      this.print_newline(false, true);
    } else if (this._options.comma_first) {
      // for comma-first, we want to allow a newline before the comma
      // to turn into a newline after the comma, which we will fixup later
      this.allow_wrap_or_preserved_newline(current_token);
    }
  } else if (this._flags.mode === MODE.ObjectLiteral ||
    (this._flags.mode === MODE.Statement && this._flags.parent.mode === MODE.ObjectLiteral)) {
    if (this._flags.mode === MODE.Statement) {
      this.restore_mode();
    }

    if (!this._flags.inline_frame) {
      this.print_newline();
    }
  } else if (this._options.comma_first) {
    // EXPR or DO_BLOCK
    // for comma-first, we want to allow a newline before the comma
    // to turn into a newline after the comma, which we will fixup later
    this.allow_wrap_or_preserved_newline(current_token);
  }
};

Beautifier.prototype.handle_operator = function(current_token) {
  var isGeneratorAsterisk = current_token.text === '*' &&
    (reserved_array(this._flags.last_token, ['function', 'yield']) ||
      (in_array(this._flags.last_token.type, [TOKEN.START_BLOCK, TOKEN.COMMA, TOKEN.END_BLOCK, TOKEN.SEMICOLON]))
    );
  var isUnary = in_array(current_token.text, ['-', '+']) && (
    in_array(this._flags.last_token.type, [TOKEN.START_BLOCK, TOKEN.START_EXPR, TOKEN.EQUALS, TOKEN.OPERATOR]) ||
    in_array(this._flags.last_token.text, line_starters) ||
    this._flags.last_token.text === ','
  );

  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
  } else {
    var preserve_statement_flags = !isGeneratorAsterisk;
    this.handle_whitespace_and_comments(current_token, preserve_statement_flags);
  }

  // hack for actionscript's import .*;
  if (current_token.text === '*' && this._flags.last_token.type === TOKEN.DOT) {
    this.print_token(current_token);
    return;
  }

  if (current_token.text === '::') {
    // no spaces around exotic namespacing syntax operator
    this.print_token(current_token);
    return;
  }

  // Allow line wrapping between operators when operator_position is
  //   set to before or preserve
  if (this._flags.last_token.type === TOKEN.OPERATOR && in_array(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {
    this.allow_wrap_or_preserved_newline(current_token);
  }

  if (current_token.text === ':' && this._flags.in_case) {
    this.print_token(current_token);

    this._flags.in_case = false;
    this._flags.case_body = true;
    if (this._tokens.peek().type !== TOKEN.START_BLOCK) {
      this.indent();
      this.print_newline();
      this._flags.case_block = false;
    } else {
      this._flags.case_block = true;
      this._output.space_before_token = true;
    }
    return;
  }

  var space_before = true;
  var space_after = true;
  var in_ternary = false;
  if (current_token.text === ':') {
    if (this._flags.ternary_depth === 0) {
      // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.
      space_before = false;
    } else {
      this._flags.ternary_depth -= 1;
      in_ternary = true;
    }
  } else if (current_token.text === '?') {
    this._flags.ternary_depth += 1;
  }

  // let's handle the operator_position option prior to any conflicting logic
  if (!isUnary && !isGeneratorAsterisk && this._options.preserve_newlines && in_array(current_token.text, positionable_operators)) {
    var isColon = current_token.text === ':';
    var isTernaryColon = (isColon && in_ternary);
    var isOtherColon = (isColon && !in_ternary);

    switch (this._options.operator_position) {
      case OPERATOR_POSITION.before_newline:
        // if the current token is : and it's not a ternary statement then we set space_before to false
        this._output.space_before_token = !isOtherColon;

        this.print_token(current_token);

        if (!isColon || isTernaryColon) {
          this.allow_wrap_or_preserved_newline(current_token);
        }

        this._output.space_before_token = true;
        return;

      case OPERATOR_POSITION.after_newline:
        // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,
        //   then print a newline.

        this._output.space_before_token = true;

        if (!isColon || isTernaryColon) {
          if (this._tokens.peek().newlines) {
            this.print_newline(false, true);
          } else {
            this.allow_wrap_or_preserved_newline(current_token);
          }
        } else {
          this._output.space_before_token = false;
        }

        this.print_token(current_token);

        this._output.space_before_token = true;
        return;

      case OPERATOR_POSITION.preserve_newline:
        if (!isOtherColon) {
          this.allow_wrap_or_preserved_newline(current_token);
        }

        // if we just added a newline, or the current token is : and it's not a ternary statement,
        //   then we set space_before to false
        space_before = !(this._output.just_added_newline() || isOtherColon);

        this._output.space_before_token = space_before;
        this.print_token(current_token);
        this._output.space_before_token = true;
        return;
    }
  }

  if (isGeneratorAsterisk) {
    this.allow_wrap_or_preserved_newline(current_token);
    space_before = false;
    var next_token = this._tokens.peek();
    space_after = next_token && in_array(next_token.type, [TOKEN.WORD, TOKEN.RESERVED]);
  } else if (current_token.text === '...') {
    this.allow_wrap_or_preserved_newline(current_token);
    space_before = this._flags.last_token.type === TOKEN.START_BLOCK;
    space_after = false;
  } else if (in_array(current_token.text, ['--', '++', '!', '~']) || isUnary) {
    // unary operators (and binary +/- pretending to be unary) special cases
    if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR) {
      this.allow_wrap_or_preserved_newline(current_token);
    }

    space_before = false;
    space_after = false;

    // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1
    // if there is a newline between -- or ++ and anything else we should preserve it.
    if (current_token.newlines && (current_token.text === '--' || current_token.text === '++' || current_token.text === '~')) {
      var new_line_needed = reserved_array(this._flags.last_token, special_words) && current_token.newlines;
      if (new_line_needed && (this._previous_flags.if_block || this._previous_flags.else_block)) {
        this.restore_mode();
      }
      this.print_newline(new_line_needed, true);
    }

    if (this._flags.last_token.text === ';' && is_expression(this._flags.mode)) {
      // for (;; ++i)
      //        ^^^
      space_before = true;
    }

    if (this._flags.last_token.type === TOKEN.RESERVED) {
      space_before = true;
    } else if (this._flags.last_token.type === TOKEN.END_EXPR) {
      space_before = !(this._flags.last_token.text === ']' && (current_token.text === '--' || current_token.text === '++'));
    } else if (this._flags.last_token.type === TOKEN.OPERATOR) {
      // a++ + ++b;
      // a - -b
      space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(this._flags.last_token.text, ['--', '-', '++', '+']);
      // + and - are not unary when preceeded by -- or ++ operator
      // a-- + b
      // a * +b
      // a - -b
      if (in_array(current_token.text, ['+', '-']) && in_array(this._flags.last_token.text, ['--', '++'])) {
        space_after = true;
      }
    }


    if (((this._flags.mode === MODE.BlockStatement && !this._flags.inline_frame) || this._flags.mode === MODE.Statement) &&
      (this._flags.last_token.text === '{' || this._flags.last_token.text === ';')) {
      // { foo; --i }
      // foo(); --bar;
      this.print_newline();
    }
  }

  this._output.space_before_token = this._output.space_before_token || space_before;
  this.print_token(current_token);
  this._output.space_before_token = space_after;
};

Beautifier.prototype.handle_block_comment = function(current_token, preserve_statement_flags) {
  if (this._output.raw) {
    this._output.add_raw_token(current_token);
    if (current_token.directives && current_token.directives.preserve === 'end') {
      // If we're testing the raw output behavior, do not allow a directive to turn it off.
      this._output.raw = this._options.test_output_raw;
    }
    return;
  }

  if (current_token.directives) {
    this.print_newline(false, preserve_statement_flags);
    this.print_token(current_token);
    if (current_token.directives.preserve === 'start') {
      this._output.raw = true;
    }
    this.print_newline(false, true);
    return;
  }

  // inline block
  if (!acorn.newline.test(current_token.text) && !current_token.newlines) {
    this._output.space_before_token = true;
    this.print_token(current_token);
    this._output.space_before_token = true;
    return;
  } else {
    this.print_block_commment(current_token, preserve_statement_flags);
  }
};

Beautifier.prototype.print_block_commment = function(current_token, preserve_statement_flags) {
  var lines = split_linebreaks(current_token.text);
  var j; // iterator for this case
  var javadoc = false;
  var starless = false;
  var lastIndent = current_token.whitespace_before;
  var lastIndentLength = lastIndent.length;

  // block comment starts with a new line
  this.print_newline(false, preserve_statement_flags);

  // first line always indented
  this.print_token_line_indentation(current_token);
  this._output.add_token(lines[0]);
  this.print_newline(false, preserve_statement_flags);


  if (lines.length > 1) {
    lines = lines.slice(1);
    javadoc = all_lines_start_with(lines, '*');
    starless = each_line_matches_indent(lines, lastIndent);

    if (javadoc) {
      this._flags.alignment = 1;
    }

    for (j = 0; j < lines.length; j++) {
      if (javadoc) {
        // javadoc: reformat and re-indent
        this.print_token_line_indentation(current_token);
        this._output.add_token(ltrim(lines[j]));
      } else if (starless && lines[j]) {
        // starless: re-indent non-empty content, avoiding trim
        this.print_token_line_indentation(current_token);
        this._output.add_token(lines[j].substring(lastIndentLength));
      } else {
        // normal comments output raw
        this._output.current_line.set_indent(-1);
        this._output.add_token(lines[j]);
      }

      // for comments on their own line or  more than one line, make sure there's a new line after
      this.print_newline(false, preserve_statement_flags);
    }

    this._flags.alignment = 0;
  }
};


Beautifier.prototype.handle_comment = function(current_token, preserve_statement_flags) {
  if (current_token.newlines) {
    this.print_newline(false, preserve_statement_flags);
  } else {
    this._output.trim(true);
  }

  this._output.space_before_token = true;
  this.print_token(current_token);
  this.print_newline(false, preserve_statement_flags);
};

Beautifier.prototype.handle_dot = function(current_token) {
  if (this.start_of_statement(current_token)) {
    // The conditional starts the statement if appropriate.
  } else {
    this.handle_whitespace_and_comments(current_token, true);
  }

  if (this._flags.last_token.text.match('^[0-9]+$')) {
    this._output.space_before_token = true;
  }

  if (reserved_array(this._flags.last_token, special_words)) {
    this._output.space_before_token = false;
  } else {
    // allow preserved newlines before dots in general
    // force newlines on dots after close paren when break_chained - for bar().baz()
    this.allow_wrap_or_preserved_newline(current_token,
      this._flags.last_token.text === ')' && this._options.break_chained_methods);
  }

  // Only unindent chained method dot if this dot starts a new line.
  // Otherwise the automatic extra indentation removal will handle the over indent
  if (this._options.unindent_chained_methods && this._output.just_added_newline()) {
    this.deindent();
  }

  this.print_token(current_token);
};

Beautifier.prototype.handle_unknown = function(current_token, preserve_statement_flags) {
  this.print_token(current_token);

  if (current_token.text[current_token.text.length - 1] === '\n') {
    this.print_newline(false, preserve_statement_flags);
  }
};

Beautifier.prototype.handle_eof = function(current_token) {
  // Unwind any open statements
  while (this._flags.mode === MODE.Statement) {
    this.restore_mode();
  }
  this.handle_whitespace_and_comments(current_token);
};

module.exports.Beautifier = Beautifier;

},{"../core/output":37,"../core/token":40,"./acorn":52,"./options":55,"./tokenizer":56}],54:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var Beautifier = require('./beautifier').Beautifier,
  Options = require('./options').Options;

function js_beautify(js_source_text, options) {
  var beautifier = new Beautifier(js_source_text, options);
  return beautifier.beautify();
}

module.exports = js_beautify;
module.exports.defaultOptions = function() {
  return new Options();
};

},{"./beautifier":53,"./options":55}],55:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var BaseOptions = require('../core/options').Options;

var validPositionValues = ['before-newline', 'after-newline', 'preserve-newline'];

function Options(options) {
  BaseOptions.call(this, options, 'js');

  // compatibility, re
  var raw_brace_style = this.raw_options.brace_style || null;
  if (raw_brace_style === "expand-strict") { //graceful handling of deprecated option
    this.raw_options.brace_style = "expand";
  } else if (raw_brace_style === "collapse-preserve-inline") { //graceful handling of deprecated option
    this.raw_options.brace_style = "collapse,preserve-inline";
  } else if (this.raw_options.braces_on_own_line !== undefined) { //graceful handling of deprecated option
    this.raw_options.brace_style = this.raw_options.braces_on_own_line ? "expand" : "collapse";
    // } else if (!raw_brace_style) { //Nothing exists to set it
    //   raw_brace_style = "collapse";
  }

  //preserve-inline in delimited string will trigger brace_preserve_inline, everything
  //else is considered a brace_style and the last one only will have an effect

  var brace_style_split = this._get_selection_list('brace_style', ['collapse', 'expand', 'end-expand', 'none', 'preserve-inline']);

  this.brace_preserve_inline = false; //Defaults in case one or other was not specified in meta-option
  this.brace_style = "collapse";

  for (var bs = 0; bs < brace_style_split.length; bs++) {
    if (brace_style_split[bs] === "preserve-inline") {
      this.brace_preserve_inline = true;
    } else {
      this.brace_style = brace_style_split[bs];
    }
  }

  this.unindent_chained_methods = this._get_boolean('unindent_chained_methods');
  this.break_chained_methods = this._get_boolean('break_chained_methods');
  this.space_in_paren = this._get_boolean('space_in_paren');
  this.space_in_empty_paren = this._get_boolean('space_in_empty_paren');
  this.jslint_happy = this._get_boolean('jslint_happy');
  this.space_after_anon_function = this._get_boolean('space_after_anon_function');
  this.space_after_named_function = this._get_boolean('space_after_named_function');
  this.keep_array_indentation = this._get_boolean('keep_array_indentation');
  this.space_before_conditional = this._get_boolean('space_before_conditional', true);
  this.unescape_strings = this._get_boolean('unescape_strings');
  this.e4x = this._get_boolean('e4x');
  this.comma_first = this._get_boolean('comma_first');
  this.operator_position = this._get_selection('operator_position', validPositionValues);

  // For testing of beautify preserve:start directive
  this.test_output_raw = this._get_boolean('test_output_raw');

  // force this._options.space_after_anon_function to true if this._options.jslint_happy
  if (this.jslint_happy) {
    this.space_after_anon_function = true;
  }

}
Options.prototype = new BaseOptions();



module.exports.Options = Options;

},{"../core/options":36}],56:[function(require,module,exports){
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

'use strict';

var InputScanner = require('../core/inputscanner').InputScanner;
var BaseTokenizer = require('../core/tokenizer').Tokenizer;
var BASETOKEN = require('../core/tokenizer').TOKEN;
var Directives = require('../core/directives').Directives;
var acorn = require('./acorn');
var Pattern = require('../core/pattern').Pattern;
var TemplatablePattern = require('../core/templatablepattern').TemplatablePattern;


function in_array(what, arr) {
  return arr.indexOf(what) !== -1;
}


var TOKEN = {
  START_EXPR: 'TK_START_EXPR',
  END_EXPR: 'TK_END_EXPR',
  START_BLOCK: 'TK_START_BLOCK',
  END_BLOCK: 'TK_END_BLOCK',
  WORD: 'TK_WORD',
  RESERVED: 'TK_RESERVED',
  SEMICOLON: 'TK_SEMICOLON',
  STRING: 'TK_STRING',
  EQUALS: 'TK_EQUALS',
  OPERATOR: 'TK_OPERATOR',
  COMMA: 'TK_COMMA',
  BLOCK_COMMENT: 'TK_BLOCK_COMMENT',
  COMMENT: 'TK_COMMENT',
  DOT: 'TK_DOT',
  UNKNOWN: 'TK_UNKNOWN',
  START: BASETOKEN.START,
  RAW: BASETOKEN.RAW,
  EOF: BASETOKEN.EOF
};


var directives_core = new Directives(/\/\*/, /\*\//);

var number_pattern = /0[xX][0123456789abcdefABCDEF_]*n?|0[oO][01234567_]*n?|0[bB][01_]*n?|\d[\d_]*n|(?:\.\d[\d_]*|\d[\d_]*\.?[\d_]*)(?:[eE][+-]?[\d_]+)?/;

var digit = /[0-9]/;

// Dot "." must be distinguished from "..." and decimal
var dot_pattern = /[^\d\.]/;

var positionable_operators = (
  ">>> === !== &&= ??= ||= " +
  "<< && >= ** != == <= >> || ?? |> " +
  "< / - + > : & % ? ^ | *").split(' ');

// IMPORTANT: this must be sorted longest to shortest or tokenizing many not work.
// Also, you must update possitionable operators separately from punct
var punct =
  ">>>= " +
  "... >>= <<= === >>> !== **= &&= ??= ||= " +
  "=> ^= :: /= << <= == && -= >= >> != -- += ** || ?? ++ %= &= *= |= |> " +
  "= ! ? > < : / ^ - + * & % ~ |";

punct = punct.replace(/[-[\]{}()*+?.,\\^$|#]/g, "\\$&");
// ?. but not if followed by a number 
punct = '\\?\\.(?!\\d) ' + punct;
punct = punct.replace(/ /g, '|');

var punct_pattern = new RegExp(punct);

// words which should always start on new line.
var line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');
var reserved_words = line_starters.concat(['do', 'in', 'of', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as', 'class', 'extends']);
var reserved_word_pattern = new RegExp('^(?:' + reserved_words.join('|') + ')$');

// var template_pattern = /(?:(?:<\?php|<\?=)[\s\S]*?\?>)|(?:<%[\s\S]*?%>)/g;

var in_html_comment;

var Tokenizer = function(input_string, options) {
  BaseTokenizer.call(this, input_string, options);

  this._patterns.whitespace = this._patterns.whitespace.matching(
    /\u00A0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff/.source,
    /\u2028\u2029/.source);

  var pattern_reader = new Pattern(this._input);
  var templatable = new TemplatablePattern(this._input)
    .read_options(this._options);

  this.__patterns = {
    template: templatable,
    identifier: templatable.starting_with(acorn.identifier).matching(acorn.identifierMatch),
    number: pattern_reader.matching(number_pattern),
    punct: pattern_reader.matching(punct_pattern),
    // comment ends just before nearest linefeed or end of file
    comment: pattern_reader.starting_with(/\/\//).until(/[\n\r\u2028\u2029]/),
    //  /* ... */ comment ends with nearest */ or end of file
    block_comment: pattern_reader.starting_with(/\/\*/).until_after(/\*\//),
    html_comment_start: pattern_reader.matching(/<!--/),
    html_comment_end: pattern_reader.matching(/-->/),
    include: pattern_reader.starting_with(/#include/).until_after(acorn.lineBreak),
    shebang: pattern_reader.starting_with(/#!/).until_after(acorn.lineBreak),
    xml: pattern_reader.matching(/[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[^}]+?}|!\[CDATA\[[^\]]*?\]\]|)(\s*{[^}]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{([^{}]|{[^}]+?})+?}))*\s*(\/?)\s*>/),
    single_quote: templatable.until(/['\\\n\r\u2028\u2029]/),
    double_quote: templatable.until(/["\\\n\r\u2028\u2029]/),
    template_text: templatable.until(/[`\\$]/),
    template_expression: templatable.until(/[`}\\]/)
  };

};
Tokenizer.prototype = new BaseTokenizer();

Tokenizer.prototype._is_comment = function(current_token) {
  return current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.BLOCK_COMMENT || current_token.type === TOKEN.UNKNOWN;
};

Tokenizer.prototype._is_opening = function(current_token) {
  return current_token.type === TOKEN.START_BLOCK || current_token.type === TOKEN.START_EXPR;
};

Tokenizer.prototype._is_closing = function(current_token, open_token) {
  return (current_token.type === TOKEN.END_BLOCK || current_token.type === TOKEN.END_EXPR) &&
    (open_token && (
      (current_token.text === ']' && open_token.text === '[') ||
      (current_token.text === ')' && open_token.text === '(') ||
      (current_token.text === '}' && open_token.text === '{')));
};

Tokenizer.prototype._reset = function() {
  in_html_comment = false;
};

Tokenizer.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false
  var token = null;
  this._readWhitespace();
  var c = this._input.peek();

  if (c === null) {
    return this._create_token(TOKEN.EOF, '');
  }

  token = token || this._read_non_javascript(c);
  token = token || this._read_string(c);
  token = token || this._read_word(previous_token);
  token = token || this._read_singles(c);
  token = token || this._read_comment(c);
  token = token || this._read_regexp(c, previous_token);
  token = token || this._read_xml(c, previous_token);
  token = token || this._read_punctuation();
  token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());

  return token;
};

Tokenizer.prototype._read_word = function(previous_token) {
  var resulting_string;
  resulting_string = this.__patterns.identifier.read();
  if (resulting_string !== '') {
    resulting_string = resulting_string.replace(acorn.allLineBreaks, '\n');
    if (!(previous_token.type === TOKEN.DOT ||
        (previous_token.type === TOKEN.RESERVED && (previous_token.text === 'set' || previous_token.text === 'get'))) &&
      reserved_word_pattern.test(resulting_string)) {
      if ((resulting_string === 'in' || resulting_string === 'of') &&
        (previous_token.type === TOKEN.WORD || previous_token.type === TOKEN.STRING)) { // hack for 'in' and 'of' operators
        return this._create_token(TOKEN.OPERATOR, resulting_string);
      }
      return this._create_token(TOKEN.RESERVED, resulting_string);
    }
    return this._create_token(TOKEN.WORD, resulting_string);
  }

  resulting_string = this.__patterns.number.read();
  if (resulting_string !== '') {
    return this._create_token(TOKEN.WORD, resulting_string);
  }
};

Tokenizer.prototype._read_singles = function(c) {
  var token = null;
  if (c === '(' || c === '[') {
    token = this._create_token(TOKEN.START_EXPR, c);
  } else if (c === ')' || c === ']') {
    token = this._create_token(TOKEN.END_EXPR, c);
  } else if (c === '{') {
    token = this._create_token(TOKEN.START_BLOCK, c);
  } else if (c === '}') {
    token = this._create_token(TOKEN.END_BLOCK, c);
  } else if (c === ';') {
    token = this._create_token(TOKEN.SEMICOLON, c);
  } else if (c === '.' && dot_pattern.test(this._input.peek(1))) {
    token = this._create_token(TOKEN.DOT, c);
  } else if (c === ',') {
    token = this._create_token(TOKEN.COMMA, c);
  }

  if (token) {
    this._input.next();
  }
  return token;
};

Tokenizer.prototype._read_punctuation = function() {
  var resulting_string = this.__patterns.punct.read();

  if (resulting_string !== '') {
    if (resulting_string === '=') {
      return this._create_token(TOKEN.EQUALS, resulting_string);
    } else if (resulting_string === '?.') {
      return this._create_token(TOKEN.DOT, resulting_string);
    } else {
      return this._create_token(TOKEN.OPERATOR, resulting_string);
    }
  }
};

Tokenizer.prototype._read_non_javascript = function(c) {
  var resulting_string = '';

  if (c === '#') {
    if (this._is_first_token()) {
      resulting_string = this.__patterns.shebang.read();

      if (resulting_string) {
        return this._create_token(TOKEN.UNKNOWN, resulting_string.trim() + '\n');
      }
    }

    // handles extendscript #includes
    resulting_string = this.__patterns.include.read();

    if (resulting_string) {
      return this._create_token(TOKEN.UNKNOWN, resulting_string.trim() + '\n');
    }

    c = this._input.next();

    // Spidermonkey-specific sharp variables for circular references. Considered obsolete.
    var sharp = '#';
    if (this._input.hasNext() && this._input.testChar(digit)) {
      do {
        c = this._input.next();
        sharp += c;
      } while (this._input.hasNext() && c !== '#' && c !== '=');
      if (c === '#') {
        //
      } else if (this._input.peek() === '[' && this._input.peek(1) === ']') {
        sharp += '[]';
        this._input.next();
        this._input.next();
      } else if (this._input.peek() === '{' && this._input.peek(1) === '}') {
        sharp += '{}';
        this._input.next();
        this._input.next();
      }
      return this._create_token(TOKEN.WORD, sharp);
    }

    this._input.back();

  } else if (c === '<' && this._is_first_token()) {
    resulting_string = this.__patterns.html_comment_start.read();
    if (resulting_string) {
      while (this._input.hasNext() && !this._input.testChar(acorn.newline)) {
        resulting_string += this._input.next();
      }
      in_html_comment = true;
      return this._create_token(TOKEN.COMMENT, resulting_string);
    }
  } else if (in_html_comment && c === '-') {
    resulting_string = this.__patterns.html_comment_end.read();
    if (resulting_string) {
      in_html_comment = false;
      return this._create_token(TOKEN.COMMENT, resulting_string);
    }
  }

  return null;
};

Tokenizer.prototype._read_comment = function(c) {
  var token = null;
  if (c === '/') {
    var comment = '';
    if (this._input.peek(1) === '*') {
      // peek for comment /* ... */
      comment = this.__patterns.block_comment.read();
      var directives = directives_core.get_directives(comment);
      if (directives && directives.ignore === 'start') {
        comment += directives_core.readIgnored(this._input);
      }
      comment = comment.replace(acorn.allLineBreaks, '\n');
      token = this._create_token(TOKEN.BLOCK_COMMENT, comment);
      token.directives = directives;
    } else if (this._input.peek(1) === '/') {
      // peek for comment // ...
      comment = this.__patterns.comment.read();
      token = this._create_token(TOKEN.COMMENT, comment);
    }
  }
  return token;
};

Tokenizer.prototype._read_string = function(c) {
  if (c === '`' || c === "'" || c === '"') {
    var resulting_string = this._input.next();
    this.has_char_escapes = false;

    if (c === '`') {
      resulting_string += this._read_string_recursive('`', true, '${');
    } else {
      resulting_string += this._read_string_recursive(c);
    }

    if (this.has_char_escapes && this._options.unescape_strings) {
      resulting_string = unescape_string(resulting_string);
    }

    if (this._input.peek() === c) {
      resulting_string += this._input.next();
    }

    resulting_string = resulting_string.replace(acorn.allLineBreaks, '\n');

    return this._create_token(TOKEN.STRING, resulting_string);
  }

  return null;
};

Tokenizer.prototype._allow_regexp_or_xml = function(previous_token) {
  // regex and xml can only appear in specific locations during parsing
  return (previous_token.type === TOKEN.RESERVED && in_array(previous_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||
    (previous_token.type === TOKEN.END_EXPR && previous_token.text === ')' &&
      previous_token.opened.previous.type === TOKEN.RESERVED && in_array(previous_token.opened.previous.text, ['if', 'while', 'for'])) ||
    (in_array(previous_token.type, [TOKEN.COMMENT, TOKEN.START_EXPR, TOKEN.START_BLOCK, TOKEN.START,
      TOKEN.END_BLOCK, TOKEN.OPERATOR, TOKEN.EQUALS, TOKEN.EOF, TOKEN.SEMICOLON, TOKEN.COMMA
    ]));
};

Tokenizer.prototype._read_regexp = function(c, previous_token) {

  if (c === '/' && this._allow_regexp_or_xml(previous_token)) {
    // handle regexp
    //
    var resulting_string = this._input.next();
    var esc = false;

    var in_char_class = false;
    while (this._input.hasNext() &&
      ((esc || in_char_class || this._input.peek() !== c) &&
        !this._input.testChar(acorn.newline))) {
      resulting_string += this._input.peek();
      if (!esc) {
        esc = this._input.peek() === '\\';
        if (this._input.peek() === '[') {
          in_char_class = true;
        } else if (this._input.peek() === ']') {
          in_char_class = false;
        }
      } else {
        esc = false;
      }
      this._input.next();
    }

    if (this._input.peek() === c) {
      resulting_string += this._input.next();

      // regexps may have modifiers /regexp/MOD , so fetch those, too
      // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.
      resulting_string += this._input.read(acorn.identifier);
    }
    return this._create_token(TOKEN.STRING, resulting_string);
  }
  return null;
};

Tokenizer.prototype._read_xml = function(c, previous_token) {

  if (this._options.e4x && c === "<" && this._allow_regexp_or_xml(previous_token)) {
    var xmlStr = '';
    var match = this.__patterns.xml.read_match();
    // handle e4x xml literals
    //
    if (match) {
      // Trim root tag to attempt to
      var rootTag = match[2].replace(/^{\s+/, '{').replace(/\s+}$/, '}');
      var isCurlyRoot = rootTag.indexOf('{') === 0;
      var depth = 0;
      while (match) {
        var isEndTag = !!match[1];
        var tagName = match[2];
        var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === "![CDATA[");
        if (!isSingletonTag &&
          (tagName === rootTag || (isCurlyRoot && tagName.replace(/^{\s+/, '{').replace(/\s+}$/, '}')))) {
          if (isEndTag) {
            --depth;
          } else {
            ++depth;
          }
        }
        xmlStr += match[0];
        if (depth <= 0) {
          break;
        }
        match = this.__patterns.xml.read_match();
      }
      // if we didn't close correctly, keep unformatted.
      if (!match) {
        xmlStr += this._input.match(/[\s\S]*/g)[0];
      }
      xmlStr = xmlStr.replace(acorn.allLineBreaks, '\n');
      return this._create_token(TOKEN.STRING, xmlStr);
    }
  }

  return null;
};

function unescape_string(s) {
  // You think that a regex would work for this
  // return s.replace(/\\x([0-9a-f]{2})/gi, function(match, val) {
  //         return String.fromCharCode(parseInt(val, 16));
  //     })
  // However, dealing with '\xff', '\\xff', '\\\xff' makes this more fun.
  var out = '',
    escaped = 0;

  var input_scan = new InputScanner(s);
  var matched = null;

  while (input_scan.hasNext()) {
    // Keep any whitespace, non-slash characters
    // also keep slash pairs.
    matched = input_scan.match(/([\s]|[^\\]|\\\\)+/g);

    if (matched) {
      out += matched[0];
    }

    if (input_scan.peek() === '\\') {
      input_scan.next();
      if (input_scan.peek() === 'x') {
        matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);
      } else if (input_scan.peek() === 'u') {
        matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);
      } else {
        out += '\\';
        if (input_scan.hasNext()) {
          out += input_scan.next();
        }
        continue;
      }

      // If there's some error decoding, return the original string
      if (!matched) {
        return s;
      }

      escaped = parseInt(matched[1], 16);

      if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf('x') === 0) {
        // we bail out on \x7f..\xff,
        // leaving whole string escaped,
        // as it's probably completely binary
        return s;
      } else if (escaped >= 0x00 && escaped < 0x20) {
        // leave 0x00...0x1f escaped
        out += '\\' + matched[0];
        continue;
      } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {
        // single-quote, apostrophe, backslash - escape these
        out += '\\' + String.fromCharCode(escaped);
      } else {
        out += String.fromCharCode(escaped);
      }
    }
  }

  return out;
}

// handle string
//
Tokenizer.prototype._read_string_recursive = function(delimiter, allow_unescaped_newlines, start_sub) {
  var current_char;
  var pattern;
  if (delimiter === '\'') {
    pattern = this.__patterns.single_quote;
  } else if (delimiter === '"') {
    pattern = this.__patterns.double_quote;
  } else if (delimiter === '`') {
    pattern = this.__patterns.template_text;
  } else if (delimiter === '}') {
    pattern = this.__patterns.template_expression;
  }

  var resulting_string = pattern.read();
  var next = '';
  while (this._input.hasNext()) {
    next = this._input.next();
    if (next === delimiter ||
      (!allow_unescaped_newlines && acorn.newline.test(next))) {
      this._input.back();
      break;
    } else if (next === '\\' && this._input.hasNext()) {
      current_char = this._input.peek();

      if (current_char === 'x' || current_char === 'u') {
        this.has_char_escapes = true;
      } else if (current_char === '\r' && this._input.peek(1) === '\n') {
        this._input.next();
      }
      next += this._input.next();
    } else if (start_sub) {
      if (start_sub === '${' && next === '$' && this._input.peek() === '{') {
        next += this._input.next();
      }

      if (start_sub === next) {
        if (delimiter === '`') {
          next += this._read_string_recursive('}', allow_unescaped_newlines, '`');
        } else {
          next += this._read_string_recursive('`', allow_unescaped_newlines, '${');
        }
        if (this._input.hasNext()) {
          next += this._input.next();
        }
      }
    }
    next += pattern.read();
    resulting_string += next;
  }

  return resulting_string;
};

module.exports.Tokenizer = Tokenizer;
module.exports.TOKEN = TOKEN;
module.exports.positionable_operators = positionable_operators.slice();
module.exports.line_starters = line_starters.slice();

},{"../core/directives":34,"../core/inputscanner":35,"../core/pattern":38,"../core/templatablepattern":39,"../core/tokenizer":41,"./acorn":52}],57:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module.exports = require('./src/core');

},{"./src/core":69}],58:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const babylon = require('@babel/parser');

// These are the options that were the default of the Babel5 parse function
// see https://github.com/babel/babel/blob/5.x/packages/babel/src/api/node.js#L81
const options = {
  sourceType: 'module',
  allowHashBang: true,
  ecmaVersion: Infinity,
  allowImportExportEverywhere: true,
  allowReturnOutsideFunction: true,
  startLine: 1,
  tokens: true,
  plugins: [
    'estree',
    'jsx',
    'asyncGenerators',
    'classProperties',
    'doExpressions',
    'exportExtensions',
    'functionBind',
    'functionSent',
    'objectRestSpread',
    'dynamicImport',
    'nullishCoalescingOperator',
    'optionalChaining',
  ],
};

/**
 * Wrapper to set default options. Doesn't accept custom options because in that
 * case babylon should be used instead.
 */
module.exports = function() {
  return {
    parse(code) {
      return babylon.parse(code, options);
    },
  };
};

},{"@babel/parser":1}],59:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const babylon = require('@babel/parser');

const defaultOptions = {
  sourceType: 'module',
  allowImportExportEverywhere: true,
  allowReturnOutsideFunction: true,
  startLine: 1,
  tokens: true,
  plugins: [
    ['flow', {all: true}],
    'flowComments',
    'jsx',

    'asyncGenerators',
    'bigInt',
    'classProperties',
    'classPrivateProperties',
    'classPrivateMethods',
    ['decorators', {decoratorsBeforeExport: false}],
    'doExpressions',
    'dynamicImport',
    'exportDefaultFrom',
    'exportNamespaceFrom',
    'functionBind',
    'functionSent',
    'importMeta',
    'logicalAssignment',
    'nullishCoalescingOperator',
    'numericSeparator',
    'objectRestSpread',
    'optionalCatchBinding',
    'optionalChaining',
    ['pipelineOperator', {proposal: 'minimal'}],
    'throwExpressions',
  ],
};

/**
 * Wrapper to set default options
 */
module.exports = function(options=defaultOptions) {
  return {
    parse(code) {
      return babylon.parse(code, options);
    },
  };
};

},{"@babel/parser":1}],60:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const flowParser = require('flow-parser');

const defaultOptions = {
  esproposal_class_instance_fields: true,
  esproposal_class_static_fields: true,
  esproposal_decorators: true,
  esproposal_export_star_as: true,
  esproposal_optional_chaining: true,
  esproposal_nullish_coalescing: true,
  tokens: true,
  types: true,
};

/**
 * Wrapper to set default options
 */
module.exports = function(options=defaultOptions) {
  return {
    parse(code) {
      return flowParser.parse(code, options);
    },
  };
};

},{"flow-parser":32}],61:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const babylon = require('@babel/parser');
const options = require('./tsOptions');

/**
 * Doesn't accept custom options because babylon should be used directly in
 * that case.
 */
module.exports = function() {
  return {
    parse(code) {
      return babylon.parse(code, options);
    },
  };
};

},{"./tsOptions":62,"@babel/parser":1}],62:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

/**
 * Options shared by the TypeScript and TSX parsers.
 */
module.exports = {
  sourceType: 'module',
  allowImportExportEverywhere: true,
  allowReturnOutsideFunction: true,
  startLine: 1,
  tokens: true,
  plugins: [
    'asyncGenerators',
    'bigInt',
    'classPrivateMethods',
    'classPrivateProperties',
    'classProperties',
    'decorators-legacy',
    'doExpressions',
    'dynamicImport',
    'exportDefaultFrom',
    'exportExtensions',
    'exportNamespaceFrom',
    'functionBind',
    'functionSent',
    'importMeta',
    'nullishCoalescingOperator',
    'numericSeparator',
    'objectRestSpread',
    'optionalCatchBinding',
    'optionalChaining',
    ['pipelineOperator', { proposal: 'minimal' }],
    'throwExpressions',
    'typescript'
  ],
};

},{}],63:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const _ = require('lodash');
const babylon = require('@babel/parser');
const baseOptions = require('./tsOptions');

const options = _.merge(baseOptions, { plugins: ['jsx'] });

/**
 * Doesn't accept custom options because babylon should be used directly in
 * that case.
 */
module.exports = function() {
  return {
    parse(code) {
      return babylon.parse(code, options);
    },
  };
};

},{"./tsOptions":62,"@babel/parser":1,"lodash":79}],64:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const assert = require('assert');
const intersection = require('./utils/intersection');
const recast = require('recast');
const union = require('./utils/union');

const astTypes = recast.types;
var types = astTypes.namedTypes;
const NodePath = astTypes.NodePath;
const Node = types.Node;

/**
 * This represents a generic collection of node paths. It only has a generic
 * API to access and process the elements of the list. It doesn't know anything
 * about AST types.
 *
 * @mixes traversalMethods
 * @mixes mutationMethods
 * @mixes transformMethods
 * @mixes globalMethods
 */
class Collection {

  /**
   * @param {Array} paths An array of AST paths
   * @param {Collection} parent A parent collection
   * @param {Array} types An array of types all the paths in the collection
   *  have in common. If not passed, it will be inferred from the paths.
   * @return {Collection}
   */
  constructor(paths, parent, types) {
    assert.ok(Array.isArray(paths), 'Collection is passed an array');
    assert.ok(
      paths.every(p => p instanceof NodePath),
      'Array contains only paths'
    );
    this._parent = parent;
    this.__paths = paths;
    if (types && !Array.isArray(types)) {
      types = _toTypeArray(types);
    } else if (!types || Array.isArray(types) && types.length === 0) {
      types = _inferTypes(paths);
    }
    this._types = types.length === 0 ? _defaultType : types;
  }

  /**
   * Returns a new collection containing the nodes for which the callback
   * returns true.
   *
   * @param {function} callback
   * @return {Collection}
   */
  filter(callback) {
    return new this.constructor(this.__paths.filter(callback), this);
  }

  /**
   * Executes callback for each node/path in the collection.
   *
   * @param {function} callback
   * @return {Collection} The collection itself
   */
  forEach(callback) {
    this.__paths.forEach(
      (path, i, paths) => callback.call(path, path, i, paths)
    );
    return this;
  }

  /**
   * Tests whether at-least one path passes the test implemented by the provided callback.
   *
   * @param {function} callback
   * @return {boolean}
   */
  some(callback) {
    return this.__paths.some(
      (path, i, paths) => callback.call(path, path, i, paths)
    );
  }

  /**
   * Tests whether all paths pass the test implemented by the provided callback.
   *
   * @param {function} callback
   * @return {boolean}
   */
  every(callback) {
    return this.__paths.every(
      (path, i, paths) => callback.call(path, path, i, paths)
    );
  }

  /**
   * Executes the callback for every path in the collection and returns a new
   * collection from the return values (which must be paths).
   *
   * The callback can return null to indicate to exclude the element from the
   * new collection.
   *
   * If an array is returned, the array will be flattened into the result
   * collection.
   *
   * @param {function} callback
   * @param {Type} type Force the new collection to be of a specific type
   */
  map(callback, type) {
    const paths = [];
    this.forEach(function(path) {
      /*jshint eqnull:true*/
      let result = callback.apply(path, arguments);
      if (result == null) return;
      if (!Array.isArray(result)) {
        result = [result];
      }
      for (let i = 0; i < result.length; i++) {
        if (paths.indexOf(result[i]) === -1) {
          paths.push(result[i]);
        }
      }
    });
    return fromPaths(paths, this, type);
  }

  /**
   * Returns the number of elements in this collection.
   *
   * @return {number}
   */
  size() {
    return this.__paths.length;
  }

  /**
   * Returns the number of elements in this collection.
   *
   * @return {number}
   */
  get length() {
    return this.__paths.length;
  }

  /**
   * Returns an array of AST nodes in this collection.
   *
   * @return {Array}
   */
  nodes() {
    return this.__paths.map(p => p.value);
  }

  paths() {
    return this.__paths;
  }

  getAST() {
    if (this._parent) {
      return this._parent.getAST();
    }
    return this.__paths;
  }

  toSource(options) {
    if (this._parent) {
      return this._parent.toSource(options);
    }
    if (this.__paths.length === 1) {
      return recast.print(this.__paths[0], options).code;
    } else {
      return this.__paths.map(p => recast.print(p, options).code);
    }
  }

  /**
   * Returns a new collection containing only the element at position index.
   *
   * In case of a negative index, the element is taken from the end:
   *
   *   .at(0)  - first element
   *   .at(-1) - last element
   *
   * @param {number} index
   * @return {Collection}
   */
  at(index) {
    return fromPaths(
      this.__paths.slice(
        index,
        index === -1 ? undefined : index + 1
      ),
      this
    );
  }

  /**
   * Proxies to NodePath#get of the first path.
   *
   * @param {string|number} ...fields
   */
  get() {
    const path = this.__paths[0];
    if (!path) {
      throw Error(
        'You cannot call "get" on a collection with no paths. ' +
        'Instead, check the "length" property first to verify at least 1 path exists.'
      );
    }
    return path.get.apply(path, arguments);
  }

  /**
   * Returns the type(s) of the collection. This is only used for unit tests,
   * I don't think other consumers would need it.
   *
   * @return {Array<string>}
   */
  getTypes() {
    return this._types;
  }

  /**
   * Returns true if this collection has the type 'type'.
   *
   * @param {Type} type
   * @return {boolean}
   */
  isOfType(type) {
    return !!type && this._types.indexOf(type.toString()) > -1;
  }
}

/**
 * Given a set of paths, this infers the common types of all paths.
 * @private
 * @param {Array} paths An array of paths.
 * @return {Type} type An AST type
 */
function _inferTypes(paths) {
  let _types = [];

  if (paths.length > 0 && Node.check(paths[0].node)) {
    const nodeType = types[paths[0].node.type];
    const sameType = paths.length === 1 ||
      paths.every(path => nodeType.check(path.node));

    if (sameType) {
      _types = [nodeType.toString()].concat(
        astTypes.getSupertypeNames(nodeType.toString())
      );
    } else {
      // try to find a common type
      _types = intersection(
        paths.map(path => astTypes.getSupertypeNames(path.node.type))
      );
    }
  }

  return _types;
}

function _toTypeArray(value) {
  value = !Array.isArray(value) ? [value] : value;
  value = value.map(v => v.toString());
  if (value.length > 1) {
    return union(
      [value].concat(intersection(value.map(_getSupertypeNames)))
    );
  } else {
    return value.concat(_getSupertypeNames(value[0]));
  }
}

function _getSupertypeNames(type) {
  try {
    return astTypes.getSupertypeNames(type);
  } catch(error) {
    if (error.message === '') {
      // Likely the case that the passed type wasn't found in the definition
      // list. Maybe a typo. ast-types doesn't throw a useful error in that
      // case :(
      throw new Error(
        '"' + type + '" is not a known AST node type. Maybe a typo?'
      );
    }
    throw error;
  }
}

/**
 * Creates a new collection from an array of node paths.
 *
 * If type is passed, it will create a typed collection if such a collection
 * exists. The nodes or path values must be of the same type.
 *
 * Otherwise it will try to infer the type from the path list. If every
 * element has the same type, a typed collection is created (if it exists),
 * otherwise, a generic collection will be created.
 *
 * @ignore
 * @param {Array} paths An array of paths
 * @param {Collection} parent A parent collection
 * @param {Type} type An AST type
 * @return {Collection}
 */
function fromPaths(paths, parent, type) {
  assert.ok(
    paths.every(n => n instanceof NodePath),
    'Every element in the array should be a NodePath'
  );

  return new Collection(paths, parent, type);
}

/**
 * Creates a new collection from an array of nodes. This is a convenience
 * method which converts the nodes to node paths first and calls
 *
 *    Collections.fromPaths(paths, parent, type)
 *
 * @ignore
 * @param {Array} nodes An array of AST nodes
 * @param {Collection} parent A parent collection
 * @param {Type} type An AST type
 * @return {Collection}
 */
function fromNodes(nodes, parent, type) {
  assert.ok(
    nodes.every(n => Node.check(n)),
    'Every element in the array should be a Node'
  );
  return fromPaths(
    nodes.map(n => new NodePath(n)),
    parent,
    type
  );
}

const CPt = Collection.prototype;

/**
 * This function adds the provided methods to the prototype of the corresponding
 * typed collection. If no type is passed, the methods are added to
 * Collection.prototype and are available for all collections.
 *
 * @param {Object} methods Methods to add to the prototype
 * @param {Type=} type Optional type to add the methods to
 */
function registerMethods(methods, type) {
  for (const methodName in methods) {
    if (!methods.hasOwnProperty(methodName)) {
      return;
    }
    if (hasConflictingRegistration(methodName, type)) {
      let msg = `There is a conflicting registration for method with name "${methodName}".\nYou tried to register an additional method with `;

      if (type) {
        msg += `type "${type.toString()}".`
      } else {
        msg += 'universal type.'
      }

      msg += '\nThere are existing registrations for that method with ';

      const conflictingRegistrations = CPt[methodName].typedRegistrations;

      if (conflictingRegistrations) {
        msg += `type ${Object.keys(conflictingRegistrations).join(', ')}.`;
      } else {
        msg += 'universal type.';
      }

      throw Error(msg);
    }
    if (!type) {
      CPt[methodName] = methods[methodName];
    } else {
      type = type.toString();
      if (!CPt.hasOwnProperty(methodName)) {
        installTypedMethod(methodName);
      }
      var registrations = CPt[methodName].typedRegistrations;
      registrations[type] = methods[methodName];
      astTypes.getSupertypeNames(type).forEach(function (name) {
        registrations[name] = false;
      });
    }
  }
}

function installTypedMethod(methodName) {
  if (CPt.hasOwnProperty(methodName)) {
    throw new Error(`Internal Error: "${methodName}" method is already installed`);
  }

  const registrations = {};

  function typedMethod() {
    const types = Object.keys(registrations);

    for (let i = 0; i < types.length; i++) {
      const currentType = types[i];
      if (registrations[currentType] && this.isOfType(currentType)) {
        return registrations[currentType].apply(this, arguments);
      }
    }

    throw Error(
      `You have a collection of type [${this.getTypes()}]. ` +
      `"${methodName}" is only defined for one of [${types.join('|')}].`
    );
  }

  typedMethod.typedRegistrations = registrations;

  CPt[methodName] = typedMethod;
}

function hasConflictingRegistration(methodName, type) {
  if (!type) {
    return CPt.hasOwnProperty(methodName);
  }

  if (!CPt.hasOwnProperty(methodName)) {
    return false;
  }

  const registrations = CPt[methodName] && CPt[methodName].typedRegistrations;

  if (!registrations) {
    return true;
  }

  type = type.toString();

  if (registrations.hasOwnProperty(type)) {
    return true;
  }

  return astTypes.getSupertypeNames(type.toString()).some(function (name) {
    return !!registrations[name];
  });
}

var _defaultType = [];

/**
 * Sets the default collection type. In case a collection is created form an
 * empty set of paths and no type is specified, we return a collection of this
 * type.
 *
 * @ignore
 * @param {Type} type
 */
function setDefaultCollectionType(type) {
  _defaultType = _toTypeArray(type);
}

exports.fromPaths = fromPaths;
exports.fromNodes = fromNodes;
exports.registerMethods = registerMethods;
exports.hasConflictingRegistration = hasConflictingRegistration;
exports.setDefaultCollectionType = setDefaultCollectionType;

},{"./utils/intersection":73,"./utils/union":75,"assert":2,"recast":93}],65:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const Collection = require('../Collection');
const NodeCollection = require('./Node');

const assert = require('assert');
const once = require('../utils/once');
const recast = require('recast');
const requiresModule = require('./VariableDeclarator').filters.requiresModule;

const types = recast.types.namedTypes;
const JSXElement = types.JSXElement;
const JSXAttribute = types.JSXAttribute;
const Literal = types.Literal;

/**
 * Contains filter methods and mutation methods for processing JSXElements.
 * @mixin
 */
const globalMethods = {
  /**
   * Finds all JSXElements optionally filtered by name
   *
   * @param {string} name
   * @return {Collection}
   */
  findJSXElements: function(name) {
    const nameFilter = name && {openingElement: {name: {name: name}}};
    return this.find(JSXElement, nameFilter);
  },

  /**
   * Finds all JSXElements by module name. Given
   *
   *     var Bar = require('Foo');
   *     <Bar />
   *
   * findJSXElementsByModuleName('Foo') will find <Bar />, without having to
   * know the variable name.
   */
  findJSXElementsByModuleName: function(moduleName) {
    assert.ok(
      moduleName && typeof moduleName === 'string',
      'findJSXElementsByModuleName(...) needs a name to look for'
    );

    return this.find(types.VariableDeclarator)
      .filter(requiresModule(moduleName))
      .map(function(path) {
        const id = path.value.id.name;
        if (id) {
          return Collection.fromPaths([path])
            .closestScope()
            .findJSXElements(id)
            .paths();
        }
      });
  }
};

const filterMethods = {

  /**
   * Filter method for attributes.
   *
   * @param {Object} attributeFilter
   * @return {function}
   */
  hasAttributes: function(attributeFilter) {
    const attributeNames = Object.keys(attributeFilter);
    return function filter(path) {
      if (!JSXElement.check(path.value)) {
        return false;
      }
      const elementAttributes = Object.create(null);
      path.value.openingElement.attributes.forEach(function(attr) {
        if (!JSXAttribute.check(attr) ||
          !(attr.name.name in attributeFilter)) {
          return;
        }
        elementAttributes[attr.name.name] = attr;
      });

      return attributeNames.every(function(name) {
        if (!(name in elementAttributes) ){
          return false;
        }

        const value = elementAttributes[name].value;
        const expected = attributeFilter[name];

        // Only when value is truthy access it's properties
        const actual = !value
          ? value
          : Literal.check(value)
          ? value.value
          : value.expression;

        if (typeof expected === 'function') {
          return expected(actual);
        }

         // Literal attribute values are always strings
        return String(expected) === actual;
      });
    };
  },

  /**
   * Filter elements which contain a specific child type
   *
   * @param {string} name
   * @return {function}
   */
  hasChildren: function(name) {
    return function filter(path) {
      return JSXElement.check(path.value) &&
        path.value.children.some(
          child => JSXElement.check(child) &&
                   child.openingElement.name.name === name
        );
    };
  }
};

/**
* @mixin
*/
const traversalMethods = {

  /**
   * Returns all child nodes, including literals and expressions.
   *
   * @return {Collection}
   */
  childNodes: function() {
    const paths = [];
    this.forEach(function(path) {
      const children = path.get('children');
      const l = children.value.length;
      for (let i = 0; i < l; i++) {
        paths.push(children.get(i));
      }
    });
    return Collection.fromPaths(paths, this);
  },

  /**
   * Returns all children that are JSXElements.
   *
   * @return {JSXElementCollection}
   */
  childElements: function() {
    const paths = [];
    this.forEach(function(path) {
      const children = path.get('children');
      const l = children.value.length;
      for (let i = 0; i < l; i++) {
        if (types.JSXElement.check(children.value[i])) {
          paths.push(children.get(i));
        }
      }
    });
    return Collection.fromPaths(paths, this, JSXElement);
  },
};

const mappingMethods = {
  /**
   * Given a JSXElement, returns its "root" name. E.g. it would return "Foo" for
   * both <Foo /> and <Foo.Bar />.
   *
   * @param {NodePath} path
   * @return {string}
   */
  getRootName: function(path) {
    let name = path.value.openingElement.name;
    while (types.JSXMemberExpression.check(name)) {
      name = name.object;
    }

    return name && name.name || null;
  }
};

function register() {
  NodeCollection.register();
  Collection.registerMethods(globalMethods, types.Node);
  Collection.registerMethods(traversalMethods, JSXElement);
}

exports.register = once(register);
exports.filters = filterMethods;
exports.mappings = mappingMethods;

},{"../Collection":64,"../utils/once":74,"./Node":66,"./VariableDeclarator":67,"assert":2,"recast":93}],66:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const Collection = require('../Collection');

const matchNode = require('../matchNode');
const once = require('../utils/once');
const recast = require('recast');

const Node = recast.types.namedTypes.Node;
var types = recast.types.namedTypes;

/**
* @mixin
*/
const traversalMethods = {

  /**
   * Find nodes of a specific type within the nodes of this collection.
   *
   * @param {type}
   * @param {filter}
   * @return {Collection}
   */
  find: function(type, filter) {
    const paths = [];
    const visitorMethodName = 'visit' + type;

    const visitor = {};
    function visit(path) {
      /*jshint validthis:true */
      if (!filter || matchNode(path.value, filter)) {
        paths.push(path);
      }
      this.traverse(path);
    }
    this.__paths.forEach(function(p, i) {
      const self = this;
      visitor[visitorMethodName] = function(path) {
        if (self.__paths[i] === path) {
          this.traverse(path);
        } else {
          return visit.call(this, path);
        }
      };
      recast.visit(p, visitor);
    }, this);

    return Collection.fromPaths(paths, this, type);
  },

  /**
   * Returns a collection containing the paths that create the scope of the
   * currently selected paths. Dedupes the paths.
   *
   * @return {Collection}
   */
  closestScope: function() {
    return this.map(path => path.scope && path.scope.path);
  },

  /**
   * Traverse the AST up and finds the closest node of the provided type.
   *
   * @param {Collection}
   * @param {filter}
   * @return {Collection}
   */
  closest: function(type, filter) {
    return this.map(function(path) {
      let parent = path.parent;
      while (
        parent &&
        !(
          type.check(parent.value) &&
          (!filter || matchNode(parent.value, filter))
        )
      ) {
        parent = parent.parent;
      }
      return parent || null;
    });
  },

  /**
   * Finds the declaration for each selected path. Useful for member expressions
   * or JSXElements. Expects a callback function that maps each path to the name
   * to look for.
   *
   * If the callback returns a falsey value, the element is skipped.
   *
   * @param {function} nameGetter
   *
   * @return {Collection}
   */
  getVariableDeclarators: function(nameGetter) {
    return this.map(function(path) {
      /*jshint curly:false*/
      let scope = path.scope;
      if (!scope) return;
      const name = nameGetter.apply(path, arguments);
      if (!name) return;
      scope = scope.lookup(name);
      if (!scope) return;
      const bindings = scope.getBindings()[name];
      if (!bindings) return;
      const decl = Collection.fromPaths(bindings)
        .closest(types.VariableDeclarator);
      if (decl.length === 1) {
        return decl.paths()[0];
      }
    }, types.VariableDeclarator);
  },
};

function toArray(value) {
  return Array.isArray(value) ? value : [value];
}

/**
* @mixin
*/
const mutationMethods = {
  /**
   * Simply replaces the selected nodes with the provided node. If a function
   * is provided it is executed for every node and the node is replaced with the
   * functions return value.
   *
   * @param {Node|Array<Node>|function} nodes
   * @return {Collection}
   */
  replaceWith: function(nodes) {
    return this.forEach(function(path, i) {
      const newNodes =
        (typeof nodes === 'function') ? nodes.call(path, path, i) : nodes;
      path.replace.apply(path, toArray(newNodes));
    });
  },

  /**
   * Inserts a new node before the current one.
   *
   * @param {Node|Array<Node>|function} insert
   * @return {Collection}
   */
  insertBefore: function(insert) {
    return this.forEach(function(path, i) {
      const newNodes =
        (typeof insert === 'function') ? insert.call(path, path, i) : insert;
      path.insertBefore.apply(path, toArray(newNodes));
    });
  },

  /**
   * Inserts a new node after the current one.
   *
   * @param {Node|Array<Node>|function} insert
   * @return {Collection}
   */
  insertAfter: function(insert) {
    return this.forEach(function(path, i) {
      const newNodes =
        (typeof insert === 'function') ? insert.call(path, path, i) : insert;
      path.insertAfter.apply(path, toArray(newNodes));
    });
  },

  remove: function() {
    return this.forEach(path => path.prune());
  }

};

function register() {
  Collection.registerMethods(traversalMethods, Node);
  Collection.registerMethods(mutationMethods, Node);
  Collection.setDefaultCollectionType(Node);
}

exports.register = once(register);

},{"../Collection":64,"../matchNode":71,"../utils/once":74,"recast":93}],67:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const Collection = require('../Collection');
const NodeCollection = require('./Node');
const once = require('../utils/once');
const recast = require('recast');

const astNodesAreEquivalent = recast.types.astNodesAreEquivalent;
const b = recast.types.builders;
var types = recast.types.namedTypes;

const VariableDeclarator = recast.types.namedTypes.VariableDeclarator;

/**
* @mixin
*/
const globalMethods = {
  /**
   * Finds all variable declarators, optionally filtered by name.
   *
   * @param {string} name
   * @return {Collection}
   */
  findVariableDeclarators: function(name) {
    const filter = name ? {id: {name: name}} : null;
    return this.find(VariableDeclarator, filter);
  }
};

const filterMethods = {
  /**
   * Returns a function that returns true if the provided path is a variable
   * declarator and requires one of the specified module names.
   *
   * @param {string|Array} names A module name or an array of module names
   * @return {Function}
   */
  requiresModule: function(names) {
    if (names && !Array.isArray(names)) {
      names = [names];
    }
    const requireIdentifier = b.identifier('require');
    return function(path) {
      const node = path.value;
      if (!VariableDeclarator.check(node) ||
          !types.CallExpression.check(node.init) ||
          !astNodesAreEquivalent(node.init.callee, requireIdentifier)) {
        return false;
      }
      return !names ||
        names.some(
          n => astNodesAreEquivalent(node.init.arguments[0], b.literal(n))
        );
    };
  }
};

/**
* @mixin
*/
const transformMethods = {
  /**
   * Renames a variable and all its occurrences.
   *
   * @param {string} newName
   * @return {Collection}
   */
  renameTo: function(newName) {
    // TODO: Include JSXElements
    return this.forEach(function(path) {
      const node = path.value;
      const oldName = node.id.name;
      const rootScope = path.scope;
      const rootPath = rootScope.path;
      Collection.fromPaths([rootPath])
        .find(types.Identifier, {name: oldName})
        .filter(function(path) { // ignore non-variables
          const parent = path.parent.node;

          if (
            types.MemberExpression.check(parent) &&
            parent.property === path.node &&
            !parent.computed
          ) {
            // obj.oldName
            return false;
          }

          if (
            types.Property.check(parent) &&
            parent.key === path.node &&
            !parent.computed
          ) {
            // { oldName: 3 }
            return false;
          }

          if (
            types.MethodDefinition.check(parent) &&
            parent.key === path.node &&
            !parent.computed
          ) {
            // class A { oldName() {} }
            return false;
          }

          if (
            types.ClassProperty.check(parent) &&
            parent.key === path.node &&
            !parent.computed
          ) {
            // class A { oldName = 3 }
            return false;
          }

          if (
            types.JSXAttribute.check(parent) &&
            parent.name === path.node &&
            !parent.computed
          ) {
            // <Foo oldName={oldName} />
            return false;
          }

          return true;
        })
        .forEach(function(path) {
          let scope = path.scope;
          while (scope && scope !== rootScope) {
            if (scope.declares(oldName)) {
              return;
            }
            scope = scope.parent;
          }
          if (scope) { // identifier must refer to declared variable

            // It may look like we filtered out properties,
            // but the filter only ignored property "keys", not "value"s
            // In shorthand properties, "key" and "value" both have an
            // Identifier with the same structure.
            const parent = path.parent.node;
            if (
              types.Property.check(parent) &&
              parent.shorthand &&
              !parent.method
            )  {

              path.parent.get('shorthand').replace(false);
            }

            path.get('name').replace(newName);
          }
        });
    });
  }
};


function register() {
  NodeCollection.register();
  Collection.registerMethods(globalMethods);
  Collection.registerMethods(transformMethods, VariableDeclarator);
}

exports.register = once(register);
exports.filters = filterMethods;

},{"../Collection":64,"../utils/once":74,"./Node":66,"recast":93}],68:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module.exports = {
  Node: require('./Node'),
  JSXElement: require('./JSXElement'),
  VariableDeclarator: require('./VariableDeclarator'),
};

},{"./JSXElement":65,"./Node":66,"./VariableDeclarator":67}],69:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';
const Collection = require('./Collection');

const collections = require('./collections');
const getParser = require('./getParser');
const matchNode = require('./matchNode');
const recast = require('recast');
const template = require('./template');

const Node = recast.types.namedTypes.Node;
const NodePath = recast.types.NodePath;

// Register all built-in collections
for (var name in collections) {
  collections[name].register();
}

/**
 * Main entry point to the tool. The function accepts multiple different kinds
 * of arguments as a convenience. In particular the function accepts either
 *
 * - a string containing source code
 *   The string is parsed with Recast
 * - a single AST node
 * - a single node path
 * - an array of nodes
 * - an array of node paths
 *
 * @exports jscodeshift
 * @param {Node|NodePath|Array|string} source
 * @param {Object} options Options to pass to Recast when passing source code
 * @return {Collection}
 */
function core(source, options) {
  return typeof source === 'string' ?
    fromSource(source, options) :
    fromAST(source);
}

/**
 * Returns a collection from a node, node path, array of nodes or array of node
 * paths.
 *
 * @ignore
 * @param {Node|NodePath|Array} source
 * @return {Collection}
 */
function fromAST(ast) {
  if (Array.isArray(ast)) {
    if (ast[0] instanceof NodePath || ast.length === 0) {
      return Collection.fromPaths(ast);
    } else if (Node.check(ast[0])) {
      return Collection.fromNodes(ast);
    }
  } else {
    if (ast instanceof NodePath) {
      return Collection.fromPaths([ast]);
    } else if (Node.check(ast)) {
      return Collection.fromNodes([ast]);
    }
  }
  throw new TypeError(
    'Received an unexpected value ' + Object.prototype.toString.call(ast)
  );
}

function fromSource(source, options) {
  if (!options) {
    options = {};
  }
  if (!options.parser) {
    options.parser = getParser();
  }
  return fromAST(recast.parse(source, options));
}

/**
 * Utility function to match a node against a pattern.
 * @augments core
 * @static
 * @param {Node|NodePath|Object} path
 * @parma {Object} filter
 * @return boolean
 */
function match(path, filter) {
  if (!(path instanceof NodePath)) {
    if (typeof path.get === 'function') {
      path = path.get();
    } else {
      path = {value: path};
    }
  }
  return matchNode(path.value, filter);
}

const plugins = [];

/**
 * Utility function for registering plugins.
 *
 * Plugins are simple functions that are passed the core jscodeshift instance.
 * They should extend jscodeshift by calling `registerMethods`, etc.
 * This method guards against repeated registrations (the plugin callback will only be called once).
 *
 * @augments core
 * @static
 * @param {Function} plugin
 */
function use(plugin) {
  if (plugins.indexOf(plugin) === -1) {
    plugins.push(plugin);
    plugin(core);
  }
}

/**
 * Returns a version of the core jscodeshift function "bound" to a specific
 * parser.
 *
 * @augments core
 * @static
 */
function withParser(parser) {
  if (typeof parser === 'string') {
    parser = getParser(parser);
  }

  const newCore = function(source, options) {
    if (options && !options.parser) {
      options.parser = parser;
    } else {
      options = {parser};
    }
    return core(source, options);
  };

  return enrichCore(newCore, parser);
}

/**
* The ast-types library
* @external astTypes
* @see {@link https://github.com/benjamn/ast-types}
*/

function enrichCore(core, parser) {
  // add builders and types to the function for simple access
  Object.assign(core, recast.types.namedTypes);
  Object.assign(core, recast.types.builders);
  core.registerMethods = Collection.registerMethods;
  /**
  * @augments core
  * @type external:astTypes
  */
  core.types = recast.types;
  core.match = match;
  core.template = template(parser);

  // add mappings and filters to function
  core.filters = {};
  core.mappings = {};
  for (const name in collections) {
    if (collections[name].filters) {
      core.filters[name] = collections[name].filters;
    }
    if (collections[name].mappings) {
      core.mappings[name] = collections[name].mappings;
    }
  }
  core.use = use;
  core.withParser = withParser;
  return core;
}

module.exports = enrichCore(core, getParser());

},{"./Collection":64,"./collections":68,"./getParser":70,"./matchNode":71,"./template":72,"recast":93}],70:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

module.exports = function getParser(parserName, options) {
  switch (parserName) {
    case 'babylon':
      return require('../parser/babylon')(options);
    case 'flow':
      return require('../parser/flow')(options);
    case 'ts':
      return require('../parser/ts')(options);
    case 'tsx':
      return require('../parser/tsx')(options);
    case 'babel':
    default:
      return require('../parser/babel5Compat')(options);
  }
};

},{"../parser/babel5Compat":58,"../parser/babylon":59,"../parser/flow":60,"../parser/ts":61,"../parser/tsx":63}],71:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const hasOwn =
  Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);

/**
 * Checks whether needle is a strict subset of haystack.
 *
 * @param {*} haystack Value to test.
 * @param {*} needle Test function or value to look for in `haystack`.
 * @return {bool}
 */
function matchNode(haystack, needle) {
  if (typeof needle === 'function') {
    return needle(haystack);
  }
  if (isNode(needle) && isNode(haystack)) {
    return Object.keys(needle).every(function(property) {
      return (
        hasOwn(haystack, property) &&
        matchNode(haystack[property], needle[property])
      );
    });
  }
  return haystack === needle;
}

function isNode(value) {
  return typeof value === 'object' && value;
}

module.exports = matchNode;

},{}],72:[function(require,module,exports){

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const recast = require('recast');

const builders = recast.types.builders;
const types = recast.types.namedTypes;

function splice(arr, element, replacement) {
  arr.splice.apply(arr, [arr.indexOf(element), 1].concat(replacement));
}

function cleanLocation(node) {
  delete node.start;
  delete node.end;
  delete node.loc;
  return node;
}

function ensureStatement(node) {
  return types.Statement.check(node) ?
    // Removing the location information seems to ensure that the node is
    // correctly reprinted with a trailing semicolon
    cleanLocation(node) :
    builders.expressionStatement(node);
}

function getVistor(varNames, nodes) {
  return {
    visitIdentifier: function(path) {
      this.traverse(path);
      const node = path.node;
      const parent = path.parent.node;

      // If this identifier is not one of our generated ones, do nothing
      const varIndex = varNames.indexOf(node.name);
      if (varIndex === -1) {
        return;
      }

      let replacement = nodes[varIndex];
      nodes[varIndex] = null;

      // If the replacement is an array, we need to explode the nodes in context
      if (Array.isArray(replacement)) {

        if (types.Function.check(parent) &&
            parent.params.indexOf(node) > -1) {
          // Function parameters: function foo(${bar}) {}
          splice(parent.params, node, replacement);
        } else if (types.VariableDeclarator.check(parent)) {
          // Variable declarations: var foo = ${bar}, baz = 42;
          splice(
            path.parent.parent.node.declarations,
            parent,
            replacement
          );
        } else if (types.ArrayExpression.check(parent)) {
          // Arrays: var foo = [${bar}, baz];
          splice(parent.elements, node, replacement);
        } else if (types.Property.check(parent) && parent.shorthand) {
          // Objects: var foo = {${bar}, baz: 42};
          splice(
            path.parent.parent.node.properties,
            parent,
            replacement
          );
        } else if (types.CallExpression.check(parent) &&
            parent.arguments.indexOf(node) > -1) {
          // Function call arguments: foo(${bar}, baz)
          splice(parent.arguments, node, replacement);
        } else if (types.ExpressionStatement.check(parent)) {
          // Generic sequence of statements: { ${foo}; bar; }
          path.parent.replace.apply(
            path.parent,
            replacement.map(ensureStatement)
          );
        } else {
          // Every else, let recast take care of it
          path.replace.apply(path, replacement);
        }
      } else if (types.ExpressionStatement.check(parent)) {
        path.parent.replace(ensureStatement(replacement));
      } else {
        path.replace(replacement);
      }
    }
  };
}

function replaceNodes(src, varNames, nodes, parser) {
  const ast = recast.parse(src, {parser});
  recast.visit(ast, getVistor(varNames, nodes));
  return ast;
}

let varNameCounter = 0;
function getUniqueVarName() {
  return `$jscodeshift${varNameCounter++}$`;
}


module.exports = function withParser(parser) {
  function statements(template/*, ...nodes*/) {
    template = Array.from(template);
    const nodes = Array.from(arguments).slice(1);
    const varNames = nodes.map(() => getUniqueVarName());
    const src = template.reduce(
      (result, elem, i) => result + varNames[i - 1] + elem
    );

    return replaceNodes(
      src,
      varNames,
      nodes,
      parser
    ).program.body;
  }

  function statement(/*template, ...nodes*/) {
    return statements.apply(null, arguments)[0];
  }

  function expression(template/*, ...nodes*/) {
    // wrap code in `(...)` to force evaluation as expression
    template = Array.from(template);
    if (template.length > 0) {
      template[0] = '(' + template[0];
      template[template.length - 1] += ')';
    }

    return statement.apply(
      null,
      [template].concat(Array.from(arguments).slice(1))
    ).expression;
  }

  return {statements, statement, expression};
}

},{"recast":93}],73:[function(require,module,exports){
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module.exports = function(arrays) {
  const result = new Set(arrays[0]);
  let resultSize = result.length;

  let i, value, valuesToCheck;
  for (i = 1; i < arrays.length; i++) {
    valuesToCheck = new Set(arrays[i]);
    for (value of result) {
      if (!valuesToCheck.has(value)) {
        result.delete(value);
        resultSize -= 1;
      }
      if (resultSize === 0) {
        return [];
      }
    }
  }

  return Array.from(result);
};

},{}],74:[function(require,module,exports){
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This replicates lodash's once functionality for our purposes.
 */
module.exports = function(func) {
  let called = false;
  let result;
  return function(...args) {
    if (called) {
      return result;
    }
    called = true;
    return result = func.apply(this, args);
  };
};

},{}],75:[function(require,module,exports){
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module.exports = function(arrays) {
  const result = new Set(arrays[0]);

  let i,j, array;
  for (i = 1; i < arrays.length; i++) {
    array = arrays[i];
    for (j = 0; j < array.length; j++) {
      result.add(array[j]);
    }
  }

  return Array.from(result);
};

},{}],76:[function(require,module,exports){
const j = require('jscodeshift')
const writeValue = require('./writeValue')
const setKeyQuoteUsage = require('./setKeyQuoteUsage')

function load(src = '{}') {
  const ast = toAst(src)
  const root = ast.nodes()[0].program.body[0].expression

  // @param {Object|Array} value
  function write(value) {
    root.right = writeValue(root.right, value)
  }

  function toSource(options = {}) {
    // set default options
    options = Object.assign(
      {
        quote: 'single',
        trailingComma: true,
      },
      options
    )

    const sourceAst =
      options.quoteKeys === undefined
        ? ast
        : setKeyQuoteUsage(ast, options.quoteKeys)

    // strip the "x=" prefix
    return sourceAst.toSource(options).replace(/^x=([{\[])/m, '$1')
  }

  function toJSON5(options = {}) {
    toSource(options);
  }

  function toJSON(options = {}) {
    return toSource(
      Object.assign(
        {
          quote: 'double',
          trailingComma: false,
          quoteKeys: true
        },
        options
      )
    )
  }

  return { write, toSource, toJSON, ast: j(root.right) }
}

function toAst(src) {
  // find the start of the outermost array or object
  const expressionStart = src.match(/^\s*[{\[]/m)
  if (expressionStart) {
    // hackily insert "x=" so the JSON5 becomes valid JavaScript
    const astSrc = src.replace(/^\s*([{\[])/m, 'x=$1')
    return j(astSrc)
  }

  // no array or object exist in the JSON5
  return j('x={}')
}

module.exports = { load }

},{"./setKeyQuoteUsage":77,"./writeValue":78,"jscodeshift":57}],77:[function(require,module,exports){
const j = require('jscodeshift')

function setKeyQuoteUsage(ast, enabled) {
  return j(ast.toSource())
    .find(j.ObjectExpression)
    .forEach(path => {
      path.value.properties.forEach(prop => {
        if (enabled) {
          quoteKey(prop)
        } else {
          unquoteKey(prop)
        }
      })
    })
}

function quoteKey(prop) {
  if (prop.key.type === 'Identifier') {
    prop.key = j.literal(prop.key.name)
  }
}

function unquoteKey(prop) {
  if (prop.key.type === 'Literal') {
    prop.key = j.identifier(prop.key.value)
  }
}

module.exports = setKeyQuoteUsage

},{"jscodeshift":57}],78:[function(require,module,exports){
const j = require('jscodeshift')

// @param {j.ObjectExpression|j.ArrayExpression|j.Literal} node
function writeValue(node, value) {
  if (value === undefined) return node

  node = nodeTypeMatchesValue(node, value) ? node : createEmptyNode(value)

  if (node.type === 'ArrayExpression') {
    writeArray(node, value)
  } else if (node.type === 'ObjectExpression') {
    writeObj(node, value)
  } else if (node.type === 'Literal') {
    node.value = value
  }
  return node
}

function nodeTypeMatchesValue(node, value) {
  if (value === undefined || node === undefined) return false
  if (isArray(value)) return node.type === 'ArrayExpression'
  if (isObject(value)) return node.type === 'ObjectExpression'
  return node.type === 'Literal'
}

function createEmptyNode(value) {
  if (isArray(value)) {
    return j.arrayExpression([])
  }
  if (isObject(value)) {
    return j.objectExpression([])
  }
  return j.literal('')
}

function writeArray(node, array) {
  array.forEach((value, index) => {
    const existingElement = node.elements[index]
    node.elements[index] = writeValue(existingElement, value)
  })
  node.elements.length = array.length
}

function writeObj(node, obj) {
  const newProperties = []
  Object.keys(obj).forEach((key, index) => {
    const existingProperty = findPropertyByKey(node.properties, key)
    if (existingProperty) {
      existingProperty.value = writeValue(existingProperty.value, obj[key])
      newProperties.push(existingProperty)
    } else {
      if (obj[key] === undefined) return
      const newKey = getNewPropertyKey(node.properties, key)
      const newValue = writeValue(undefined, obj[key])
      const newProperty = j.property('init', newKey, newValue)
      newProperties.push(newProperty)
    }
  })
  node.properties = newProperties
}

function findPropertyByKey(properties, key) {
  return properties.find(p => (p.key.name || p.key.value) === key)
}

function getNewPropertyKey(properties, key) {
  // if the key has invalid characters, it has to be a string literal
  if (key.match(/[^a-zA-Z0-9_]/)) {
    return j.literal(key)
  }

  // infer whether to use a literal or identifier by looking at the other keys
  const useIdentifier =
    properties.length === 0 || properties.some(p => p.key.type === 'Identifier')
  return useIdentifier ? j.identifier(key) : j.literal(key)
}

function isObject(value) {
  return typeof value === 'object' && !isArray(value)
}

function isArray(value) {
  return Array.isArray(value)
}

module.exports = writeValue

},{"jscodeshift":57}],79:[function(require,module,exports){
(function (global){(function (){
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],80:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],81:[function(require,module,exports){
exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
	return '/'
};

},{}],82:[function(require,module,exports){
"use strict";

var originalObject = Object;
var originalDefProp = Object.defineProperty;
var originalCreate = Object.create;

function defProp(obj, name, value) {
  if (originalDefProp) try {
    originalDefProp.call(originalObject, obj, name, { value: value });
  } catch (definePropertyIsBrokenInIE8) {
    obj[name] = value;
  } else {
    obj[name] = value;
  }
}

// For functions that will be invoked using .call or .apply, we need to
// define those methods on the function objects themselves, rather than
// inheriting them from Function.prototype, so that a malicious or clumsy
// third party cannot interfere with the functionality of this module by
// redefining Function.prototype.call or .apply.
function makeSafeToCall(fun) {
  if (fun) {
    defProp(fun, "call", fun.call);
    defProp(fun, "apply", fun.apply);
  }
  return fun;
}

makeSafeToCall(originalDefProp);
makeSafeToCall(originalCreate);

var hasOwn = makeSafeToCall(Object.prototype.hasOwnProperty);
var numToStr = makeSafeToCall(Number.prototype.toString);
var strSlice = makeSafeToCall(String.prototype.slice);

var cloner = function(){};
function create(prototype) {
  if (originalCreate) {
    return originalCreate.call(originalObject, prototype);
  }
  cloner.prototype = prototype || null;
  return new cloner;
}

var rand = Math.random;
var uniqueKeys = create(null);

function makeUniqueKey() {
  // Collisions are highly unlikely, but this module is in the business of
  // making guarantees rather than safe bets.
  do var uniqueKey = internString(strSlice.call(numToStr.call(rand(), 36), 2));
  while (hasOwn.call(uniqueKeys, uniqueKey));
  return uniqueKeys[uniqueKey] = uniqueKey;
}

function internString(str) {
  var obj = {};
  obj[str] = true;
  return Object.keys(obj)[0];
}

// External users might find this function useful, but it is not necessary
// for the typical use of this module.
exports.makeUniqueKey = makeUniqueKey;

// Object.getOwnPropertyNames is the only way to enumerate non-enumerable
// properties, so if we wrap it to ignore our secret keys, there should be
// no way (except guessing) to access those properties.
var originalGetOPNs = Object.getOwnPropertyNames;
Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
  for (var names = originalGetOPNs(object),
           src = 0,
           dst = 0,
           len = names.length;
       src < len;
       ++src) {
    if (!hasOwn.call(uniqueKeys, names[src])) {
      if (src > dst) {
        names[dst] = names[src];
      }
      ++dst;
    }
  }
  names.length = dst;
  return names;
};

function defaultCreatorFn(object) {
  return create(null);
}

function makeAccessor(secretCreatorFn) {
  var brand = makeUniqueKey();
  var passkey = create(null);

  secretCreatorFn = secretCreatorFn || defaultCreatorFn;

  function register(object) {
    var secret; // Created lazily.

    function vault(key, forget) {
      // Only code that has access to the passkey can retrieve (or forget)
      // the secret object.
      if (key === passkey) {
        return forget
          ? secret = null
          : secret || (secret = secretCreatorFn(object));
      }
    }

    defProp(object, brand, vault);
  }

  function accessor(object) {
    if (!hasOwn.call(object, brand))
      register(object);
    return object[brand](passkey);
  }

  accessor.forget = function(object) {
    if (hasOwn.call(object, brand))
      object[brand](passkey, true);
  };

  return accessor;
}

exports.makeAccessor = makeAccessor;

},{}],83:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],84:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var types = __importStar(require("ast-types"));
var n = types.namedTypes;
var isArray = types.builtInTypes.array;
var isObject = types.builtInTypes.object;
var lines_1 = require("./lines");
var util_1 = require("./util");
var private_1 = require("private");
var childNodesCacheKey = private_1.makeUniqueKey();
// TODO Move a non-caching implementation of this function into ast-types,
// and implement a caching wrapper function here.
function getSortedChildNodes(node, lines, resultArray) {
    if (!node) {
        return;
    }
    // The .loc checks below are sensitive to some of the problems that
    // are fixed by this utility function. Specifically, if it decides to
    // set node.loc to null, indicating that the node's .loc information
    // is unreliable, then we don't want to add node to the resultArray.
    util_1.fixFaultyLocations(node, lines);
    if (resultArray) {
        if (n.Node.check(node) &&
            n.SourceLocation.check(node.loc)) {
            // This reverse insertion sort almost always takes constant
            // time because we almost always (maybe always?) append the
            // nodes in order anyway.
            for (var i = resultArray.length - 1; i >= 0; --i) {
                if (util_1.comparePos(resultArray[i].loc.end, node.loc.start) <= 0) {
                    break;
                }
            }
            resultArray.splice(i + 1, 0, node);
            return;
        }
    }
    else if (node[childNodesCacheKey]) {
        return node[childNodesCacheKey];
    }
    var names;
    if (isArray.check(node)) {
        names = Object.keys(node);
    }
    else if (isObject.check(node)) {
        names = types.getFieldNames(node);
    }
    else {
        return;
    }
    if (!resultArray) {
        Object.defineProperty(node, childNodesCacheKey, {
            value: resultArray = [],
            enumerable: false
        });
    }
    for (var i = 0, nameCount = names.length; i < nameCount; ++i) {
        getSortedChildNodes(node[names[i]], lines, resultArray);
    }
    return resultArray;
}
// As efficiently as possible, decorate the comment object with
// .precedingNode, .enclosingNode, and/or .followingNode properties, at
// least one of which is guaranteed to be defined.
function decorateComment(node, comment, lines) {
    var childNodes = getSortedChildNodes(node, lines);
    // Time to dust off the old binary search robes and wizard hat.
    var left = 0, right = childNodes.length;
    while (left < right) {
        var middle = (left + right) >> 1;
        var child = childNodes[middle];
        if (util_1.comparePos(child.loc.start, comment.loc.start) <= 0 &&
            util_1.comparePos(comment.loc.end, child.loc.end) <= 0) {
            // The comment is completely contained by this child node.
            decorateComment(comment.enclosingNode = child, comment, lines);
            return; // Abandon the binary search at this level.
        }
        if (util_1.comparePos(child.loc.end, comment.loc.start) <= 0) {
            // This child node falls completely before the comment.
            // Because we will never consider this node or any nodes
            // before it again, this node must be the closest preceding
            // node we have encountered so far.
            var precedingNode = child;
            left = middle + 1;
            continue;
        }
        if (util_1.comparePos(comment.loc.end, child.loc.start) <= 0) {
            // This child node falls completely after the comment.
            // Because we will never consider this node or any nodes after
            // it again, this node must be the closest following node we
            // have encountered so far.
            var followingNode = child;
            right = middle;
            continue;
        }
        throw new Error("Comment location overlaps with node location");
    }
    if (precedingNode) {
        comment.precedingNode = precedingNode;
    }
    if (followingNode) {
        comment.followingNode = followingNode;
    }
}
function attach(comments, ast, lines) {
    if (!isArray.check(comments)) {
        return;
    }
    var tiesToBreak = [];
    comments.forEach(function (comment) {
        comment.loc.lines = lines;
        decorateComment(ast, comment, lines);
        var pn = comment.precedingNode;
        var en = comment.enclosingNode;
        var fn = comment.followingNode;
        if (pn && fn) {
            var tieCount = tiesToBreak.length;
            if (tieCount > 0) {
                var lastTie = tiesToBreak[tieCount - 1];
                assert_1.default.strictEqual(lastTie.precedingNode === comment.precedingNode, lastTie.followingNode === comment.followingNode);
                if (lastTie.followingNode !== comment.followingNode) {
                    breakTies(tiesToBreak, lines);
                }
            }
            tiesToBreak.push(comment);
        }
        else if (pn) {
            // No contest: we have a trailing comment.
            breakTies(tiesToBreak, lines);
            addTrailingComment(pn, comment);
        }
        else if (fn) {
            // No contest: we have a leading comment.
            breakTies(tiesToBreak, lines);
            addLeadingComment(fn, comment);
        }
        else if (en) {
            // The enclosing node has no child nodes at all, so what we
            // have here is a dangling comment, e.g. [/* crickets */].
            breakTies(tiesToBreak, lines);
            addDanglingComment(en, comment);
        }
        else {
            throw new Error("AST contains no nodes at all?");
        }
    });
    breakTies(tiesToBreak, lines);
    comments.forEach(function (comment) {
        // These node references were useful for breaking ties, but we
        // don't need them anymore, and they create cycles in the AST that
        // may lead to infinite recursion if we don't delete them here.
        delete comment.precedingNode;
        delete comment.enclosingNode;
        delete comment.followingNode;
    });
}
exports.attach = attach;
;
function breakTies(tiesToBreak, lines) {
    var tieCount = tiesToBreak.length;
    if (tieCount === 0) {
        return;
    }
    var pn = tiesToBreak[0].precedingNode;
    var fn = tiesToBreak[0].followingNode;
    var gapEndPos = fn.loc.start;
    // Iterate backwards through tiesToBreak, examining the gaps
    // between the tied comments. In order to qualify as leading, a
    // comment must be separated from fn by an unbroken series of
    // whitespace-only gaps (or other comments).
    for (var indexOfFirstLeadingComment = tieCount; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment) {
        var comment = tiesToBreak[indexOfFirstLeadingComment - 1];
        assert_1.default.strictEqual(comment.precedingNode, pn);
        assert_1.default.strictEqual(comment.followingNode, fn);
        var gap = lines.sliceString(comment.loc.end, gapEndPos);
        if (/\S/.test(gap)) {
            // The gap string contained something other than whitespace.
            break;
        }
        gapEndPos = comment.loc.start;
    }
    while (indexOfFirstLeadingComment <= tieCount &&
        (comment = tiesToBreak[indexOfFirstLeadingComment]) &&
        // If the comment is a //-style comment and indented more
        // deeply than the node itself, reconsider it as trailing.
        (comment.type === "Line" || comment.type === "CommentLine") &&
        comment.loc.start.column > fn.loc.start.column) {
        ++indexOfFirstLeadingComment;
    }
    tiesToBreak.forEach(function (comment, i) {
        if (i < indexOfFirstLeadingComment) {
            addTrailingComment(pn, comment);
        }
        else {
            addLeadingComment(fn, comment);
        }
    });
    tiesToBreak.length = 0;
}
function addCommentHelper(node, comment) {
    var comments = node.comments || (node.comments = []);
    comments.push(comment);
}
function addLeadingComment(node, comment) {
    comment.leading = true;
    comment.trailing = false;
    addCommentHelper(node, comment);
}
function addDanglingComment(node, comment) {
    comment.leading = false;
    comment.trailing = false;
    addCommentHelper(node, comment);
}
function addTrailingComment(node, comment) {
    comment.leading = false;
    comment.trailing = true;
    addCommentHelper(node, comment);
}
function printLeadingComment(commentPath, print) {
    var comment = commentPath.getValue();
    n.Comment.assert(comment);
    var loc = comment.loc;
    var lines = loc && loc.lines;
    var parts = [print(commentPath)];
    if (comment.trailing) {
        // When we print trailing comments as leading comments, we don't
        // want to bring any trailing spaces along.
        parts.push("\n");
    }
    else if (lines instanceof lines_1.Lines) {
        var trailingSpace = lines.slice(loc.end, lines.skipSpaces(loc.end) || lines.lastPos());
        if (trailingSpace.length === 1) {
            // If the trailing space contains no newlines, then we want to
            // preserve it exactly as we found it.
            parts.push(trailingSpace);
        }
        else {
            // If the trailing space contains newlines, then replace it
            // with just that many newlines, with all other spaces removed.
            parts.push(new Array(trailingSpace.length).join("\n"));
        }
    }
    else {
        parts.push("\n");
    }
    return lines_1.concat(parts);
}
function printTrailingComment(commentPath, print) {
    var comment = commentPath.getValue(commentPath);
    n.Comment.assert(comment);
    var loc = comment.loc;
    var lines = loc && loc.lines;
    var parts = [];
    if (lines instanceof lines_1.Lines) {
        var fromPos = lines.skipSpaces(loc.start, true) || lines.firstPos();
        var leadingSpace = lines.slice(fromPos, loc.start);
        if (leadingSpace.length === 1) {
            // If the leading space contains no newlines, then we want to
            // preserve it exactly as we found it.
            parts.push(leadingSpace);
        }
        else {
            // If the leading space contains newlines, then replace it
            // with just that many newlines, sans all other spaces.
            parts.push(new Array(leadingSpace.length).join("\n"));
        }
    }
    parts.push(print(commentPath));
    return lines_1.concat(parts);
}
function printComments(path, print) {
    var value = path.getValue();
    var innerLines = print(path);
    var comments = n.Node.check(value) &&
        types.getFieldValue(value, "comments");
    if (!comments || comments.length === 0) {
        return innerLines;
    }
    var leadingParts = [];
    var trailingParts = [innerLines];
    path.each(function (commentPath) {
        var comment = commentPath.getValue();
        var leading = types.getFieldValue(comment, "leading");
        var trailing = types.getFieldValue(comment, "trailing");
        if (leading || (trailing && !(n.Statement.check(value) ||
            comment.type === "Block" ||
            comment.type === "CommentBlock"))) {
            leadingParts.push(printLeadingComment(commentPath, print));
        }
        else if (trailing) {
            trailingParts.push(printTrailingComment(commentPath, print));
        }
    }, "comments");
    leadingParts.push.apply(leadingParts, trailingParts);
    return lines_1.concat(leadingParts);
}
exports.printComments = printComments;
;

},{"./lines":86,"./util":92,"assert":2,"ast-types":27,"private":82}],85:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var types = __importStar(require("ast-types"));
var n = types.namedTypes;
var isArray = types.builtInTypes.array;
var isNumber = types.builtInTypes.number;
var util = __importStar(require("./util"));
var FastPath = function FastPath(value) {
    assert_1.default.ok(this instanceof FastPath);
    this.stack = [value];
};
var FPp = FastPath.prototype;
// Static convenience function for coercing a value to a FastPath.
FastPath.from = function (obj) {
    if (obj instanceof FastPath) {
        // Return a defensive copy of any existing FastPath instances.
        return obj.copy();
    }
    if (obj instanceof types.NodePath) {
        // For backwards compatibility, unroll NodePath instances into
        // lightweight FastPath [..., name, value] stacks.
        var copy = Object.create(FastPath.prototype);
        var stack = [obj.value];
        for (var pp; (pp = obj.parentPath); obj = pp)
            stack.push(obj.name, pp.value);
        copy.stack = stack.reverse();
        return copy;
    }
    // Otherwise use obj as the value of the new FastPath instance.
    return new FastPath(obj);
};
FPp.copy = function copy() {
    var copy = Object.create(FastPath.prototype);
    copy.stack = this.stack.slice(0);
    return copy;
};
// The name of the current property is always the penultimate element of
// this.stack, and always a String.
FPp.getName = function getName() {
    var s = this.stack;
    var len = s.length;
    if (len > 1) {
        return s[len - 2];
    }
    // Since the name is always a string, null is a safe sentinel value to
    // return if we do not know the name of the (root) value.
    return null;
};
// The value of the current property is always the final element of
// this.stack.
FPp.getValue = function getValue() {
    var s = this.stack;
    return s[s.length - 1];
};
FPp.valueIsDuplicate = function () {
    var s = this.stack;
    var valueIndex = s.length - 1;
    return s.lastIndexOf(s[valueIndex], valueIndex - 1) >= 0;
};
function getNodeHelper(path, count) {
    var s = path.stack;
    for (var i = s.length - 1; i >= 0; i -= 2) {
        var value = s[i];
        if (n.Node.check(value) && --count < 0) {
            return value;
        }
    }
    return null;
}
FPp.getNode = function getNode(count) {
    if (count === void 0) { count = 0; }
    return getNodeHelper(this, ~~count);
};
FPp.getParentNode = function getParentNode(count) {
    if (count === void 0) { count = 0; }
    return getNodeHelper(this, ~~count + 1);
};
// The length of the stack can be either even or odd, depending on whether
// or not we have a name for the root value. The difference between the
// index of the root value and the index of the final value is always
// even, though, which allows us to return the root value in constant time
// (i.e. without iterating backwards through the stack).
FPp.getRootValue = function getRootValue() {
    var s = this.stack;
    if (s.length % 2 === 0) {
        return s[1];
    }
    return s[0];
};
// Temporarily push properties named by string arguments given after the
// callback function onto this.stack, then call the callback with a
// reference to this (modified) FastPath object. Note that the stack will
// be restored to its original state after the callback is finished, so it
// is probably a mistake to retain a reference to the path.
FPp.call = function call(callback /*, name1, name2, ... */) {
    var s = this.stack;
    var origLen = s.length;
    var value = s[origLen - 1];
    var argc = arguments.length;
    for (var i = 1; i < argc; ++i) {
        var name = arguments[i];
        value = value[name];
        s.push(name, value);
    }
    var result = callback(this);
    s.length = origLen;
    return result;
};
// Similar to FastPath.prototype.call, except that the value obtained by
// accessing this.getValue()[name1][name2]... should be array-like. The
// callback will be called with a reference to this path object for each
// element of the array.
FPp.each = function each(callback /*, name1, name2, ... */) {
    var s = this.stack;
    var origLen = s.length;
    var value = s[origLen - 1];
    var argc = arguments.length;
    for (var i = 1; i < argc; ++i) {
        var name = arguments[i];
        value = value[name];
        s.push(name, value);
    }
    for (var i = 0; i < value.length; ++i) {
        if (i in value) {
            s.push(i, value[i]);
            // If the callback needs to know the value of i, call
            // path.getName(), assuming path is the parameter name.
            callback(this);
            s.length -= 2;
        }
    }
    s.length = origLen;
};
// Similar to FastPath.prototype.each, except that the results of the
// callback function invocations are stored in an array and returned at
// the end of the iteration.
FPp.map = function map(callback /*, name1, name2, ... */) {
    var s = this.stack;
    var origLen = s.length;
    var value = s[origLen - 1];
    var argc = arguments.length;
    for (var i = 1; i < argc; ++i) {
        var name = arguments[i];
        value = value[name];
        s.push(name, value);
    }
    var result = new Array(value.length);
    for (var i = 0; i < value.length; ++i) {
        if (i in value) {
            s.push(i, value[i]);
            result[i] = callback(this, i);
            s.length -= 2;
        }
    }
    s.length = origLen;
    return result;
};
// Returns true if the node at the tip of the path is wrapped with
// parentheses, OR if the only reason the node needed parentheses was that
// it couldn't be the first expression in the enclosing statement (see
// FastPath#canBeFirstInStatement), and it has an opening `(` character.
// For example, the FunctionExpression in `(function(){}())` appears to
// need parentheses only because it's the first expression in the AST, but
// since it happens to be preceded by a `(` (which is not apparent from
// the AST but can be determined using FastPath#getPrevToken), there is no
// ambiguity about how to parse it, so it counts as having parentheses,
// even though it is not immediately followed by a `)`.
FPp.hasParens = function () {
    var node = this.getNode();
    var prevToken = this.getPrevToken(node);
    if (!prevToken) {
        return false;
    }
    var nextToken = this.getNextToken(node);
    if (!nextToken) {
        return false;
    }
    if (prevToken.value === "(") {
        if (nextToken.value === ")") {
            // If the node preceded by a `(` token and followed by a `)` token,
            // then of course it has parentheses.
            return true;
        }
        // If this is one of the few Expression types that can't come first in
        // the enclosing statement because of parsing ambiguities (namely,
        // FunctionExpression, ObjectExpression, and ClassExpression) and
        // this.firstInStatement() returns true, and the node would not need
        // parentheses in an expression context because this.needsParens(true)
        // returns false, then it just needs an opening parenthesis to resolve
        // the parsing ambiguity that made it appear to need parentheses.
        var justNeedsOpeningParen = !this.canBeFirstInStatement() &&
            this.firstInStatement() &&
            !this.needsParens(true);
        if (justNeedsOpeningParen) {
            return true;
        }
    }
    return false;
};
FPp.getPrevToken = function (node) {
    node = node || this.getNode();
    var loc = node && node.loc;
    var tokens = loc && loc.tokens;
    if (tokens && loc.start.token > 0) {
        var token = tokens[loc.start.token - 1];
        if (token) {
            // Do not return tokens that fall outside the root subtree.
            var rootLoc = this.getRootValue().loc;
            if (util.comparePos(rootLoc.start, token.loc.start) <= 0) {
                return token;
            }
        }
    }
    return null;
};
FPp.getNextToken = function (node) {
    node = node || this.getNode();
    var loc = node && node.loc;
    var tokens = loc && loc.tokens;
    if (tokens && loc.end.token < tokens.length) {
        var token = tokens[loc.end.token];
        if (token) {
            // Do not return tokens that fall outside the root subtree.
            var rootLoc = this.getRootValue().loc;
            if (util.comparePos(token.loc.end, rootLoc.end) <= 0) {
                return token;
            }
        }
    }
    return null;
};
// Inspired by require("ast-types").NodePath.prototype.needsParens, but
// more efficient because we're iterating backwards through a stack.
FPp.needsParens = function (assumeExpressionContext) {
    var node = this.getNode();
    // This needs to come before `if (!parent) { return false }` because
    // an object destructuring assignment requires parens for
    // correctness even when it's the topmost expression.
    if (node.type === "AssignmentExpression" && node.left.type === 'ObjectPattern') {
        return true;
    }
    var parent = this.getParentNode();
    if (!parent) {
        return false;
    }
    var name = this.getName();
    // If the value of this path is some child of a Node and not a Node
    // itself, then it doesn't need parentheses. Only Node objects (in fact,
    // only Expression nodes) need parentheses.
    if (this.getValue() !== node) {
        return false;
    }
    // Only statements don't need parentheses.
    if (n.Statement.check(node)) {
        return false;
    }
    // Identifiers never need parentheses.
    if (node.type === "Identifier") {
        return false;
    }
    if (parent.type === "ParenthesizedExpression") {
        return false;
    }
    switch (node.type) {
        case "UnaryExpression":
        case "SpreadElement":
        case "SpreadProperty":
            return parent.type === "MemberExpression"
                && name === "object"
                && parent.object === node;
        case "BinaryExpression":
        case "LogicalExpression":
            switch (parent.type) {
                case "CallExpression":
                    return name === "callee"
                        && parent.callee === node;
                case "UnaryExpression":
                case "SpreadElement":
                case "SpreadProperty":
                    return true;
                case "MemberExpression":
                    return name === "object"
                        && parent.object === node;
                case "BinaryExpression":
                case "LogicalExpression":
                    var po = parent.operator;
                    var pp = PRECEDENCE[po];
                    var no = node.operator;
                    var np = PRECEDENCE[no];
                    if (pp > np) {
                        return true;
                    }
                    if (pp === np && name === "right") {
                        assert_1.default.strictEqual(parent.right, node);
                        return true;
                    }
                default:
                    return false;
            }
        case "SequenceExpression":
            switch (parent.type) {
                case "ReturnStatement":
                    return false;
                case "ForStatement":
                    // Although parentheses wouldn't hurt around sequence expressions in
                    // the head of for loops, traditional style dictates that e.g. i++,
                    // j++ should not be wrapped with parentheses.
                    return false;
                case "ExpressionStatement":
                    return name !== "expression";
                default:
                    // Otherwise err on the side of overparenthesization, adding
                    // explicit exceptions above if this proves overzealous.
                    return true;
            }
        case "YieldExpression":
            switch (parent.type) {
                case "BinaryExpression":
                case "LogicalExpression":
                case "UnaryExpression":
                case "SpreadElement":
                case "SpreadProperty":
                case "CallExpression":
                case "MemberExpression":
                case "NewExpression":
                case "ConditionalExpression":
                case "YieldExpression":
                    return true;
                default:
                    return false;
            }
        case "IntersectionTypeAnnotation":
        case "UnionTypeAnnotation":
            return parent.type === "NullableTypeAnnotation";
        case "Literal":
            return parent.type === "MemberExpression"
                && isNumber.check(node.value)
                && name === "object"
                && parent.object === node;
        // Babel 6 Literal split
        case "NumericLiteral":
            return parent.type === "MemberExpression"
                && name === "object"
                && parent.object === node;
        case "AssignmentExpression":
        case "ConditionalExpression":
            switch (parent.type) {
                case "UnaryExpression":
                case "SpreadElement":
                case "SpreadProperty":
                case "BinaryExpression":
                case "LogicalExpression":
                    return true;
                case "CallExpression":
                case "NewExpression":
                    return name === "callee"
                        && parent.callee === node;
                case "ConditionalExpression":
                    return name === "test"
                        && parent.test === node;
                case "MemberExpression":
                    return name === "object"
                        && parent.object === node;
                default:
                    return false;
            }
        case "ArrowFunctionExpression":
            if (n.CallExpression.check(parent) &&
                name === 'callee') {
                return true;
            }
            if (n.MemberExpression.check(parent) &&
                name === 'object') {
                return true;
            }
            return isBinary(parent);
        case "ObjectExpression":
            if (parent.type === "ArrowFunctionExpression" &&
                name === "body") {
                return true;
            }
            break;
        case 'TSAsExpression':
            if (parent.type === 'ArrowFunctionExpression' &&
                name === 'body' &&
                node.expression.type === 'ObjectExpression') {
                return true;
            }
            break;
        case "CallExpression":
            if (name === "declaration" &&
                n.ExportDefaultDeclaration.check(parent) &&
                n.FunctionExpression.check(node.callee)) {
                return true;
            }
    }
    if (parent.type === "NewExpression" &&
        name === "callee" &&
        parent.callee === node) {
        return containsCallExpression(node);
    }
    if (assumeExpressionContext !== true &&
        !this.canBeFirstInStatement() &&
        this.firstInStatement()) {
        return true;
    }
    return false;
};
function isBinary(node) {
    return n.BinaryExpression.check(node)
        || n.LogicalExpression.check(node);
}
// @ts-ignore 'isUnaryLike' is declared but its value is never read. [6133]
function isUnaryLike(node) {
    return n.UnaryExpression.check(node)
        // I considered making SpreadElement and SpreadProperty subtypes of
        // UnaryExpression, but they're not really Expression nodes.
        || (n.SpreadElement && n.SpreadElement.check(node))
        || (n.SpreadProperty && n.SpreadProperty.check(node));
}
var PRECEDENCE = {};
[["||"],
    ["&&"],
    ["|"],
    ["^"],
    ["&"],
    ["==", "===", "!=", "!=="],
    ["<", ">", "<=", ">=", "in", "instanceof"],
    [">>", "<<", ">>>"],
    ["+", "-"],
    ["*", "/", "%"],
    ["**"]
].forEach(function (tier, i) {
    tier.forEach(function (op) {
        PRECEDENCE[op] = i;
    });
});
function containsCallExpression(node) {
    if (n.CallExpression.check(node)) {
        return true;
    }
    if (isArray.check(node)) {
        return node.some(containsCallExpression);
    }
    if (n.Node.check(node)) {
        return types.someField(node, function (_name, child) { return containsCallExpression(child); });
    }
    return false;
}
FPp.canBeFirstInStatement = function () {
    var node = this.getNode();
    if (n.FunctionExpression.check(node)) {
        return false;
    }
    if (n.ObjectExpression.check(node)) {
        return false;
    }
    if (n.ClassExpression.check(node)) {
        return false;
    }
    return true;
};
FPp.firstInStatement = function () {
    var s = this.stack;
    var parentName, parent;
    var childName, child;
    for (var i = s.length - 1; i >= 0; i -= 2) {
        if (n.Node.check(s[i])) {
            childName = parentName;
            child = parent;
            parentName = s[i - 1];
            parent = s[i];
        }
        if (!parent || !child) {
            continue;
        }
        if (n.BlockStatement.check(parent) &&
            parentName === "body" &&
            childName === 0) {
            assert_1.default.strictEqual(parent.body[0], child);
            return true;
        }
        if (n.ExpressionStatement.check(parent) &&
            childName === "expression") {
            assert_1.default.strictEqual(parent.expression, child);
            return true;
        }
        if (n.AssignmentExpression.check(parent) &&
            childName === "left") {
            assert_1.default.strictEqual(parent.left, child);
            return true;
        }
        if (n.ArrowFunctionExpression.check(parent) &&
            childName === "body") {
            assert_1.default.strictEqual(parent.body, child);
            return true;
        }
        if (n.SequenceExpression.check(parent) &&
            parentName === "expressions" &&
            childName === 0) {
            assert_1.default.strictEqual(parent.expressions[0], child);
            continue;
        }
        if (n.CallExpression.check(parent) &&
            childName === "callee") {
            assert_1.default.strictEqual(parent.callee, child);
            continue;
        }
        if (n.MemberExpression.check(parent) &&
            childName === "object") {
            assert_1.default.strictEqual(parent.object, child);
            continue;
        }
        if (n.ConditionalExpression.check(parent) &&
            childName === "test") {
            assert_1.default.strictEqual(parent.test, child);
            continue;
        }
        if (isBinary(parent) &&
            childName === "left") {
            assert_1.default.strictEqual(parent.left, child);
            continue;
        }
        if (n.UnaryExpression.check(parent) &&
            !parent.prefix &&
            childName === "argument") {
            assert_1.default.strictEqual(parent.argument, child);
            continue;
        }
        return false;
    }
    return true;
};
exports.default = FastPath;

},{"./util":92,"assert":2,"ast-types":27}],86:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var source_map_1 = __importDefault(require("source-map"));
var options_1 = require("./options");
var util_1 = require("./util");
var mapping_1 = __importDefault(require("./mapping"));
var Lines = /** @class */ (function () {
    function Lines(infos, sourceFileName) {
        if (sourceFileName === void 0) { sourceFileName = null; }
        this.infos = infos;
        this.mappings = [];
        this.cachedSourceMap = null;
        this.cachedTabWidth = void 0;
        assert_1.default.ok(infos.length > 0);
        this.length = infos.length;
        this.name = sourceFileName || null;
        if (this.name) {
            this.mappings.push(new mapping_1.default(this, {
                start: this.firstPos(),
                end: this.lastPos(),
            }));
        }
    }
    Lines.prototype.toString = function (options) {
        return this.sliceString(this.firstPos(), this.lastPos(), options);
    };
    Lines.prototype.getSourceMap = function (sourceMapName, sourceRoot) {
        if (!sourceMapName) {
            // Although we could make up a name or generate an anonymous
            // source map, instead we assume that any consumer who does not
            // provide a name does not actually want a source map.
            return null;
        }
        var targetLines = this;
        function updateJSON(json) {
            json = json || {};
            json.file = sourceMapName;
            if (sourceRoot) {
                json.sourceRoot = sourceRoot;
            }
            return json;
        }
        if (targetLines.cachedSourceMap) {
            // Since Lines objects are immutable, we can reuse any source map
            // that was previously generated. Nevertheless, we return a new
            // JSON object here to protect the cached source map from outside
            // modification.
            return updateJSON(targetLines.cachedSourceMap.toJSON());
        }
        var smg = new source_map_1.default.SourceMapGenerator(updateJSON());
        var sourcesToContents = {};
        targetLines.mappings.forEach(function (mapping) {
            var sourceCursor = mapping.sourceLines.skipSpaces(mapping.sourceLoc.start) || mapping.sourceLines.lastPos();
            var targetCursor = targetLines.skipSpaces(mapping.targetLoc.start) || targetLines.lastPos();
            while (util_1.comparePos(sourceCursor, mapping.sourceLoc.end) < 0 &&
                util_1.comparePos(targetCursor, mapping.targetLoc.end) < 0) {
                var sourceChar = mapping.sourceLines.charAt(sourceCursor);
                var targetChar = targetLines.charAt(targetCursor);
                assert_1.default.strictEqual(sourceChar, targetChar);
                var sourceName = mapping.sourceLines.name;
                // Add mappings one character at a time for maximum resolution.
                smg.addMapping({
                    source: sourceName,
                    original: { line: sourceCursor.line,
                        column: sourceCursor.column },
                    generated: { line: targetCursor.line,
                        column: targetCursor.column }
                });
                if (!hasOwn.call(sourcesToContents, sourceName)) {
                    var sourceContent = mapping.sourceLines.toString();
                    smg.setSourceContent(sourceName, sourceContent);
                    sourcesToContents[sourceName] = sourceContent;
                }
                targetLines.nextPos(targetCursor, true);
                mapping.sourceLines.nextPos(sourceCursor, true);
            }
        });
        targetLines.cachedSourceMap = smg;
        return smg.toJSON();
    };
    Lines.prototype.bootstrapCharAt = function (pos) {
        assert_1.default.strictEqual(typeof pos, "object");
        assert_1.default.strictEqual(typeof pos.line, "number");
        assert_1.default.strictEqual(typeof pos.column, "number");
        var line = pos.line, column = pos.column, strings = this.toString().split(lineTerminatorSeqExp), string = strings[line - 1];
        if (typeof string === "undefined")
            return "";
        if (column === string.length &&
            line < strings.length)
            return "\n";
        if (column >= string.length)
            return "";
        return string.charAt(column);
    };
    Lines.prototype.charAt = function (pos) {
        assert_1.default.strictEqual(typeof pos, "object");
        assert_1.default.strictEqual(typeof pos.line, "number");
        assert_1.default.strictEqual(typeof pos.column, "number");
        var line = pos.line, column = pos.column, secret = this, infos = secret.infos, info = infos[line - 1], c = column;
        if (typeof info === "undefined" || c < 0)
            return "";
        var indent = this.getIndentAt(line);
        if (c < indent)
            return " ";
        c += info.sliceStart - indent;
        if (c === info.sliceEnd &&
            line < this.length)
            return "\n";
        if (c >= info.sliceEnd)
            return "";
        return info.line.charAt(c);
    };
    Lines.prototype.stripMargin = function (width, skipFirstLine) {
        if (width === 0)
            return this;
        assert_1.default.ok(width > 0, "negative margin: " + width);
        if (skipFirstLine && this.length === 1)
            return this;
        var lines = new Lines(this.infos.map(function (info, i) {
            if (info.line && (i > 0 || !skipFirstLine)) {
                info = __assign(__assign({}, info), { indent: Math.max(0, info.indent - width) });
            }
            return info;
        }));
        if (this.mappings.length > 0) {
            var newMappings_1 = lines.mappings;
            assert_1.default.strictEqual(newMappings_1.length, 0);
            this.mappings.forEach(function (mapping) {
                newMappings_1.push(mapping.indent(width, skipFirstLine, true));
            });
        }
        return lines;
    };
    Lines.prototype.indent = function (by) {
        if (by === 0) {
            return this;
        }
        var lines = new Lines(this.infos.map(function (info) {
            if (info.line && !info.locked) {
                info = __assign(__assign({}, info), { indent: info.indent + by });
            }
            return info;
        }));
        if (this.mappings.length > 0) {
            var newMappings_2 = lines.mappings;
            assert_1.default.strictEqual(newMappings_2.length, 0);
            this.mappings.forEach(function (mapping) {
                newMappings_2.push(mapping.indent(by));
            });
        }
        return lines;
    };
    Lines.prototype.indentTail = function (by) {
        if (by === 0) {
            return this;
        }
        if (this.length < 2) {
            return this;
        }
        var lines = new Lines(this.infos.map(function (info, i) {
            if (i > 0 && info.line && !info.locked) {
                info = __assign(__assign({}, info), { indent: info.indent + by });
            }
            return info;
        }));
        if (this.mappings.length > 0) {
            var newMappings_3 = lines.mappings;
            assert_1.default.strictEqual(newMappings_3.length, 0);
            this.mappings.forEach(function (mapping) {
                newMappings_3.push(mapping.indent(by, true));
            });
        }
        return lines;
    };
    Lines.prototype.lockIndentTail = function () {
        if (this.length < 2) {
            return this;
        }
        return new Lines(this.infos.map(function (info, i) { return (__assign(__assign({}, info), { locked: i > 0 })); }));
    };
    Lines.prototype.getIndentAt = function (line) {
        assert_1.default.ok(line >= 1, "no line " + line + " (line numbers start from 1)");
        return Math.max(this.infos[line - 1].indent, 0);
    };
    Lines.prototype.guessTabWidth = function () {
        if (typeof this.cachedTabWidth === "number") {
            return this.cachedTabWidth;
        }
        var counts = []; // Sparse array.
        var lastIndent = 0;
        for (var line = 1, last = this.length; line <= last; ++line) {
            var info = this.infos[line - 1];
            var sliced = info.line.slice(info.sliceStart, info.sliceEnd);
            // Whitespace-only lines don't tell us much about the likely tab
            // width of this code.
            if (isOnlyWhitespace(sliced)) {
                continue;
            }
            var diff = Math.abs(info.indent - lastIndent);
            counts[diff] = ~~counts[diff] + 1;
            lastIndent = info.indent;
        }
        var maxCount = -1;
        var result = 2;
        for (var tabWidth = 1; tabWidth < counts.length; tabWidth += 1) {
            if (hasOwn.call(counts, tabWidth) &&
                counts[tabWidth] > maxCount) {
                maxCount = counts[tabWidth];
                result = tabWidth;
            }
        }
        return this.cachedTabWidth = result;
    };
    // Determine if the list of lines has a first line that starts with a //
    // or /* comment. If this is the case, the code may need to be wrapped in
    // parens to avoid ASI issues.
    Lines.prototype.startsWithComment = function () {
        if (this.infos.length === 0) {
            return false;
        }
        var firstLineInfo = this.infos[0], sliceStart = firstLineInfo.sliceStart, sliceEnd = firstLineInfo.sliceEnd, firstLine = firstLineInfo.line.slice(sliceStart, sliceEnd).trim();
        return firstLine.length === 0 ||
            firstLine.slice(0, 2) === "//" ||
            firstLine.slice(0, 2) === "/*";
    };
    Lines.prototype.isOnlyWhitespace = function () {
        return isOnlyWhitespace(this.toString());
    };
    Lines.prototype.isPrecededOnlyByWhitespace = function (pos) {
        var info = this.infos[pos.line - 1];
        var indent = Math.max(info.indent, 0);
        var diff = pos.column - indent;
        if (diff <= 0) {
            // If pos.column does not exceed the indentation amount, then
            // there must be only whitespace before it.
            return true;
        }
        var start = info.sliceStart;
        var end = Math.min(start + diff, info.sliceEnd);
        var prefix = info.line.slice(start, end);
        return isOnlyWhitespace(prefix);
    };
    Lines.prototype.getLineLength = function (line) {
        var info = this.infos[line - 1];
        return this.getIndentAt(line) + info.sliceEnd - info.sliceStart;
    };
    Lines.prototype.nextPos = function (pos, skipSpaces) {
        if (skipSpaces === void 0) { skipSpaces = false; }
        var l = Math.max(pos.line, 0), c = Math.max(pos.column, 0);
        if (c < this.getLineLength(l)) {
            pos.column += 1;
            return skipSpaces
                ? !!this.skipSpaces(pos, false, true)
                : true;
        }
        if (l < this.length) {
            pos.line += 1;
            pos.column = 0;
            return skipSpaces
                ? !!this.skipSpaces(pos, false, true)
                : true;
        }
        return false;
    };
    Lines.prototype.prevPos = function (pos, skipSpaces) {
        if (skipSpaces === void 0) { skipSpaces = false; }
        var l = pos.line, c = pos.column;
        if (c < 1) {
            l -= 1;
            if (l < 1)
                return false;
            c = this.getLineLength(l);
        }
        else {
            c = Math.min(c - 1, this.getLineLength(l));
        }
        pos.line = l;
        pos.column = c;
        return skipSpaces
            ? !!this.skipSpaces(pos, true, true)
            : true;
    };
    Lines.prototype.firstPos = function () {
        // Trivial, but provided for completeness.
        return { line: 1, column: 0 };
    };
    Lines.prototype.lastPos = function () {
        return {
            line: this.length,
            column: this.getLineLength(this.length)
        };
    };
    Lines.prototype.skipSpaces = function (pos, backward, modifyInPlace) {
        if (backward === void 0) { backward = false; }
        if (modifyInPlace === void 0) { modifyInPlace = false; }
        if (pos) {
            pos = modifyInPlace ? pos : {
                line: pos.line,
                column: pos.column
            };
        }
        else if (backward) {
            pos = this.lastPos();
        }
        else {
            pos = this.firstPos();
        }
        if (backward) {
            while (this.prevPos(pos)) {
                if (!isOnlyWhitespace(this.charAt(pos)) &&
                    this.nextPos(pos)) {
                    return pos;
                }
            }
            return null;
        }
        else {
            while (isOnlyWhitespace(this.charAt(pos))) {
                if (!this.nextPos(pos)) {
                    return null;
                }
            }
            return pos;
        }
    };
    Lines.prototype.trimLeft = function () {
        var pos = this.skipSpaces(this.firstPos(), false, true);
        return pos ? this.slice(pos) : emptyLines;
    };
    Lines.prototype.trimRight = function () {
        var pos = this.skipSpaces(this.lastPos(), true, true);
        return pos ? this.slice(this.firstPos(), pos) : emptyLines;
    };
    Lines.prototype.trim = function () {
        var start = this.skipSpaces(this.firstPos(), false, true);
        if (start === null) {
            return emptyLines;
        }
        var end = this.skipSpaces(this.lastPos(), true, true);
        if (end === null) {
            return emptyLines;
        }
        return this.slice(start, end);
    };
    Lines.prototype.eachPos = function (callback, startPos, skipSpaces) {
        if (startPos === void 0) { startPos = this.firstPos(); }
        if (skipSpaces === void 0) { skipSpaces = false; }
        var pos = this.firstPos();
        if (startPos) {
            pos.line = startPos.line,
                pos.column = startPos.column;
        }
        if (skipSpaces && !this.skipSpaces(pos, false, true)) {
            return; // Encountered nothing but spaces.
        }
        do
            callback.call(this, pos);
        while (this.nextPos(pos, skipSpaces));
    };
    Lines.prototype.bootstrapSlice = function (start, end) {
        var strings = this.toString().split(lineTerminatorSeqExp).slice(start.line - 1, end.line);
        if (strings.length > 0) {
            strings.push(strings.pop().slice(0, end.column));
            strings[0] = strings[0].slice(start.column);
        }
        return fromString(strings.join("\n"));
    };
    Lines.prototype.slice = function (start, end) {
        if (!end) {
            if (!start) {
                // The client seems to want a copy of this Lines object, but
                // Lines objects are immutable, so it's perfectly adequate to
                // return the same object.
                return this;
            }
            // Slice to the end if no end position was provided.
            end = this.lastPos();
        }
        if (!start) {
            throw new Error("cannot slice with end but not start");
        }
        var sliced = this.infos.slice(start.line - 1, end.line);
        if (start.line === end.line) {
            sliced[0] = sliceInfo(sliced[0], start.column, end.column);
        }
        else {
            assert_1.default.ok(start.line < end.line);
            sliced[0] = sliceInfo(sliced[0], start.column);
            sliced.push(sliceInfo(sliced.pop(), 0, end.column));
        }
        var lines = new Lines(sliced);
        if (this.mappings.length > 0) {
            var newMappings_4 = lines.mappings;
            assert_1.default.strictEqual(newMappings_4.length, 0);
            this.mappings.forEach(function (mapping) {
                var sliced = mapping.slice(this, start, end);
                if (sliced) {
                    newMappings_4.push(sliced);
                }
            }, this);
        }
        return lines;
    };
    Lines.prototype.bootstrapSliceString = function (start, end, options) {
        return this.slice(start, end).toString(options);
    };
    Lines.prototype.sliceString = function (start, end, options) {
        if (start === void 0) { start = this.firstPos(); }
        if (end === void 0) { end = this.lastPos(); }
        options = options_1.normalize(options);
        var parts = [];
        var _a = options.tabWidth, tabWidth = _a === void 0 ? 2 : _a;
        for (var line = start.line; line <= end.line; ++line) {
            var info = this.infos[line - 1];
            if (line === start.line) {
                if (line === end.line) {
                    info = sliceInfo(info, start.column, end.column);
                }
                else {
                    info = sliceInfo(info, start.column);
                }
            }
            else if (line === end.line) {
                info = sliceInfo(info, 0, end.column);
            }
            var indent = Math.max(info.indent, 0);
            var before_1 = info.line.slice(0, info.sliceStart);
            if (options.reuseWhitespace &&
                isOnlyWhitespace(before_1) &&
                countSpaces(before_1, options.tabWidth) === indent) {
                // Reuse original spaces if the indentation is correct.
                parts.push(info.line.slice(0, info.sliceEnd));
                continue;
            }
            var tabs = 0;
            var spaces = indent;
            if (options.useTabs) {
                tabs = Math.floor(indent / tabWidth);
                spaces -= tabs * tabWidth;
            }
            var result = "";
            if (tabs > 0) {
                result += new Array(tabs + 1).join("\t");
            }
            if (spaces > 0) {
                result += new Array(spaces + 1).join(" ");
            }
            result += info.line.slice(info.sliceStart, info.sliceEnd);
            parts.push(result);
        }
        return parts.join(options.lineTerminator);
    };
    Lines.prototype.isEmpty = function () {
        return this.length < 2 && this.getLineLength(1) < 1;
    };
    Lines.prototype.join = function (elements) {
        var separator = this;
        var infos = [];
        var mappings = [];
        var prevInfo;
        function appendLines(linesOrNull) {
            if (linesOrNull === null) {
                return;
            }
            if (prevInfo) {
                var info = linesOrNull.infos[0];
                var indent = new Array(info.indent + 1).join(" ");
                var prevLine_1 = infos.length;
                var prevColumn_1 = Math.max(prevInfo.indent, 0) +
                    prevInfo.sliceEnd - prevInfo.sliceStart;
                prevInfo.line = prevInfo.line.slice(0, prevInfo.sliceEnd) + indent + info.line.slice(info.sliceStart, info.sliceEnd);
                // If any part of a line is indentation-locked, the whole line
                // will be indentation-locked.
                prevInfo.locked = prevInfo.locked || info.locked;
                prevInfo.sliceEnd = prevInfo.line.length;
                if (linesOrNull.mappings.length > 0) {
                    linesOrNull.mappings.forEach(function (mapping) {
                        mappings.push(mapping.add(prevLine_1, prevColumn_1));
                    });
                }
            }
            else if (linesOrNull.mappings.length > 0) {
                mappings.push.apply(mappings, linesOrNull.mappings);
            }
            linesOrNull.infos.forEach(function (info, i) {
                if (!prevInfo || i > 0) {
                    prevInfo = __assign({}, info);
                    infos.push(prevInfo);
                }
            });
        }
        function appendWithSeparator(linesOrNull, i) {
            if (i > 0)
                appendLines(separator);
            appendLines(linesOrNull);
        }
        elements.map(function (elem) {
            var lines = fromString(elem);
            if (lines.isEmpty())
                return null;
            return lines;
        }).forEach(function (linesOrNull, i) {
            if (separator.isEmpty()) {
                appendLines(linesOrNull);
            }
            else {
                appendWithSeparator(linesOrNull, i);
            }
        });
        if (infos.length < 1)
            return emptyLines;
        var lines = new Lines(infos);
        lines.mappings = mappings;
        return lines;
    };
    Lines.prototype.concat = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var list = [this];
        list.push.apply(list, args);
        assert_1.default.strictEqual(list.length, args.length + 1);
        return emptyLines.join(list);
    };
    return Lines;
}());
exports.Lines = Lines;
var fromStringCache = {};
var hasOwn = fromStringCache.hasOwnProperty;
var maxCacheKeyLen = 10;
function countSpaces(spaces, tabWidth) {
    var count = 0;
    var len = spaces.length;
    for (var i = 0; i < len; ++i) {
        switch (spaces.charCodeAt(i)) {
            case 9: // '\t'
                assert_1.default.strictEqual(typeof tabWidth, "number");
                assert_1.default.ok(tabWidth > 0);
                var next = Math.ceil(count / tabWidth) * tabWidth;
                if (next === count) {
                    count += tabWidth;
                }
                else {
                    count = next;
                }
                break;
            case 11: // '\v'
            case 12: // '\f'
            case 13: // '\r'
            case 0xfeff: // zero-width non-breaking space
                // These characters contribute nothing to indentation.
                break;
            case 32: // ' '
            default: // Treat all other whitespace like ' '.
                count += 1;
                break;
        }
    }
    return count;
}
exports.countSpaces = countSpaces;
var leadingSpaceExp = /^\s*/;
// As specified here: http://www.ecma-international.org/ecma-262/6.0/#sec-line-terminators
var lineTerminatorSeqExp = /\u000D\u000A|\u000D(?!\u000A)|\u000A|\u2028|\u2029/;
/**
 * @param {Object} options - Options object that configures printing.
 */
function fromString(string, options) {
    if (string instanceof Lines)
        return string;
    string += "";
    var tabWidth = options && options.tabWidth;
    var tabless = string.indexOf("\t") < 0;
    var cacheable = !options && tabless && (string.length <= maxCacheKeyLen);
    assert_1.default.ok(tabWidth || tabless, "No tab width specified but encountered tabs in string\n" + string);
    if (cacheable && hasOwn.call(fromStringCache, string))
        return fromStringCache[string];
    var lines = new Lines(string.split(lineTerminatorSeqExp).map(function (line) {
        // TODO: handle null exec result
        var spaces = leadingSpaceExp.exec(line)[0];
        return {
            line: line,
            indent: countSpaces(spaces, tabWidth),
            // Boolean indicating whether this line can be reindented.
            locked: false,
            sliceStart: spaces.length,
            sliceEnd: line.length
        };
    }), options_1.normalize(options).sourceFileName);
    if (cacheable)
        fromStringCache[string] = lines;
    return lines;
}
exports.fromString = fromString;
function isOnlyWhitespace(string) {
    return !/\S/.test(string);
}
function sliceInfo(info, startCol, endCol) {
    var sliceStart = info.sliceStart;
    var sliceEnd = info.sliceEnd;
    var indent = Math.max(info.indent, 0);
    var lineLength = indent + sliceEnd - sliceStart;
    if (typeof endCol === "undefined") {
        endCol = lineLength;
    }
    startCol = Math.max(startCol, 0);
    endCol = Math.min(endCol, lineLength);
    endCol = Math.max(endCol, startCol);
    if (endCol < indent) {
        indent = endCol;
        sliceEnd = sliceStart;
    }
    else {
        sliceEnd -= lineLength - endCol;
    }
    lineLength = endCol;
    lineLength -= startCol;
    if (startCol < indent) {
        indent -= startCol;
    }
    else {
        startCol -= indent;
        indent = 0;
        sliceStart += startCol;
    }
    assert_1.default.ok(indent >= 0);
    assert_1.default.ok(sliceStart <= sliceEnd);
    assert_1.default.strictEqual(lineLength, indent + sliceEnd - sliceStart);
    if (info.indent === indent &&
        info.sliceStart === sliceStart &&
        info.sliceEnd === sliceEnd) {
        return info;
    }
    return {
        line: info.line,
        indent: indent,
        // A destructive slice always unlocks indentation.
        locked: false,
        sliceStart: sliceStart,
        sliceEnd: sliceEnd
    };
}
function concat(elements) {
    return emptyLines.join(elements);
}
exports.concat = concat;
;
// The emptyLines object needs to be created all the way down here so that
// Lines.prototype will be fully populated.
var emptyLines = fromString("");

},{"./mapping":87,"./options":88,"./util":92,"assert":2,"source-map":104}],87:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var util_1 = require("./util");
var Mapping = /** @class */ (function () {
    function Mapping(sourceLines, sourceLoc, targetLoc) {
        if (targetLoc === void 0) { targetLoc = sourceLoc; }
        this.sourceLines = sourceLines;
        this.sourceLoc = sourceLoc;
        this.targetLoc = targetLoc;
    }
    Mapping.prototype.slice = function (lines, start, end) {
        if (end === void 0) { end = lines.lastPos(); }
        var sourceLines = this.sourceLines;
        var sourceLoc = this.sourceLoc;
        var targetLoc = this.targetLoc;
        function skip(name) {
            var sourceFromPos = sourceLoc[name];
            var targetFromPos = targetLoc[name];
            var targetToPos = start;
            if (name === "end") {
                targetToPos = end;
            }
            else {
                assert_1.default.strictEqual(name, "start");
            }
            return skipChars(sourceLines, sourceFromPos, lines, targetFromPos, targetToPos);
        }
        if (util_1.comparePos(start, targetLoc.start) <= 0) {
            if (util_1.comparePos(targetLoc.end, end) <= 0) {
                targetLoc = {
                    start: subtractPos(targetLoc.start, start.line, start.column),
                    end: subtractPos(targetLoc.end, start.line, start.column)
                };
                // The sourceLoc can stay the same because the contents of the
                // targetLoc have not changed.
            }
            else if (util_1.comparePos(end, targetLoc.start) <= 0) {
                return null;
            }
            else {
                sourceLoc = {
                    start: sourceLoc.start,
                    end: skip("end")
                };
                targetLoc = {
                    start: subtractPos(targetLoc.start, start.line, start.column),
                    end: subtractPos(end, start.line, start.column)
                };
            }
        }
        else {
            if (util_1.comparePos(targetLoc.end, start) <= 0) {
                return null;
            }
            if (util_1.comparePos(targetLoc.end, end) <= 0) {
                sourceLoc = {
                    start: skip("start"),
                    end: sourceLoc.end
                };
                targetLoc = {
                    // Same as subtractPos(start, start.line, start.column):
                    start: { line: 1, column: 0 },
                    end: subtractPos(targetLoc.end, start.line, start.column)
                };
            }
            else {
                sourceLoc = {
                    start: skip("start"),
                    end: skip("end")
                };
                targetLoc = {
                    // Same as subtractPos(start, start.line, start.column):
                    start: { line: 1, column: 0 },
                    end: subtractPos(end, start.line, start.column)
                };
            }
        }
        return new Mapping(this.sourceLines, sourceLoc, targetLoc);
    };
    Mapping.prototype.add = function (line, column) {
        return new Mapping(this.sourceLines, this.sourceLoc, {
            start: addPos(this.targetLoc.start, line, column),
            end: addPos(this.targetLoc.end, line, column)
        });
    };
    Mapping.prototype.subtract = function (line, column) {
        return new Mapping(this.sourceLines, this.sourceLoc, {
            start: subtractPos(this.targetLoc.start, line, column),
            end: subtractPos(this.targetLoc.end, line, column)
        });
    };
    Mapping.prototype.indent = function (by, skipFirstLine, noNegativeColumns) {
        if (skipFirstLine === void 0) { skipFirstLine = false; }
        if (noNegativeColumns === void 0) { noNegativeColumns = false; }
        if (by === 0) {
            return this;
        }
        var targetLoc = this.targetLoc;
        var startLine = targetLoc.start.line;
        var endLine = targetLoc.end.line;
        if (skipFirstLine && startLine === 1 && endLine === 1) {
            return this;
        }
        targetLoc = {
            start: targetLoc.start,
            end: targetLoc.end
        };
        if (!skipFirstLine || startLine > 1) {
            var startColumn = targetLoc.start.column + by;
            targetLoc.start = {
                line: startLine,
                column: noNegativeColumns
                    ? Math.max(0, startColumn)
                    : startColumn
            };
        }
        if (!skipFirstLine || endLine > 1) {
            var endColumn = targetLoc.end.column + by;
            targetLoc.end = {
                line: endLine,
                column: noNegativeColumns
                    ? Math.max(0, endColumn)
                    : endColumn
            };
        }
        return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);
    };
    return Mapping;
}());
exports.default = Mapping;
function addPos(toPos, line, column) {
    return {
        line: toPos.line + line - 1,
        column: (toPos.line === 1)
            ? toPos.column + column
            : toPos.column
    };
}
function subtractPos(fromPos, line, column) {
    return {
        line: fromPos.line - line + 1,
        column: (fromPos.line === line)
            ? fromPos.column - column
            : fromPos.column
    };
}
function skipChars(sourceLines, sourceFromPos, targetLines, targetFromPos, targetToPos) {
    var targetComparison = util_1.comparePos(targetFromPos, targetToPos);
    if (targetComparison === 0) {
        // Trivial case: no characters to skip.
        return sourceFromPos;
    }
    if (targetComparison < 0) {
        // Skipping forward.
        var sourceCursor = sourceLines.skipSpaces(sourceFromPos) || sourceLines.lastPos();
        var targetCursor = targetLines.skipSpaces(targetFromPos) || targetLines.lastPos();
        var lineDiff = targetToPos.line - targetCursor.line;
        sourceCursor.line += lineDiff;
        targetCursor.line += lineDiff;
        if (lineDiff > 0) {
            // If jumping to later lines, reset columns to the beginnings
            // of those lines.
            sourceCursor.column = 0;
            targetCursor.column = 0;
        }
        else {
            assert_1.default.strictEqual(lineDiff, 0);
        }
        while (util_1.comparePos(targetCursor, targetToPos) < 0 &&
            targetLines.nextPos(targetCursor, true)) {
            assert_1.default.ok(sourceLines.nextPos(sourceCursor, true));
            assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
        }
    }
    else {
        // Skipping backward.
        var sourceCursor = sourceLines.skipSpaces(sourceFromPos, true) || sourceLines.firstPos();
        var targetCursor = targetLines.skipSpaces(targetFromPos, true) || targetLines.firstPos();
        var lineDiff = targetToPos.line - targetCursor.line;
        sourceCursor.line += lineDiff;
        targetCursor.line += lineDiff;
        if (lineDiff < 0) {
            // If jumping to earlier lines, reset columns to the ends of
            // those lines.
            sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);
            targetCursor.column = targetLines.getLineLength(targetCursor.line);
        }
        else {
            assert_1.default.strictEqual(lineDiff, 0);
        }
        while (util_1.comparePos(targetToPos, targetCursor) < 0 &&
            targetLines.prevPos(targetCursor, true)) {
            assert_1.default.ok(sourceLines.prevPos(sourceCursor, true));
            assert_1.default.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
        }
    }
    return sourceCursor;
}

},{"./util":92,"assert":2}],88:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var defaults = {
    parser: require("../parsers/esprima"),
    tabWidth: 4,
    useTabs: false,
    reuseWhitespace: true,
    lineTerminator: require("os").EOL || "\n",
    wrapColumn: 74,
    sourceFileName: null,
    sourceMapName: null,
    sourceRoot: null,
    inputSourceMap: null,
    range: false,
    tolerant: true,
    quote: null,
    trailingComma: false,
    arrayBracketSpacing: false,
    objectCurlySpacing: true,
    arrowParensAlways: false,
    flowObjectCommas: true,
    tokens: true
};
var hasOwn = defaults.hasOwnProperty;
// Copy options and fill in default values.
function normalize(opts) {
    var options = opts || defaults;
    function get(key) {
        return hasOwn.call(options, key)
            ? options[key]
            : defaults[key];
    }
    return {
        tabWidth: +get("tabWidth"),
        useTabs: !!get("useTabs"),
        reuseWhitespace: !!get("reuseWhitespace"),
        lineTerminator: get("lineTerminator"),
        wrapColumn: Math.max(get("wrapColumn"), 0),
        sourceFileName: get("sourceFileName"),
        sourceMapName: get("sourceMapName"),
        sourceRoot: get("sourceRoot"),
        inputSourceMap: get("inputSourceMap"),
        parser: get("esprima") || get("parser"),
        range: get("range"),
        tolerant: get("tolerant"),
        quote: get("quote"),
        trailingComma: get("trailingComma"),
        arrayBracketSpacing: get("arrayBracketSpacing"),
        objectCurlySpacing: get("objectCurlySpacing"),
        arrowParensAlways: get("arrowParensAlways"),
        flowObjectCommas: get("flowObjectCommas"),
        tokens: !!get("tokens")
    };
}
exports.normalize = normalize;
;

},{"../parsers/esprima":105,"os":81}],89:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var types = __importStar(require("ast-types"));
var b = types.builders;
var isObject = types.builtInTypes.object;
var isArray = types.builtInTypes.array;
var options_1 = require("./options");
var lines_1 = require("./lines");
var comments_1 = require("./comments");
var util = __importStar(require("./util"));
function parse(source, options) {
    options = options_1.normalize(options);
    var lines = lines_1.fromString(source, options);
    var sourceWithoutTabs = lines.toString({
        tabWidth: options.tabWidth,
        reuseWhitespace: false,
        useTabs: false
    });
    var comments = [];
    var ast = options.parser.parse(sourceWithoutTabs, {
        jsx: true,
        loc: true,
        locations: true,
        range: options.range,
        comment: true,
        onComment: comments,
        tolerant: util.getOption(options, "tolerant", true),
        ecmaVersion: 6,
        sourceType: util.getOption(options, "sourceType", "module")
    });
    // Use ast.tokens if possible, and otherwise fall back to the Esprima
    // tokenizer. All the preconfigured ../parsers/* expose ast.tokens
    // automatically, but custom parsers might need additional configuration
    // to avoid this fallback.
    var tokens = Array.isArray(ast.tokens)
        ? ast.tokens
        : require("esprima").tokenize(sourceWithoutTabs, {
            loc: true
        });
    // We will reattach the tokens array to the file object below.
    delete ast.tokens;
    // Make sure every token has a token.value string.
    tokens.forEach(function (token) {
        if (typeof token.value !== "string") {
            token.value = lines.sliceString(token.loc.start, token.loc.end);
        }
    });
    if (Array.isArray(ast.comments)) {
        comments = ast.comments;
        delete ast.comments;
    }
    if (ast.loc) {
        // If the source was empty, some parsers give loc.{start,end}.line
        // values of 0, instead of the minimum of 1.
        util.fixFaultyLocations(ast, lines);
    }
    else {
        ast.loc = {
            start: lines.firstPos(),
            end: lines.lastPos()
        };
    }
    ast.loc.lines = lines;
    ast.loc.indent = 0;
    var file;
    var program;
    if (ast.type === "Program") {
        program = ast;
        // In order to ensure we reprint leading and trailing program
        // comments, wrap the original Program node with a File node. Only
        // ESTree parsers (Acorn and Esprima) return a Program as the root AST
        // node. Most other (Babylon-like) parsers return a File.
        file = b.file(ast, options.sourceFileName || null);
        file.loc = {
            start: lines.firstPos(),
            end: lines.lastPos(),
            lines: lines,
            indent: 0
        };
    }
    else if (ast.type === "File") {
        file = ast;
        program = file.program;
    }
    // Expose file.tokens unless the caller passed false for options.tokens.
    if (options.tokens) {
        file.tokens = tokens;
    }
    // Expand the Program's .loc to include all comments (not just those
    // attached to the Program node, as its children may have comments as
    // well), since sometimes program.loc.{start,end} will coincide with the
    // .loc.{start,end} of the first and last *statements*, mistakenly
    // excluding comments that fall outside that region.
    var trueProgramLoc = util.getTrueLoc({
        type: program.type,
        loc: program.loc,
        body: [],
        comments: comments
    }, lines);
    program.loc.start = trueProgramLoc.start;
    program.loc.end = trueProgramLoc.end;
    // Passing file.program here instead of just file means that initial
    // comments will be attached to program.body[0] instead of program.
    comments_1.attach(comments, program.body.length ? file.program : file, lines);
    // Return a copy of the original AST so that any changes made may be
    // compared to the original.
    return new TreeCopier(lines, tokens).copy(file);
}
exports.parse = parse;
;
var TreeCopier = function TreeCopier(lines, tokens) {
    assert_1.default.ok(this instanceof TreeCopier);
    this.lines = lines;
    this.tokens = tokens;
    this.startTokenIndex = 0;
    this.endTokenIndex = tokens.length;
    this.indent = 0;
    this.seen = new Map;
};
var TCp = TreeCopier.prototype;
TCp.copy = function (node) {
    if (this.seen.has(node)) {
        return this.seen.get(node);
    }
    if (isArray.check(node)) {
        var copy = new Array(node.length);
        this.seen.set(node, copy);
        node.forEach(function (item, i) {
            copy[i] = this.copy(item);
        }, this);
        return copy;
    }
    if (!isObject.check(node)) {
        return node;
    }
    util.fixFaultyLocations(node, this.lines);
    var copy = Object.create(Object.getPrototypeOf(node), {
        original: {
            value: node,
            configurable: false,
            enumerable: false,
            writable: true
        }
    });
    this.seen.set(node, copy);
    var loc = node.loc;
    var oldIndent = this.indent;
    var newIndent = oldIndent;
    var oldStartTokenIndex = this.startTokenIndex;
    var oldEndTokenIndex = this.endTokenIndex;
    if (loc) {
        // When node is a comment, we set node.loc.indent to
        // node.loc.start.column so that, when/if we print the comment by
        // itself, we can strip that much whitespace from the left margin of
        // the comment. This only really matters for multiline Block comments,
        // but it doesn't hurt for Line comments.
        if (node.type === "Block" || node.type === "Line" ||
            node.type === "CommentBlock" || node.type === "CommentLine" ||
            this.lines.isPrecededOnlyByWhitespace(loc.start)) {
            newIndent = this.indent = loc.start.column;
        }
        // Every node.loc has a reference to the original source lines as well
        // as a complete list of source tokens.
        loc.lines = this.lines;
        loc.tokens = this.tokens;
        loc.indent = newIndent;
        // Set loc.start.token and loc.end.token such that
        // loc.tokens.slice(loc.start.token, loc.end.token) returns a list of
        // all the tokens that make up this node.
        this.findTokenRange(loc);
    }
    var keys = Object.keys(node);
    var keyCount = keys.length;
    for (var i = 0; i < keyCount; ++i) {
        var key = keys[i];
        if (key === "loc") {
            copy[key] = node[key];
        }
        else if (key === "tokens" &&
            node.type === "File") {
            // Preserve file.tokens (uncopied) in case client code cares about
            // it, even though Recast ignores it when reprinting.
            copy[key] = node[key];
        }
        else {
            copy[key] = this.copy(node[key]);
        }
    }
    this.indent = oldIndent;
    this.startTokenIndex = oldStartTokenIndex;
    this.endTokenIndex = oldEndTokenIndex;
    return copy;
};
// If we didn't have any idea where in loc.tokens to look for tokens
// contained by this loc, a binary search would be appropriate, but
// because we maintain this.startTokenIndex and this.endTokenIndex as we
// traverse the AST, we only need to make small (linear) adjustments to
// those indexes with each recursive iteration.
TCp.findTokenRange = function (loc) {
    // In the unlikely event that loc.tokens[this.startTokenIndex] starts
    // *after* loc.start, we need to rewind this.startTokenIndex first.
    while (this.startTokenIndex > 0) {
        var token = loc.tokens[this.startTokenIndex];
        if (util.comparePos(loc.start, token.loc.start) < 0) {
            --this.startTokenIndex;
        }
        else
            break;
    }
    // In the unlikely event that loc.tokens[this.endTokenIndex - 1] ends
    // *before* loc.end, we need to fast-forward this.endTokenIndex first.
    while (this.endTokenIndex < loc.tokens.length) {
        var token = loc.tokens[this.endTokenIndex];
        if (util.comparePos(token.loc.end, loc.end) < 0) {
            ++this.endTokenIndex;
        }
        else
            break;
    }
    // Increment this.startTokenIndex until we've found the first token
    // contained by this node.
    while (this.startTokenIndex < this.endTokenIndex) {
        var token = loc.tokens[this.startTokenIndex];
        if (util.comparePos(token.loc.start, loc.start) < 0) {
            ++this.startTokenIndex;
        }
        else
            break;
    }
    // Index into loc.tokens of the first token within this node.
    loc.start.token = this.startTokenIndex;
    // Decrement this.endTokenIndex until we've found the first token after
    // this node (not contained by the node).
    while (this.endTokenIndex > this.startTokenIndex) {
        var token = loc.tokens[this.endTokenIndex - 1];
        if (util.comparePos(loc.end, token.loc.end) < 0) {
            --this.endTokenIndex;
        }
        else
            break;
    }
    // Index into loc.tokens of the first token *after* this node.
    // If loc.start.token === loc.end.token, the node contains no tokens,
    // and the index is that of the next token following this node.
    loc.end.token = this.endTokenIndex;
};

},{"./comments":84,"./lines":86,"./options":88,"./util":92,"assert":2,"ast-types":27,"esprima":31}],90:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var linesModule = __importStar(require("./lines"));
var types = __importStar(require("ast-types"));
var Printable = types.namedTypes.Printable;
var Expression = types.namedTypes.Expression;
var ReturnStatement = types.namedTypes.ReturnStatement;
var SourceLocation = types.namedTypes.SourceLocation;
var util_1 = require("./util");
var fast_path_1 = __importDefault(require("./fast-path"));
var isObject = types.builtInTypes.object;
var isArray = types.builtInTypes.array;
var isString = types.builtInTypes.string;
var riskyAdjoiningCharExp = /[0-9a-z_$]/i;
var Patcher = function Patcher(lines) {
    assert_1.default.ok(this instanceof Patcher);
    assert_1.default.ok(lines instanceof linesModule.Lines);
    var self = this, replacements = [];
    self.replace = function (loc, lines) {
        if (isString.check(lines))
            lines = linesModule.fromString(lines);
        replacements.push({
            lines: lines,
            start: loc.start,
            end: loc.end
        });
    };
    self.get = function (loc) {
        // If no location is provided, return the complete Lines object.
        loc = loc || {
            start: { line: 1, column: 0 },
            end: { line: lines.length,
                column: lines.getLineLength(lines.length) }
        };
        var sliceFrom = loc.start, toConcat = [];
        function pushSlice(from, to) {
            assert_1.default.ok(util_1.comparePos(from, to) <= 0);
            toConcat.push(lines.slice(from, to));
        }
        replacements.sort(function (a, b) { return util_1.comparePos(a.start, b.start); }).forEach(function (rep) {
            if (util_1.comparePos(sliceFrom, rep.start) > 0) {
                // Ignore nested replacement ranges.
            }
            else {
                pushSlice(sliceFrom, rep.start);
                toConcat.push(rep.lines);
                sliceFrom = rep.end;
            }
        });
        pushSlice(sliceFrom, loc.end);
        return linesModule.concat(toConcat);
    };
};
exports.Patcher = Patcher;
var Pp = Patcher.prototype;
Pp.tryToReprintComments = function (newNode, oldNode, print) {
    var patcher = this;
    if (!newNode.comments &&
        !oldNode.comments) {
        // We were (vacuously) able to reprint all the comments!
        return true;
    }
    var newPath = fast_path_1.default.from(newNode);
    var oldPath = fast_path_1.default.from(oldNode);
    newPath.stack.push("comments", getSurroundingComments(newNode));
    oldPath.stack.push("comments", getSurroundingComments(oldNode));
    var reprints = [];
    var ableToReprintComments = findArrayReprints(newPath, oldPath, reprints);
    // No need to pop anything from newPath.stack or oldPath.stack, since
    // newPath and oldPath are fresh local variables.
    if (ableToReprintComments && reprints.length > 0) {
        reprints.forEach(function (reprint) {
            var oldComment = reprint.oldPath.getValue();
            assert_1.default.ok(oldComment.leading || oldComment.trailing);
            patcher.replace(oldComment.loc, 
            // Comments can't have .comments, so it doesn't matter whether we
            // print with comments or without.
            print(reprint.newPath).indentTail(oldComment.loc.indent));
        });
    }
    return ableToReprintComments;
};
// Get all comments that are either leading or trailing, ignoring any
// comments that occur inside node.loc. Returns an empty array for nodes
// with no leading or trailing comments.
function getSurroundingComments(node) {
    var result = [];
    if (node.comments &&
        node.comments.length > 0) {
        node.comments.forEach(function (comment) {
            if (comment.leading || comment.trailing) {
                result.push(comment);
            }
        });
    }
    return result;
}
Pp.deleteComments = function (node) {
    if (!node.comments) {
        return;
    }
    var patcher = this;
    node.comments.forEach(function (comment) {
        if (comment.leading) {
            // Delete leading comments along with any trailing whitespace they
            // might have.
            patcher.replace({
                start: comment.loc.start,
                end: node.loc.lines.skipSpaces(comment.loc.end, false, false)
            }, "");
        }
        else if (comment.trailing) {
            // Delete trailing comments along with any leading whitespace they
            // might have.
            patcher.replace({
                start: node.loc.lines.skipSpaces(comment.loc.start, true, false),
                end: comment.loc.end
            }, "");
        }
    });
};
function getReprinter(path) {
    assert_1.default.ok(path instanceof fast_path_1.default);
    // Make sure that this path refers specifically to a Node, rather than
    // some non-Node subproperty of a Node.
    var node = path.getValue();
    if (!Printable.check(node))
        return;
    var orig = node.original;
    var origLoc = orig && orig.loc;
    var lines = origLoc && origLoc.lines;
    var reprints = [];
    if (!lines || !findReprints(path, reprints))
        return;
    return function (print) {
        var patcher = new Patcher(lines);
        reprints.forEach(function (reprint) {
            var newNode = reprint.newPath.getValue();
            var oldNode = reprint.oldPath.getValue();
            SourceLocation.assert(oldNode.loc, true);
            var needToPrintNewPathWithComments = !patcher.tryToReprintComments(newNode, oldNode, print);
            if (needToPrintNewPathWithComments) {
                // Since we were not able to preserve all leading/trailing
                // comments, we delete oldNode's comments, print newPath with
                // comments, and then patch the resulting lines where oldNode used
                // to be.
                patcher.deleteComments(oldNode);
            }
            var newLines = print(reprint.newPath, {
                includeComments: needToPrintNewPathWithComments,
                // If the oldNode we're replacing already had parentheses, we may
                // not need to print the new node with any extra parentheses,
                // because the existing parentheses will suffice. However, if the
                // newNode has a different type than the oldNode, let the printer
                // decide if reprint.newPath needs parentheses, as usual.
                avoidRootParens: (oldNode.type === newNode.type &&
                    reprint.oldPath.hasParens())
            }).indentTail(oldNode.loc.indent);
            var nls = needsLeadingSpace(lines, oldNode.loc, newLines);
            var nts = needsTrailingSpace(lines, oldNode.loc, newLines);
            // If we try to replace the argument of a ReturnStatement like
            // return"asdf" with e.g. a literal null expression, we run the risk
            // of ending up with returnnull, so we need to add an extra leading
            // space in situations where that might happen. Likewise for
            // "asdf"in obj. See #170.
            if (nls || nts) {
                var newParts = [];
                nls && newParts.push(" ");
                newParts.push(newLines);
                nts && newParts.push(" ");
                newLines = linesModule.concat(newParts);
            }
            patcher.replace(oldNode.loc, newLines);
        });
        // Recall that origLoc is the .loc of an ancestor node that is
        // guaranteed to contain all the reprinted nodes and comments.
        var patchedLines = patcher.get(origLoc).indentTail(-orig.loc.indent);
        if (path.needsParens()) {
            return linesModule.concat(["(", patchedLines, ")"]);
        }
        return patchedLines;
    };
}
exports.getReprinter = getReprinter;
;
// If the last character before oldLoc and the first character of newLines
// are both identifier characters, they must be separated by a space,
// otherwise they will most likely get fused together into a single token.
function needsLeadingSpace(oldLines, oldLoc, newLines) {
    var posBeforeOldLoc = util_1.copyPos(oldLoc.start);
    // The character just before the location occupied by oldNode.
    var charBeforeOldLoc = oldLines.prevPos(posBeforeOldLoc) &&
        oldLines.charAt(posBeforeOldLoc);
    // First character of the reprinted node.
    var newFirstChar = newLines.charAt(newLines.firstPos());
    return charBeforeOldLoc &&
        riskyAdjoiningCharExp.test(charBeforeOldLoc) &&
        newFirstChar &&
        riskyAdjoiningCharExp.test(newFirstChar);
}
// If the last character of newLines and the first character after oldLoc
// are both identifier characters, they must be separated by a space,
// otherwise they will most likely get fused together into a single token.
function needsTrailingSpace(oldLines, oldLoc, newLines) {
    // The character just after the location occupied by oldNode.
    var charAfterOldLoc = oldLines.charAt(oldLoc.end);
    var newLastPos = newLines.lastPos();
    // Last character of the reprinted node.
    var newLastChar = newLines.prevPos(newLastPos) &&
        newLines.charAt(newLastPos);
    return newLastChar &&
        riskyAdjoiningCharExp.test(newLastChar) &&
        charAfterOldLoc &&
        riskyAdjoiningCharExp.test(charAfterOldLoc);
}
function findReprints(newPath, reprints) {
    var newNode = newPath.getValue();
    Printable.assert(newNode);
    var oldNode = newNode.original;
    Printable.assert(oldNode);
    assert_1.default.deepEqual(reprints, []);
    if (newNode.type !== oldNode.type) {
        return false;
    }
    var oldPath = new fast_path_1.default(oldNode);
    var canReprint = findChildReprints(newPath, oldPath, reprints);
    if (!canReprint) {
        // Make absolutely sure the calling code does not attempt to reprint
        // any nodes.
        reprints.length = 0;
    }
    return canReprint;
}
function findAnyReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    var oldNode = oldPath.getValue();
    if (newNode === oldNode)
        return true;
    if (isArray.check(newNode))
        return findArrayReprints(newPath, oldPath, reprints);
    if (isObject.check(newNode))
        return findObjectReprints(newPath, oldPath, reprints);
    return false;
}
function findArrayReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    var oldNode = oldPath.getValue();
    if (newNode === oldNode ||
        newPath.valueIsDuplicate() ||
        oldPath.valueIsDuplicate()) {
        return true;
    }
    isArray.assert(newNode);
    var len = newNode.length;
    if (!(isArray.check(oldNode) &&
        oldNode.length === len))
        return false;
    for (var i = 0; i < len; ++i) {
        newPath.stack.push(i, newNode[i]);
        oldPath.stack.push(i, oldNode[i]);
        var canReprint = findAnyReprints(newPath, oldPath, reprints);
        newPath.stack.length -= 2;
        oldPath.stack.length -= 2;
        if (!canReprint) {
            return false;
        }
    }
    return true;
}
function findObjectReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    isObject.assert(newNode);
    if (newNode.original === null) {
        // If newNode.original node was set to null, reprint the node.
        return false;
    }
    var oldNode = oldPath.getValue();
    if (!isObject.check(oldNode))
        return false;
    if (newNode === oldNode ||
        newPath.valueIsDuplicate() ||
        oldPath.valueIsDuplicate()) {
        return true;
    }
    if (Printable.check(newNode)) {
        if (!Printable.check(oldNode)) {
            return false;
        }
        var newParentNode = newPath.getParentNode();
        var oldParentNode = oldPath.getParentNode();
        if (oldParentNode !== null && oldParentNode.type === 'FunctionTypeAnnotation'
            && newParentNode !== null && newParentNode.type === 'FunctionTypeAnnotation') {
            var oldNeedsParens = oldParentNode.params.length !== 1 || !!oldParentNode.params[0].name;
            var newNeedParens = newParentNode.params.length !== 1 || !!newParentNode.params[0].name;
            if (!oldNeedsParens && newNeedParens) {
                return false;
            }
        }
        // Here we need to decide whether the reprinted code for newNode is
        // appropriate for patching into the location of oldNode.
        if (newNode.type === oldNode.type) {
            var childReprints = [];
            if (findChildReprints(newPath, oldPath, childReprints)) {
                reprints.push.apply(reprints, childReprints);
            }
            else if (oldNode.loc) {
                // If we have no .loc information for oldNode, then we won't be
                // able to reprint it.
                reprints.push({
                    oldPath: oldPath.copy(),
                    newPath: newPath.copy()
                });
            }
            else {
                return false;
            }
            return true;
        }
        if (Expression.check(newNode) &&
            Expression.check(oldNode) &&
            // If we have no .loc information for oldNode, then we won't be
            // able to reprint it.
            oldNode.loc) {
            // If both nodes are subtypes of Expression, then we should be able
            // to fill the location occupied by the old node with code printed
            // for the new node with no ill consequences.
            reprints.push({
                oldPath: oldPath.copy(),
                newPath: newPath.copy()
            });
            return true;
        }
        // The nodes have different types, and at least one of the types is
        // not a subtype of the Expression type, so we cannot safely assume
        // the nodes are syntactically interchangeable.
        return false;
    }
    return findChildReprints(newPath, oldPath, reprints);
}
function findChildReprints(newPath, oldPath, reprints) {
    var newNode = newPath.getValue();
    var oldNode = oldPath.getValue();
    isObject.assert(newNode);
    isObject.assert(oldNode);
    if (newNode.original === null) {
        // If newNode.original node was set to null, reprint the node.
        return false;
    }
    // If this node needs parentheses and will not be wrapped with
    // parentheses when reprinted, then return false to skip reprinting and
    // let it be printed generically.
    if (newPath.needsParens() &&
        !oldPath.hasParens()) {
        return false;
    }
    var keys = util_1.getUnionOfKeys(oldNode, newNode);
    if (oldNode.type === "File" ||
        newNode.type === "File") {
        // Don't bother traversing file.tokens, an often very large array
        // returned by Babylon, and useless for our purposes.
        delete keys.tokens;
    }
    // Don't bother traversing .loc objects looking for reprintable nodes.
    delete keys.loc;
    var originalReprintCount = reprints.length;
    for (var k in keys) {
        if (k.charAt(0) === "_") {
            // Ignore "private" AST properties added by e.g. Babel plugins and
            // parsers like Babylon.
            continue;
        }
        newPath.stack.push(k, types.getFieldValue(newNode, k));
        oldPath.stack.push(k, types.getFieldValue(oldNode, k));
        var canReprint = findAnyReprints(newPath, oldPath, reprints);
        newPath.stack.length -= 2;
        oldPath.stack.length -= 2;
        if (!canReprint) {
            return false;
        }
    }
    // Return statements might end up running into ASI issues due to
    // comments inserted deep within the tree, so reprint them if anything
    // changed within them.
    if (ReturnStatement.check(newPath.getNode()) &&
        reprints.length > originalReprintCount) {
        return false;
    }
    return true;
}

},{"./fast-path":85,"./lines":86,"./util":92,"assert":2,"ast-types":27}],91:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var comments_1 = require("./comments");
var lines_1 = require("./lines");
var options_1 = require("./options");
var patcher_1 = require("./patcher");
var types = __importStar(require("ast-types"));
var namedTypes = types.namedTypes;
var isString = types.builtInTypes.string;
var isObject = types.builtInTypes.object;
var fast_path_1 = __importDefault(require("./fast-path"));
var util = __importStar(require("./util"));
var PrintResult = function PrintResult(code, sourceMap) {
    assert_1.default.ok(this instanceof PrintResult);
    isString.assert(code);
    this.code = code;
    if (sourceMap) {
        isObject.assert(sourceMap);
        this.map = sourceMap;
    }
};
var PRp = PrintResult.prototype;
var warnedAboutToString = false;
PRp.toString = function () {
    if (!warnedAboutToString) {
        console.warn("Deprecation warning: recast.print now returns an object with " +
            "a .code property. You appear to be treating the object as a " +
            "string, which might still work but is strongly discouraged.");
        warnedAboutToString = true;
    }
    return this.code;
};
var emptyPrintResult = new PrintResult("");
var Printer = function Printer(config) {
    assert_1.default.ok(this instanceof Printer);
    var explicitTabWidth = config && config.tabWidth;
    config = options_1.normalize(config);
    // It's common for client code to pass the same options into both
    // recast.parse and recast.print, but the Printer doesn't need (and
    // can be confused by) config.sourceFileName, so we null it out.
    config.sourceFileName = null;
    // Non-destructively modifies options with overrides, and returns a
    // new print function that uses the modified options.
    function makePrintFunctionWith(options, overrides) {
        options = Object.assign({}, options, overrides);
        return function (path) { return print(path, options); };
    }
    function print(path, options) {
        assert_1.default.ok(path instanceof fast_path_1.default);
        options = options || {};
        if (options.includeComments) {
            return comments_1.printComments(path, makePrintFunctionWith(options, {
                includeComments: false
            }));
        }
        var oldTabWidth = config.tabWidth;
        if (!explicitTabWidth) {
            var loc = path.getNode().loc;
            if (loc && loc.lines && loc.lines.guessTabWidth) {
                config.tabWidth = loc.lines.guessTabWidth();
            }
        }
        var reprinter = patcher_1.getReprinter(path);
        var lines = reprinter
            // Since the print function that we pass to the reprinter will
            // be used to print "new" nodes, it's tempting to think we
            // should pass printRootGenerically instead of print, to avoid
            // calling maybeReprint again, but that would be a mistake
            // because the new nodes might not be entirely new, but merely
            // moved from elsewhere in the AST. The print function is the
            // right choice because it gives us the opportunity to reprint
            // such nodes using their original source.
            ? reprinter(print)
            : genericPrint(path, config, options, makePrintFunctionWith(options, {
                includeComments: true,
                avoidRootParens: false
            }));
        config.tabWidth = oldTabWidth;
        return lines;
    }
    this.print = function (ast) {
        if (!ast) {
            return emptyPrintResult;
        }
        var lines = print(fast_path_1.default.from(ast), {
            includeComments: true,
            avoidRootParens: false
        });
        return new PrintResult(lines.toString(config), util.composeSourceMaps(config.inputSourceMap, lines.getSourceMap(config.sourceMapName, config.sourceRoot)));
    };
    this.printGenerically = function (ast) {
        if (!ast) {
            return emptyPrintResult;
        }
        // Print the entire AST generically.
        function printGenerically(path) {
            return comments_1.printComments(path, function (path) { return genericPrint(path, config, {
                includeComments: true,
                avoidRootParens: false
            }, printGenerically); });
        }
        var path = fast_path_1.default.from(ast);
        var oldReuseWhitespace = config.reuseWhitespace;
        // Do not reuse whitespace (or anything else, for that matter)
        // when printing generically.
        config.reuseWhitespace = false;
        // TODO Allow printing of comments?
        var pr = new PrintResult(printGenerically(path).toString(config));
        config.reuseWhitespace = oldReuseWhitespace;
        return pr;
    };
};
exports.Printer = Printer;
function genericPrint(path, config, options, printPath) {
    assert_1.default.ok(path instanceof fast_path_1.default);
    var node = path.getValue();
    var parts = [];
    var linesWithoutParens = genericPrintNoParens(path, config, printPath);
    if (!node || linesWithoutParens.isEmpty()) {
        return linesWithoutParens;
    }
    var shouldAddParens = false;
    var decoratorsLines = printDecorators(path, printPath);
    if (decoratorsLines.isEmpty()) {
        // Nodes with decorators can't have parentheses, so we can avoid
        // computing path.needsParens() except in this case.
        if (!options.avoidRootParens) {
            shouldAddParens = path.needsParens();
        }
    }
    else {
        parts.push(decoratorsLines);
    }
    if (shouldAddParens) {
        parts.unshift("(");
    }
    parts.push(linesWithoutParens);
    if (shouldAddParens) {
        parts.push(")");
    }
    return lines_1.concat(parts);
}
// Note that the `options` parameter of this function is what other
// functions in this file call the `config` object (that is, the
// configuration object originally passed into the Printer constructor).
// Its properties are documented in lib/options.js.
function genericPrintNoParens(path, options, print) {
    var n = path.getValue();
    if (!n) {
        return lines_1.fromString("");
    }
    if (typeof n === "string") {
        return lines_1.fromString(n, options);
    }
    namedTypes.Printable.assert(n);
    var parts = [];
    switch (n.type) {
        case "File":
            return path.call(print, "program");
        case "Program":
            // Babel 6
            if (n.directives) {
                path.each(function (childPath) {
                    parts.push(print(childPath), ";\n");
                }, "directives");
            }
            if (n.interpreter) {
                parts.push(path.call(print, "interpreter"));
            }
            parts.push(path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body"));
            return lines_1.concat(parts);
        case "Noop": // Babel extension.
        case "EmptyStatement":
            return lines_1.fromString("");
        case "ExpressionStatement":
            return lines_1.concat([path.call(print, "expression"), ";"]);
        case "ParenthesizedExpression": // Babel extension.
            return lines_1.concat(["(", path.call(print, "expression"), ")"]);
        case "BinaryExpression":
        case "LogicalExpression":
        case "AssignmentExpression":
            return lines_1.fromString(" ").join([
                path.call(print, "left"),
                n.operator,
                path.call(print, "right")
            ]);
        case "AssignmentPattern":
            return lines_1.concat([
                path.call(print, "left"),
                " = ",
                path.call(print, "right")
            ]);
        case "MemberExpression":
        case "OptionalMemberExpression":
            parts.push(path.call(print, "object"));
            var property = path.call(print, "property");
            var optional = n.type === "OptionalMemberExpression" && n.optional;
            if (n.computed) {
                parts.push(optional ? "?.[" : "[", property, "]");
            }
            else {
                parts.push(optional ? "?." : ".", property);
            }
            return lines_1.concat(parts);
        case "MetaProperty":
            return lines_1.concat([
                path.call(print, "meta"),
                ".",
                path.call(print, "property")
            ]);
        case "BindExpression":
            if (n.object) {
                parts.push(path.call(print, "object"));
            }
            parts.push("::", path.call(print, "callee"));
            return lines_1.concat(parts);
        case "Path":
            return lines_1.fromString(".").join(n.body);
        case "Identifier":
            return lines_1.concat([
                lines_1.fromString(n.name, options),
                n.optional ? "?" : "",
                path.call(print, "typeAnnotation")
            ]);
        case "SpreadElement":
        case "SpreadElementPattern":
        case "RestProperty": // Babel 6 for ObjectPattern
        case "SpreadProperty":
        case "SpreadPropertyPattern":
        case "ObjectTypeSpreadProperty":
        case "RestElement":
            return lines_1.concat([
                "...",
                path.call(print, "argument"),
                path.call(print, "typeAnnotation")
            ]);
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "TSDeclareFunction":
            if (n.declare) {
                parts.push("declare ");
            }
            if (n.async) {
                parts.push("async ");
            }
            parts.push("function");
            if (n.generator)
                parts.push("*");
            if (n.id) {
                parts.push(" ", path.call(print, "id"), path.call(print, "typeParameters"));
            }
            else {
                if (n.typeParameters) {
                    parts.push(path.call(print, "typeParameters"));
                }
            }
            parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
            if (n.body) {
                parts.push(" ", path.call(print, "body"));
            }
            return lines_1.concat(parts);
        case "ArrowFunctionExpression":
            if (n.async) {
                parts.push("async ");
            }
            if (n.typeParameters) {
                parts.push(path.call(print, "typeParameters"));
            }
            if (!options.arrowParensAlways &&
                n.params.length === 1 &&
                !n.rest &&
                n.params[0].type === 'Identifier' &&
                !n.params[0].typeAnnotation &&
                !n.returnType) {
                parts.push(path.call(print, "params", 0));
            }
            else {
                parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
            }
            parts.push(" => ", path.call(print, "body"));
            return lines_1.concat(parts);
        case "MethodDefinition":
            return printMethod(path, options, print);
        case "YieldExpression":
            parts.push("yield");
            if (n.delegate)
                parts.push("*");
            if (n.argument)
                parts.push(" ", path.call(print, "argument"));
            return lines_1.concat(parts);
        case "AwaitExpression":
            parts.push("await");
            if (n.all)
                parts.push("*");
            if (n.argument)
                parts.push(" ", path.call(print, "argument"));
            return lines_1.concat(parts);
        case "ModuleDeclaration":
            parts.push("module", path.call(print, "id"));
            if (n.source) {
                assert_1.default.ok(!n.body);
                parts.push("from", path.call(print, "source"));
            }
            else {
                parts.push(path.call(print, "body"));
            }
            return lines_1.fromString(" ").join(parts);
        case "ImportSpecifier":
            if (n.importKind && n.importKind !== "value") {
                parts.push(n.importKind + " ");
            }
            if (n.imported) {
                parts.push(path.call(print, "imported"));
                if (n.local &&
                    n.local.name !== n.imported.name) {
                    parts.push(" as ", path.call(print, "local"));
                }
            }
            else if (n.id) {
                parts.push(path.call(print, "id"));
                if (n.name) {
                    parts.push(" as ", path.call(print, "name"));
                }
            }
            return lines_1.concat(parts);
        case "ExportSpecifier":
            if (n.local) {
                parts.push(path.call(print, "local"));
                if (n.exported &&
                    n.exported.name !== n.local.name) {
                    parts.push(" as ", path.call(print, "exported"));
                }
            }
            else if (n.id) {
                parts.push(path.call(print, "id"));
                if (n.name) {
                    parts.push(" as ", path.call(print, "name"));
                }
            }
            return lines_1.concat(parts);
        case "ExportBatchSpecifier":
            return lines_1.fromString("*");
        case "ImportNamespaceSpecifier":
            parts.push("* as ");
            if (n.local) {
                parts.push(path.call(print, "local"));
            }
            else if (n.id) {
                parts.push(path.call(print, "id"));
            }
            return lines_1.concat(parts);
        case "ImportDefaultSpecifier":
            if (n.local) {
                return path.call(print, "local");
            }
            return path.call(print, "id");
        case "TSExportAssignment":
            return lines_1.concat(["export = ", path.call(print, "expression")]);
        case "ExportDeclaration":
        case "ExportDefaultDeclaration":
        case "ExportNamedDeclaration":
            return printExportDeclaration(path, options, print);
        case "ExportAllDeclaration":
            parts.push("export *");
            if (n.exported) {
                parts.push(" as ", path.call(print, "exported"));
            }
            parts.push(" from ", path.call(print, "source"), ";");
            return lines_1.concat(parts);
        case "TSNamespaceExportDeclaration":
            parts.push("export as namespace ", path.call(print, "id"));
            return maybeAddSemicolon(lines_1.concat(parts));
        case "ExportNamespaceSpecifier":
            return lines_1.concat(["* as ", path.call(print, "exported")]);
        case "ExportDefaultSpecifier":
            return path.call(print, "exported");
        case "Import":
            return lines_1.fromString("import", options);
        // Recast and ast-types currently support dynamic import(...) using
        // either this dedicated ImportExpression type or a CallExpression
        // whose callee has type Import.
        // https://github.com/benjamn/ast-types/pull/365#issuecomment-605214486
        case "ImportExpression":
            return lines_1.concat(["import(", path.call(print, "source"), ")"]);
        case "ImportDeclaration": {
            parts.push("import ");
            if (n.importKind && n.importKind !== "value") {
                parts.push(n.importKind + " ");
            }
            if (n.specifiers &&
                n.specifiers.length > 0) {
                var unbracedSpecifiers_1 = [];
                var bracedSpecifiers_1 = [];
                path.each(function (specifierPath) {
                    var spec = specifierPath.getValue();
                    if (spec.type === "ImportSpecifier") {
                        bracedSpecifiers_1.push(print(specifierPath));
                    }
                    else if (spec.type === "ImportDefaultSpecifier" ||
                        spec.type === "ImportNamespaceSpecifier") {
                        unbracedSpecifiers_1.push(print(specifierPath));
                    }
                }, "specifiers");
                unbracedSpecifiers_1.forEach(function (lines, i) {
                    if (i > 0) {
                        parts.push(", ");
                    }
                    parts.push(lines);
                });
                if (bracedSpecifiers_1.length > 0) {
                    var lines_2 = lines_1.fromString(", ").join(bracedSpecifiers_1);
                    if (lines_2.getLineLength(1) > options.wrapColumn) {
                        lines_2 = lines_1.concat([
                            lines_1.fromString(",\n").join(bracedSpecifiers_1).indent(options.tabWidth),
                            ","
                        ]);
                    }
                    if (unbracedSpecifiers_1.length > 0) {
                        parts.push(", ");
                    }
                    if (lines_2.length > 1) {
                        parts.push("{\n", lines_2, "\n}");
                    }
                    else if (options.objectCurlySpacing) {
                        parts.push("{ ", lines_2, " }");
                    }
                    else {
                        parts.push("{", lines_2, "}");
                    }
                }
                parts.push(" from ");
            }
            parts.push(path.call(print, "source"), ";");
            return lines_1.concat(parts);
        }
        case "BlockStatement":
            var naked = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
            if (naked.isEmpty()) {
                if (!n.directives || n.directives.length === 0) {
                    return lines_1.fromString("{}");
                }
            }
            parts.push("{\n");
            // Babel 6
            if (n.directives) {
                path.each(function (childPath) {
                    parts.push(maybeAddSemicolon(print(childPath).indent(options.tabWidth)), n.directives.length > 1 || !naked.isEmpty() ? "\n" : "");
                }, "directives");
            }
            parts.push(naked.indent(options.tabWidth));
            parts.push("\n}");
            return lines_1.concat(parts);
        case "ReturnStatement":
            parts.push("return");
            if (n.argument) {
                var argLines = path.call(print, "argument");
                if (argLines.startsWithComment() ||
                    (argLines.length > 1 &&
                        namedTypes.JSXElement &&
                        namedTypes.JSXElement.check(n.argument))) {
                    parts.push(" (\n", argLines.indent(options.tabWidth), "\n)");
                }
                else {
                    parts.push(" ", argLines);
                }
            }
            parts.push(";");
            return lines_1.concat(parts);
        case "CallExpression":
        case "OptionalCallExpression":
            parts.push(path.call(print, "callee"));
            if (n.typeParameters) {
                parts.push(path.call(print, "typeParameters"));
            }
            if (n.typeArguments) {
                parts.push(path.call(print, "typeArguments"));
            }
            if (n.type === "OptionalCallExpression" &&
                n.callee.type !== "OptionalMemberExpression") {
                parts.push("?.");
            }
            parts.push(printArgumentsList(path, options, print));
            return lines_1.concat(parts);
        case "ObjectExpression":
        case "ObjectPattern":
        case "ObjectTypeAnnotation":
            var allowBreak = false;
            var isTypeAnnotation = n.type === "ObjectTypeAnnotation";
            var separator = options.flowObjectCommas ? "," : (isTypeAnnotation ? ";" : ",");
            var fields = [];
            if (isTypeAnnotation) {
                fields.push("indexers", "callProperties");
                if (n.internalSlots != null) {
                    fields.push("internalSlots");
                }
            }
            fields.push("properties");
            var len = 0;
            fields.forEach(function (field) {
                len += n[field].length;
            });
            var oneLine = (isTypeAnnotation && len === 1) || len === 0;
            var leftBrace = n.exact ? "{|" : "{";
            var rightBrace = n.exact ? "|}" : "}";
            parts.push(oneLine ? leftBrace : leftBrace + "\n");
            var leftBraceIndex = parts.length - 1;
            var i = 0;
            fields.forEach(function (field) {
                path.each(function (childPath) {
                    var lines = print(childPath);
                    if (!oneLine) {
                        lines = lines.indent(options.tabWidth);
                    }
                    var multiLine = !isTypeAnnotation && lines.length > 1;
                    if (multiLine && allowBreak) {
                        // Similar to the logic for BlockStatement.
                        parts.push("\n");
                    }
                    parts.push(lines);
                    if (i < len - 1) {
                        // Add an extra line break if the previous object property
                        // had a multi-line value.
                        parts.push(separator + (multiLine ? "\n\n" : "\n"));
                        allowBreak = !multiLine;
                    }
                    else if (len !== 1 && isTypeAnnotation) {
                        parts.push(separator);
                    }
                    else if (!oneLine && util.isTrailingCommaEnabled(options, "objects")) {
                        parts.push(separator);
                    }
                    i++;
                }, field);
            });
            if (n.inexact) {
                var line = lines_1.fromString("...", options);
                if (oneLine) {
                    if (len > 0) {
                        parts.push(separator, " ");
                    }
                    parts.push(line);
                }
                else {
                    // No trailing separator after ... to maintain parity with prettier.
                    parts.push("\n", line.indent(options.tabWidth));
                }
            }
            parts.push(oneLine ? rightBrace : "\n" + rightBrace);
            if (i !== 0 && oneLine && options.objectCurlySpacing) {
                parts[leftBraceIndex] = leftBrace + " ";
                parts[parts.length - 1] = " " + rightBrace;
            }
            if (n.typeAnnotation) {
                parts.push(path.call(print, "typeAnnotation"));
            }
            return lines_1.concat(parts);
        case "PropertyPattern":
            return lines_1.concat([
                path.call(print, "key"),
                ": ",
                path.call(print, "pattern")
            ]);
        case "ObjectProperty": // Babel 6
        case "Property": // Non-standard AST node type.
            if (n.method || n.kind === "get" || n.kind === "set") {
                return printMethod(path, options, print);
            }
            if (n.shorthand && n.value.type === "AssignmentPattern") {
                return path.call(print, "value");
            }
            var key = path.call(print, "key");
            if (n.computed) {
                parts.push("[", key, "]");
            }
            else {
                parts.push(key);
            }
            if (!n.shorthand) {
                parts.push(": ", path.call(print, "value"));
            }
            return lines_1.concat(parts);
        case "ClassMethod": // Babel 6
        case "ObjectMethod": // Babel 6
        case "ClassPrivateMethod":
        case "TSDeclareMethod":
            return printMethod(path, options, print);
        case "PrivateName":
            return lines_1.concat(["#", path.call(print, "id")]);
        case "Decorator":
            return lines_1.concat(["@", path.call(print, "expression")]);
        case "ArrayExpression":
        case "ArrayPattern":
            var elems = n.elements, len = elems.length;
            var printed = path.map(print, "elements");
            var joined = lines_1.fromString(", ").join(printed);
            var oneLine = joined.getLineLength(1) <= options.wrapColumn;
            if (oneLine) {
                if (options.arrayBracketSpacing) {
                    parts.push("[ ");
                }
                else {
                    parts.push("[");
                }
            }
            else {
                parts.push("[\n");
            }
            path.each(function (elemPath) {
                var i = elemPath.getName();
                var elem = elemPath.getValue();
                if (!elem) {
                    // If the array expression ends with a hole, that hole
                    // will be ignored by the interpreter, but if it ends with
                    // two (or more) holes, we need to write out two (or more)
                    // commas so that the resulting code is interpreted with
                    // both (all) of the holes.
                    parts.push(",");
                }
                else {
                    var lines_3 = printed[i];
                    if (oneLine) {
                        if (i > 0)
                            parts.push(" ");
                    }
                    else {
                        lines_3 = lines_3.indent(options.tabWidth);
                    }
                    parts.push(lines_3);
                    if (i < len - 1 || (!oneLine && util.isTrailingCommaEnabled(options, "arrays")))
                        parts.push(",");
                    if (!oneLine)
                        parts.push("\n");
                }
            }, "elements");
            if (oneLine && options.arrayBracketSpacing) {
                parts.push(" ]");
            }
            else {
                parts.push("]");
            }
            if (n.typeAnnotation) {
                parts.push(path.call(print, "typeAnnotation"));
            }
            return lines_1.concat(parts);
        case "SequenceExpression":
            return lines_1.fromString(", ").join(path.map(print, "expressions"));
        case "ThisExpression":
            return lines_1.fromString("this");
        case "Super":
            return lines_1.fromString("super");
        case "NullLiteral": // Babel 6 Literal split
            return lines_1.fromString("null");
        case "RegExpLiteral": // Babel 6 Literal split
            return lines_1.fromString(n.extra.raw);
        case "BigIntLiteral": // Babel 7 Literal split
            return lines_1.fromString(n.value + "n");
        case "NumericLiteral": // Babel 6 Literal Split
            // Keep original representation for numeric values not in base 10.
            if (n.extra &&
                typeof n.extra.raw === "string" &&
                Number(n.extra.raw) === n.value) {
                return lines_1.fromString(n.extra.raw, options);
            }
            return lines_1.fromString(n.value, options);
        case "BooleanLiteral": // Babel 6 Literal split
        case "StringLiteral": // Babel 6 Literal split
        case "Literal":
            // Numeric values may be in bases other than 10. Use their raw
            // representation if equivalent.
            if (typeof n.value === "number" &&
                typeof n.raw === "string" &&
                Number(n.raw) === n.value) {
                return lines_1.fromString(n.raw, options);
            }
            if (typeof n.value !== "string") {
                return lines_1.fromString(n.value, options);
            }
            return lines_1.fromString(nodeStr(n.value, options), options);
        case "Directive": // Babel 6
            return path.call(print, "value");
        case "DirectiveLiteral": // Babel 6
            return lines_1.fromString(nodeStr(n.value, options));
        case "InterpreterDirective":
            return lines_1.fromString("#!" + n.value + "\n", options);
        case "ModuleSpecifier":
            if (n.local) {
                throw new Error("The ESTree ModuleSpecifier type should be abstract");
            }
            // The Esprima ModuleSpecifier type is just a string-valued
            // Literal identifying the imported-from module.
            return lines_1.fromString(nodeStr(n.value, options), options);
        case "UnaryExpression":
            parts.push(n.operator);
            if (/[a-z]$/.test(n.operator))
                parts.push(" ");
            parts.push(path.call(print, "argument"));
            return lines_1.concat(parts);
        case "UpdateExpression":
            parts.push(path.call(print, "argument"), n.operator);
            if (n.prefix)
                parts.reverse();
            return lines_1.concat(parts);
        case "ConditionalExpression":
            return lines_1.concat([
                path.call(print, "test"),
                " ? ", path.call(print, "consequent"),
                " : ", path.call(print, "alternate")
            ]);
        case "NewExpression":
            parts.push("new ", path.call(print, "callee"));
            if (n.typeParameters) {
                parts.push(path.call(print, "typeParameters"));
            }
            if (n.typeArguments) {
                parts.push(path.call(print, "typeArguments"));
            }
            var args = n.arguments;
            if (args) {
                parts.push(printArgumentsList(path, options, print));
            }
            return lines_1.concat(parts);
        case "VariableDeclaration":
            if (n.declare) {
                parts.push("declare ");
            }
            parts.push(n.kind, " ");
            var maxLen = 0;
            var printed = path.map(function (childPath) {
                var lines = print(childPath);
                maxLen = Math.max(lines.length, maxLen);
                return lines;
            }, "declarations");
            if (maxLen === 1) {
                parts.push(lines_1.fromString(", ").join(printed));
            }
            else if (printed.length > 1) {
                parts.push(lines_1.fromString(",\n").join(printed)
                    .indentTail(n.kind.length + 1));
            }
            else {
                parts.push(printed[0]);
            }
            // We generally want to terminate all variable declarations with a
            // semicolon, except when they are children of for loops.
            var parentNode = path.getParentNode();
            if (!namedTypes.ForStatement.check(parentNode) &&
                !namedTypes.ForInStatement.check(parentNode) &&
                !(namedTypes.ForOfStatement &&
                    namedTypes.ForOfStatement.check(parentNode)) &&
                !(namedTypes.ForAwaitStatement &&
                    namedTypes.ForAwaitStatement.check(parentNode))) {
                parts.push(";");
            }
            return lines_1.concat(parts);
        case "VariableDeclarator":
            return n.init ? lines_1.fromString(" = ").join([
                path.call(print, "id"),
                path.call(print, "init")
            ]) : path.call(print, "id");
        case "WithStatement":
            return lines_1.concat([
                "with (",
                path.call(print, "object"),
                ") ",
                path.call(print, "body")
            ]);
        case "IfStatement":
            var con = adjustClause(path.call(print, "consequent"), options);
            parts.push("if (", path.call(print, "test"), ")", con);
            if (n.alternate)
                parts.push(endsWithBrace(con) ? " else" : "\nelse", adjustClause(path.call(print, "alternate"), options));
            return lines_1.concat(parts);
        case "ForStatement":
            // TODO Get the for (;;) case right.
            var init = path.call(print, "init"), sep = init.length > 1 ? ";\n" : "; ", forParen = "for (", indented = lines_1.fromString(sep).join([
                init,
                path.call(print, "test"),
                path.call(print, "update")
            ]).indentTail(forParen.length), head = lines_1.concat([forParen, indented, ")"]), clause = adjustClause(path.call(print, "body"), options);
            parts.push(head);
            if (head.length > 1) {
                parts.push("\n");
                clause = clause.trimLeft();
            }
            parts.push(clause);
            return lines_1.concat(parts);
        case "WhileStatement":
            return lines_1.concat([
                "while (",
                path.call(print, "test"),
                ")",
                adjustClause(path.call(print, "body"), options)
            ]);
        case "ForInStatement":
            // Note: esprima can't actually parse "for each (".
            return lines_1.concat([
                n.each ? "for each (" : "for (",
                path.call(print, "left"),
                " in ",
                path.call(print, "right"),
                ")",
                adjustClause(path.call(print, "body"), options)
            ]);
        case "ForOfStatement":
        case "ForAwaitStatement":
            parts.push("for ");
            if (n.await || n.type === "ForAwaitStatement") {
                parts.push("await ");
            }
            parts.push("(", path.call(print, "left"), " of ", path.call(print, "right"), ")", adjustClause(path.call(print, "body"), options));
            return lines_1.concat(parts);
        case "DoWhileStatement":
            var doBody = lines_1.concat([
                "do",
                adjustClause(path.call(print, "body"), options)
            ]);
            parts.push(doBody);
            if (endsWithBrace(doBody))
                parts.push(" while");
            else
                parts.push("\nwhile");
            parts.push(" (", path.call(print, "test"), ");");
            return lines_1.concat(parts);
        case "DoExpression":
            var statements = path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
            return lines_1.concat([
                "do {\n",
                statements.indent(options.tabWidth),
                "\n}"
            ]);
        case "BreakStatement":
            parts.push("break");
            if (n.label)
                parts.push(" ", path.call(print, "label"));
            parts.push(";");
            return lines_1.concat(parts);
        case "ContinueStatement":
            parts.push("continue");
            if (n.label)
                parts.push(" ", path.call(print, "label"));
            parts.push(";");
            return lines_1.concat(parts);
        case "LabeledStatement":
            return lines_1.concat([
                path.call(print, "label"),
                ":\n",
                path.call(print, "body")
            ]);
        case "TryStatement":
            parts.push("try ", path.call(print, "block"));
            if (n.handler) {
                parts.push(" ", path.call(print, "handler"));
            }
            else if (n.handlers) {
                path.each(function (handlerPath) {
                    parts.push(" ", print(handlerPath));
                }, "handlers");
            }
            if (n.finalizer) {
                parts.push(" finally ", path.call(print, "finalizer"));
            }
            return lines_1.concat(parts);
        case "CatchClause":
            parts.push("catch ");
            if (n.param) {
                parts.push("(", path.call(print, "param"));
            }
            if (n.guard) {
                // Note: esprima does not recognize conditional catch clauses.
                parts.push(" if ", path.call(print, "guard"));
            }
            if (n.param) {
                parts.push(") ");
            }
            parts.push(path.call(print, "body"));
            return lines_1.concat(parts);
        case "ThrowStatement":
            return lines_1.concat(["throw ", path.call(print, "argument"), ";"]);
        case "SwitchStatement":
            return lines_1.concat([
                "switch (",
                path.call(print, "discriminant"),
                ") {\n",
                lines_1.fromString("\n").join(path.map(print, "cases")),
                "\n}"
            ]);
        // Note: ignoring n.lexical because it has no printing consequences.
        case "SwitchCase":
            if (n.test)
                parts.push("case ", path.call(print, "test"), ":");
            else
                parts.push("default:");
            if (n.consequent.length > 0) {
                parts.push("\n", path.call(function (consequentPath) { return printStatementSequence(consequentPath, options, print); }, "consequent").indent(options.tabWidth));
            }
            return lines_1.concat(parts);
        case "DebuggerStatement":
            return lines_1.fromString("debugger;");
        // JSX extensions below.
        case "JSXAttribute":
            parts.push(path.call(print, "name"));
            if (n.value)
                parts.push("=", path.call(print, "value"));
            return lines_1.concat(parts);
        case "JSXIdentifier":
            return lines_1.fromString(n.name, options);
        case "JSXNamespacedName":
            return lines_1.fromString(":").join([
                path.call(print, "namespace"),
                path.call(print, "name")
            ]);
        case "JSXMemberExpression":
            return lines_1.fromString(".").join([
                path.call(print, "object"),
                path.call(print, "property")
            ]);
        case "JSXSpreadAttribute":
            return lines_1.concat(["{...", path.call(print, "argument"), "}"]);
        case "JSXSpreadChild":
            return lines_1.concat(["{...", path.call(print, "expression"), "}"]);
        case "JSXExpressionContainer":
            return lines_1.concat(["{", path.call(print, "expression"), "}"]);
        case "JSXElement":
        case "JSXFragment":
            var openingPropName = "opening" + (n.type === "JSXElement" ? "Element" : "Fragment");
            var closingPropName = "closing" + (n.type === "JSXElement" ? "Element" : "Fragment");
            var openingLines = path.call(print, openingPropName);
            if (n[openingPropName].selfClosing) {
                assert_1.default.ok(!n[closingPropName], "unexpected " + closingPropName + " element in self-closing " + n.type);
                return openingLines;
            }
            var childLines = lines_1.concat(path.map(function (childPath) {
                var child = childPath.getValue();
                if (namedTypes.Literal.check(child) &&
                    typeof child.value === "string") {
                    if (/\S/.test(child.value)) {
                        return child.value.replace(/^\s+|\s+$/g, "");
                    }
                    else if (/\n/.test(child.value)) {
                        return "\n";
                    }
                }
                return print(childPath);
            }, "children")).indentTail(options.tabWidth);
            var closingLines = path.call(print, closingPropName);
            return lines_1.concat([
                openingLines,
                childLines,
                closingLines
            ]);
        case "JSXOpeningElement":
            parts.push("<", path.call(print, "name"));
            var attrParts = [];
            path.each(function (attrPath) {
                attrParts.push(" ", print(attrPath));
            }, "attributes");
            var attrLines = lines_1.concat(attrParts);
            var needLineWrap = (attrLines.length > 1 ||
                attrLines.getLineLength(1) > options.wrapColumn);
            if (needLineWrap) {
                attrParts.forEach(function (part, i) {
                    if (part === " ") {
                        assert_1.default.strictEqual(i % 2, 0);
                        attrParts[i] = "\n";
                    }
                });
                attrLines = lines_1.concat(attrParts).indentTail(options.tabWidth);
            }
            parts.push(attrLines, n.selfClosing ? " />" : ">");
            return lines_1.concat(parts);
        case "JSXClosingElement":
            return lines_1.concat(["</", path.call(print, "name"), ">"]);
        case "JSXOpeningFragment":
            return lines_1.fromString("<>");
        case "JSXClosingFragment":
            return lines_1.fromString("</>");
        case "JSXText":
            return lines_1.fromString(n.value, options);
        case "JSXEmptyExpression":
            return lines_1.fromString("");
        case "TypeAnnotatedIdentifier":
            return lines_1.concat([
                path.call(print, "annotation"),
                " ",
                path.call(print, "identifier")
            ]);
        case "ClassBody":
            if (n.body.length === 0) {
                return lines_1.fromString("{}");
            }
            return lines_1.concat([
                "{\n",
                path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body").indent(options.tabWidth),
                "\n}"
            ]);
        case "ClassPropertyDefinition":
            parts.push("static ", path.call(print, "definition"));
            if (!namedTypes.MethodDefinition.check(n.definition))
                parts.push(";");
            return lines_1.concat(parts);
        case "ClassProperty":
            if (n.declare) {
                parts.push("declare ");
            }
            var access = n.accessibility || n.access;
            if (typeof access === "string") {
                parts.push(access, " ");
            }
            if (n.static) {
                parts.push("static ");
            }
            if (n.abstract) {
                parts.push("abstract ");
            }
            if (n.readonly) {
                parts.push("readonly ");
            }
            var key = path.call(print, "key");
            if (n.computed) {
                key = lines_1.concat(["[", key, "]"]);
            }
            if (n.variance) {
                key = lines_1.concat([printVariance(path, print), key]);
            }
            parts.push(key);
            if (n.optional) {
                parts.push("?");
            }
            if (n.typeAnnotation) {
                parts.push(path.call(print, "typeAnnotation"));
            }
            if (n.value) {
                parts.push(" = ", path.call(print, "value"));
            }
            parts.push(";");
            return lines_1.concat(parts);
        case "ClassPrivateProperty":
            if (n.static) {
                parts.push("static ");
            }
            parts.push(path.call(print, "key"));
            if (n.typeAnnotation) {
                parts.push(path.call(print, "typeAnnotation"));
            }
            if (n.value) {
                parts.push(" = ", path.call(print, "value"));
            }
            parts.push(";");
            return lines_1.concat(parts);
        case "ClassDeclaration":
        case "ClassExpression":
            if (n.declare) {
                parts.push("declare ");
            }
            if (n.abstract) {
                parts.push("abstract ");
            }
            parts.push("class");
            if (n.id) {
                parts.push(" ", path.call(print, "id"));
            }
            if (n.typeParameters) {
                parts.push(path.call(print, "typeParameters"));
            }
            if (n.superClass) {
                parts.push(" extends ", path.call(print, "superClass"), path.call(print, "superTypeParameters"));
            }
            if (n["implements"] && n['implements'].length > 0) {
                parts.push(" implements ", lines_1.fromString(", ").join(path.map(print, "implements")));
            }
            parts.push(" ", path.call(print, "body"));
            return lines_1.concat(parts);
        case "TemplateElement":
            return lines_1.fromString(n.value.raw, options).lockIndentTail();
        case "TemplateLiteral":
            var expressions = path.map(print, "expressions");
            parts.push("`");
            path.each(function (childPath) {
                var i = childPath.getName();
                parts.push(print(childPath));
                if (i < expressions.length) {
                    parts.push("${", expressions[i], "}");
                }
            }, "quasis");
            parts.push("`");
            return lines_1.concat(parts).lockIndentTail();
        case "TaggedTemplateExpression":
            return lines_1.concat([
                path.call(print, "tag"),
                path.call(print, "quasi")
            ]);
        // These types are unprintable because they serve as abstract
        // supertypes for other (printable) types.
        case "Node":
        case "Printable":
        case "SourceLocation":
        case "Position":
        case "Statement":
        case "Function":
        case "Pattern":
        case "Expression":
        case "Declaration":
        case "Specifier":
        case "NamedSpecifier":
        case "Comment": // Supertype of Block and Line
        case "Flow": // Supertype of all Flow AST node types
        case "FlowType": // Supertype of all Flow types
        case "FlowPredicate": // Supertype of InferredPredicate and DeclaredPredicate
        case "MemberTypeAnnotation": // Flow
        case "Type": // Flow
        case "TSHasOptionalTypeParameterInstantiation":
        case "TSHasOptionalTypeParameters":
        case "TSHasOptionalTypeAnnotation":
            throw new Error("unprintable type: " + JSON.stringify(n.type));
        case "CommentBlock": // Babel block comment.
        case "Block": // Esprima block comment.
            return lines_1.concat(["/*", lines_1.fromString(n.value, options), "*/"]);
        case "CommentLine": // Babel line comment.
        case "Line": // Esprima line comment.
            return lines_1.concat(["//", lines_1.fromString(n.value, options)]);
        // Type Annotations for Facebook Flow, typically stripped out or
        // transformed away before printing.
        case "TypeAnnotation":
            if (n.typeAnnotation) {
                if (n.typeAnnotation.type !== "FunctionTypeAnnotation") {
                    parts.push(": ");
                }
                parts.push(path.call(print, "typeAnnotation"));
                return lines_1.concat(parts);
            }
            return lines_1.fromString("");
        case "ExistentialTypeParam":
        case "ExistsTypeAnnotation":
            return lines_1.fromString("*", options);
        case "EmptyTypeAnnotation":
            return lines_1.fromString("empty", options);
        case "AnyTypeAnnotation":
            return lines_1.fromString("any", options);
        case "MixedTypeAnnotation":
            return lines_1.fromString("mixed", options);
        case "ArrayTypeAnnotation":
            return lines_1.concat([
                path.call(print, "elementType"),
                "[]"
            ]);
        case "TupleTypeAnnotation":
            var printed = path.map(print, "types");
            var joined = lines_1.fromString(", ").join(printed);
            var oneLine = joined.getLineLength(1) <= options.wrapColumn;
            if (oneLine) {
                if (options.arrayBracketSpacing) {
                    parts.push("[ ");
                }
                else {
                    parts.push("[");
                }
            }
            else {
                parts.push("[\n");
            }
            path.each(function (elemPath) {
                var i = elemPath.getName();
                var elem = elemPath.getValue();
                if (!elem) {
                    // If the array expression ends with a hole, that hole
                    // will be ignored by the interpreter, but if it ends with
                    // two (or more) holes, we need to write out two (or more)
                    // commas so that the resulting code is interpreted with
                    // both (all) of the holes.
                    parts.push(",");
                }
                else {
                    var lines_4 = printed[i];
                    if (oneLine) {
                        if (i > 0)
                            parts.push(" ");
                    }
                    else {
                        lines_4 = lines_4.indent(options.tabWidth);
                    }
                    parts.push(lines_4);
                    if (i < n.types.length - 1 || (!oneLine && util.isTrailingCommaEnabled(options, "arrays")))
                        parts.push(",");
                    if (!oneLine)
                        parts.push("\n");
                }
            }, "types");
            if (oneLine && options.arrayBracketSpacing) {
                parts.push(" ]");
            }
            else {
                parts.push("]");
            }
            return lines_1.concat(parts);
        case "BooleanTypeAnnotation":
            return lines_1.fromString("boolean", options);
        case "BooleanLiteralTypeAnnotation":
            assert_1.default.strictEqual(typeof n.value, "boolean");
            return lines_1.fromString("" + n.value, options);
        case "InterfaceTypeAnnotation":
            parts.push("interface");
            if (n.extends && n.extends.length > 0) {
                parts.push(" extends ", lines_1.fromString(", ").join(path.map(print, "extends")));
            }
            parts.push(" ", path.call(print, "body"));
            return lines_1.concat(parts);
        case "DeclareClass":
            return printFlowDeclaration(path, [
                "class ",
                path.call(print, "id"),
                " ",
                path.call(print, "body"),
            ]);
        case "DeclareFunction":
            return printFlowDeclaration(path, [
                "function ",
                path.call(print, "id"),
                ";"
            ]);
        case "DeclareModule":
            return printFlowDeclaration(path, [
                "module ",
                path.call(print, "id"),
                " ",
                path.call(print, "body"),
            ]);
        case "DeclareModuleExports":
            return printFlowDeclaration(path, [
                "module.exports",
                path.call(print, "typeAnnotation"),
            ]);
        case "DeclareVariable":
            return printFlowDeclaration(path, [
                "var ",
                path.call(print, "id"),
                ";"
            ]);
        case "DeclareExportDeclaration":
        case "DeclareExportAllDeclaration":
            return lines_1.concat([
                "declare ",
                printExportDeclaration(path, options, print)
            ]);
        case "InferredPredicate":
            return lines_1.fromString("%checks", options);
        case "DeclaredPredicate":
            return lines_1.concat([
                "%checks(",
                path.call(print, "value"),
                ")"
            ]);
        case "FunctionTypeAnnotation":
            // FunctionTypeAnnotation is ambiguous:
            // declare function(a: B): void; OR
            // var A: (a: B) => void;
            var parent = path.getParentNode(0);
            var isArrowFunctionTypeAnnotation = !(namedTypes.ObjectTypeCallProperty.check(parent) ||
                (namedTypes.ObjectTypeInternalSlot.check(parent) && parent.method) ||
                namedTypes.DeclareFunction.check(path.getParentNode(2)));
            var needsColon = isArrowFunctionTypeAnnotation &&
                !namedTypes.FunctionTypeParam.check(parent) &&
                !namedTypes.TypeAlias.check(parent);
            if (needsColon) {
                parts.push(": ");
            }
            var needsParens = n.params.length !== 1 || n.params[0].name;
            parts.push(needsParens ? "(" : '', printFunctionParams(path, options, print), needsParens ? ")" : '');
            // The returnType is not wrapped in a TypeAnnotation, so the colon
            // needs to be added separately.
            if (n.returnType) {
                parts.push(isArrowFunctionTypeAnnotation ? " => " : ": ", path.call(print, "returnType"));
            }
            return lines_1.concat(parts);
        case "FunctionTypeParam":
            var name = path.call(print, "name");
            parts.push(name);
            if (n.optional) {
                parts.push('?');
            }
            if (name.infos[0].line) {
                parts.push(': ');
            }
            parts.push(path.call(print, "typeAnnotation"));
            return lines_1.concat(parts);
        case "GenericTypeAnnotation":
            return lines_1.concat([
                path.call(print, "id"),
                path.call(print, "typeParameters")
            ]);
        case "DeclareInterface":
            parts.push("declare ");
        // Fall through to InterfaceDeclaration...
        case "InterfaceDeclaration":
        case "TSInterfaceDeclaration":
            if (n.declare) {
                parts.push("declare ");
            }
            parts.push("interface ", path.call(print, "id"), path.call(print, "typeParameters"), " ");
            if (n["extends"] && n["extends"].length > 0) {
                parts.push("extends ", lines_1.fromString(", ").join(path.map(print, "extends")), " ");
            }
            if (n.body) {
                parts.push(path.call(print, "body"));
            }
            return lines_1.concat(parts);
        case "ClassImplements":
        case "InterfaceExtends":
            return lines_1.concat([
                path.call(print, "id"),
                path.call(print, "typeParameters")
            ]);
        case "IntersectionTypeAnnotation":
            return lines_1.fromString(" & ").join(path.map(print, "types"));
        case "NullableTypeAnnotation":
            return lines_1.concat([
                "?",
                path.call(print, "typeAnnotation")
            ]);
        case "NullLiteralTypeAnnotation":
            return lines_1.fromString("null", options);
        case "ThisTypeAnnotation":
            return lines_1.fromString("this", options);
        case "NumberTypeAnnotation":
            return lines_1.fromString("number", options);
        case "ObjectTypeCallProperty":
            return path.call(print, "value");
        case "ObjectTypeIndexer":
            return lines_1.concat([
                printVariance(path, print),
                "[",
                path.call(print, "id"),
                ": ",
                path.call(print, "key"),
                "]: ",
                path.call(print, "value")
            ]);
        case "ObjectTypeProperty":
            return lines_1.concat([
                printVariance(path, print),
                path.call(print, "key"),
                n.optional ? "?" : "",
                ": ",
                path.call(print, "value")
            ]);
        case "ObjectTypeInternalSlot":
            return lines_1.concat([
                n.static ? "static " : "",
                "[[",
                path.call(print, "id"),
                "]]",
                n.optional ? "?" : "",
                n.value.type !== "FunctionTypeAnnotation" ? ": " : "",
                path.call(print, "value")
            ]);
        case "QualifiedTypeIdentifier":
            return lines_1.concat([
                path.call(print, "qualification"),
                ".",
                path.call(print, "id")
            ]);
        case "StringLiteralTypeAnnotation":
            return lines_1.fromString(nodeStr(n.value, options), options);
        case "NumberLiteralTypeAnnotation":
        case "NumericLiteralTypeAnnotation":
            assert_1.default.strictEqual(typeof n.value, "number");
            return lines_1.fromString(JSON.stringify(n.value), options);
        case "StringTypeAnnotation":
            return lines_1.fromString("string", options);
        case "DeclareTypeAlias":
            parts.push("declare ");
        // Fall through to TypeAlias...
        case "TypeAlias":
            return lines_1.concat([
                "type ",
                path.call(print, "id"),
                path.call(print, "typeParameters"),
                " = ",
                path.call(print, "right"),
                ";"
            ]);
        case "DeclareOpaqueType":
            parts.push("declare ");
        // Fall through to OpaqueType...
        case "OpaqueType":
            parts.push("opaque type ", path.call(print, "id"), path.call(print, "typeParameters"));
            if (n["supertype"]) {
                parts.push(": ", path.call(print, "supertype"));
            }
            if (n["impltype"]) {
                parts.push(" = ", path.call(print, "impltype"));
            }
            parts.push(";");
            return lines_1.concat(parts);
        case "TypeCastExpression":
            return lines_1.concat([
                "(",
                path.call(print, "expression"),
                path.call(print, "typeAnnotation"),
                ")"
            ]);
        case "TypeParameterDeclaration":
        case "TypeParameterInstantiation":
            return lines_1.concat([
                "<",
                lines_1.fromString(", ").join(path.map(print, "params")),
                ">"
            ]);
        case "Variance":
            if (n.kind === "plus") {
                return lines_1.fromString("+");
            }
            if (n.kind === "minus") {
                return lines_1.fromString("-");
            }
            return lines_1.fromString("");
        case "TypeParameter":
            if (n.variance) {
                parts.push(printVariance(path, print));
            }
            parts.push(path.call(print, 'name'));
            if (n.bound) {
                parts.push(path.call(print, 'bound'));
            }
            if (n['default']) {
                parts.push('=', path.call(print, 'default'));
            }
            return lines_1.concat(parts);
        case "TypeofTypeAnnotation":
            return lines_1.concat([
                lines_1.fromString("typeof ", options),
                path.call(print, "argument")
            ]);
        case "UnionTypeAnnotation":
            return lines_1.fromString(" | ").join(path.map(print, "types"));
        case "VoidTypeAnnotation":
            return lines_1.fromString("void", options);
        case "NullTypeAnnotation":
            return lines_1.fromString("null", options);
        // Type Annotations for TypeScript (when using Babylon as parser)
        case "TSType":
            throw new Error("unprintable type: " + JSON.stringify(n.type));
        case "TSNumberKeyword":
            return lines_1.fromString("number", options);
        case "TSBigIntKeyword":
            return lines_1.fromString("bigint", options);
        case "TSObjectKeyword":
            return lines_1.fromString("object", options);
        case "TSBooleanKeyword":
            return lines_1.fromString("boolean", options);
        case "TSStringKeyword":
            return lines_1.fromString("string", options);
        case "TSSymbolKeyword":
            return lines_1.fromString("symbol", options);
        case "TSAnyKeyword":
            return lines_1.fromString("any", options);
        case "TSVoidKeyword":
            return lines_1.fromString("void", options);
        case "TSThisType":
            return lines_1.fromString("this", options);
        case "TSNullKeyword":
            return lines_1.fromString("null", options);
        case "TSUndefinedKeyword":
            return lines_1.fromString("undefined", options);
        case "TSUnknownKeyword":
            return lines_1.fromString("unknown", options);
        case "TSNeverKeyword":
            return lines_1.fromString("never", options);
        case "TSArrayType":
            return lines_1.concat([
                path.call(print, "elementType"),
                "[]"
            ]);
        case "TSLiteralType":
            return path.call(print, "literal");
        case "TSUnionType":
            return lines_1.fromString(" | ").join(path.map(print, "types"));
        case "TSIntersectionType":
            return lines_1.fromString(" & ").join(path.map(print, "types"));
        case "TSConditionalType":
            parts.push(path.call(print, "checkType"), " extends ", path.call(print, "extendsType"), " ? ", path.call(print, "trueType"), " : ", path.call(print, "falseType"));
            return lines_1.concat(parts);
        case "TSInferType":
            parts.push("infer ", path.call(print, "typeParameter"));
            return lines_1.concat(parts);
        case "TSParenthesizedType":
            return lines_1.concat([
                "(",
                path.call(print, "typeAnnotation"),
                ")"
            ]);
        case "TSFunctionType":
            return lines_1.concat([
                path.call(print, "typeParameters"),
                "(",
                printFunctionParams(path, options, print),
                ")",
                path.call(print, "typeAnnotation")
            ]);
        case "TSConstructorType":
            return lines_1.concat([
                "new ",
                path.call(print, 'typeParameters'),
                "(",
                printFunctionParams(path, options, print),
                ")",
                path.call(print, "typeAnnotation")
            ]);
        case "TSMappedType": {
            parts.push(n.readonly ? "readonly " : "", "[", path.call(print, "typeParameter"), "]", n.optional ? "?" : "");
            if (n.typeAnnotation) {
                parts.push(": ", path.call(print, "typeAnnotation"), ";");
            }
            return lines_1.concat([
                "{\n",
                lines_1.concat(parts).indent(options.tabWidth),
                "\n}",
            ]);
        }
        case "TSTupleType":
            return lines_1.concat([
                "[",
                lines_1.fromString(", ").join(path.map(print, "elementTypes")),
                "]"
            ]);
        case "TSRestType":
            return lines_1.concat([
                "...",
                path.call(print, "typeAnnotation"),
                "[]"
            ]);
        case "TSOptionalType":
            return lines_1.concat([
                path.call(print, "typeAnnotation"),
                "?"
            ]);
        case "TSIndexedAccessType":
            return lines_1.concat([
                path.call(print, "objectType"),
                "[",
                path.call(print, "indexType"),
                "]"
            ]);
        case "TSTypeOperator":
            return lines_1.concat([
                path.call(print, "operator"),
                " ",
                path.call(print, "typeAnnotation")
            ]);
        case "TSTypeLiteral": {
            var memberLines_1 = lines_1.fromString(",\n").join(path.map(print, "members"));
            if (memberLines_1.isEmpty()) {
                return lines_1.fromString("{}", options);
            }
            parts.push("{\n", memberLines_1.indent(options.tabWidth), "\n}");
            return lines_1.concat(parts);
        }
        case "TSEnumMember":
            parts.push(path.call(print, "id"));
            if (n.initializer) {
                parts.push(" = ", path.call(print, "initializer"));
            }
            return lines_1.concat(parts);
        case "TSTypeQuery":
            return lines_1.concat([
                "typeof ",
                path.call(print, "exprName"),
            ]);
        case "TSParameterProperty":
            if (n.accessibility) {
                parts.push(n.accessibility, " ");
            }
            if (n.export) {
                parts.push("export ");
            }
            if (n.static) {
                parts.push("static ");
            }
            if (n.readonly) {
                parts.push("readonly ");
            }
            parts.push(path.call(print, "parameter"));
            return lines_1.concat(parts);
        case "TSTypeReference":
            return lines_1.concat([
                path.call(print, "typeName"),
                path.call(print, "typeParameters")
            ]);
        case "TSQualifiedName":
            return lines_1.concat([
                path.call(print, "left"),
                ".",
                path.call(print, "right")
            ]);
        case "TSAsExpression": {
            var withParens = n.extra && n.extra.parenthesized === true;
            if (withParens)
                parts.push("(");
            var expression = path.call(print, "expression");
            var expressionType = path.getValue().expression.type;
            var needParens = expressionType === "ArrowFunctionExpression" || expressionType === "FunctionExpression";
            parts.push(needParens ? '(' + expression + ')' : expression, lines_1.fromString(" as "), path.call(print, "typeAnnotation"));
            if (withParens)
                parts.push(")");
            return lines_1.concat(parts);
        }
        case "TSNonNullExpression":
            return lines_1.concat([
                path.call(print, "expression"),
                "!"
            ]);
        case "TSTypeAnnotation": {
            // similar to flow's FunctionTypeAnnotation, this can be
            // ambiguous: it can be prefixed by => or :
            // in a type predicate, it takes the for u is U
            var parent = path.getParentNode(0);
            var prefix = ": ";
            if (namedTypes.TSFunctionType.check(parent) || namedTypes.TSConstructorType.check(parent)) {
                prefix = " => ";
            }
            if (namedTypes.TSTypePredicate.check(parent)) {
                prefix = " is ";
            }
            return lines_1.concat([
                prefix,
                path.call(print, "typeAnnotation")
            ]);
        }
        case "TSIndexSignature":
            return lines_1.concat([
                n.readonly ? "readonly " : "",
                "[",
                path.map(print, "parameters"),
                "]",
                path.call(print, "typeAnnotation")
            ]);
        case "TSPropertySignature":
            parts.push(printVariance(path, print), n.readonly ? "readonly " : "");
            if (n.computed) {
                parts.push("[", path.call(print, "key"), "]");
            }
            else {
                parts.push(path.call(print, "key"));
            }
            parts.push(n.optional ? "?" : "", path.call(print, "typeAnnotation"));
            return lines_1.concat(parts);
        case "TSMethodSignature":
            if (n.computed) {
                parts.push("[", path.call(print, "key"), "]");
            }
            else {
                parts.push(path.call(print, "key"));
            }
            if (n.optional) {
                parts.push("?");
            }
            parts.push(path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ")", path.call(print, "typeAnnotation"));
            return lines_1.concat(parts);
        case "TSTypePredicate":
            return lines_1.concat([
                path.call(print, "parameterName"),
                path.call(print, "typeAnnotation")
            ]);
        case "TSCallSignatureDeclaration":
            return lines_1.concat([
                path.call(print, "typeParameters"),
                "(",
                printFunctionParams(path, options, print),
                ")",
                path.call(print, "typeAnnotation")
            ]);
        case "TSConstructSignatureDeclaration":
            if (n.typeParameters) {
                parts.push("new", path.call(print, "typeParameters"));
            }
            else {
                parts.push("new ");
            }
            parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "typeAnnotation"));
            return lines_1.concat(parts);
        case "TSTypeAliasDeclaration":
            return lines_1.concat([
                n.declare ? "declare " : "",
                "type ",
                path.call(print, "id"),
                path.call(print, "typeParameters"),
                " = ",
                path.call(print, "typeAnnotation"),
                ";"
            ]);
        case "TSTypeParameter":
            parts.push(path.call(print, "name"));
            // ambiguous because of TSMappedType
            var parent = path.getParentNode(0);
            var isInMappedType = namedTypes.TSMappedType.check(parent);
            if (n.constraint) {
                parts.push(isInMappedType ? " in " : " extends ", path.call(print, "constraint"));
            }
            if (n["default"]) {
                parts.push(" = ", path.call(print, "default"));
            }
            return lines_1.concat(parts);
        case "TSTypeAssertion":
            var withParens = n.extra && n.extra.parenthesized === true;
            if (withParens) {
                parts.push("(");
            }
            parts.push("<", path.call(print, "typeAnnotation"), "> ", path.call(print, "expression"));
            if (withParens) {
                parts.push(")");
            }
            return lines_1.concat(parts);
        case "TSTypeParameterDeclaration":
        case "TSTypeParameterInstantiation":
            return lines_1.concat([
                "<",
                lines_1.fromString(", ").join(path.map(print, "params")),
                ">"
            ]);
        case "TSEnumDeclaration":
            parts.push(n.declare ? "declare " : "", n.const ? "const " : "", "enum ", path.call(print, "id"));
            var memberLines = lines_1.fromString(",\n").join(path.map(print, "members"));
            if (memberLines.isEmpty()) {
                parts.push(" {}");
            }
            else {
                parts.push(" {\n", memberLines.indent(options.tabWidth), "\n}");
            }
            return lines_1.concat(parts);
        case "TSExpressionWithTypeArguments":
            return lines_1.concat([
                path.call(print, "expression"),
                path.call(print, "typeParameters")
            ]);
        case "TSInterfaceBody":
            var lines = lines_1.fromString(";\n").join(path.map(print, "body"));
            if (lines.isEmpty()) {
                return lines_1.fromString("{}", options);
            }
            return lines_1.concat([
                "{\n",
                lines.indent(options.tabWidth), ";",
                "\n}",
            ]);
        case "TSImportType":
            parts.push("import(", path.call(print, "argument"), ")");
            if (n.qualifier) {
                parts.push(".", path.call(print, "qualifier"));
            }
            if (n.typeParameters) {
                parts.push(path.call(print, "typeParameters"));
            }
            return lines_1.concat(parts);
        case "TSImportEqualsDeclaration":
            if (n.isExport) {
                parts.push("export ");
            }
            parts.push("import ", path.call(print, "id"), " = ", path.call(print, "moduleReference"));
            return maybeAddSemicolon(lines_1.concat(parts));
        case "TSExternalModuleReference":
            return lines_1.concat(["require(", path.call(print, "expression"), ")"]);
        case "TSModuleDeclaration": {
            var parent_1 = path.getParentNode();
            if (parent_1.type === "TSModuleDeclaration") {
                parts.push(".");
            }
            else {
                if (n.declare) {
                    parts.push("declare ");
                }
                if (!n.global) {
                    var isExternal = n.id.type === "StringLiteral" ||
                        (n.id.type === "Literal" &&
                            typeof n.id.value === "string");
                    if (isExternal) {
                        parts.push("module ");
                    }
                    else if (n.loc &&
                        n.loc.lines &&
                        n.id.loc) {
                        var prefix = n.loc.lines.sliceString(n.loc.start, n.id.loc.start);
                        // These keywords are fundamentally ambiguous in the
                        // Babylon parser, and not reflected in the AST, so
                        // the best we can do is to match the original code,
                        // when possible.
                        if (prefix.indexOf("module") >= 0) {
                            parts.push("module ");
                        }
                        else {
                            parts.push("namespace ");
                        }
                    }
                    else {
                        parts.push("namespace ");
                    }
                }
            }
            parts.push(path.call(print, "id"));
            if (n.body && n.body.type === "TSModuleDeclaration") {
                parts.push(path.call(print, "body"));
            }
            else if (n.body) {
                var bodyLines = path.call(print, "body");
                if (bodyLines.isEmpty()) {
                    parts.push(" {}");
                }
                else {
                    parts.push(" {\n", bodyLines.indent(options.tabWidth), "\n}");
                }
            }
            return lines_1.concat(parts);
        }
        case "TSModuleBlock":
            return path.call(function (bodyPath) { return printStatementSequence(bodyPath, options, print); }, "body");
        // Unhandled types below. If encountered, nodes of these types should
        // be either left alone or desugared into AST types that are fully
        // supported by the pretty-printer.
        case "ClassHeritage": // TODO
        case "ComprehensionBlock": // TODO
        case "ComprehensionExpression": // TODO
        case "Glob": // TODO
        case "GeneratorExpression": // TODO
        case "LetStatement": // TODO
        case "LetExpression": // TODO
        case "GraphExpression": // TODO
        case "GraphIndexExpression": // TODO
        // XML types that nobody cares about or needs to print.
        case "XMLDefaultDeclaration":
        case "XMLAnyName":
        case "XMLQualifiedIdentifier":
        case "XMLFunctionQualifiedIdentifier":
        case "XMLAttributeSelector":
        case "XMLFilterExpression":
        case "XML":
        case "XMLElement":
        case "XMLList":
        case "XMLEscape":
        case "XMLText":
        case "XMLStartTag":
        case "XMLEndTag":
        case "XMLPointTag":
        case "XMLName":
        case "XMLAttribute":
        case "XMLCdata":
        case "XMLComment":
        case "XMLProcessingInstruction":
        default:
            debugger;
            throw new Error("unknown type: " + JSON.stringify(n.type));
    }
}
function printDecorators(path, printPath) {
    var parts = [];
    var node = path.getValue();
    if (node.decorators &&
        node.decorators.length > 0 &&
        // If the parent node is an export declaration, it will be
        // responsible for printing node.decorators.
        !util.getParentExportDeclaration(path)) {
        path.each(function (decoratorPath) {
            parts.push(printPath(decoratorPath), "\n");
        }, "decorators");
    }
    else if (util.isExportDeclaration(node) &&
        node.declaration &&
        node.declaration.decorators) {
        // Export declarations are responsible for printing any decorators
        // that logically apply to node.declaration.
        path.each(function (decoratorPath) {
            parts.push(printPath(decoratorPath), "\n");
        }, "declaration", "decorators");
    }
    return lines_1.concat(parts);
}
function printStatementSequence(path, options, print) {
    var filtered = [];
    var sawComment = false;
    var sawStatement = false;
    path.each(function (stmtPath) {
        var stmt = stmtPath.getValue();
        // Just in case the AST has been modified to contain falsy
        // "statements," it's safer simply to skip them.
        if (!stmt) {
            return;
        }
        // Skip printing EmptyStatement nodes to avoid leaving stray
        // semicolons lying around.
        if (stmt.type === "EmptyStatement" &&
            !(stmt.comments && stmt.comments.length > 0)) {
            return;
        }
        if (namedTypes.Comment.check(stmt)) {
            // The pretty printer allows a dangling Comment node to act as
            // a Statement when the Comment can't be attached to any other
            // non-Comment node in the tree.
            sawComment = true;
        }
        else if (namedTypes.Statement.check(stmt)) {
            sawStatement = true;
        }
        else {
            // When the pretty printer encounters a string instead of an
            // AST node, it just prints the string. This behavior can be
            // useful for fine-grained formatting decisions like inserting
            // blank lines.
            isString.assert(stmt);
        }
        // We can't hang onto stmtPath outside of this function, because
        // it's just a reference to a mutable FastPath object, so we have
        // to go ahead and print it here.
        filtered.push({
            node: stmt,
            printed: print(stmtPath)
        });
    });
    if (sawComment) {
        assert_1.default.strictEqual(sawStatement, false, "Comments may appear as statements in otherwise empty statement " +
            "lists, but may not coexist with non-Comment nodes.");
    }
    var prevTrailingSpace = null;
    var len = filtered.length;
    var parts = [];
    filtered.forEach(function (info, i) {
        var printed = info.printed;
        var stmt = info.node;
        var multiLine = printed.length > 1;
        var notFirst = i > 0;
        var notLast = i < len - 1;
        var leadingSpace;
        var trailingSpace;
        var lines = stmt && stmt.loc && stmt.loc.lines;
        var trueLoc = lines && options.reuseWhitespace &&
            util.getTrueLoc(stmt, lines);
        if (notFirst) {
            if (trueLoc) {
                var beforeStart = lines.skipSpaces(trueLoc.start, true);
                var beforeStartLine = beforeStart ? beforeStart.line : 1;
                var leadingGap = trueLoc.start.line - beforeStartLine;
                leadingSpace = Array(leadingGap + 1).join("\n");
            }
            else {
                leadingSpace = multiLine ? "\n\n" : "\n";
            }
        }
        else {
            leadingSpace = "";
        }
        if (notLast) {
            if (trueLoc) {
                var afterEnd = lines.skipSpaces(trueLoc.end);
                var afterEndLine = afterEnd ? afterEnd.line : lines.length;
                var trailingGap = afterEndLine - trueLoc.end.line;
                trailingSpace = Array(trailingGap + 1).join("\n");
            }
            else {
                trailingSpace = multiLine ? "\n\n" : "\n";
            }
        }
        else {
            trailingSpace = "";
        }
        parts.push(maxSpace(prevTrailingSpace, leadingSpace), printed);
        if (notLast) {
            prevTrailingSpace = trailingSpace;
        }
        else if (trailingSpace) {
            parts.push(trailingSpace);
        }
    });
    return lines_1.concat(parts);
}
function maxSpace(s1, s2) {
    if (!s1 && !s2) {
        return lines_1.fromString("");
    }
    if (!s1) {
        return lines_1.fromString(s2);
    }
    if (!s2) {
        return lines_1.fromString(s1);
    }
    var spaceLines1 = lines_1.fromString(s1);
    var spaceLines2 = lines_1.fromString(s2);
    if (spaceLines2.length > spaceLines1.length) {
        return spaceLines2;
    }
    return spaceLines1;
}
function printMethod(path, options, print) {
    var node = path.getNode();
    var kind = node.kind;
    var parts = [];
    var nodeValue = node.value;
    if (!namedTypes.FunctionExpression.check(nodeValue)) {
        nodeValue = node;
    }
    var access = node.accessibility || node.access;
    if (typeof access === "string") {
        parts.push(access, " ");
    }
    if (node.static) {
        parts.push("static ");
    }
    if (node.abstract) {
        parts.push("abstract ");
    }
    if (node.readonly) {
        parts.push("readonly ");
    }
    if (nodeValue.async) {
        parts.push("async ");
    }
    if (nodeValue.generator) {
        parts.push("*");
    }
    if (kind === "get" || kind === "set") {
        parts.push(kind, " ");
    }
    var key = path.call(print, "key");
    if (node.computed) {
        key = lines_1.concat(["[", key, "]"]);
    }
    parts.push(key);
    if (node.optional) {
        parts.push("?");
    }
    if (node === nodeValue) {
        parts.push(path.call(print, "typeParameters"), "(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"));
        if (node.body) {
            parts.push(" ", path.call(print, "body"));
        }
        else {
            parts.push(";");
        }
    }
    else {
        parts.push(path.call(print, "value", "typeParameters"), "(", path.call(function (valuePath) { return printFunctionParams(valuePath, options, print); }, "value"), ")", path.call(print, "value", "returnType"));
        if (nodeValue.body) {
            parts.push(" ", path.call(print, "value", "body"));
        }
        else {
            parts.push(";");
        }
    }
    return lines_1.concat(parts);
}
function printArgumentsList(path, options, print) {
    var printed = path.map(print, "arguments");
    var trailingComma = util.isTrailingCommaEnabled(options, "parameters");
    var joined = lines_1.fromString(", ").join(printed);
    if (joined.getLineLength(1) > options.wrapColumn) {
        joined = lines_1.fromString(",\n").join(printed);
        return lines_1.concat([
            "(\n",
            joined.indent(options.tabWidth),
            trailingComma ? ",\n)" : "\n)"
        ]);
    }
    return lines_1.concat(["(", joined, ")"]);
}
function printFunctionParams(path, options, print) {
    var fun = path.getValue();
    if (fun.params) {
        var params = fun.params;
        var printed = path.map(print, "params");
    }
    else if (fun.parameters) {
        params = fun.parameters;
        printed = path.map(print, "parameters");
    }
    if (fun.defaults) {
        path.each(function (defExprPath) {
            var i = defExprPath.getName();
            var p = printed[i];
            if (p && defExprPath.getValue()) {
                printed[i] = lines_1.concat([p, " = ", print(defExprPath)]);
            }
        }, "defaults");
    }
    if (fun.rest) {
        printed.push(lines_1.concat(["...", path.call(print, "rest")]));
    }
    var joined = lines_1.fromString(", ").join(printed);
    if (joined.length > 1 ||
        joined.getLineLength(1) > options.wrapColumn) {
        joined = lines_1.fromString(",\n").join(printed);
        if (util.isTrailingCommaEnabled(options, "parameters") &&
            !fun.rest &&
            params[params.length - 1].type !== 'RestElement') {
            joined = lines_1.concat([joined, ",\n"]);
        }
        else {
            joined = lines_1.concat([joined, "\n"]);
        }
        return lines_1.concat(["\n", joined.indent(options.tabWidth)]);
    }
    return joined;
}
function printExportDeclaration(path, options, print) {
    var decl = path.getValue();
    var parts = ["export "];
    if (decl.exportKind && decl.exportKind !== "value") {
        parts.push(decl.exportKind + " ");
    }
    var shouldPrintSpaces = options.objectCurlySpacing;
    namedTypes.Declaration.assert(decl);
    if (decl["default"] ||
        decl.type === "ExportDefaultDeclaration") {
        parts.push("default ");
    }
    if (decl.declaration) {
        parts.push(path.call(print, "declaration"));
    }
    else if (decl.specifiers) {
        if (decl.specifiers.length === 1 &&
            decl.specifiers[0].type === "ExportBatchSpecifier") {
            parts.push("*");
        }
        else if (decl.specifiers.length === 0) {
            parts.push("{}");
        }
        else if (decl.specifiers[0].type === 'ExportDefaultSpecifier') {
            var unbracedSpecifiers_2 = [];
            var bracedSpecifiers_2 = [];
            path.each(function (specifierPath) {
                var spec = specifierPath.getValue();
                if (spec.type === "ExportDefaultSpecifier") {
                    unbracedSpecifiers_2.push(print(specifierPath));
                }
                else {
                    bracedSpecifiers_2.push(print(specifierPath));
                }
            }, "specifiers");
            unbracedSpecifiers_2.forEach(function (lines, i) {
                if (i > 0) {
                    parts.push(", ");
                }
                parts.push(lines);
            });
            if (bracedSpecifiers_2.length > 0) {
                var lines_5 = lines_1.fromString(", ").join(bracedSpecifiers_2);
                if (lines_5.getLineLength(1) > options.wrapColumn) {
                    lines_5 = lines_1.concat([
                        lines_1.fromString(",\n").join(bracedSpecifiers_2).indent(options.tabWidth),
                        ","
                    ]);
                }
                if (unbracedSpecifiers_2.length > 0) {
                    parts.push(", ");
                }
                if (lines_5.length > 1) {
                    parts.push("{\n", lines_5, "\n}");
                }
                else if (options.objectCurlySpacing) {
                    parts.push("{ ", lines_5, " }");
                }
                else {
                    parts.push("{", lines_5, "}");
                }
            }
        }
        else {
            parts.push(shouldPrintSpaces ? "{ " : "{", lines_1.fromString(", ").join(path.map(print, "specifiers")), shouldPrintSpaces ? " }" : "}");
        }
        if (decl.source) {
            parts.push(" from ", path.call(print, "source"));
        }
    }
    var lines = lines_1.concat(parts);
    if (lastNonSpaceCharacter(lines) !== ";" &&
        !(decl.declaration &&
            (decl.declaration.type === "FunctionDeclaration" ||
                decl.declaration.type === "ClassDeclaration" ||
                decl.declaration.type === "TSModuleDeclaration" ||
                decl.declaration.type === "TSInterfaceDeclaration" ||
                decl.declaration.type === "TSEnumDeclaration"))) {
        lines = lines_1.concat([lines, ";"]);
    }
    return lines;
}
function printFlowDeclaration(path, parts) {
    var parentExportDecl = util.getParentExportDeclaration(path);
    if (parentExportDecl) {
        assert_1.default.strictEqual(parentExportDecl.type, "DeclareExportDeclaration");
    }
    else {
        // If the parent node has type DeclareExportDeclaration, then it
        // will be responsible for printing the "declare" token. Otherwise
        // it needs to be printed with this non-exported declaration node.
        parts.unshift("declare ");
    }
    return lines_1.concat(parts);
}
function printVariance(path, print) {
    return path.call(function (variancePath) {
        var value = variancePath.getValue();
        if (value) {
            if (value === "plus") {
                return lines_1.fromString("+");
            }
            if (value === "minus") {
                return lines_1.fromString("-");
            }
            return print(variancePath);
        }
        return lines_1.fromString("");
    }, "variance");
}
function adjustClause(clause, options) {
    if (clause.length > 1)
        return lines_1.concat([" ", clause]);
    return lines_1.concat([
        "\n",
        maybeAddSemicolon(clause).indent(options.tabWidth)
    ]);
}
function lastNonSpaceCharacter(lines) {
    var pos = lines.lastPos();
    do {
        var ch = lines.charAt(pos);
        if (/\S/.test(ch))
            return ch;
    } while (lines.prevPos(pos));
}
function endsWithBrace(lines) {
    return lastNonSpaceCharacter(lines) === "}";
}
function swapQuotes(str) {
    return str.replace(/['"]/g, function (m) { return m === '"' ? '\'' : '"'; });
}
function nodeStr(str, options) {
    isString.assert(str);
    switch (options.quote) {
        case "auto":
            var double = JSON.stringify(str);
            var single = swapQuotes(JSON.stringify(swapQuotes(str)));
            return double.length > single.length ? single : double;
        case "single":
            return swapQuotes(JSON.stringify(swapQuotes(str)));
        case "double":
        default:
            return JSON.stringify(str);
    }
}
function maybeAddSemicolon(lines) {
    var eoc = lastNonSpaceCharacter(lines);
    if (!eoc || "\n};".indexOf(eoc) < 0)
        return lines_1.concat([lines, ";"]);
    return lines;
}

},{"./comments":84,"./fast-path":85,"./lines":86,"./options":88,"./patcher":90,"./util":92,"assert":2,"ast-types":27}],92:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var types = __importStar(require("ast-types"));
var n = types.namedTypes;
var source_map_1 = __importDefault(require("source-map"));
var SourceMapConsumer = source_map_1.default.SourceMapConsumer;
var SourceMapGenerator = source_map_1.default.SourceMapGenerator;
var hasOwn = Object.prototype.hasOwnProperty;
function getOption(options, key, defaultValue) {
    if (options && hasOwn.call(options, key)) {
        return options[key];
    }
    return defaultValue;
}
exports.getOption = getOption;
function getUnionOfKeys() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var result = {};
    var argc = args.length;
    for (var i = 0; i < argc; ++i) {
        var keys = Object.keys(args[i]);
        var keyCount = keys.length;
        for (var j = 0; j < keyCount; ++j) {
            result[keys[j]] = true;
        }
    }
    return result;
}
exports.getUnionOfKeys = getUnionOfKeys;
function comparePos(pos1, pos2) {
    return (pos1.line - pos2.line) || (pos1.column - pos2.column);
}
exports.comparePos = comparePos;
function copyPos(pos) {
    return {
        line: pos.line,
        column: pos.column
    };
}
exports.copyPos = copyPos;
function composeSourceMaps(formerMap, latterMap) {
    if (formerMap) {
        if (!latterMap) {
            return formerMap;
        }
    }
    else {
        return latterMap || null;
    }
    var smcFormer = new SourceMapConsumer(formerMap);
    var smcLatter = new SourceMapConsumer(latterMap);
    var smg = new SourceMapGenerator({
        file: latterMap.file,
        sourceRoot: latterMap.sourceRoot
    });
    var sourcesToContents = {};
    smcLatter.eachMapping(function (mapping) {
        var origPos = smcFormer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
        });
        var sourceName = origPos.source;
        if (sourceName === null) {
            return;
        }
        smg.addMapping({
            source: sourceName,
            original: copyPos(origPos),
            generated: {
                line: mapping.generatedLine,
                column: mapping.generatedColumn
            },
            name: mapping.name
        });
        var sourceContent = smcFormer.sourceContentFor(sourceName);
        if (sourceContent && !hasOwn.call(sourcesToContents, sourceName)) {
            sourcesToContents[sourceName] = sourceContent;
            smg.setSourceContent(sourceName, sourceContent);
        }
    });
    return smg.toJSON();
}
exports.composeSourceMaps = composeSourceMaps;
;
function getTrueLoc(node, lines) {
    // It's possible that node is newly-created (not parsed by Esprima),
    // in which case it probably won't have a .loc property (or an
    // .original property for that matter). That's fine; we'll just
    // pretty-print it as usual.
    if (!node.loc) {
        return null;
    }
    var result = {
        start: node.loc.start,
        end: node.loc.end
    };
    function include(node) {
        expandLoc(result, node.loc);
    }
    // If the node is an export declaration and its .declaration has any
    // decorators, their locations might contribute to the true start/end
    // positions of the export declaration node.
    if (node.declaration &&
        node.declaration.decorators &&
        isExportDeclaration(node)) {
        node.declaration.decorators.forEach(include);
    }
    if (comparePos(result.start, result.end) < 0) {
        // Trim leading whitespace.
        result.start = copyPos(result.start);
        lines.skipSpaces(result.start, false, true);
        if (comparePos(result.start, result.end) < 0) {
            // Trim trailing whitespace, if the end location is not already the
            // same as the start location.
            result.end = copyPos(result.end);
            lines.skipSpaces(result.end, true, true);
        }
    }
    // If the node has any comments, their locations might contribute to
    // the true start/end positions of the node.
    if (node.comments) {
        node.comments.forEach(include);
    }
    return result;
}
exports.getTrueLoc = getTrueLoc;
;
function expandLoc(parentLoc, childLoc) {
    if (parentLoc && childLoc) {
        if (comparePos(childLoc.start, parentLoc.start) < 0) {
            parentLoc.start = childLoc.start;
        }
        if (comparePos(parentLoc.end, childLoc.end) < 0) {
            parentLoc.end = childLoc.end;
        }
    }
}
function fixFaultyLocations(node, lines) {
    var loc = node.loc;
    if (loc) {
        if (loc.start.line < 1) {
            loc.start.line = 1;
        }
        if (loc.end.line < 1) {
            loc.end.line = 1;
        }
    }
    if (node.type === "File") {
        // Babylon returns File nodes whose .loc.{start,end} do not include
        // leading or trailing whitespace.
        loc.start = lines.firstPos();
        loc.end = lines.lastPos();
    }
    fixForLoopHead(node, lines);
    fixTemplateLiteral(node, lines);
    if (loc && node.decorators) {
        // Expand the .loc of the node responsible for printing the decorators
        // (here, the decorated node) so that it includes node.decorators.
        node.decorators.forEach(function (decorator) {
            expandLoc(loc, decorator.loc);
        });
    }
    else if (node.declaration && isExportDeclaration(node)) {
        // Nullify .loc information for the child declaration so that we never
        // try to reprint it without also reprinting the export declaration.
        node.declaration.loc = null;
        // Expand the .loc of the node responsible for printing the decorators
        // (here, the export declaration) so that it includes node.decorators.
        var decorators = node.declaration.decorators;
        if (decorators) {
            decorators.forEach(function (decorator) {
                expandLoc(loc, decorator.loc);
            });
        }
    }
    else if ((n.MethodDefinition && n.MethodDefinition.check(node)) ||
        (n.Property.check(node) && (node.method || node.shorthand))) {
        // If the node is a MethodDefinition or a .method or .shorthand
        // Property, then the location information stored in
        // node.value.loc is very likely untrustworthy (just the {body}
        // part of a method, or nothing in the case of shorthand
        // properties), so we null out that information to prevent
        // accidental reuse of bogus source code during reprinting.
        node.value.loc = null;
        if (n.FunctionExpression.check(node.value)) {
            // FunctionExpression method values should be anonymous,
            // because their .id fields are ignored anyway.
            node.value.id = null;
        }
    }
    else if (node.type === "ObjectTypeProperty") {
        var loc = node.loc;
        var end = loc && loc.end;
        if (end) {
            end = copyPos(end);
            if (lines.prevPos(end) &&
                lines.charAt(end) === ",") {
                // Some parsers accidentally include trailing commas in the
                // .loc.end information for ObjectTypeProperty nodes.
                if ((end = lines.skipSpaces(end, true, true))) {
                    loc.end = end;
                }
            }
        }
    }
}
exports.fixFaultyLocations = fixFaultyLocations;
;
function fixForLoopHead(node, lines) {
    if (node.type !== "ForStatement") {
        return;
    }
    function fix(child) {
        var loc = child && child.loc;
        var start = loc && loc.start;
        var end = loc && copyPos(loc.end);
        while (start && end && comparePos(start, end) < 0) {
            lines.prevPos(end);
            if (lines.charAt(end) === ";") {
                // Update child.loc.end to *exclude* the ';' character.
                loc.end.line = end.line;
                loc.end.column = end.column;
            }
            else {
                break;
            }
        }
    }
    fix(node.init);
    fix(node.test);
    fix(node.update);
}
function fixTemplateLiteral(node, lines) {
    if (node.type !== "TemplateLiteral") {
        return;
    }
    if (node.quasis.length === 0) {
        // If there are no quasi elements, then there is nothing to fix.
        return;
    }
    // node.loc is not present when using export default with a template literal
    if (node.loc) {
        // First we need to exclude the opening ` from the .loc of the first
        // quasi element, in case the parser accidentally decided to include it.
        var afterLeftBackTickPos = copyPos(node.loc.start);
        assert_1.default.strictEqual(lines.charAt(afterLeftBackTickPos), "`");
        assert_1.default.ok(lines.nextPos(afterLeftBackTickPos));
        var firstQuasi = node.quasis[0];
        if (comparePos(firstQuasi.loc.start, afterLeftBackTickPos) < 0) {
            firstQuasi.loc.start = afterLeftBackTickPos;
        }
        // Next we need to exclude the closing ` from the .loc of the last quasi
        // element, in case the parser accidentally decided to include it.
        var rightBackTickPos = copyPos(node.loc.end);
        assert_1.default.ok(lines.prevPos(rightBackTickPos));
        assert_1.default.strictEqual(lines.charAt(rightBackTickPos), "`");
        var lastQuasi = node.quasis[node.quasis.length - 1];
        if (comparePos(rightBackTickPos, lastQuasi.loc.end) < 0) {
            lastQuasi.loc.end = rightBackTickPos;
        }
    }
    // Now we need to exclude ${ and } characters from the .loc's of all
    // quasi elements, since some parsers accidentally include them.
    node.expressions.forEach(function (expr, i) {
        // Rewind from expr.loc.start over any whitespace and the ${ that
        // precedes the expression. The position of the $ should be the same
        // as the .loc.end of the preceding quasi element, but some parsers
        // accidentally include the ${ in the .loc of the quasi element.
        var dollarCurlyPos = lines.skipSpaces(expr.loc.start, true, false);
        if (lines.prevPos(dollarCurlyPos) &&
            lines.charAt(dollarCurlyPos) === "{" &&
            lines.prevPos(dollarCurlyPos) &&
            lines.charAt(dollarCurlyPos) === "$") {
            var quasiBefore = node.quasis[i];
            if (comparePos(dollarCurlyPos, quasiBefore.loc.end) < 0) {
                quasiBefore.loc.end = dollarCurlyPos;
            }
        }
        // Likewise, some parsers accidentally include the } that follows
        // the expression in the .loc of the following quasi element.
        var rightCurlyPos = lines.skipSpaces(expr.loc.end, false, false);
        if (lines.charAt(rightCurlyPos) === "}") {
            assert_1.default.ok(lines.nextPos(rightCurlyPos));
            // Now rightCurlyPos is technically the position just after the }.
            var quasiAfter = node.quasis[i + 1];
            if (comparePos(quasiAfter.loc.start, rightCurlyPos) < 0) {
                quasiAfter.loc.start = rightCurlyPos;
            }
        }
    });
}
function isExportDeclaration(node) {
    if (node)
        switch (node.type) {
            case "ExportDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportDefaultSpecifier":
            case "DeclareExportDeclaration":
            case "ExportNamedDeclaration":
            case "ExportAllDeclaration":
                return true;
        }
    return false;
}
exports.isExportDeclaration = isExportDeclaration;
;
function getParentExportDeclaration(path) {
    var parentNode = path.getParentNode();
    if (path.getName() === "declaration" &&
        isExportDeclaration(parentNode)) {
        return parentNode;
    }
    return null;
}
exports.getParentExportDeclaration = getParentExportDeclaration;
;
function isTrailingCommaEnabled(options, context) {
    var trailingComma = options.trailingComma;
    if (typeof trailingComma === "object") {
        return !!trailingComma[context];
    }
    return !!trailingComma;
}
exports.isTrailingCommaEnabled = isTrailingCommaEnabled;
;

},{"assert":2,"ast-types":27,"source-map":104}],93:[function(require,module,exports){
(function (process){(function (){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var types = __importStar(require("ast-types"));
exports.types = types;
var parser_1 = require("./lib/parser");
exports.parse = parser_1.parse;
var printer_1 = require("./lib/printer");
/**
 * Traverse and potentially modify an abstract syntax tree using a
 * convenient visitor syntax:
 *
 *   recast.visit(ast, {
 *     names: [],
 *     visitIdentifier: function(path) {
 *       var node = path.value;
 *       this.visitor.names.push(node.name);
 *       this.traverse(path);
 *     }
 *   });
 */
var ast_types_1 = require("ast-types");
exports.visit = ast_types_1.visit;
/**
 * Reprint a modified syntax tree using as much of the original source
 * code as possible.
 */
function print(node, options) {
    return new printer_1.Printer(options).print(node);
}
exports.print = print;
/**
 * Print without attempting to reuse any original source code.
 */
function prettyPrint(node, options) {
    return new printer_1.Printer(options).printGenerically(node);
}
exports.prettyPrint = prettyPrint;
/**
 * Convenient command-line interface (see e.g. example/add-braces).
 */
function run(transformer, options) {
    return runFile(process.argv[2], transformer, options);
}
exports.run = run;
function runFile(path, transformer, options) {
    fs_1.default.readFile(path, "utf-8", function (err, code) {
        if (err) {
            console.error(err);
            return;
        }
        runString(code, transformer, options);
    });
}
function defaultWriteback(output) {
    process.stdout.write(output);
}
function runString(code, transformer, options) {
    var writeback = options && options.writeback || defaultWriteback;
    transformer(parser_1.parse(code, options), function (node) {
        writeback(print(node, options).code);
    });
}

}).call(this)}).call(this,require('_process'))
},{"./lib/parser":89,"./lib/printer":91,"_process":83,"ast-types":27,"fs":28}],94:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');
var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

exports.ArraySet = ArraySet;

},{"./util":103}],95:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var base64 = require('./base64');

// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
exports.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};

},{"./base64":96}],96:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};

},{}],97:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};

},{}],98:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');

/**
 * Determine whether mappingB is after mappingA with respect to generated
 * position.
 */
function generatedPositionAfter(mappingA, mappingB) {
  // Optimized for most common case
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA ||
         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}

/**
 * A data structure to provide a sorted view of accumulated mappings in a
 * performance conscious manner. It trades a neglibable overhead in general
 * case for a large speedup in case of mappings being added in order.
 */
function MappingList() {
  this._array = [];
  this._sorted = true;
  // Serves as infimum
  this._last = {generatedLine: -1, generatedColumn: 0};
}

/**
 * Iterate through internal items. This method takes the same arguments that
 * `Array.prototype.forEach` takes.
 *
 * NOTE: The order of the mappings is NOT guaranteed.
 */
MappingList.prototype.unsortedForEach =
  function MappingList_forEach(aCallback, aThisArg) {
    this._array.forEach(aCallback, aThisArg);
  };

/**
 * Add the given source mapping.
 *
 * @param Object aMapping
 */
MappingList.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};

/**
 * Returns the flat, sorted array of mappings. The mappings are sorted by
 * generated position.
 *
 * WARNING: This method returns internal data without copying, for
 * performance. The return value must NOT be mutated, and should be treated as
 * an immutable borrow. If you want to take ownership, you must make your own
 * copy.
 */
MappingList.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};

exports.MappingList = MappingList;

},{"./util":103}],99:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
exports.quickSort = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};

},{}],100:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var util = require('./util');
var binarySearch = require('./binary-search');
var ArraySet = require('./array-set').ArraySet;
var base64VLQ = require('./base64-vlq');
var quickSort = require('./quick-sort').quickSort;

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
}

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

exports.SourceMapConsumer = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64VLQ.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet();
  this._names = new ArraySet();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort(this.__originalMappings, util.compareByOriginalPositions);
  };

exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

},{"./array-set":94,"./base64-vlq":95,"./binary-search":97,"./quick-sort":99,"./util":103}],101:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var base64VLQ = require('./base64-vlq');
var util = require('./util');
var ArraySet = require('./array-set').ArraySet;
var MappingList = require('./mapping-list').MappingList;

/**
 * An instance of the SourceMapGenerator represents a source map which is
 * being built incrementally. You may pass an object with the following
 * properties:
 *
 *   - file: The filename of the generated source.
 *   - sourceRoot: A root for all relative URLs in this source map.
 */
function SourceMapGenerator(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util.getArg(aArgs, 'file', null);
  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
  this._sources = new ArraySet();
  this._names = new ArraySet();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}

SourceMapGenerator.prototype._version = 3;

/**
 * Creates a new SourceMapGenerator based on a SourceMapConsumer
 *
 * @param aSourceMapConsumer The SourceMap.
 */
SourceMapGenerator.fromSourceMap =
  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
    var sourceRoot = aSourceMapConsumer.sourceRoot;
    var generator = new SourceMapGenerator({
      file: aSourceMapConsumer.file,
      sourceRoot: sourceRoot
    });
    aSourceMapConsumer.eachMapping(function (mapping) {
      var newMapping = {
        generated: {
          line: mapping.generatedLine,
          column: mapping.generatedColumn
        }
      };

      if (mapping.source != null) {
        newMapping.source = mapping.source;
        if (sourceRoot != null) {
          newMapping.source = util.relative(sourceRoot, newMapping.source);
        }

        newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        };

        if (mapping.name != null) {
          newMapping.name = mapping.name;
        }
      }

      generator.addMapping(newMapping);
    });
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var sourceRelative = sourceFile;
      if (sourceRoot !== null) {
        sourceRelative = util.relative(sourceRoot, sourceFile);
      }

      if (!generator._sources.has(sourceRelative)) {
        generator._sources.add(sourceRelative);
      }

      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        generator.setSourceContent(sourceFile, content);
      }
    });
    return generator;
  };

/**
 * Add a single mapping from original source line and column to the generated
 * source's line and column for this source map being created. The mapping
 * object should have the following properties:
 *
 *   - generated: An object with the generated line and column positions.
 *   - original: An object with the original line and column positions.
 *   - source: The original source file (relative to the sourceRoot).
 *   - name: An optional original token name for this mapping.
 */
SourceMapGenerator.prototype.addMapping =
  function SourceMapGenerator_addMapping(aArgs) {
    var generated = util.getArg(aArgs, 'generated');
    var original = util.getArg(aArgs, 'original', null);
    var source = util.getArg(aArgs, 'source', null);
    var name = util.getArg(aArgs, 'name', null);

    if (!this._skipValidation) {
      this._validateMapping(generated, original, source, name);
    }

    if (source != null) {
      source = String(source);
      if (!this._sources.has(source)) {
        this._sources.add(source);
      }
    }

    if (name != null) {
      name = String(name);
      if (!this._names.has(name)) {
        this._names.add(name);
      }
    }

    this._mappings.add({
      generatedLine: generated.line,
      generatedColumn: generated.column,
      originalLine: original != null && original.line,
      originalColumn: original != null && original.column,
      source: source,
      name: name
    });
  };

/**
 * Set the source content for a source file.
 */
SourceMapGenerator.prototype.setSourceContent =
  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
    var source = aSourceFile;
    if (this._sourceRoot != null) {
      source = util.relative(this._sourceRoot, source);
    }

    if (aSourceContent != null) {
      // Add the source content to the _sourcesContents map.
      // Create a new _sourcesContents map if the property is null.
      if (!this._sourcesContents) {
        this._sourcesContents = Object.create(null);
      }
      this._sourcesContents[util.toSetString(source)] = aSourceContent;
    } else if (this._sourcesContents) {
      // Remove the source file from the _sourcesContents map.
      // If the _sourcesContents map is empty, set the property to null.
      delete this._sourcesContents[util.toSetString(source)];
      if (Object.keys(this._sourcesContents).length === 0) {
        this._sourcesContents = null;
      }
    }
  };

/**
 * Applies the mappings of a sub-source-map for a specific source file to the
 * source map being generated. Each mapping to the supplied source file is
 * rewritten using the supplied source map. Note: The resolution for the
 * resulting mappings is the minimium of this map and the supplied map.
 *
 * @param aSourceMapConsumer The source map to be applied.
 * @param aSourceFile Optional. The filename of the source file.
 *        If omitted, SourceMapConsumer's file property will be used.
 * @param aSourceMapPath Optional. The dirname of the path to the source map
 *        to be applied. If relative, it is relative to the SourceMapConsumer.
 *        This parameter is needed when the two source maps aren't in the same
 *        directory, and the source map to be applied contains relative source
 *        paths. If so, those relative source paths need to be rewritten
 *        relative to the SourceMapGenerator.
 */
SourceMapGenerator.prototype.applySourceMap =
  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
    var sourceFile = aSourceFile;
    // If aSourceFile is omitted, we will use the file property of the SourceMap
    if (aSourceFile == null) {
      if (aSourceMapConsumer.file == null) {
        throw new Error(
          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
          'or the source map\'s "file" property. Both were omitted.'
        );
      }
      sourceFile = aSourceMapConsumer.file;
    }
    var sourceRoot = this._sourceRoot;
    // Make "sourceFile" relative if an absolute Url is passed.
    if (sourceRoot != null) {
      sourceFile = util.relative(sourceRoot, sourceFile);
    }
    // Applying the SourceMap can add and remove items from the sources and
    // the names array.
    var newSources = new ArraySet();
    var newNames = new ArraySet();

    // Find mappings for the "sourceFile"
    this._mappings.unsortedForEach(function (mapping) {
      if (mapping.source === sourceFile && mapping.originalLine != null) {
        // Check if it can be mapped by the source map, then update the mapping.
        var original = aSourceMapConsumer.originalPositionFor({
          line: mapping.originalLine,
          column: mapping.originalColumn
        });
        if (original.source != null) {
          // Copy mapping
          mapping.source = original.source;
          if (aSourceMapPath != null) {
            mapping.source = util.join(aSourceMapPath, mapping.source)
          }
          if (sourceRoot != null) {
            mapping.source = util.relative(sourceRoot, mapping.source);
          }
          mapping.originalLine = original.line;
          mapping.originalColumn = original.column;
          if (original.name != null) {
            mapping.name = original.name;
          }
        }
      }

      var source = mapping.source;
      if (source != null && !newSources.has(source)) {
        newSources.add(source);
      }

      var name = mapping.name;
      if (name != null && !newNames.has(name)) {
        newNames.add(name);
      }

    }, this);
    this._sources = newSources;
    this._names = newNames;

    // Copy sourcesContents of applied map.
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aSourceMapPath != null) {
          sourceFile = util.join(aSourceMapPath, sourceFile);
        }
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        this.setSourceContent(sourceFile, content);
      }
    }, this);
  };

/**
 * A mapping can have one of the three levels of data:
 *
 *   1. Just the generated position.
 *   2. The Generated position, original position, and original source.
 *   3. Generated and original position, original source, as well as a name
 *      token.
 *
 * To maintain consistency, we validate that any new mapping being added falls
 * in to one of these categories.
 */
SourceMapGenerator.prototype._validateMapping =
  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                              aName) {
    // When aOriginal is truthy but has empty values for .line and .column,
    // it is most likely a programmer error. In this case we throw a very
    // specific error message to try to guide them the right way.
    // For example: https://github.com/Polymer/polymer-bundler/pull/519
    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
        throw new Error(
            'original.line and original.column are not numbers -- you probably meant to omit ' +
            'the original mapping entirely and only map the generated position. If so, pass ' +
            'null for the original mapping instead of an object with empty or null values.'
        );
    }

    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
        && aGenerated.line > 0 && aGenerated.column >= 0
        && !aOriginal && !aSource && !aName) {
      // Case 1.
      return;
    }
    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
             && aGenerated.line > 0 && aGenerated.column >= 0
             && aOriginal.line > 0 && aOriginal.column >= 0
             && aSource) {
      // Cases 2 and 3.
      return;
    }
    else {
      throw new Error('Invalid mapping: ' + JSON.stringify({
        generated: aGenerated,
        source: aSource,
        original: aOriginal,
        name: aName
      }));
    }
  };

/**
 * Serialize the accumulated mappings in to the stream of base 64 VLQs
 * specified by the source map format.
 */
SourceMapGenerator.prototype._serializeMappings =
  function SourceMapGenerator_serializeMappings() {
    var previousGeneratedColumn = 0;
    var previousGeneratedLine = 1;
    var previousOriginalColumn = 0;
    var previousOriginalLine = 0;
    var previousName = 0;
    var previousSource = 0;
    var result = '';
    var next;
    var mapping;
    var nameIdx;
    var sourceIdx;

    var mappings = this._mappings.toArray();
    for (var i = 0, len = mappings.length; i < len; i++) {
      mapping = mappings[i];
      next = ''

      if (mapping.generatedLine !== previousGeneratedLine) {
        previousGeneratedColumn = 0;
        while (mapping.generatedLine !== previousGeneratedLine) {
          next += ';';
          previousGeneratedLine++;
        }
      }
      else {
        if (i > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
            continue;
          }
          next += ',';
        }
      }

      next += base64VLQ.encode(mapping.generatedColumn
                                 - previousGeneratedColumn);
      previousGeneratedColumn = mapping.generatedColumn;

      if (mapping.source != null) {
        sourceIdx = this._sources.indexOf(mapping.source);
        next += base64VLQ.encode(sourceIdx - previousSource);
        previousSource = sourceIdx;

        // lines are stored 0-based in SourceMap spec version 3
        next += base64VLQ.encode(mapping.originalLine - 1
                                   - previousOriginalLine);
        previousOriginalLine = mapping.originalLine - 1;

        next += base64VLQ.encode(mapping.originalColumn
                                   - previousOriginalColumn);
        previousOriginalColumn = mapping.originalColumn;

        if (mapping.name != null) {
          nameIdx = this._names.indexOf(mapping.name);
          next += base64VLQ.encode(nameIdx - previousName);
          previousName = nameIdx;
        }
      }

      result += next;
    }

    return result;
  };

SourceMapGenerator.prototype._generateSourcesContent =
  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
    return aSources.map(function (source) {
      if (!this._sourcesContents) {
        return null;
      }
      if (aSourceRoot != null) {
        source = util.relative(aSourceRoot, source);
      }
      var key = util.toSetString(source);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
        ? this._sourcesContents[key]
        : null;
    }, this);
  };

/**
 * Externalize the source map.
 */
SourceMapGenerator.prototype.toJSON =
  function SourceMapGenerator_toJSON() {
    var map = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    if (this._file != null) {
      map.file = this._file;
    }
    if (this._sourceRoot != null) {
      map.sourceRoot = this._sourceRoot;
    }
    if (this._sourcesContents) {
      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
    }

    return map;
  };

/**
 * Render the source map being generated to a string.
 */
SourceMapGenerator.prototype.toString =
  function SourceMapGenerator_toString() {
    return JSON.stringify(this.toJSON());
  };

exports.SourceMapGenerator = SourceMapGenerator;

},{"./array-set":94,"./base64-vlq":95,"./mapping-list":98,"./util":103}],102:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
var util = require('./util');

// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
var REGEX_NEWLINE = /(\r?\n)/;

// Newline character code for charCodeAt() comparisons
var NEWLINE_CODE = 10;

// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
var isSourceNode = "$$$isSourceNode$$$";

/**
 * SourceNodes provide a way to abstract over interpolating/concatenating
 * snippets of generated JavaScript source code while maintaining the line and
 * column information associated with the original source code.
 *
 * @param aLine The original line number.
 * @param aColumn The original column number.
 * @param aSource The original source's filename.
 * @param aChunks Optional. An array of strings which are snippets of
 *        generated JS, or other SourceNodes.
 * @param aName The original identifier.
 */
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null) this.add(aChunks);
}

/**
 * Creates a SourceNode from generated code and a SourceMapConsumer.
 *
 * @param aGeneratedCode The generated code
 * @param aSourceMapConsumer The SourceMap for the generated code
 * @param aRelativePath Optional. The path that relative sources in the
 *        SourceMapConsumer should be relative to.
 */
SourceNode.fromStringWithSourceMap =
  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
    // The SourceNode we want to fill with the generated code
    // and the SourceMap
    var node = new SourceNode();

    // All even indices of this array are one line of the generated code,
    // while all odd indices are the newlines between two adjacent lines
    // (since `REGEX_NEWLINE` captures its match).
    // Processed fragments are accessed by calling `shiftNextLine`.
    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
    var remainingLinesIndex = 0;
    var shiftNextLine = function() {
      var lineContents = getNextLine();
      // The last line of a file might not have a newline.
      var newLine = getNextLine() || "";
      return lineContents + newLine;

      function getNextLine() {
        return remainingLinesIndex < remainingLines.length ?
            remainingLines[remainingLinesIndex++] : undefined;
      }
    };

    // We need to remember the position of "remainingLines"
    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

    // The generate SourceNodes we need a code range.
    // To extract it current and last mapping is used.
    // Here we store the last mapping.
    var lastMapping = null;

    aSourceMapConsumer.eachMapping(function (mapping) {
      if (lastMapping !== null) {
        // We add the code from "lastMapping" to "mapping":
        // First check if there is a new line in between.
        if (lastGeneratedLine < mapping.generatedLine) {
          // Associate first line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
          lastGeneratedLine++;
          lastGeneratedColumn = 0;
          // The remaining code is added without mapping
        } else {
          // There is no new line in between.
          // Associate the code between "lastGeneratedColumn" and
          // "mapping.generatedColumn" with "lastMapping"
          var nextLine = remainingLines[remainingLinesIndex] || '';
          var code = nextLine.substr(0, mapping.generatedColumn -
                                        lastGeneratedColumn);
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                              lastGeneratedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
          addMappingWithCode(lastMapping, code);
          // No more remaining code, continue
          lastMapping = mapping;
          return;
        }
      }
      // We add the generated code until the first mapping
      // to the SourceNode without any mapping.
      // Each line is added as separate string.
      while (lastGeneratedLine < mapping.generatedLine) {
        node.add(shiftNextLine());
        lastGeneratedLine++;
      }
      if (lastGeneratedColumn < mapping.generatedColumn) {
        var nextLine = remainingLines[remainingLinesIndex] || '';
        node.add(nextLine.substr(0, mapping.generatedColumn));
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
      }
      lastMapping = mapping;
    }, this);
    // We have processed all mappings.
    if (remainingLinesIndex < remainingLines.length) {
      if (lastMapping) {
        // Associate the remaining code in the current line with "lastMapping"
        addMappingWithCode(lastMapping, shiftNextLine());
      }
      // and add the remaining lines without any mapping
      node.add(remainingLines.splice(remainingLinesIndex).join(""));
    }

    // Copy sourcesContent into SourceNode
    aSourceMapConsumer.sources.forEach(function (sourceFile) {
      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
      if (content != null) {
        if (aRelativePath != null) {
          sourceFile = util.join(aRelativePath, sourceFile);
        }
        node.setSourceContent(sourceFile, content);
      }
    });

    return node;

    function addMappingWithCode(mapping, code) {
      if (mapping === null || mapping.source === undefined) {
        node.add(code);
      } else {
        var source = aRelativePath
          ? util.join(aRelativePath, mapping.source)
          : mapping.source;
        node.add(new SourceNode(mapping.originalLine,
                                mapping.originalColumn,
                                source,
                                code,
                                mapping.name));
      }
    }
  };

/**
 * Add a chunk of generated JS to this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function (chunk) {
      this.add(chunk);
    }, this);
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Add a chunk of generated JS to the beginning of this source node.
 *
 * @param aChunk A string snippet of generated JS code, another instance of
 *        SourceNode, or an array where each member is one of those things.
 */
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i = aChunk.length-1; i >= 0; i--) {
      this.prepend(aChunk[i]);
    }
  }
  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  }
  else {
    throw new TypeError(
      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
    );
  }
  return this;
};

/**
 * Walk over the tree of JS snippets in this node and its children. The
 * walking function is called once for each snippet of JS and is passed that
 * snippet and the its original associated source's line/column location.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i = 0, len = this.children.length; i < len; i++) {
    chunk = this.children[i];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    }
    else {
      if (chunk !== '') {
        aFn(chunk, { source: this.source,
                     line: this.line,
                     column: this.column,
                     name: this.name });
      }
    }
  }
};

/**
 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
 * each of `this.children`.
 *
 * @param aSep The separator.
 */
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i = 0; i < len-1; i++) {
      newChildren.push(this.children[i]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i]);
    this.children = newChildren;
  }
  return this;
};

/**
 * Call String.prototype.replace on the very right-most source snippet. Useful
 * for trimming whitespace from the end of a source node, etc.
 *
 * @param aPattern The pattern to replace.
 * @param aReplacement The thing to replace the pattern with.
 */
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  }
  else if (typeof lastChild === 'string') {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  }
  else {
    this.children.push(''.replace(aPattern, aReplacement));
  }
  return this;
};

/**
 * Set the source content for a source file. This will be added to the SourceMapGenerator
 * in the sourcesContent field.
 *
 * @param aSourceFile The filename of the source file
 * @param aSourceContent The content of the source file
 */
SourceNode.prototype.setSourceContent =
  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
  };

/**
 * Walk over the tree of SourceNodes. The walking function is called for each
 * source file content and is passed the filename and source content.
 *
 * @param aFn The traversal function.
 */
SourceNode.prototype.walkSourceContents =
  function SourceNode_walkSourceContents(aFn) {
    for (var i = 0, len = this.children.length; i < len; i++) {
      if (this.children[i][isSourceNode]) {
        this.children[i].walkSourceContents(aFn);
      }
    }

    var sources = Object.keys(this.sourceContents);
    for (var i = 0, len = sources.length; i < len; i++) {
      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
    }
  };

/**
 * Return the string representation of this source node. Walks over the tree
 * and concatenates all the various snippets together to one string.
 */
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function (chunk) {
    str += chunk;
  });
  return str;
};

/**
 * Returns the string representation of this source node along with a source
 * map.
 */
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function (chunk, original) {
    generated.code += chunk;
    if (original.source !== null
        && original.line !== null
        && original.column !== null) {
      if(lastOriginalSource !== original.source
         || lastOriginalLine !== original.line
         || lastOriginalColumn !== original.column
         || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        // Mappings end at eol
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function (sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });

  return { code: generated.code, map: map };
};

exports.SourceNode = SourceNode;

},{"./source-map-generator":101,"./util":103}],103:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;

},{}],104:[function(require,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;
exports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;
exports.SourceNode = require('./lib/source-node').SourceNode;

},{"./lib/source-map-consumer":100,"./lib/source-map-generator":101,"./lib/source-node":102}],105:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// This module is suitable for passing as options.parser when calling
// recast.parse to process ECMAScript code with Esprima:
//
//   const ast = recast.parse(source, {
//     parser: require("recast/parsers/esprima")
//   });
//
var util_1 = require("../lib/util");
function parse(source, options) {
    var comments = [];
    var ast = require("esprima").parse(source, {
        loc: true,
        locations: true,
        comment: true,
        onComment: comments,
        range: util_1.getOption(options, "range", false),
        tolerant: util_1.getOption(options, "tolerant", true),
        tokens: true
    });
    if (!Array.isArray(ast.comments)) {
        ast.comments = comments;
    }
    return ast;
}
exports.parse = parse;
;

},{"../lib/util":92,"esprima":31}],106:[function(require,module,exports){
/*
* Copyright 2020-2021 Gregory Kramida
* Vanilla Javascript that defines the global options for the entire plugin.
* Note: don't put Node stuff, e.g. "require" here.
* */
function getCurrentSemesterSeasonString() {
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth();
    const currentDayOfMonth = currentDate.getDay();
    let currentSeason;
    if (currentMonth === 0 && currentDayOfMonth < 22) {
        currentSeason = "winter";
    } else if (currentMonth < 4) {
        currentSeason = "spring";
    } else if (currentMonth < 8) {
        currentSeason = "summer";
    } else {
        currentSeason = "fall";
    }
    return currentSeason;
}

class Options {
    /**
     * Make an options object
     * @param semesterSeason
     * @param year
     * @param submitServerAssignmentName
     * @param {Array.<string>} filesToCheck
     * @param {number} lateScoreAdjustment a score adjustment that the student receives for a late submission of the assignment
     */
    constructor(semesterSeason = getCurrentSemesterSeasonString(),
                year = (new Date()).getFullYear().toString(),
                submitServerAssignmentName = "",
                filesToCheck = [],
                lateScoreAdjustment = -12) {
        this.course = "CMSC132";
        this.semesterSeason = semesterSeason;
        this.year = year;
        this.submitServerAssignmentName = submitServerAssignmentName;
        this.filesToCheck = filesToCheck;
        this.lateScoreAdjustment = -12;
        this.firstStudent = "a";
        // To include directory IDs that start with z, use ASCII codepoint directly
        // after z as the default upper bound
        this.lastStudent = "{";
        this.moduleOptions = {
            "brace_style_module": brace_style_module.getDefaultOptions(),
            "grade_server_module": grade_server_module.getDefaultOptions(),
            "indentation_module": indentation_module.getDefaultOptions(),
            "keyword_and_pattern_module": keyword_and_pattern_module.getDefaultOptions(),
            "line_length_module": line_length_module.getDefaultOptions(),
            "loop_module": loop_module.getDefaultOptions(),
            "method_call_module": method_call_module.getDefaultOptions(),
            "naming_module": naming_module.getDefaultOptions(),
            "spacing_module": spacing_module.getDefaultOptions(),
            "test_module": test_module.getDefaultOptions(),
            "unused_code_module": unused_code_module.getDefaultOptions()
        };
        this.usageStatisticsOptions = {
            "enabled": true,
            "anonymizeUser": true
        }
    }
}

// Restores options based on values stored in chrome.storage.
function restoreOptions(callback) {
    let options = new Options();
    let optionSet = { "options" : options, "optionWriter" : null};
    chrome.storage.sync.get(optionSet, function (optionSet) {
        chrome.runtime.sendMessage({
            action: "optionsChanged",
            options: optionSet.options
        });
        callback(optionSet.options, optionSet.optionWriter);
    });
}

try {
    if (module !== undefined) {
        module.exports = {
            restoreOptions: restoreOptions,
            Options: Options
        }
    }
} catch (error) {
    // keep silent
}
},{}],107:[function(require,module,exports){
/*
* Copyright 2020-2021 Gregory Kramida
* */
const beautify = require("js-beautify").js;
const options = require("./options.js");
const json5Writer = require("json5-writer")


function displayFormattedOptions(optionsWriter){
    document.getElementById('optionsTextArea').value =  beautify(optionsWriter.toSource(), {
        indent_size: 4,
        space_in_empty_paren: true
    });
}

// Save options to chrome.storage
function saveOptions() {
    try {
        const optionsString = document.getElementById("optionsTextArea").value;
        let optionsWriter = json5Writer.load(optionsString);
        let options = JSON5.parse(optionsString);
        if (options.lateScoreAdjustment > 0) {
            alert("Late score adjustment has to be negative. Defaulting the value to 0.");
            options.lateScoreAdjustment = 0;
            optionsWriter.write({"lateScoreAdjustment": options.lateScoreAdjustment})
        }

        // If firstStudent isn't a valid field, trim will produce undefined (falsey)
        // so the field will default to "a". Conveniently, this also means firstStudent
        // can't be the empty string since that's also falsey.
        options.firstStudent = options.firstStudent?.trim() || "a";
        // To include directory IDs that start with z, use ASCII codepoint directly
        // after z as the default upper bound
        options.lastStudent = options.lastStudent?.trim() || "{";
        if (options.firstStudent > options.lastStudent) {
            const tmp = options.firstStudent;
            options.firstStudent = options.lastStudent;
            options.lastStudent = tmp;
        }
        optionsWriter.write({"firstStudent": options.firstStudent});
        optionsWriter.write({"lastStudent": options.lastStudent});

        chrome.storage.sync.set(
            {
                "options": options,
                "optionsWriter": optionsWriter
            },
            function () {
                // Update status to let user know options were saved.
                let status = document.getElementById('status');
                status.textContent = 'Options saved.';
                setTimeout(function () {
                    status.textContent = '';
                }, 750);
            });
        // document.getElementById('optionsTextArea').value = beautify(optionsString, {
        //     indent_size: 4,
        //     space_in_empty_paren: true
        // });
        displayFormattedOptions(optionsWriter);
    } catch (error) {
        if (error instanceof SyntaxError) {
            let status = document.getElementById('status');
            status.textContent = 'JSON5 Syntax Error(check console)';
            setTimeout(function () {
                status.textContent = '';
            }, 3000);
            console.log(error.message);
        } else {
            let status = document.getElementById('status');
            status.textContent = 'Unknown error (check console)';
            setTimeout(function () {
                status.textContent = '';
            }, 3000);
            throw error;
        }

    }

}

// Restore options based on values stored in chrome.storage and show them in local text panel.
function restoreOptionsLocal() {
    options.restoreOptions(
        function (options, optionsWriter) {
            if(optionsWriter !== null){
                displayFormattedOptions(optionsWriter);
            }else{
                document.getElementById('optionsTextArea').value = JSON5.stringify(options, null, 4);
            }
        }
    );
}

function addOptionsTextAreaKeyHandlers() {
    const optionsTextArea = document.getElementById('optionsTextArea');
    optionsTextArea.addEventListener('keydown', function (event) {
        if (event.key === 'Tab') {
            event.preventDefault();
            const tabWidth = 4;
            const tabString = " ".repeat(tabWidth);
            const start = this.selectionStart;
            const end = this.selectionEnd;
            if (event.shiftKey === true) {
                const beforeCaret = this.value.substring(0, start);
                const precedingTabStart = start - tabWidth;
                if (beforeCaret.length > tabWidth && beforeCaret.substring(precedingTabStart) === tabString) {
                    this.value = beforeCaret.substring(0, precedingTabStart) + this.value.substring(end);
                    this.selectionStart = this.selectionEnd = precedingTabStart;
                }
            } else {
                // set textarea value to: text before caret + tab + text after caret
                this.value = this.value.substring(0, start) + tabString + this.value.substring(end);
                // put caret at correct position again
                this.selectionStart = this.selectionEnd = start + tabWidth;
            }
        } else if (event.key === 's' && event.ctrlKey === true) {
            event.preventDefault();
            saveOptions();
        }
        return false;
    });
}

function onOptionPageLoaded() {
    addOptionsTextAreaKeyHandlers();
    restoreOptionsLocal();
}

function restoreDefaults() {
    const optionsInstance = new options.Options();
    document.getElementById('optionsTextArea').value = JSON5.stringify(optionsInstance, null, 4);
    saveOptions();
}

function saveToDisk() {
    let dataString = "data:text/json;charset=utf-8," + encodeURIComponent(document.getElementById("optionsTextArea").value);
    let downloadAnchorElement = document.getElementById("downloadAnchorElement");
    downloadAnchorElement.setAttribute("href", dataString);
    downloadAnchorElement.setAttribute("download", "code_grader_options.json5");
    downloadAnchorElement.click();
}

function loadFromDisk() {
    let optionsFile = this.files[0];
    const reader = new FileReader();
    reader.onload = event => {
        document.getElementById('optionsTextArea').value = event.target.result;
        saveOptions();
    }
    reader.onerror = error => reject(error);
    reader.readAsText(optionsFile);
}

document.addEventListener('DOMContentLoaded', onOptionPageLoaded);
document.getElementById('save').addEventListener('click', saveOptions);
document.getElementById('restoreDefaults').addEventListener('click', restoreDefaults);
document.getElementById('saveToDisk').addEventListener('click', saveToDisk);
document.getElementById('loadFromDisk').addEventListener("change", loadFromDisk, false);
},{"./options.js":106,"js-beautify":33,"json5-writer":76}]},{},[106,107]);
